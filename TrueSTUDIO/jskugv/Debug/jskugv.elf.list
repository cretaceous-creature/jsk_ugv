
jskugv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a30c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bf4  0801a4e0  0801a4e0  0002a4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000002f4  0801d0d4  0801d0d4  0002d0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000620  0801d3c8  0801d3c8  0002d3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000020  0801d9e8  0801d9e8  0002d9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801da08  0801da08  0002da08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000558  20000000  0801da0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00003d10  20000558  0801df64  00030558  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004268  0801df64  00034268  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030558  2**0
                  CONTENTS, READONLY
 11 .debug_info   00044646  00000000  00000000  00030588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005bee  00000000  00000000  00074bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012c4c  00000000  00000000  0007a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018d8  00000000  00000000  0008d408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001830  00000000  00000000  0008ece0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000dee5  00000000  00000000  00090510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00017af4  00000000  00000000  0009e3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  000b5ee9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000112e4  00000000  00000000  000b5f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         000000cc  00000000  00000000  000c724c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001ed  00000000  00000000  000c7318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000558 	.word	0x20000558
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a4c4 	.word	0x0801a4c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000055c 	.word	0x2000055c
 800020c:	0801a4c4 	.word	0x0801a4c4

08000210 <d_make_comp>:
 8000210:	b470      	push	{r4, r5, r6}
 8000212:	1e4c      	subs	r4, r1, #1
 8000214:	2c4a      	cmp	r4, #74	; 0x4a
 8000216:	d82c      	bhi.n	8000272 <d_make_comp+0x62>
 8000218:	e8df f004 	tbb	[pc, r4]
 800021c:	3c3c3c3c 	.word	0x3c3c3c3c
 8000220:	2b2b2b2b 	.word	0x2b2b2b2b
 8000224:	263c2626 	.word	0x263c2626
 8000228:	26262626 	.word	0x26262626
 800022c:	26262626 	.word	0x26262626
 8000230:	2b262626 	.word	0x2b262626
 8000234:	27272727 	.word	0x27272727
 8000238:	27272727 	.word	0x27272727
 800023c:	2626263c 	.word	0x2626263c
 8000240:	262b2626 	.word	0x262b2626
 8000244:	2b3c3d27 	.word	0x2b3c3d27
 8000248:	3d27273c 	.word	0x3d27273c
 800024c:	26262b2b 	.word	0x26262b2b
 8000250:	3c3c3c3c 	.word	0x3c3c3c3c
 8000254:	3c3c263c 	.word	0x3c3c263c
 8000258:	2b2b3c26 	.word	0x2b2b3c26
 800025c:	2b262626 	.word	0x2b262626
 8000260:	26262b2b 	.word	0x26262b2b
 8000264:	3c26      	.short	0x3c26
 8000266:	3c          	.byte	0x3c
 8000267:	00          	.byte	0x00
 8000268:	b1ca      	cbz	r2, 800029e <d_make_comp+0x8e>
 800026a:	6944      	ldr	r4, [r0, #20]
 800026c:	6985      	ldr	r5, [r0, #24]
 800026e:	42ac      	cmp	r4, r5
 8000270:	db02      	blt.n	8000278 <d_make_comp+0x68>
 8000272:	2000      	movs	r0, #0
 8000274:	bc70      	pop	{r4, r5, r6}
 8000276:	4770      	bx	lr
 8000278:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800027c:	6906      	ldr	r6, [r0, #16]
 800027e:	3401      	adds	r4, #1
 8000280:	00ad      	lsls	r5, r5, #2
 8000282:	6144      	str	r4, [r0, #20]
 8000284:	1974      	adds	r4, r6, r5
 8000286:	d00c      	beq.n	80002a2 <d_make_comp+0x92>
 8000288:	5571      	strb	r1, [r6, r5]
 800028a:	6062      	str	r2, [r4, #4]
 800028c:	60a3      	str	r3, [r4, #8]
 800028e:	4620      	mov	r0, r4
 8000290:	bc70      	pop	{r4, r5, r6}
 8000292:	4770      	bx	lr
 8000294:	b11a      	cbz	r2, 800029e <d_make_comp+0x8e>
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1e7      	bne.n	800026a <d_make_comp+0x5a>
 800029a:	4618      	mov	r0, r3
 800029c:	e7ea      	b.n	8000274 <d_make_comp+0x64>
 800029e:	4610      	mov	r0, r2
 80002a0:	e7e8      	b.n	8000274 <d_make_comp+0x64>
 80002a2:	4620      	mov	r0, r4
 80002a4:	e7e6      	b.n	8000274 <d_make_comp+0x64>
 80002a6:	bf00      	nop

080002a8 <d_cv_qualifiers>:
 80002a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ac:	68c3      	ldr	r3, [r0, #12]
 80002ae:	f1b2 0a00 	subs.w	sl, r2, #0
 80002b2:	4604      	mov	r4, r0
 80002b4:	460f      	mov	r7, r1
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	bf15      	itete	ne
 80002ba:	f04f 081c 	movne.w	r8, #28
 80002be:	f04f 0819 	moveq.w	r8, #25
 80002c2:	f04f 091d 	movne.w	r9, #29
 80002c6:	f04f 091a 	moveq.w	r9, #26
 80002ca:	bf14      	ite	ne
 80002cc:	261e      	movne	r6, #30
 80002ce:	261b      	moveq	r6, #27
 80002d0:	460d      	mov	r5, r1
 80002d2:	e012      	b.n	80002fa <d_cv_qualifiers+0x52>
 80002d4:	2a56      	cmp	r2, #86	; 0x56
 80002d6:	d01b      	beq.n	8000310 <d_cv_qualifiers+0x68>
 80002d8:	2a4b      	cmp	r2, #75	; 0x4b
 80002da:	d122      	bne.n	8000322 <d_cv_qualifiers+0x7a>
 80002dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80002de:	60e1      	str	r1, [r4, #12]
 80002e0:	3306      	adds	r3, #6
 80002e2:	6323      	str	r3, [r4, #48]	; 0x30
 80002e4:	4631      	mov	r1, r6
 80002e6:	2300      	movs	r3, #0
 80002e8:	461a      	mov	r2, r3
 80002ea:	4620      	mov	r0, r4
 80002ec:	f7ff ff90 	bl	8000210 <d_make_comp>
 80002f0:	6028      	str	r0, [r5, #0]
 80002f2:	b1a0      	cbz	r0, 800031e <d_cv_qualifiers+0x76>
 80002f4:	68e3      	ldr	r3, [r4, #12]
 80002f6:	781a      	ldrb	r2, [r3, #0]
 80002f8:	1d05      	adds	r5, r0, #4
 80002fa:	2a72      	cmp	r2, #114	; 0x72
 80002fc:	f103 0101 	add.w	r1, r3, #1
 8000300:	d1e8      	bne.n	80002d4 <d_cv_qualifiers+0x2c>
 8000302:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000304:	3301      	adds	r3, #1
 8000306:	3209      	adds	r2, #9
 8000308:	60e3      	str	r3, [r4, #12]
 800030a:	6322      	str	r2, [r4, #48]	; 0x30
 800030c:	4641      	mov	r1, r8
 800030e:	e7ea      	b.n	80002e6 <d_cv_qualifiers+0x3e>
 8000310:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000312:	3301      	adds	r3, #1
 8000314:	3209      	adds	r2, #9
 8000316:	60e3      	str	r3, [r4, #12]
 8000318:	6322      	str	r2, [r4, #48]	; 0x30
 800031a:	4649      	mov	r1, r9
 800031c:	e7e3      	b.n	80002e6 <d_cv_qualifiers+0x3e>
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	f1ba 0f00 	cmp.w	sl, #0
 8000326:	d101      	bne.n	800032c <d_cv_qualifiers+0x84>
 8000328:	2a46      	cmp	r2, #70	; 0x46
 800032a:	d002      	beq.n	8000332 <d_cv_qualifiers+0x8a>
 800032c:	4628      	mov	r0, r5
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	42bd      	cmp	r5, r7
 8000334:	d0fa      	beq.n	800032c <d_cv_qualifiers+0x84>
 8000336:	201d      	movs	r0, #29
 8000338:	211e      	movs	r1, #30
 800033a:	221c      	movs	r2, #28
 800033c:	e007      	b.n	800034e <d_cv_qualifiers+0xa6>
 800033e:	2b1b      	cmp	r3, #27
 8000340:	d00b      	beq.n	800035a <d_cv_qualifiers+0xb2>
 8000342:	2b19      	cmp	r3, #25
 8000344:	d100      	bne.n	8000348 <d_cv_qualifiers+0xa0>
 8000346:	703a      	strb	r2, [r7, #0]
 8000348:	3704      	adds	r7, #4
 800034a:	42bd      	cmp	r5, r7
 800034c:	d0ee      	beq.n	800032c <d_cv_qualifiers+0x84>
 800034e:	683f      	ldr	r7, [r7, #0]
 8000350:	783b      	ldrb	r3, [r7, #0]
 8000352:	2b1a      	cmp	r3, #26
 8000354:	d1f3      	bne.n	800033e <d_cv_qualifiers+0x96>
 8000356:	7038      	strb	r0, [r7, #0]
 8000358:	e7f6      	b.n	8000348 <d_cv_qualifiers+0xa0>
 800035a:	7039      	strb	r1, [r7, #0]
 800035c:	e7f4      	b.n	8000348 <d_cv_qualifiers+0xa0>
 800035e:	bf00      	nop

08000360 <d_ref_qualifier>:
 8000360:	b410      	push	{r4}
 8000362:	68c3      	ldr	r3, [r0, #12]
 8000364:	781c      	ldrb	r4, [r3, #0]
 8000366:	2c52      	cmp	r4, #82	; 0x52
 8000368:	460a      	mov	r2, r1
 800036a:	d00f      	beq.n	800038c <d_ref_qualifier+0x2c>
 800036c:	2c4f      	cmp	r4, #79	; 0x4f
 800036e:	d003      	beq.n	8000378 <d_ref_qualifier+0x18>
 8000370:	4608      	mov	r0, r1
 8000372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800037a:	3103      	adds	r1, #3
 800037c:	6301      	str	r1, [r0, #48]	; 0x30
 800037e:	2120      	movs	r1, #32
 8000380:	3301      	adds	r3, #1
 8000382:	60c3      	str	r3, [r0, #12]
 8000384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000388:	2300      	movs	r3, #0
 800038a:	e741      	b.n	8000210 <d_make_comp>
 800038c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800038e:	3102      	adds	r1, #2
 8000390:	6301      	str	r1, [r0, #48]	; 0x30
 8000392:	211f      	movs	r1, #31
 8000394:	e7f4      	b.n	8000380 <d_ref_qualifier+0x20>
 8000396:	bf00      	nop

08000398 <d_count_templates_scopes>:
 8000398:	2a00      	cmp	r2, #0
 800039a:	d04c      	beq.n	8000436 <d_count_templates_scopes+0x9e>
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4605      	mov	r5, r0
 80003a0:	460e      	mov	r6, r1
 80003a2:	4614      	mov	r4, r2
 80003a4:	7823      	ldrb	r3, [r4, #0]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	2b4a      	cmp	r3, #74	; 0x4a
 80003aa:	d82a      	bhi.n	8000402 <d_count_templates_scopes+0x6a>
 80003ac:	e8df f003 	tbb	[pc, r3]
 80003b0:	3e353535 	.word	0x3e353535
 80003b4:	26262929 	.word	0x26262929
 80003b8:	35353535 	.word	0x35353535
 80003bc:	35353535 	.word	0x35353535
 80003c0:	35353535 	.word	0x35353535
 80003c4:	29353535 	.word	0x29353535
 80003c8:	35353535 	.word	0x35353535
 80003cc:	35353535 	.word	0x35353535
 80003d0:	2e2e3535 	.word	0x2e2e3535
 80003d4:	35293535 	.word	0x35293535
 80003d8:	2a353535 	.word	0x2a353535
 80003dc:	35353535 	.word	0x35353535
 80003e0:	35352629 	.word	0x35352629
 80003e4:	35353535 	.word	0x35353535
 80003e8:	35353535 	.word	0x35353535
 80003ec:	29293535 	.word	0x29293535
 80003f0:	2a2a2a35 	.word	0x2a2a2a35
 80003f4:	3535292a 	.word	0x3535292a
 80003f8:	3535      	.short	0x3535
 80003fa:	35          	.byte	0x35
 80003fb:	00          	.byte	0x00
 80003fc:	68a4      	ldr	r4, [r4, #8]
 80003fe:	2c00      	cmp	r4, #0
 8000400:	d1d0      	bne.n	80003a4 <d_count_templates_scopes+0xc>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	6864      	ldr	r4, [r4, #4]
 8000406:	2c00      	cmp	r4, #0
 8000408:	d1cc      	bne.n	80003a4 <d_count_templates_scopes+0xc>
 800040a:	e7fa      	b.n	8000402 <d_count_templates_scopes+0x6a>
 800040c:	6862      	ldr	r2, [r4, #4]
 800040e:	7813      	ldrb	r3, [r2, #0]
 8000410:	2b05      	cmp	r3, #5
 8000412:	d103      	bne.n	800041c <d_count_templates_scopes+0x84>
 8000414:	6833      	ldr	r3, [r6, #0]
 8000416:	3301      	adds	r3, #1
 8000418:	6033      	str	r3, [r6, #0]
 800041a:	6862      	ldr	r2, [r4, #4]
 800041c:	4631      	mov	r1, r6
 800041e:	4628      	mov	r0, r5
 8000420:	f7ff ffba 	bl	8000398 <d_count_templates_scopes>
 8000424:	68a4      	ldr	r4, [r4, #8]
 8000426:	2c00      	cmp	r4, #0
 8000428:	d1bc      	bne.n	80003a4 <d_count_templates_scopes+0xc>
 800042a:	e7ea      	b.n	8000402 <d_count_templates_scopes+0x6a>
 800042c:	682b      	ldr	r3, [r5, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	602b      	str	r3, [r5, #0]
 8000432:	6862      	ldr	r2, [r4, #4]
 8000434:	e7f2      	b.n	800041c <d_count_templates_scopes+0x84>
 8000436:	4770      	bx	lr

08000438 <d_append_buffer>:
 8000438:	b37a      	cbz	r2, 800049a <d_append_buffer+0x62>
 800043a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800043e:	460d      	mov	r5, r1
 8000440:	4604      	mov	r4, r0
 8000442:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000446:	18af      	adds	r7, r5, r2
 8000448:	f04f 0800 	mov.w	r8, #0
 800044c:	e009      	b.n	8000462 <d_append_buffer+0x2a>
 800044e:	460b      	mov	r3, r1
 8000450:	42bd      	cmp	r5, r7
 8000452:	f101 0101 	add.w	r1, r1, #1
 8000456:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800045a:	54e6      	strb	r6, [r4, r3]
 800045c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000460:	d019      	beq.n	8000496 <d_append_buffer+0x5e>
 8000462:	29ff      	cmp	r1, #255	; 0xff
 8000464:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000468:	d1f1      	bne.n	800044e <d_append_buffer+0x16>
 800046a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800046e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000472:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000476:	4620      	mov	r0, r4
 8000478:	4798      	blx	r3
 800047a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800047e:	3301      	adds	r3, #1
 8000480:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000484:	2300      	movs	r3, #0
 8000486:	2101      	movs	r1, #1
 8000488:	42bd      	cmp	r5, r7
 800048a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800048e:	54e6      	strb	r6, [r4, r3]
 8000490:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000494:	d1e5      	bne.n	8000462 <d_append_buffer+0x2a>
 8000496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800049a:	4770      	bx	lr

0800049c <d_number.isra.0>:
 800049c:	b430      	push	{r4, r5}
 800049e:	6803      	ldr	r3, [r0, #0]
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	2a6e      	cmp	r2, #110	; 0x6e
 80004a4:	4604      	mov	r4, r0
 80004a6:	d016      	beq.n	80004d6 <d_number.isra.0+0x3a>
 80004a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80004ac:	2909      	cmp	r1, #9
 80004ae:	d81c      	bhi.n	80004ea <d_number.isra.0+0x4e>
 80004b0:	2500      	movs	r5, #0
 80004b2:	2000      	movs	r0, #0
 80004b4:	3301      	adds	r3, #1
 80004b6:	6023      	str	r3, [r4, #0]
 80004b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80004bc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80004c6:	2909      	cmp	r1, #9
 80004c8:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 80004cc:	d9f2      	bls.n	80004b4 <d_number.isra.0+0x18>
 80004ce:	b105      	cbz	r5, 80004d2 <d_number.isra.0+0x36>
 80004d0:	4240      	negs	r0, r0
 80004d2:	bc30      	pop	{r4, r5}
 80004d4:	4770      	bx	lr
 80004d6:	1c59      	adds	r1, r3, #1
 80004d8:	6001      	str	r1, [r0, #0]
 80004da:	785a      	ldrb	r2, [r3, #1]
 80004dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80004e0:	2b09      	cmp	r3, #9
 80004e2:	d802      	bhi.n	80004ea <d_number.isra.0+0x4e>
 80004e4:	460b      	mov	r3, r1
 80004e6:	2501      	movs	r5, #1
 80004e8:	e7e3      	b.n	80004b2 <d_number.isra.0+0x16>
 80004ea:	2000      	movs	r0, #0
 80004ec:	e7f1      	b.n	80004d2 <d_number.isra.0+0x36>
 80004ee:	bf00      	nop

080004f0 <d_number_component>:
 80004f0:	6943      	ldr	r3, [r0, #20]
 80004f2:	6982      	ldr	r2, [r0, #24]
 80004f4:	4293      	cmp	r3, r2
 80004f6:	da14      	bge.n	8000522 <d_number_component+0x32>
 80004f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80004fc:	6901      	ldr	r1, [r0, #16]
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	b510      	push	{r4, lr}
 8000502:	3301      	adds	r3, #1
 8000504:	188c      	adds	r4, r1, r2
 8000506:	6143      	str	r3, [r0, #20]
 8000508:	d008      	beq.n	800051c <d_number_component+0x2c>
 800050a:	2340      	movs	r3, #64	; 0x40
 800050c:	548b      	strb	r3, [r1, r2]
 800050e:	300c      	adds	r0, #12
 8000510:	f7ff ffc4 	bl	800049c <d_number.isra.0>
 8000514:	4623      	mov	r3, r4
 8000516:	6060      	str	r0, [r4, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	bd10      	pop	{r4, pc}
 800051c:	4623      	mov	r3, r4
 800051e:	4618      	mov	r0, r3
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2300      	movs	r3, #0
 8000524:	4618      	mov	r0, r3
 8000526:	4770      	bx	lr

08000528 <d_compact_number>:
 8000528:	b510      	push	{r4, lr}
 800052a:	68c3      	ldr	r3, [r0, #12]
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	2a5f      	cmp	r2, #95	; 0x5f
 8000530:	4604      	mov	r4, r0
 8000532:	d00b      	beq.n	800054c <d_compact_number+0x24>
 8000534:	2a6e      	cmp	r2, #110	; 0x6e
 8000536:	d006      	beq.n	8000546 <d_compact_number+0x1e>
 8000538:	300c      	adds	r0, #12
 800053a:	f7ff ffaf 	bl	800049c <d_number.isra.0>
 800053e:	68e3      	ldr	r3, [r4, #12]
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	2a5f      	cmp	r2, #95	; 0x5f
 8000544:	d006      	beq.n	8000554 <d_compact_number+0x2c>
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	bd10      	pop	{r4, pc}
 800054c:	2000      	movs	r0, #0
 800054e:	3301      	adds	r3, #1
 8000550:	60e3      	str	r3, [r4, #12]
 8000552:	bd10      	pop	{r4, pc}
 8000554:	3001      	adds	r0, #1
 8000556:	e7fa      	b.n	800054e <d_compact_number+0x26>

08000558 <d_template_param>:
 8000558:	b538      	push	{r3, r4, r5, lr}
 800055a:	68c3      	ldr	r3, [r0, #12]
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	2a54      	cmp	r2, #84	; 0x54
 8000560:	d001      	beq.n	8000566 <d_template_param+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd38      	pop	{r3, r4, r5, pc}
 8000566:	3301      	adds	r3, #1
 8000568:	60c3      	str	r3, [r0, #12]
 800056a:	4604      	mov	r4, r0
 800056c:	f7ff ffdc 	bl	8000528 <d_compact_number>
 8000570:	1e05      	subs	r5, r0, #0
 8000572:	dbf6      	blt.n	8000562 <d_template_param+0xa>
 8000574:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000576:	6963      	ldr	r3, [r4, #20]
 8000578:	69a1      	ldr	r1, [r4, #24]
 800057a:	3201      	adds	r2, #1
 800057c:	428b      	cmp	r3, r1
 800057e:	62a2      	str	r2, [r4, #40]	; 0x28
 8000580:	daef      	bge.n	8000562 <d_template_param+0xa>
 8000582:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000586:	6921      	ldr	r1, [r4, #16]
 8000588:	3301      	adds	r3, #1
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	6163      	str	r3, [r4, #20]
 800058e:	188b      	adds	r3, r1, r2
 8000590:	d0e7      	beq.n	8000562 <d_template_param+0xa>
 8000592:	2005      	movs	r0, #5
 8000594:	5488      	strb	r0, [r1, r2]
 8000596:	605d      	str	r5, [r3, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	bd38      	pop	{r3, r4, r5, pc}

0800059c <d_source_name>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	4604      	mov	r4, r0
 80005a0:	300c      	adds	r0, #12
 80005a2:	f7ff ff7b 	bl	800049c <d_number.isra.0>
 80005a6:	1e06      	subs	r6, r0, #0
 80005a8:	dd4e      	ble.n	8000648 <d_source_name+0xac>
 80005aa:	68e5      	ldr	r5, [r4, #12]
 80005ac:	6863      	ldr	r3, [r4, #4]
 80005ae:	1b5b      	subs	r3, r3, r5
 80005b0:	429e      	cmp	r6, r3
 80005b2:	dc2c      	bgt.n	800060e <d_source_name+0x72>
 80005b4:	68a2      	ldr	r2, [r4, #8]
 80005b6:	19ab      	adds	r3, r5, r6
 80005b8:	0752      	lsls	r2, r2, #29
 80005ba:	60e3      	str	r3, [r4, #12]
 80005bc:	d504      	bpl.n	80005c8 <d_source_name+0x2c>
 80005be:	5daa      	ldrb	r2, [r5, r6]
 80005c0:	2a24      	cmp	r2, #36	; 0x24
 80005c2:	bf04      	itt	eq
 80005c4:	3301      	addeq	r3, #1
 80005c6:	60e3      	streq	r3, [r4, #12]
 80005c8:	2e09      	cmp	r6, #9
 80005ca:	dd0c      	ble.n	80005e6 <d_source_name+0x4a>
 80005cc:	2208      	movs	r2, #8
 80005ce:	491f      	ldr	r1, [pc, #124]	; (800064c <d_source_name+0xb0>)
 80005d0:	4628      	mov	r0, r5
 80005d2:	f016 fc53 	bl	8016e7c <memcmp>
 80005d6:	b930      	cbnz	r0, 80005e6 <d_source_name+0x4a>
 80005d8:	7a2b      	ldrb	r3, [r5, #8]
 80005da:	2b2e      	cmp	r3, #46	; 0x2e
 80005dc:	d01a      	beq.n	8000614 <d_source_name+0x78>
 80005de:	2b5f      	cmp	r3, #95	; 0x5f
 80005e0:	d018      	beq.n	8000614 <d_source_name+0x78>
 80005e2:	2b24      	cmp	r3, #36	; 0x24
 80005e4:	d016      	beq.n	8000614 <d_source_name+0x78>
 80005e6:	6963      	ldr	r3, [r4, #20]
 80005e8:	69a2      	ldr	r2, [r4, #24]
 80005ea:	4293      	cmp	r3, r2
 80005ec:	da0f      	bge.n	800060e <d_source_name+0x72>
 80005ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80005f2:	6921      	ldr	r1, [r4, #16]
 80005f4:	3301      	adds	r3, #1
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	6163      	str	r3, [r4, #20]
 80005fa:	188b      	adds	r3, r1, r2
 80005fc:	d007      	beq.n	800060e <d_source_name+0x72>
 80005fe:	b135      	cbz	r5, 800060e <d_source_name+0x72>
 8000600:	2000      	movs	r0, #0
 8000602:	5488      	strb	r0, [r1, r2]
 8000604:	4618      	mov	r0, r3
 8000606:	605d      	str	r5, [r3, #4]
 8000608:	609e      	str	r6, [r3, #8]
 800060a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800060c:	bd70      	pop	{r4, r5, r6, pc}
 800060e:	2000      	movs	r0, #0
 8000610:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	7a6b      	ldrb	r3, [r5, #9]
 8000616:	2b4e      	cmp	r3, #78	; 0x4e
 8000618:	d1e5      	bne.n	80005e6 <d_source_name+0x4a>
 800061a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800061c:	6962      	ldr	r2, [r4, #20]
 800061e:	69a1      	ldr	r1, [r4, #24]
 8000620:	3316      	adds	r3, #22
 8000622:	1b9e      	subs	r6, r3, r6
 8000624:	428a      	cmp	r2, r1
 8000626:	6326      	str	r6, [r4, #48]	; 0x30
 8000628:	daf1      	bge.n	800060e <d_source_name+0x72>
 800062a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800062e:	6921      	ldr	r1, [r4, #16]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	3201      	adds	r2, #1
 8000634:	18c8      	adds	r0, r1, r3
 8000636:	6162      	str	r2, [r4, #20]
 8000638:	d0e9      	beq.n	800060e <d_source_name+0x72>
 800063a:	2500      	movs	r5, #0
 800063c:	54cd      	strb	r5, [r1, r3]
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <d_source_name+0xb4>)
 8000640:	6042      	str	r2, [r0, #4]
 8000642:	2315      	movs	r3, #21
 8000644:	6083      	str	r3, [r0, #8]
 8000646:	e7e3      	b.n	8000610 <d_source_name+0x74>
 8000648:	2000      	movs	r0, #0
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	0801bbfc 	.word	0x0801bbfc
 8000650:	0801bc08 	.word	0x0801bc08

08000654 <d_abi_tags>:
 8000654:	b538      	push	{r3, r4, r5, lr}
 8000656:	68c3      	ldr	r3, [r0, #12]
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	2a42      	cmp	r2, #66	; 0x42
 800065c:	460d      	mov	r5, r1
 800065e:	d110      	bne.n	8000682 <d_abi_tags+0x2e>
 8000660:	4604      	mov	r4, r0
 8000662:	3301      	adds	r3, #1
 8000664:	60e3      	str	r3, [r4, #12]
 8000666:	4620      	mov	r0, r4
 8000668:	f7ff ff98 	bl	800059c <d_source_name>
 800066c:	462a      	mov	r2, r5
 800066e:	4603      	mov	r3, r0
 8000670:	214a      	movs	r1, #74	; 0x4a
 8000672:	4620      	mov	r0, r4
 8000674:	f7ff fdcc 	bl	8000210 <d_make_comp>
 8000678:	68e3      	ldr	r3, [r4, #12]
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	2a42      	cmp	r2, #66	; 0x42
 800067e:	4605      	mov	r5, r0
 8000680:	d0ef      	beq.n	8000662 <d_abi_tags+0xe>
 8000682:	4628      	mov	r0, r5
 8000684:	bd38      	pop	{r3, r4, r5, pc}
 8000686:	bf00      	nop

08000688 <d_substitution>:
 8000688:	68c2      	ldr	r2, [r0, #12]
 800068a:	7813      	ldrb	r3, [r2, #0]
 800068c:	2b53      	cmp	r3, #83	; 0x53
 800068e:	d002      	beq.n	8000696 <d_substitution+0xe>
 8000690:	2100      	movs	r1, #0
 8000692:	4608      	mov	r0, r1
 8000694:	4770      	bx	lr
 8000696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800069a:	1c53      	adds	r3, r2, #1
 800069c:	60c3      	str	r3, [r0, #12]
 800069e:	7853      	ldrb	r3, [r2, #1]
 80006a0:	b18b      	cbz	r3, 80006c6 <d_substitution+0x3e>
 80006a2:	1c93      	adds	r3, r2, #2
 80006a4:	60c3      	str	r3, [r0, #12]
 80006a6:	7854      	ldrb	r4, [r2, #1]
 80006a8:	2c5f      	cmp	r4, #95	; 0x5f
 80006aa:	d12d      	bne.n	8000708 <d_substitution+0x80>
 80006ac:	2300      	movs	r3, #0
 80006ae:	6a02      	ldr	r2, [r0, #32]
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d21c      	bcs.n	80006ee <d_substitution+0x66>
 80006b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80006b6:	69c1      	ldr	r1, [r0, #28]
 80006b8:	3201      	adds	r2, #1
 80006ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80006be:	6282      	str	r2, [r0, #40]	; 0x28
 80006c0:	4608      	mov	r0, r1
 80006c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006c6:	461c      	mov	r4, r3
 80006c8:	6883      	ldr	r3, [r0, #8]
 80006ca:	f003 0308 	and.w	r3, r3, #8
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf14      	ite	ne
 80006d2:	2501      	movne	r5, #1
 80006d4:	2500      	moveq	r5, #0
 80006d6:	d00e      	beq.n	80006f6 <d_substitution+0x6e>
 80006d8:	4b4d      	ldr	r3, [pc, #308]	; (8000810 <d_substitution+0x188>)
 80006da:	2274      	movs	r2, #116	; 0x74
 80006dc:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80006e0:	e001      	b.n	80006e6 <d_substitution+0x5e>
 80006e2:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
 80006e6:	4294      	cmp	r4, r2
 80006e8:	d037      	beq.n	800075a <d_substitution+0xd2>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d1f9      	bne.n	80006e2 <d_substitution+0x5a>
 80006ee:	2100      	movs	r1, #0
 80006f0:	4608      	mov	r0, r1
 80006f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006f6:	2900      	cmp	r1, #0
 80006f8:	d0ee      	beq.n	80006d8 <d_substitution+0x50>
 80006fa:	68c3      	ldr	r3, [r0, #12]
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3b43      	subs	r3, #67	; 0x43
 8000700:	2b01      	cmp	r3, #1
 8000702:	bf98      	it	ls
 8000704:	2501      	movls	r5, #1
 8000706:	e7e7      	b.n	80006d8 <d_substitution+0x50>
 8000708:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 800070c:	b2eb      	uxtb	r3, r5
 800070e:	2b09      	cmp	r3, #9
 8000710:	d879      	bhi.n	8000806 <d_substitution+0x17e>
 8000712:	2100      	movs	r1, #0
 8000714:	e00d      	b.n	8000732 <d_substitution+0xaa>
 8000716:	3b30      	subs	r3, #48	; 0x30
 8000718:	4299      	cmp	r1, r3
 800071a:	d8e8      	bhi.n	80006ee <d_substitution+0x66>
 800071c:	68c2      	ldr	r2, [r0, #12]
 800071e:	7814      	ldrb	r4, [r2, #0]
 8000720:	1c51      	adds	r1, r2, #1
 8000722:	b11c      	cbz	r4, 800072c <d_substitution+0xa4>
 8000724:	60c1      	str	r1, [r0, #12]
 8000726:	7814      	ldrb	r4, [r2, #0]
 8000728:	2c5f      	cmp	r4, #95	; 0x5f
 800072a:	d014      	beq.n	8000756 <d_substitution+0xce>
 800072c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8000730:	4619      	mov	r1, r3
 8000732:	b2ed      	uxtb	r5, r5
 8000734:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8000738:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800073c:	2d09      	cmp	r5, #9
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000744:	d9e7      	bls.n	8000716 <d_substitution+0x8e>
 8000746:	2a19      	cmp	r2, #25
 8000748:	d8d1      	bhi.n	80006ee <d_substitution+0x66>
 800074a:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800074e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8000752:	3b37      	subs	r3, #55	; 0x37
 8000754:	e7e0      	b.n	8000718 <d_substitution+0x90>
 8000756:	3301      	adds	r3, #1
 8000758:	e7a9      	b.n	80006ae <d_substitution+0x26>
 800075a:	695c      	ldr	r4, [r3, #20]
 800075c:	2c00      	cmp	r4, #0
 800075e:	d049      	beq.n	80007f4 <d_substitution+0x16c>
 8000760:	6942      	ldr	r2, [r0, #20]
 8000762:	6981      	ldr	r1, [r0, #24]
 8000764:	428a      	cmp	r2, r1
 8000766:	da43      	bge.n	80007f0 <d_substitution+0x168>
 8000768:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800076c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8000770:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8000774:	00b6      	lsls	r6, r6, #2
 8000776:	3201      	adds	r2, #1
 8000778:	eb1e 0706 	adds.w	r7, lr, r6
 800077c:	6142      	str	r2, [r0, #20]
 800077e:	d040      	beq.n	8000802 <d_substitution+0x17a>
 8000780:	f04f 0c18 	mov.w	ip, #24
 8000784:	f80e c006 	strb.w	ip, [lr, r6]
 8000788:	463e      	mov	r6, r7
 800078a:	607c      	str	r4, [r7, #4]
 800078c:	f8c7 8008 	str.w	r8, [r7, #8]
 8000790:	62c6      	str	r6, [r0, #44]	; 0x2c
 8000792:	b345      	cbz	r5, 80007e6 <d_substitution+0x15e>
 8000794:	68de      	ldr	r6, [r3, #12]
 8000796:	691c      	ldr	r4, [r3, #16]
 8000798:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800079a:	4291      	cmp	r1, r2
 800079c:	4423      	add	r3, r4
 800079e:	6303      	str	r3, [r0, #48]	; 0x30
 80007a0:	dd24      	ble.n	80007ec <d_substitution+0x164>
 80007a2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80007a6:	6905      	ldr	r5, [r0, #16]
 80007a8:	0089      	lsls	r1, r1, #2
 80007aa:	3201      	adds	r2, #1
 80007ac:	186b      	adds	r3, r5, r1
 80007ae:	6142      	str	r2, [r0, #20]
 80007b0:	d025      	beq.n	80007fe <d_substitution+0x176>
 80007b2:	2218      	movs	r2, #24
 80007b4:	546a      	strb	r2, [r5, r1]
 80007b6:	4619      	mov	r1, r3
 80007b8:	605e      	str	r6, [r3, #4]
 80007ba:	609c      	str	r4, [r3, #8]
 80007bc:	68c3      	ldr	r3, [r0, #12]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b42      	cmp	r3, #66	; 0x42
 80007c2:	f47f af7d 	bne.w	80006c0 <d_substitution+0x38>
 80007c6:	4604      	mov	r4, r0
 80007c8:	f7ff ff44 	bl	8000654 <d_abi_tags>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d08e      	beq.n	80006ee <d_substitution+0x66>
 80007d0:	6a23      	ldr	r3, [r4, #32]
 80007d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007d4:	4293      	cmp	r3, r2
 80007d6:	da10      	bge.n	80007fa <d_substitution+0x172>
 80007d8:	69e1      	ldr	r1, [r4, #28]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80007e0:	4601      	mov	r1, r0
 80007e2:	6222      	str	r2, [r4, #32]
 80007e4:	e76c      	b.n	80006c0 <d_substitution+0x38>
 80007e6:	685e      	ldr	r6, [r3, #4]
 80007e8:	689c      	ldr	r4, [r3, #8]
 80007ea:	e7d5      	b.n	8000798 <d_substitution+0x110>
 80007ec:	2100      	movs	r1, #0
 80007ee:	e7e5      	b.n	80007bc <d_substitution+0x134>
 80007f0:	2600      	movs	r6, #0
 80007f2:	e7cd      	b.n	8000790 <d_substitution+0x108>
 80007f4:	6981      	ldr	r1, [r0, #24]
 80007f6:	6942      	ldr	r2, [r0, #20]
 80007f8:	e7cb      	b.n	8000792 <d_substitution+0x10a>
 80007fa:	4601      	mov	r1, r0
 80007fc:	e760      	b.n	80006c0 <d_substitution+0x38>
 80007fe:	4619      	mov	r1, r3
 8000800:	e7dc      	b.n	80007bc <d_substitution+0x134>
 8000802:	463e      	mov	r6, r7
 8000804:	e7c4      	b.n	8000790 <d_substitution+0x108>
 8000806:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800080a:	2b19      	cmp	r3, #25
 800080c:	d981      	bls.n	8000712 <d_substitution+0x8a>
 800080e:	e75b      	b.n	80006c8 <d_substitution+0x40>
 8000810:	0801a4fc 	.word	0x0801a4fc

08000814 <d_call_offset>:
 8000814:	b538      	push	{r3, r4, r5, lr}
 8000816:	4604      	mov	r4, r0
 8000818:	b929      	cbnz	r1, 8000826 <d_call_offset+0x12>
 800081a:	68c3      	ldr	r3, [r0, #12]
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	b132      	cbz	r2, 800082e <d_call_offset+0x1a>
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	60c2      	str	r2, [r0, #12]
 8000824:	7819      	ldrb	r1, [r3, #0]
 8000826:	2968      	cmp	r1, #104	; 0x68
 8000828:	d019      	beq.n	800085e <d_call_offset+0x4a>
 800082a:	2976      	cmp	r1, #118	; 0x76
 800082c:	d001      	beq.n	8000832 <d_call_offset+0x1e>
 800082e:	2000      	movs	r0, #0
 8000830:	bd38      	pop	{r3, r4, r5, pc}
 8000832:	f104 050c 	add.w	r5, r4, #12
 8000836:	4628      	mov	r0, r5
 8000838:	f7ff fe30 	bl	800049c <d_number.isra.0>
 800083c:	68e3      	ldr	r3, [r4, #12]
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	2a5f      	cmp	r2, #95	; 0x5f
 8000842:	d1f4      	bne.n	800082e <d_call_offset+0x1a>
 8000844:	3301      	adds	r3, #1
 8000846:	60e3      	str	r3, [r4, #12]
 8000848:	4628      	mov	r0, r5
 800084a:	f7ff fe27 	bl	800049c <d_number.isra.0>
 800084e:	68e3      	ldr	r3, [r4, #12]
 8000850:	781a      	ldrb	r2, [r3, #0]
 8000852:	2a5f      	cmp	r2, #95	; 0x5f
 8000854:	d1eb      	bne.n	800082e <d_call_offset+0x1a>
 8000856:	3301      	adds	r3, #1
 8000858:	60e3      	str	r3, [r4, #12]
 800085a:	2001      	movs	r0, #1
 800085c:	bd38      	pop	{r3, r4, r5, pc}
 800085e:	f104 000c 	add.w	r0, r4, #12
 8000862:	f7ff fe1b 	bl	800049c <d_number.isra.0>
 8000866:	e7f2      	b.n	800084e <d_call_offset+0x3a>

08000868 <d_lookup_template_argument.isra.6>:
 8000868:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800086c:	4602      	mov	r2, r0
 800086e:	b1c3      	cbz	r3, 80008a2 <d_lookup_template_argument.isra.6+0x3a>
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	680b      	ldr	r3, [r1, #0]
 8000874:	6890      	ldr	r0, [r2, #8]
 8000876:	b170      	cbz	r0, 8000896 <d_lookup_template_argument.isra.6+0x2e>
 8000878:	7802      	ldrb	r2, [r0, #0]
 800087a:	2a2f      	cmp	r2, #47	; 0x2f
 800087c:	d10d      	bne.n	800089a <d_lookup_template_argument.isra.6+0x32>
 800087e:	2b00      	cmp	r3, #0
 8000880:	dc04      	bgt.n	800088c <d_lookup_template_argument.isra.6+0x24>
 8000882:	e009      	b.n	8000898 <d_lookup_template_argument.isra.6+0x30>
 8000884:	7802      	ldrb	r2, [r0, #0]
 8000886:	2a2f      	cmp	r2, #47	; 0x2f
 8000888:	d107      	bne.n	800089a <d_lookup_template_argument.isra.6+0x32>
 800088a:	b143      	cbz	r3, 800089e <d_lookup_template_argument.isra.6+0x36>
 800088c:	6880      	ldr	r0, [r0, #8]
 800088e:	3b01      	subs	r3, #1
 8000890:	2800      	cmp	r0, #0
 8000892:	d1f7      	bne.n	8000884 <d_lookup_template_argument.isra.6+0x1c>
 8000894:	4770      	bx	lr
 8000896:	4770      	bx	lr
 8000898:	d001      	beq.n	800089e <d_lookup_template_argument.isra.6+0x36>
 800089a:	2000      	movs	r0, #0
 800089c:	4770      	bx	lr
 800089e:	6840      	ldr	r0, [r0, #4]
 80008a0:	4770      	bx	lr
 80008a2:	2101      	movs	r1, #1
 80008a4:	4618      	mov	r0, r3
 80008a6:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 80008aa:	4770      	bx	lr

080008ac <d_find_pack>:
 80008ac:	2900      	cmp	r1, #0
 80008ae:	d041      	beq.n	8000934 <d_find_pack+0x88>
 80008b0:	b538      	push	{r3, r4, r5, lr}
 80008b2:	4605      	mov	r5, r0
 80008b4:	460c      	mov	r4, r1
 80008b6:	7823      	ldrb	r3, [r4, #0]
 80008b8:	2b4a      	cmp	r3, #74	; 0x4a
 80008ba:	d827      	bhi.n	800090c <d_find_pack+0x60>
 80008bc:	e8df f003 	tbb	[pc, r3]
 80008c0:	2626262e 	.word	0x2626262e
 80008c4:	2b2e3026 	.word	0x2b2e3026
 80008c8:	2626262b 	.word	0x2626262b
 80008cc:	26262626 	.word	0x26262626
 80008d0:	26262626 	.word	0x26262626
 80008d4:	26262626 	.word	0x26262626
 80008d8:	2626262e 	.word	0x2626262e
 80008dc:	26262626 	.word	0x26262626
 80008e0:	26262626 	.word	0x26262626
 80008e4:	2e262626 	.word	0x2e262626
 80008e8:	26262626 	.word	0x26262626
 80008ec:	26262626 	.word	0x26262626
 80008f0:	262b2e26 	.word	0x262b2e26
 80008f4:	26262626 	.word	0x26262626
 80008f8:	26262626 	.word	0x26262626
 80008fc:	2e262626 	.word	0x2e262626
 8000900:	26262626 	.word	0x26262626
 8000904:	262e262e 	.word	0x262e262e
 8000908:	2e26      	.short	0x2e26
 800090a:	2e          	.byte	0x2e
 800090b:	00          	.byte	0x00
 800090c:	6861      	ldr	r1, [r4, #4]
 800090e:	4628      	mov	r0, r5
 8000910:	f7ff ffcc 	bl	80008ac <d_find_pack>
 8000914:	b918      	cbnz	r0, 800091e <d_find_pack+0x72>
 8000916:	68a4      	ldr	r4, [r4, #8]
 8000918:	2c00      	cmp	r4, #0
 800091a:	d1cc      	bne.n	80008b6 <d_find_pack+0xa>
 800091c:	2000      	movs	r0, #0
 800091e:	bd38      	pop	{r3, r4, r5, pc}
 8000920:	1d21      	adds	r1, r4, #4
 8000922:	4628      	mov	r0, r5
 8000924:	f7ff ffa0 	bl	8000868 <d_lookup_template_argument.isra.6>
 8000928:	2800      	cmp	r0, #0
 800092a:	d0f7      	beq.n	800091c <d_find_pack+0x70>
 800092c:	7803      	ldrb	r3, [r0, #0]
 800092e:	2b2f      	cmp	r3, #47	; 0x2f
 8000930:	d1f4      	bne.n	800091c <d_find_pack+0x70>
 8000932:	bd38      	pop	{r3, r4, r5, pc}
 8000934:	2000      	movs	r0, #0
 8000936:	4770      	bx	lr

08000938 <d_growable_string_callback_adapter>:
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	6853      	ldr	r3, [r2, #4]
 800093c:	6894      	ldr	r4, [r2, #8]
 800093e:	3301      	adds	r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	42a3      	cmp	r3, r4
 8000944:	b083      	sub	sp, #12
 8000946:	4615      	mov	r5, r2
 8000948:	460e      	mov	r6, r1
 800094a:	4607      	mov	r7, r0
 800094c:	d813      	bhi.n	8000976 <d_growable_string_callback_adapter+0x3e>
 800094e:	68ec      	ldr	r4, [r5, #12]
 8000950:	b10c      	cbz	r4, 8000956 <d_growable_string_callback_adapter+0x1e>
 8000952:	b003      	add	sp, #12
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000956:	e895 0009 	ldmia.w	r5, {r0, r3}
 800095a:	4632      	mov	r2, r6
 800095c:	4639      	mov	r1, r7
 800095e:	4418      	add	r0, r3
 8000960:	f016 fa9b 	bl	8016e9a <memcpy>
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	686a      	ldr	r2, [r5, #4]
 8000968:	4433      	add	r3, r6
 800096a:	549c      	strb	r4, [r3, r2]
 800096c:	686b      	ldr	r3, [r5, #4]
 800096e:	441e      	add	r6, r3
 8000970:	606e      	str	r6, [r5, #4]
 8000972:	b003      	add	sp, #12
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	68d2      	ldr	r2, [r2, #12]
 8000978:	2a00      	cmp	r2, #0
 800097a:	d1ea      	bne.n	8000952 <d_growable_string_callback_adapter+0x1a>
 800097c:	b91c      	cbnz	r4, 8000986 <d_growable_string_callback_adapter+0x4e>
 800097e:	2b02      	cmp	r3, #2
 8000980:	f04f 0402 	mov.w	r4, #2
 8000984:	d902      	bls.n	800098c <d_growable_string_callback_adapter+0x54>
 8000986:	0064      	lsls	r4, r4, #1
 8000988:	42a3      	cmp	r3, r4
 800098a:	d8fc      	bhi.n	8000986 <d_growable_string_callback_adapter+0x4e>
 800098c:	4621      	mov	r1, r4
 800098e:	6828      	ldr	r0, [r5, #0]
 8000990:	f016 faea 	bl	8016f68 <realloc>
 8000994:	b110      	cbz	r0, 800099c <d_growable_string_callback_adapter+0x64>
 8000996:	6028      	str	r0, [r5, #0]
 8000998:	60ac      	str	r4, [r5, #8]
 800099a:	e7d8      	b.n	800094e <d_growable_string_callback_adapter+0x16>
 800099c:	9001      	str	r0, [sp, #4]
 800099e:	6828      	ldr	r0, [r5, #0]
 80009a0:	f016 f844 	bl	8016a2c <free>
 80009a4:	9b01      	ldr	r3, [sp, #4]
 80009a6:	602b      	str	r3, [r5, #0]
 80009a8:	2201      	movs	r2, #1
 80009aa:	606b      	str	r3, [r5, #4]
 80009ac:	60ab      	str	r3, [r5, #8]
 80009ae:	60ea      	str	r2, [r5, #12]
 80009b0:	e7cf      	b.n	8000952 <d_growable_string_callback_adapter+0x1a>
 80009b2:	bf00      	nop

080009b4 <d_print_comp_inner>:
 80009b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009b8:	4604      	mov	r4, r0
 80009ba:	b095      	sub	sp, #84	; 0x54
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f000 80c3 	beq.w	8000b48 <d_print_comp_inner+0x194>
 80009c2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f040 80b6 	bne.w	8000b38 <d_print_comp_inner+0x184>
 80009cc:	7813      	ldrb	r3, [r2, #0]
 80009ce:	460f      	mov	r7, r1
 80009d0:	4615      	mov	r5, r2
 80009d2:	2b4b      	cmp	r3, #75	; 0x4b
 80009d4:	f201 81eb 	bhi.w	8001dae <d_print_comp_inner+0x13fa>
 80009d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80009dc:	094c096d 	.word	0x094c096d
 80009e0:	08bf094c 	.word	0x08bf094c
 80009e4:	09cc087b 	.word	0x09cc087b
 80009e8:	09e409a2 	.word	0x09e409a2
 80009ec:	085407c7 	.word	0x085407c7
 80009f0:	0806082d 	.word	0x0806082d
 80009f4:	05d607df 	.word	0x05d607df
 80009f8:	057a05af 	.word	0x057a05af
 80009fc:	07100553 	.word	0x07100553
 8000a00:	06c206e9 	.word	0x06c206e9
 8000a04:	0674069b 	.word	0x0674069b
 8000a08:	0626064d 	.word	0x0626064d
 8000a0c:	07ad05fd 	.word	0x07ad05fd
 8000a10:	07ad07ad 	.word	0x07ad07ad
 8000a14:	07a807a8 	.word	0x07a807a8
 8000a18:	07a807a8 	.word	0x07a807a8
 8000a1c:	07a807a8 	.word	0x07a807a8
 8000a20:	077607a8 	.word	0x077607a8
 8000a24:	07a80776 	.word	0x07a80776
 8000a28:	073707a8 	.word	0x073707a8
 8000a2c:	04fd07da 	.word	0x04fd07da
 8000a30:	04760491 	.word	0x04760491
 8000a34:	047603d4 	.word	0x047603d4
 8000a38:	03940394 	.word	0x03940394
 8000a3c:	03470371 	.word	0x03470371
 8000a40:	02f90320 	.word	0x02f90320
 8000a44:	02c702f5 	.word	0x02c702f5
 8000a48:	0472004c 	.word	0x0472004c
 8000a4c:	04170512 	.word	0x04170512
 8000a50:	04420417 	.word	0x04420417
 8000a54:	041b0442 	.word	0x041b0442
 8000a58:	02b102be 	.word	0x02b102be
 8000a5c:	0233025a 	.word	0x0233025a
 8000a60:	01d001f7 	.word	0x01d001f7
 8000a64:	09e901a9 	.word	0x09e901a9
 8000a68:	028a0183 	.word	0x028a0183
 8000a6c:	0110015c 	.word	0x0110015c
 8000a70:	00bc00e6 	.word	0x00bc00e6
 8000a74:	68ae      	ldr	r6, [r5, #8]
 8000a76:	7833      	ldrb	r3, [r6, #0]
 8000a78:	2b37      	cmp	r3, #55	; 0x37
 8000a7a:	d165      	bne.n	8000b48 <d_print_comp_inner+0x194>
 8000a7c:	686a      	ldr	r2, [r5, #4]
 8000a7e:	6853      	ldr	r3, [r2, #4]
 8000a80:	6819      	ldr	r1, [r3, #0]
 8000a82:	7848      	ldrb	r0, [r1, #1]
 8000a84:	2863      	cmp	r0, #99	; 0x63
 8000a86:	f002 808b 	beq.w	8002ba0 <d_print_comp_inner+0x21ec>
 8000a8a:	7811      	ldrb	r1, [r2, #0]
 8000a8c:	2931      	cmp	r1, #49	; 0x31
 8000a8e:	f002 8160 	beq.w	8002d52 <d_print_comp_inner+0x239e>
 8000a92:	6853      	ldr	r3, [r2, #4]
 8000a94:	49d1      	ldr	r1, [pc, #836]	; (8000ddc <d_print_comp_inner+0x428>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f007 fd42 	bl	8008520 <strcmp>
 8000a9c:	6872      	ldr	r2, [r6, #4]
 8000a9e:	b918      	cbnz	r0, 8000aa8 <d_print_comp_inner+0xf4>
 8000aa0:	7813      	ldrb	r3, [r2, #0]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	f002 81ef 	beq.w	8002e86 <d_print_comp_inner+0x24d2>
 8000aa8:	4639      	mov	r1, r7
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f003 fa48 	bl	8003f40 <d_print_subexpr>
 8000ab0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8000ab4:	49ca      	ldr	r1, [pc, #808]	; (8000de0 <d_print_comp_inner+0x42c>)
 8000ab6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000aba:	f8d3 9000 	ldr.w	r9, [r3]
 8000abe:	4648      	mov	r0, r9
 8000ac0:	f007 fd2e 	bl	8008520 <strcmp>
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	f041 87f0 	bne.w	8002aac <d_print_comp_inner+0x20f8>
 8000acc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000ad0:	29ff      	cmp	r1, #255	; 0xff
 8000ad2:	f002 827e 	beq.w	8002fd2 <d_print_comp_inner+0x261e>
 8000ad6:	1c4a      	adds	r2, r1, #1
 8000ad8:	235b      	movs	r3, #91	; 0x5b
 8000ada:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000ade:	5463      	strb	r3, [r4, r1]
 8000ae0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8000ae4:	68ab      	ldr	r3, [r5, #8]
 8000ae6:	4639      	mov	r1, r7
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	4620      	mov	r0, r4
 8000aec:	f002 fb7c 	bl	80031e8 <d_print_comp>
 8000af0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000af4:	29ff      	cmp	r1, #255	; 0xff
 8000af6:	f002 827c 	beq.w	8002ff2 <d_print_comp_inner+0x263e>
 8000afa:	235d      	movs	r3, #93	; 0x5d
 8000afc:	1c4a      	adds	r2, r1, #1
 8000afe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000b02:	5463      	strb	r3, [r4, r1]
 8000b04:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8000b08:	686b      	ldr	r3, [r5, #4]
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	2a31      	cmp	r2, #49	; 0x31
 8000b0e:	d113      	bne.n	8000b38 <d_print_comp_inner+0x184>
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d10f      	bne.n	8000b38 <d_print_comp_inner+0x184>
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8000b1e:	d10b      	bne.n	8000b38 <d_print_comp_inner+0x184>
 8000b20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000b24:	29ff      	cmp	r1, #255	; 0xff
 8000b26:	f002 8325 	beq.w	8003174 <d_print_comp_inner+0x27c0>
 8000b2a:	2329      	movs	r3, #41	; 0x29
 8000b2c:	1c4a      	adds	r2, r1, #1
 8000b2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000b32:	5463      	strb	r3, [r4, r1]
 8000b34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8000b38:	b015      	add	sp, #84	; 0x54
 8000b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3e:	f1b8 0f00 	cmp.w	r8, #0
 8000b42:	d001      	beq.n	8000b48 <d_print_comp_inner+0x194>
 8000b44:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8000b4e:	b015      	add	sp, #84	; 0x54
 8000b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b54:	4ea3      	ldr	r6, [pc, #652]	; (8000de4 <d_print_comp_inner+0x430>)
 8000b56:	686a      	ldr	r2, [r5, #4]
 8000b58:	f002 fb46 	bl	80031e8 <d_print_comp>
 8000b5c:	f106 0a08 	add.w	sl, r6, #8
 8000b60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000b64:	f04f 0900 	mov.w	r9, #0
 8000b68:	e00a      	b.n	8000b80 <d_print_comp_inner+0x1cc>
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	3101      	adds	r1, #1
 8000b6e:	45b2      	cmp	sl, r6
 8000b70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000b74:	f804 8003 	strb.w	r8, [r4, r3]
 8000b78:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000b7c:	f001 8299 	beq.w	80020b2 <d_print_comp_inner+0x16fe>
 8000b80:	29ff      	cmp	r1, #255	; 0xff
 8000b82:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000b86:	d1f0      	bne.n	8000b6a <d_print_comp_inner+0x1b6>
 8000b88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000b8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000b90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000b94:	4620      	mov	r0, r4
 8000b96:	4798      	blx	r3
 8000b98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e7e2      	b.n	8000b6e <d_print_comp_inner+0x1ba>
 8000ba8:	4e8f      	ldr	r6, [pc, #572]	; (8000de8 <d_print_comp_inner+0x434>)
 8000baa:	686a      	ldr	r2, [r5, #4]
 8000bac:	f002 fb1c 	bl	80031e8 <d_print_comp>
 8000bb0:	f106 0a05 	add.w	sl, r6, #5
 8000bb4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000bb8:	f04f 0900 	mov.w	r9, #0
 8000bbc:	e00a      	b.n	8000bd4 <d_print_comp_inner+0x220>
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	3101      	adds	r1, #1
 8000bc2:	45b2      	cmp	sl, r6
 8000bc4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000bc8:	f804 8003 	strb.w	r8, [r4, r3]
 8000bcc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000bd0:	f001 8247 	beq.w	8002062 <d_print_comp_inner+0x16ae>
 8000bd4:	29ff      	cmp	r1, #255	; 0xff
 8000bd6:	f816 8b01 	ldrb.w	r8, [r6], #1
 8000bda:	d1f0      	bne.n	8000bbe <d_print_comp_inner+0x20a>
 8000bdc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000be0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000be4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000be8:	4620      	mov	r0, r4
 8000bea:	4798      	blx	r3
 8000bec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e7e2      	b.n	8000bc2 <d_print_comp_inner+0x20e>
 8000bfc:	6869      	ldr	r1, [r5, #4]
 8000bfe:	f7ff fe55 	bl	80008ac <d_find_pack>
 8000c02:	f04f 0900 	mov.w	r9, #0
 8000c06:	2800      	cmp	r0, #0
 8000c08:	f002 814b 	beq.w	8002ea2 <d_print_comp_inner+0x24ee>
 8000c0c:	7803      	ldrb	r3, [r0, #0]
 8000c0e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c10:	f041 8315 	bne.w	800223e <d_print_comp_inner+0x188a>
 8000c14:	6843      	ldr	r3, [r0, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f001 8311 	beq.w	800223e <d_print_comp_inner+0x188a>
 8000c1c:	6880      	ldr	r0, [r0, #8]
 8000c1e:	f109 0901 	add.w	r9, r9, #1
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d1f2      	bne.n	8000c0c <d_print_comp_inner+0x258>
 8000c26:	686b      	ldr	r3, [r5, #4]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	f04f 0b00 	mov.w	fp, #0
 8000c2e:	f109 33ff 	add.w	r3, r9, #4294967295
 8000c32:	46da      	mov	sl, fp
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	f8c4 b11c 	str.w	fp, [r4, #284]	; 0x11c
 8000c3a:	9a00      	ldr	r2, [sp, #0]
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f002 fad2 	bl	80031e8 <d_print_comp>
 8000c44:	9b01      	ldr	r3, [sp, #4]
 8000c46:	455b      	cmp	r3, fp
 8000c48:	f341 80b6 	ble.w	8001db8 <d_print_comp_inner+0x1404>
 8000c4c:	4d67      	ldr	r5, [pc, #412]	; (8000dec <d_print_comp_inner+0x438>)
 8000c4e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000c52:	f105 0802 	add.w	r8, r5, #2
 8000c56:	e009      	b.n	8000c6c <d_print_comp_inner+0x2b8>
 8000c58:	460b      	mov	r3, r1
 8000c5a:	3101      	adds	r1, #1
 8000c5c:	45a8      	cmp	r8, r5
 8000c5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000c62:	54e6      	strb	r6, [r4, r3]
 8000c64:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000c68:	f001 80a6 	beq.w	8001db8 <d_print_comp_inner+0x1404>
 8000c6c:	29ff      	cmp	r1, #255	; 0xff
 8000c6e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000c72:	d1f1      	bne.n	8000c58 <d_print_comp_inner+0x2a4>
 8000c74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000c78:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8000c7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000c80:	4620      	mov	r0, r4
 8000c82:	4798      	blx	r3
 8000c84:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000c88:	3301      	adds	r3, #1
 8000c8a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2300      	movs	r3, #0
 8000c92:	e7e3      	b.n	8000c5c <d_print_comp_inner+0x2a8>
 8000c94:	4e56      	ldr	r6, [pc, #344]	; (8000df0 <d_print_comp_inner+0x43c>)
 8000c96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000c9a:	f106 0a1a 	add.w	sl, r6, #26
 8000c9e:	f04f 0900 	mov.w	r9, #0
 8000ca2:	e00a      	b.n	8000cba <d_print_comp_inner+0x306>
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	3101      	adds	r1, #1
 8000ca8:	45b2      	cmp	sl, r6
 8000caa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000cae:	f804 8003 	strb.w	r8, [r4, r3]
 8000cb2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000cb6:	f001 81e7 	beq.w	8002088 <d_print_comp_inner+0x16d4>
 8000cba:	29ff      	cmp	r1, #255	; 0xff
 8000cbc:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000cc0:	d1f0      	bne.n	8000ca4 <d_print_comp_inner+0x2f0>
 8000cc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000cc6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000cca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000cce:	4620      	mov	r0, r4
 8000cd0:	4798      	blx	r3
 8000cd2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e7e2      	b.n	8000ca8 <d_print_comp_inner+0x2f4>
 8000ce2:	4e44      	ldr	r6, [pc, #272]	; (8000df4 <d_print_comp_inner+0x440>)
 8000ce4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000ce8:	f106 090e 	add.w	r9, r6, #14
 8000cec:	f04f 0800 	mov.w	r8, #0
 8000cf0:	e009      	b.n	8000d06 <d_print_comp_inner+0x352>
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	3101      	adds	r1, #1
 8000cf6:	45b1      	cmp	r9, r6
 8000cf8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000cfc:	54e7      	strb	r7, [r4, r3]
 8000cfe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8000d02:	f001 80b0 	beq.w	8001e66 <d_print_comp_inner+0x14b2>
 8000d06:	29ff      	cmp	r1, #255	; 0xff
 8000d08:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8000d0c:	d1f1      	bne.n	8000cf2 <d_print_comp_inner+0x33e>
 8000d0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000d12:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000d16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	4798      	blx	r3
 8000d1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000d22:	3301      	adds	r3, #1
 8000d24:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000d28:	2101      	movs	r1, #1
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e7e3      	b.n	8000cf6 <d_print_comp_inner+0x342>
 8000d2e:	4e32      	ldr	r6, [pc, #200]	; (8000df8 <d_print_comp_inner+0x444>)
 8000d30:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000d34:	f106 0a08 	add.w	sl, r6, #8
 8000d38:	f04f 0900 	mov.w	r9, #0
 8000d3c:	e00a      	b.n	8000d54 <d_print_comp_inner+0x3a0>
 8000d3e:	460b      	mov	r3, r1
 8000d40:	3101      	adds	r1, #1
 8000d42:	45b2      	cmp	sl, r6
 8000d44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000d48:	f804 8003 	strb.w	r8, [r4, r3]
 8000d4c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000d50:	f001 80c5 	beq.w	8001ede <d_print_comp_inner+0x152a>
 8000d54:	29ff      	cmp	r1, #255	; 0xff
 8000d56:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000d5a:	d1f0      	bne.n	8000d3e <d_print_comp_inner+0x38a>
 8000d5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000d60:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000d64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4798      	blx	r3
 8000d6c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000d70:	3301      	adds	r3, #1
 8000d72:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000d76:	2101      	movs	r1, #1
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e7e2      	b.n	8000d42 <d_print_comp_inner+0x38e>
 8000d7c:	4e1f      	ldr	r6, [pc, #124]	; (8000dfc <d_print_comp_inner+0x448>)
 8000d7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000d82:	f106 0a1c 	add.w	sl, r6, #28
 8000d86:	f04f 0900 	mov.w	r9, #0
 8000d8a:	e00a      	b.n	8000da2 <d_print_comp_inner+0x3ee>
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	3101      	adds	r1, #1
 8000d90:	45b2      	cmp	sl, r6
 8000d92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000d96:	f804 8003 	strb.w	r8, [r4, r3]
 8000d9a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000d9e:	f001 805b 	beq.w	8001e58 <d_print_comp_inner+0x14a4>
 8000da2:	29ff      	cmp	r1, #255	; 0xff
 8000da4:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000da8:	d1f0      	bne.n	8000d8c <d_print_comp_inner+0x3d8>
 8000daa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000dae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000db2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000db6:	4620      	mov	r0, r4
 8000db8:	4798      	blx	r3
 8000dba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e7e2      	b.n	8000d90 <d_print_comp_inner+0x3dc>
 8000dca:	4e0d      	ldr	r6, [pc, #52]	; (8000e00 <d_print_comp_inner+0x44c>)
 8000dcc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000dd0:	f106 0a1d 	add.w	sl, r6, #29
 8000dd4:	f04f 0900 	mov.w	r9, #0
 8000dd8:	e01f      	b.n	8000e1a <d_print_comp_inner+0x466>
 8000dda:	bf00      	nop
 8000ddc:	0801bdd8 	.word	0x0801bdd8
 8000de0:	0801bddc 	.word	0x0801bddc
 8000de4:	0801be9b 	.word	0x0801be9b
 8000de8:	0801bc20 	.word	0x0801bc20
 8000dec:	0801bdb0 	.word	0x0801bdb0
 8000df0:	0801bd7b 	.word	0x0801bd7b
 8000df4:	0801be8b 	.word	0x0801be8b
 8000df8:	0801be7b 	.word	0x0801be7b
 8000dfc:	0801be5b 	.word	0x0801be5b
 8000e00:	0801be3b 	.word	0x0801be3b
 8000e04:	460b      	mov	r3, r1
 8000e06:	3101      	adds	r1, #1
 8000e08:	45b2      	cmp	sl, r6
 8000e0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000e0e:	f804 8003 	strb.w	r8, [r4, r3]
 8000e12:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000e16:	f001 80da 	beq.w	8001fce <d_print_comp_inner+0x161a>
 8000e1a:	29ff      	cmp	r1, #255	; 0xff
 8000e1c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000e20:	d1f0      	bne.n	8000e04 <d_print_comp_inner+0x450>
 8000e22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000e26:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000e2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000e2e:	4620      	mov	r0, r4
 8000e30:	4798      	blx	r3
 8000e32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000e36:	3301      	adds	r3, #1
 8000e38:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e7e2      	b.n	8000e08 <d_print_comp_inner+0x454>
 8000e42:	4eca      	ldr	r6, [pc, #808]	; (800116c <d_print_comp_inner+0x7b8>)
 8000e44:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000e48:	f106 0a0a 	add.w	sl, r6, #10
 8000e4c:	f04f 0900 	mov.w	r9, #0
 8000e50:	e00a      	b.n	8000e68 <d_print_comp_inner+0x4b4>
 8000e52:	460b      	mov	r3, r1
 8000e54:	3101      	adds	r1, #1
 8000e56:	45b2      	cmp	sl, r6
 8000e58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000e5c:	f804 8003 	strb.w	r8, [r4, r3]
 8000e60:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000e64:	f000 87e5 	beq.w	8001e32 <d_print_comp_inner+0x147e>
 8000e68:	29ff      	cmp	r1, #255	; 0xff
 8000e6a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8000e6e:	d1f0      	bne.n	8000e52 <d_print_comp_inner+0x49e>
 8000e70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000e74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000e78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	4798      	blx	r3
 8000e80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000e84:	3301      	adds	r3, #1
 8000e86:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e7e2      	b.n	8000e56 <d_print_comp_inner+0x4a2>
 8000e90:	686a      	ldr	r2, [r5, #4]
 8000e92:	49b7      	ldr	r1, [pc, #732]	; (8001170 <d_print_comp_inner+0x7bc>)
 8000e94:	a804      	add	r0, sp, #16
 8000e96:	f016 fa6d 	bl	8017374 <sprintf>
 8000e9a:	a804      	add	r0, sp, #16
 8000e9c:	f007 fb4a 	bl	8008534 <strlen>
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	f43f ae49 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8000ea6:	ad04      	add	r5, sp, #16
 8000ea8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000eac:	182f      	adds	r7, r5, r0
 8000eae:	f04f 0800 	mov.w	r8, #0
 8000eb2:	e009      	b.n	8000ec8 <d_print_comp_inner+0x514>
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	3101      	adds	r1, #1
 8000eb8:	42af      	cmp	r7, r5
 8000eba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000ebe:	54e6      	strb	r6, [r4, r3]
 8000ec0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000ec4:	f43f ae38 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8000ec8:	29ff      	cmp	r1, #255	; 0xff
 8000eca:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000ece:	d1f1      	bne.n	8000eb4 <d_print_comp_inner+0x500>
 8000ed0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000ed4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000ed8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000edc:	4620      	mov	r0, r4
 8000ede:	4798      	blx	r3
 8000ee0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000eea:	2101      	movs	r1, #1
 8000eec:	2300      	movs	r3, #0
 8000eee:	e7e3      	b.n	8000eb8 <d_print_comp_inner+0x504>
 8000ef0:	4ea0      	ldr	r6, [pc, #640]	; (8001174 <d_print_comp_inner+0x7c0>)
 8000ef2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000ef6:	f106 0a16 	add.w	sl, r6, #22
 8000efa:	f04f 0900 	mov.w	r9, #0
 8000efe:	e00a      	b.n	8000f16 <d_print_comp_inner+0x562>
 8000f00:	460b      	mov	r3, r1
 8000f02:	3101      	adds	r1, #1
 8000f04:	45b2      	cmp	sl, r6
 8000f06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000f0a:	f804 8003 	strb.w	r8, [r4, r3]
 8000f0e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000f12:	f001 8055 	beq.w	8001fc0 <d_print_comp_inner+0x160c>
 8000f16:	29ff      	cmp	r1, #255	; 0xff
 8000f18:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000f1c:	d1f0      	bne.n	8000f00 <d_print_comp_inner+0x54c>
 8000f1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000f22:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8000f26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4798      	blx	r3
 8000f2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8000f32:	3301      	adds	r3, #1
 8000f34:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e7e2      	b.n	8000f04 <d_print_comp_inner+0x550>
 8000f3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000f42:	792d      	ldrb	r5, [r5, #4]
 8000f44:	29ff      	cmp	r1, #255	; 0xff
 8000f46:	f001 846f 	beq.w	8002828 <d_print_comp_inner+0x1e74>
 8000f4a:	1c4b      	adds	r3, r1, #1
 8000f4c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8000f50:	5465      	strb	r5, [r4, r1]
 8000f52:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8000f56:	e5ef      	b.n	8000b38 <d_print_comp_inner+0x184>
 8000f58:	686a      	ldr	r2, [r5, #4]
 8000f5a:	f002 f945 	bl	80031e8 <d_print_comp>
 8000f5e:	68aa      	ldr	r2, [r5, #8]
 8000f60:	4639      	mov	r1, r7
 8000f62:	4620      	mov	r0, r4
 8000f64:	f002 f940 	bl	80031e8 <d_print_comp>
 8000f68:	e5e6      	b.n	8000b38 <d_print_comp_inner+0x184>
 8000f6a:	686e      	ldr	r6, [r5, #4]
 8000f6c:	68ad      	ldr	r5, [r5, #8]
 8000f6e:	7833      	ldrb	r3, [r6, #0]
 8000f70:	2b31      	cmp	r3, #49	; 0x31
 8000f72:	f001 82bb 	beq.w	80024ec <d_print_comp_inner+0x1b38>
 8000f76:	2b33      	cmp	r3, #51	; 0x33
 8000f78:	f041 83fe 	bne.w	8002778 <d_print_comp_inner+0x1dc4>
 8000f7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8000f80:	2bff      	cmp	r3, #255	; 0xff
 8000f82:	f001 8731 	beq.w	8002de8 <d_print_comp_inner+0x2434>
 8000f86:	1c59      	adds	r1, r3, #1
 8000f88:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8000f8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000f90:	1d32      	adds	r2, r6, #4
 8000f92:	4639      	mov	r1, r7
 8000f94:	f804 e003 	strb.w	lr, [r4, r3]
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 8000f9e:	f002 febd 	bl	8003d1c <d_print_cast.isra.12>
 8000fa2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000fa6:	29ff      	cmp	r1, #255	; 0xff
 8000fa8:	f001 870d 	beq.w	8002dc6 <d_print_comp_inner+0x2412>
 8000fac:	2329      	movs	r3, #41	; 0x29
 8000fae:	1c4a      	adds	r2, r1, #1
 8000fb0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8000fb4:	5463      	strb	r3, [r4, r1]
 8000fb6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8000fba:	462a      	mov	r2, r5
 8000fbc:	4639      	mov	r1, r7
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f002 ffbe 	bl	8003f40 <d_print_subexpr>
 8000fc4:	e5b8      	b.n	8000b38 <d_print_comp_inner+0x184>
 8000fc6:	686a      	ldr	r2, [r5, #4]
 8000fc8:	f002 ff7c 	bl	8003ec4 <d_print_expr_op>
 8000fcc:	e5b4      	b.n	8000b38 <d_print_comp_inner+0x184>
 8000fce:	4e6a      	ldr	r6, [pc, #424]	; (8001178 <d_print_comp_inner+0x7c4>)
 8000fd0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8000fd4:	f106 0a09 	add.w	sl, r6, #9
 8000fd8:	f04f 0900 	mov.w	r9, #0
 8000fdc:	e00a      	b.n	8000ff4 <d_print_comp_inner+0x640>
 8000fde:	460b      	mov	r3, r1
 8000fe0:	3101      	adds	r1, #1
 8000fe2:	45b2      	cmp	sl, r6
 8000fe4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000fe8:	f804 8003 	strb.w	r8, [r4, r3]
 8000fec:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8000ff0:	f001 8030 	beq.w	8002054 <d_print_comp_inner+0x16a0>
 8000ff4:	29ff      	cmp	r1, #255	; 0xff
 8000ff6:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8000ffa:	d1f0      	bne.n	8000fde <d_print_comp_inner+0x62a>
 8000ffc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001000:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001004:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001008:	4620      	mov	r0, r4
 800100a:	4798      	blx	r3
 800100c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001010:	3301      	adds	r3, #1
 8001012:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001016:	2101      	movs	r1, #1
 8001018:	2300      	movs	r3, #0
 800101a:	e7e2      	b.n	8000fe2 <d_print_comp_inner+0x62e>
 800101c:	4e56      	ldr	r6, [pc, #344]	; (8001178 <d_print_comp_inner+0x7c4>)
 800101e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001022:	f106 0a09 	add.w	sl, r6, #9
 8001026:	f04f 0900 	mov.w	r9, #0
 800102a:	e00a      	b.n	8001042 <d_print_comp_inner+0x68e>
 800102c:	460b      	mov	r3, r1
 800102e:	3101      	adds	r1, #1
 8001030:	45b2      	cmp	sl, r6
 8001032:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001036:	f804 8003 	strb.w	r8, [r4, r3]
 800103a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800103e:	f001 8031 	beq.w	80020a4 <d_print_comp_inner+0x16f0>
 8001042:	29ff      	cmp	r1, #255	; 0xff
 8001044:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001048:	d1f0      	bne.n	800102c <d_print_comp_inner+0x678>
 800104a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800104e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001052:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001056:	4620      	mov	r0, r4
 8001058:	4798      	blx	r3
 800105a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800105e:	3301      	adds	r3, #1
 8001060:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001064:	2101      	movs	r1, #1
 8001066:	2300      	movs	r3, #0
 8001068:	e7e2      	b.n	8001030 <d_print_comp_inner+0x67c>
 800106a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800106e:	4d43      	ldr	r5, [pc, #268]	; (800117c <d_print_comp_inner+0x7c8>)
 8001070:	f8da 7008 	ldr.w	r7, [sl, #8]
 8001074:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001078:	f105 0808 	add.w	r8, r5, #8
 800107c:	f04f 0900 	mov.w	r9, #0
 8001080:	e009      	b.n	8001096 <d_print_comp_inner+0x6e2>
 8001082:	460b      	mov	r3, r1
 8001084:	3101      	adds	r1, #1
 8001086:	45a8      	cmp	r8, r5
 8001088:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800108c:	54e6      	strb	r6, [r4, r3]
 800108e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001092:	f000 8755 	beq.w	8001f40 <d_print_comp_inner+0x158c>
 8001096:	29ff      	cmp	r1, #255	; 0xff
 8001098:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800109c:	d1f1      	bne.n	8001082 <d_print_comp_inner+0x6ce>
 800109e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80010a2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80010a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80010aa:	4620      	mov	r0, r4
 80010ac:	4798      	blx	r3
 80010ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80010b2:	3301      	adds	r3, #1
 80010b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80010b8:	2101      	movs	r1, #1
 80010ba:	2300      	movs	r3, #0
 80010bc:	e7e3      	b.n	8001086 <d_print_comp_inner+0x6d2>
 80010be:	686a      	ldr	r2, [r5, #4]
 80010c0:	68ae      	ldr	r6, [r5, #8]
 80010c2:	b10a      	cbz	r2, 80010c8 <d_print_comp_inner+0x714>
 80010c4:	f002 f890 	bl	80031e8 <d_print_comp>
 80010c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	f001 8486 	beq.w	80029de <d_print_comp_inner+0x202a>
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	257b      	movs	r5, #123	; 0x7b
 80010d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80010da:	4639      	mov	r1, r7
 80010dc:	54e5      	strb	r5, [r4, r3]
 80010de:	4632      	mov	r2, r6
 80010e0:	4620      	mov	r0, r4
 80010e2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80010e6:	f002 f87f 	bl	80031e8 <d_print_comp>
 80010ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80010ee:	29ff      	cmp	r1, #255	; 0xff
 80010f0:	f001 8369 	beq.w	80027c6 <d_print_comp_inner+0x1e12>
 80010f4:	1c4a      	adds	r2, r1, #1
 80010f6:	237d      	movs	r3, #125	; 0x7d
 80010f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80010fc:	5463      	strb	r3, [r4, r1]
 80010fe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001102:	e519      	b.n	8000b38 <d_print_comp_inner+0x184>
 8001104:	686a      	ldr	r2, [r5, #4]
 8001106:	b10a      	cbz	r2, 800110c <d_print_comp_inner+0x758>
 8001108:	f002 f86e 	bl	80031e8 <d_print_comp>
 800110c:	68ab      	ldr	r3, [r5, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f43f ad12 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001114:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8001118:	2efd      	cmp	r6, #253	; 0xfd
 800111a:	f201 830d 	bhi.w	8002738 <d_print_comp_inner+0x1d84>
 800111e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8001180 <d_print_comp_inner+0x7cc>
 8001122:	f04f 0a00 	mov.w	sl, #0
 8001126:	f108 0b02 	add.w	fp, r8, #2
 800112a:	4631      	mov	r1, r6
 800112c:	e009      	b.n	8001142 <d_print_comp_inner+0x78e>
 800112e:	460b      	mov	r3, r1
 8001130:	3101      	adds	r1, #1
 8001132:	45c3      	cmp	fp, r8
 8001134:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001138:	54e6      	strb	r6, [r4, r3]
 800113a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800113e:	f001 8060 	beq.w	8002202 <d_print_comp_inner+0x184e>
 8001142:	29ff      	cmp	r1, #255	; 0xff
 8001144:	f818 6b01 	ldrb.w	r6, [r8], #1
 8001148:	d1f1      	bne.n	800112e <d_print_comp_inner+0x77a>
 800114a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800114e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8001152:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001156:	4620      	mov	r0, r4
 8001158:	4798      	blx	r3
 800115a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800115e:	3301      	adds	r3, #1
 8001160:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001164:	2101      	movs	r1, #1
 8001166:	2300      	movs	r3, #0
 8001168:	e7e3      	b.n	8001132 <d_print_comp_inner+0x77e>
 800116a:	bf00      	nop
 800116c:	0801be1c 	.word	0x0801be1c
 8001170:	0801bc3c 	.word	0x0801bc3c
 8001174:	0801bd7f 	.word	0x0801bd7f
 8001178:	0801bdbf 	.word	0x0801bdbf
 800117c:	0801bdb3 	.word	0x0801bdb3
 8001180:	0801bdb0 	.word	0x0801bdb0
 8001184:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8001188:	2b00      	cmp	r3, #0
 800118a:	f041 8188 	bne.w	800249e <d_print_comp_inner+0x1aea>
 800118e:	686a      	ldr	r2, [r5, #4]
 8001190:	4bd3      	ldr	r3, [pc, #844]	; (80014e0 <d_print_comp_inner+0xb2c>)
 8001192:	6851      	ldr	r1, [r2, #4]
 8001194:	4299      	cmp	r1, r3
 8001196:	f001 817e 	beq.w	8002496 <d_print_comp_inner+0x1ae2>
 800119a:	4639      	mov	r1, r7
 800119c:	4620      	mov	r0, r4
 800119e:	f002 f823 	bl	80031e8 <d_print_comp>
 80011a2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80011a6:	2bff      	cmp	r3, #255	; 0xff
 80011a8:	f001 85c0 	beq.w	8002d2c <d_print_comp_inner+0x2378>
 80011ac:	1c59      	adds	r1, r3, #1
 80011ae:	2220      	movs	r2, #32
 80011b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80011b4:	54e2      	strb	r2, [r4, r3]
 80011b6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80011ba:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f001 8100 	beq.w	80023c4 <d_print_comp_inner+0x1a10>
 80011c4:	4dc7      	ldr	r5, [pc, #796]	; (80014e4 <d_print_comp_inner+0xb30>)
 80011c6:	f04f 0800 	mov.w	r8, #0
 80011ca:	1daf      	adds	r7, r5, #6
 80011cc:	e009      	b.n	80011e2 <d_print_comp_inner+0x82e>
 80011ce:	460b      	mov	r3, r1
 80011d0:	3101      	adds	r1, #1
 80011d2:	42bd      	cmp	r5, r7
 80011d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80011d8:	54e6      	strb	r6, [r4, r3]
 80011da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80011de:	f43f acab 	beq.w	8000b38 <d_print_comp_inner+0x184>
 80011e2:	29ff      	cmp	r1, #255	; 0xff
 80011e4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80011e8:	d1f1      	bne.n	80011ce <d_print_comp_inner+0x81a>
 80011ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80011ee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80011f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80011f6:	4620      	mov	r0, r4
 80011f8:	4798      	blx	r3
 80011fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80011fe:	3301      	adds	r3, #1
 8001200:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001204:	2101      	movs	r1, #1
 8001206:	2300      	movs	r3, #0
 8001208:	e7e3      	b.n	80011d2 <d_print_comp_inner+0x81e>
 800120a:	2301      	movs	r3, #1
 800120c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8001210:	e492      	b.n	8000b38 <d_print_comp_inner+0x184>
 8001212:	4eb5      	ldr	r6, [pc, #724]	; (80014e8 <d_print_comp_inner+0xb34>)
 8001214:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001218:	f106 0a0e 	add.w	sl, r6, #14
 800121c:	f04f 0900 	mov.w	r9, #0
 8001220:	e00a      	b.n	8001238 <d_print_comp_inner+0x884>
 8001222:	460b      	mov	r3, r1
 8001224:	3101      	adds	r1, #1
 8001226:	45b2      	cmp	sl, r6
 8001228:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800122c:	f804 8003 	strb.w	r8, [r4, r3]
 8001230:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001234:	f000 867d 	beq.w	8001f32 <d_print_comp_inner+0x157e>
 8001238:	29ff      	cmp	r1, #255	; 0xff
 800123a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800123e:	d1f0      	bne.n	8001222 <d_print_comp_inner+0x86e>
 8001240:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001244:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001248:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800124c:	4620      	mov	r0, r4
 800124e:	4798      	blx	r3
 8001250:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001254:	3301      	adds	r3, #1
 8001256:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800125a:	2101      	movs	r1, #1
 800125c:	2300      	movs	r3, #0
 800125e:	e7e2      	b.n	8001226 <d_print_comp_inner+0x872>
 8001260:	686a      	ldr	r2, [r5, #4]
 8001262:	7811      	ldrb	r1, [r2, #0]
 8001264:	2927      	cmp	r1, #39	; 0x27
 8001266:	f001 81a8 	beq.w	80025ba <d_print_comp_inner+0x1c06>
 800126a:	2600      	movs	r6, #0
 800126c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001270:	29ff      	cmp	r1, #255	; 0xff
 8001272:	f001 842a 	beq.w	8002aca <d_print_comp_inner+0x2116>
 8001276:	1c4a      	adds	r2, r1, #1
 8001278:	2328      	movs	r3, #40	; 0x28
 800127a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800127e:	5463      	strb	r3, [r4, r1]
 8001280:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001284:	686a      	ldr	r2, [r5, #4]
 8001286:	4639      	mov	r1, r7
 8001288:	4620      	mov	r0, r4
 800128a:	f001 ffad 	bl	80031e8 <d_print_comp>
 800128e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	f001 83ef 	beq.w	8002a76 <d_print_comp_inner+0x20c2>
 8001298:	1c59      	adds	r1, r3, #1
 800129a:	2229      	movs	r2, #41	; 0x29
 800129c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80012a0:	54e2      	strb	r2, [r4, r3]
 80012a2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80012a6:	782b      	ldrb	r3, [r5, #0]
 80012a8:	2b3c      	cmp	r3, #60	; 0x3c
 80012aa:	f001 8280 	beq.w	80027ae <d_print_comp_inner+0x1dfa>
 80012ae:	2e08      	cmp	r6, #8
 80012b0:	f001 8223 	beq.w	80026fa <d_print_comp_inner+0x1d46>
 80012b4:	68aa      	ldr	r2, [r5, #8]
 80012b6:	4639      	mov	r1, r7
 80012b8:	4620      	mov	r0, r4
 80012ba:	f001 ff95 	bl	80031e8 <d_print_comp>
 80012be:	e43b      	b.n	8000b38 <d_print_comp_inner+0x184>
 80012c0:	2301      	movs	r3, #1
 80012c2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80012c6:	e437      	b.n	8000b38 <d_print_comp_inner+0x184>
 80012c8:	ab14      	add	r3, sp, #80	; 0x50
 80012ca:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80012ce:	f843 2d40 	str.w	r2, [r3, #-64]!
 80012d2:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80012d6:	68aa      	ldr	r2, [r5, #8]
 80012d8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80012dc:	9307      	str	r3, [sp, #28]
 80012de:	2600      	movs	r6, #0
 80012e0:	9505      	str	r5, [sp, #20]
 80012e2:	9606      	str	r6, [sp, #24]
 80012e4:	f001 ff80 	bl	80031e8 <d_print_comp>
 80012e8:	9b06      	ldr	r3, [sp, #24]
 80012ea:	b923      	cbnz	r3, 80012f6 <d_print_comp_inner+0x942>
 80012ec:	462a      	mov	r2, r5
 80012ee:	4639      	mov	r1, r7
 80012f0:	4620      	mov	r0, r4
 80012f2:	f001 ff89 	bl	8003208 <d_print_mod>
 80012f6:	9b04      	ldr	r3, [sp, #16]
 80012f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80012fc:	e41c      	b.n	8000b38 <d_print_comp_inner+0x184>
 80012fe:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8001302:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8001306:	f849 bd40 	str.w	fp, [r9, #-64]!
 800130a:	2200      	movs	r2, #0
 800130c:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001310:	f8cd b000 	str.w	fp, [sp]
 8001314:	4659      	mov	r1, fp
 8001316:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 800131a:	9505      	str	r5, [sp, #20]
 800131c:	9206      	str	r2, [sp, #24]
 800131e:	9307      	str	r3, [sp, #28]
 8001320:	2900      	cmp	r1, #0
 8001322:	f001 8587 	beq.w	8002e34 <d_print_comp_inner+0x2480>
 8001326:	684b      	ldr	r3, [r1, #4]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	3b19      	subs	r3, #25
 800132c:	2b02      	cmp	r3, #2
 800132e:	f201 8581 	bhi.w	8002e34 <d_print_comp_inner+0x2480>
 8001332:	46ac      	mov	ip, r5
 8001334:	f04f 0801 	mov.w	r8, #1
 8001338:	460e      	mov	r6, r1
 800133a:	464d      	mov	r5, r9
 800133c:	e004      	b.n	8001348 <d_print_comp_inner+0x994>
 800133e:	6873      	ldr	r3, [r6, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b19      	subs	r3, #25
 8001344:	2b02      	cmp	r3, #2
 8001346:	d81d      	bhi.n	8001384 <d_print_comp_inner+0x9d0>
 8001348:	68b3      	ldr	r3, [r6, #8]
 800134a:	ea4f 1e08 	mov.w	lr, r8, lsl #4
 800134e:	aa14      	add	r2, sp, #80	; 0x50
 8001350:	eb02 0b0e 	add.w	fp, r2, lr
 8001354:	b99b      	cbnz	r3, 800137e <d_print_comp_inner+0x9ca>
 8001356:	f1b8 0f03 	cmp.w	r8, #3
 800135a:	f201 82ce 	bhi.w	80028fa <d_print_comp_inner+0x1f46>
 800135e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001362:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 8001366:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 800136a:	f84b 5c40 	str.w	r5, [fp, #-64]
 800136e:	2301      	movs	r3, #1
 8001370:	eb09 050e 	add.w	r5, r9, lr
 8001374:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8001378:	f108 0801 	add.w	r8, r8, #1
 800137c:	60b3      	str	r3, [r6, #8]
 800137e:	6836      	ldr	r6, [r6, #0]
 8001380:	2e00      	cmp	r6, #0
 8001382:	d1dc      	bne.n	800133e <d_print_comp_inner+0x98a>
 8001384:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8001388:	4639      	mov	r1, r7
 800138a:	4620      	mov	r0, r4
 800138c:	4665      	mov	r5, ip
 800138e:	f001 ff2b 	bl	80031e8 <d_print_comp>
 8001392:	9b06      	ldr	r3, [sp, #24]
 8001394:	9a00      	ldr	r2, [sp, #0]
 8001396:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800139a:	2b00      	cmp	r3, #0
 800139c:	f47f abcc 	bne.w	8000b38 <d_print_comp_inner+0x184>
 80013a0:	f1b8 0f01 	cmp.w	r8, #1
 80013a4:	d00e      	beq.n	80013c4 <d_print_comp_inner+0xa10>
 80013a6:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 80013aa:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80013ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80013b2:	4639      	mov	r1, r7
 80013b4:	4620      	mov	r0, r4
 80013b6:	f001 ff27 	bl	8003208 <d_print_mod>
 80013ba:	f1b8 0f01 	cmp.w	r8, #1
 80013be:	f1a9 0910 	sub.w	r9, r9, #16
 80013c2:	d1f2      	bne.n	80013aa <d_print_comp_inner+0x9f6>
 80013c4:	1d2a      	adds	r2, r5, #4
 80013c6:	4639      	mov	r1, r7
 80013c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80013cc:	4620      	mov	r0, r4
 80013ce:	f002 fad5 	bl	800397c <d_print_array_type.isra.10>
 80013d2:	f7ff bbb1 	b.w	8000b38 <d_print_comp_inner+0x184>
 80013d6:	068b      	lsls	r3, r1, #26
 80013d8:	f101 804a 	bmi.w	8002470 <d_print_comp_inner+0x1abc>
 80013dc:	686b      	ldr	r3, [r5, #4]
 80013de:	b11b      	cbz	r3, 80013e8 <d_print_comp_inner+0xa34>
 80013e0:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 80013e4:	f001 82cc 	beq.w	8002980 <d_print_comp_inner+0x1fcc>
 80013e8:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 80013ec:	f105 0208 	add.w	r2, r5, #8
 80013f0:	4639      	mov	r1, r7
 80013f2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80013f6:	4620      	mov	r0, r4
 80013f8:	f002 fb9c 	bl	8003b34 <d_print_function_type.isra.11>
 80013fc:	f7ff bb9c 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001400:	68ab      	ldr	r3, [r5, #8]
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	2a39      	cmp	r2, #57	; 0x39
 8001406:	f47f ab9f 	bne.w	8000b48 <d_print_comp_inner+0x194>
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	7811      	ldrb	r1, [r2, #0]
 800140e:	293a      	cmp	r1, #58	; 0x3a
 8001410:	f47f ab9a 	bne.w	8000b48 <d_print_comp_inner+0x194>
 8001414:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8001418:	4934      	ldr	r1, [pc, #208]	; (80014ec <d_print_comp_inner+0xb38>)
 800141a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800141e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8001422:	6800      	ldr	r0, [r0, #0]
 8001424:	6856      	ldr	r6, [r2, #4]
 8001426:	6895      	ldr	r5, [r2, #8]
 8001428:	f007 f87a 	bl	8008520 <strcmp>
 800142c:	2800      	cmp	r0, #0
 800142e:	f001 850f 	beq.w	8002e50 <d_print_comp_inner+0x249c>
 8001432:	2204      	movs	r2, #4
 8001434:	492e      	ldr	r1, [pc, #184]	; (80014f0 <d_print_comp_inner+0xb3c>)
 8001436:	4620      	mov	r0, r4
 8001438:	f7fe fffe 	bl	8000438 <d_append_buffer>
 800143c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001440:	b183      	cbz	r3, 8001464 <d_print_comp_inner+0xab0>
 8001442:	4639      	mov	r1, r7
 8001444:	4642      	mov	r2, r8
 8001446:	4620      	mov	r0, r4
 8001448:	f002 fd7a 	bl	8003f40 <d_print_subexpr>
 800144c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001450:	29ff      	cmp	r1, #255	; 0xff
 8001452:	f001 862a 	beq.w	80030aa <d_print_comp_inner+0x26f6>
 8001456:	2320      	movs	r3, #32
 8001458:	1c4a      	adds	r2, r1, #1
 800145a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800145e:	5463      	strb	r3, [r4, r1]
 8001460:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001464:	4632      	mov	r2, r6
 8001466:	4639      	mov	r1, r7
 8001468:	4620      	mov	r0, r4
 800146a:	f001 febd 	bl	80031e8 <d_print_comp>
 800146e:	2d00      	cmp	r5, #0
 8001470:	f43f ab62 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001474:	462a      	mov	r2, r5
 8001476:	4639      	mov	r1, r7
 8001478:	4620      	mov	r0, r4
 800147a:	f002 fd61 	bl	8003f40 <d_print_subexpr>
 800147e:	f7ff bb5b 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001482:	4e1c      	ldr	r6, [pc, #112]	; (80014f4 <d_print_comp_inner+0xb40>)
 8001484:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001488:	f106 0a11 	add.w	sl, r6, #17
 800148c:	f04f 0900 	mov.w	r9, #0
 8001490:	e00a      	b.n	80014a8 <d_print_comp_inner+0xaf4>
 8001492:	460b      	mov	r3, r1
 8001494:	3101      	adds	r1, #1
 8001496:	4556      	cmp	r6, sl
 8001498:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800149c:	f804 8003 	strb.w	r8, [r4, r3]
 80014a0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80014a4:	f000 84be 	beq.w	8001e24 <d_print_comp_inner+0x1470>
 80014a8:	29ff      	cmp	r1, #255	; 0xff
 80014aa:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80014ae:	d1f0      	bne.n	8001492 <d_print_comp_inner+0xade>
 80014b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80014b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80014b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80014bc:	4620      	mov	r0, r4
 80014be:	4798      	blx	r3
 80014c0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80014c4:	3301      	adds	r3, #1
 80014c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80014ca:	2101      	movs	r1, #1
 80014cc:	2300      	movs	r3, #0
 80014ce:	e7e2      	b.n	8001496 <d_print_comp_inner+0xae2>
 80014d0:	4e09      	ldr	r6, [pc, #36]	; (80014f8 <d_print_comp_inner+0xb44>)
 80014d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80014d6:	f106 0a15 	add.w	sl, r6, #21
 80014da:	f04f 0900 	mov.w	r9, #0
 80014de:	e018      	b.n	8001512 <d_print_comp_inner+0xb5e>
 80014e0:	0801a660 	.word	0x0801a660
 80014e4:	0801bda0 	.word	0x0801bda0
 80014e8:	0801be0b 	.word	0x0801be0b
 80014ec:	0801bde0 	.word	0x0801bde0
 80014f0:	0801bde8 	.word	0x0801bde8
 80014f4:	0801bcc7 	.word	0x0801bcc7
 80014f8:	0801bcc3 	.word	0x0801bcc3
 80014fc:	460b      	mov	r3, r1
 80014fe:	3101      	adds	r1, #1
 8001500:	45b2      	cmp	sl, r6
 8001502:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001506:	f804 8003 	strb.w	r8, [r4, r3]
 800150a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800150e:	f000 8482 	beq.w	8001e16 <d_print_comp_inner+0x1462>
 8001512:	29ff      	cmp	r1, #255	; 0xff
 8001514:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001518:	d1f0      	bne.n	80014fc <d_print_comp_inner+0xb48>
 800151a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800151e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001522:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001526:	4620      	mov	r0, r4
 8001528:	4798      	blx	r3
 800152a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800152e:	3301      	adds	r3, #1
 8001530:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001534:	2101      	movs	r1, #1
 8001536:	2300      	movs	r3, #0
 8001538:	e7e2      	b.n	8001500 <d_print_comp_inner+0xb4c>
 800153a:	4eda      	ldr	r6, [pc, #872]	; (80018a4 <d_print_comp_inner+0xef0>)
 800153c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001540:	f106 0a10 	add.w	sl, r6, #16
 8001544:	f04f 0900 	mov.w	r9, #0
 8001548:	e00a      	b.n	8001560 <d_print_comp_inner+0xbac>
 800154a:	460b      	mov	r3, r1
 800154c:	3101      	adds	r1, #1
 800154e:	45b2      	cmp	sl, r6
 8001550:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001554:	f804 8003 	strb.w	r8, [r4, r3]
 8001558:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800155c:	f000 8454 	beq.w	8001e08 <d_print_comp_inner+0x1454>
 8001560:	29ff      	cmp	r1, #255	; 0xff
 8001562:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001566:	d1f0      	bne.n	800154a <d_print_comp_inner+0xb96>
 8001568:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800156c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001570:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001574:	4620      	mov	r0, r4
 8001576:	4798      	blx	r3
 8001578:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800157c:	3301      	adds	r3, #1
 800157e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001582:	2101      	movs	r1, #1
 8001584:	2300      	movs	r3, #0
 8001586:	e7e2      	b.n	800154e <d_print_comp_inner+0xb9a>
 8001588:	4ec7      	ldr	r6, [pc, #796]	; (80018a8 <d_print_comp_inner+0xef4>)
 800158a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800158e:	f106 0a12 	add.w	sl, r6, #18
 8001592:	f04f 0900 	mov.w	r9, #0
 8001596:	e00a      	b.n	80015ae <d_print_comp_inner+0xbfa>
 8001598:	460b      	mov	r3, r1
 800159a:	3101      	adds	r1, #1
 800159c:	45b2      	cmp	sl, r6
 800159e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80015a2:	f804 8003 	strb.w	r8, [r4, r3]
 80015a6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80015aa:	f000 85d5 	beq.w	8002158 <d_print_comp_inner+0x17a4>
 80015ae:	29ff      	cmp	r1, #255	; 0xff
 80015b0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80015b4:	d1f0      	bne.n	8001598 <d_print_comp_inner+0xbe4>
 80015b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80015ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80015be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80015c2:	4620      	mov	r0, r4
 80015c4:	4798      	blx	r3
 80015c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80015ca:	3301      	adds	r3, #1
 80015cc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80015d0:	2101      	movs	r1, #1
 80015d2:	2300      	movs	r3, #0
 80015d4:	e7e2      	b.n	800159c <d_print_comp_inner+0xbe8>
 80015d6:	68af      	ldr	r7, [r5, #8]
 80015d8:	686d      	ldr	r5, [r5, #4]
 80015da:	2f00      	cmp	r7, #0
 80015dc:	f43f aaac 	beq.w	8000b38 <d_print_comp_inner+0x184>
 80015e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80015e4:	442f      	add	r7, r5
 80015e6:	f04f 0800 	mov.w	r8, #0
 80015ea:	e009      	b.n	8001600 <d_print_comp_inner+0xc4c>
 80015ec:	460b      	mov	r3, r1
 80015ee:	3101      	adds	r1, #1
 80015f0:	42af      	cmp	r7, r5
 80015f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80015f6:	54e6      	strb	r6, [r4, r3]
 80015f8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80015fc:	f43f aa9c 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001600:	29ff      	cmp	r1, #255	; 0xff
 8001602:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001606:	d1f1      	bne.n	80015ec <d_print_comp_inner+0xc38>
 8001608:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800160c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001610:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001614:	4620      	mov	r0, r4
 8001616:	4798      	blx	r3
 8001618:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800161c:	3301      	adds	r3, #1
 800161e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001622:	2101      	movs	r1, #1
 8001624:	2300      	movs	r3, #0
 8001626:	e7e3      	b.n	80015f0 <d_print_comp_inner+0xc3c>
 8001628:	4ea0      	ldr	r6, [pc, #640]	; (80018ac <d_print_comp_inner+0xef8>)
 800162a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800162e:	f106 0a11 	add.w	sl, r6, #17
 8001632:	f04f 0900 	mov.w	r9, #0
 8001636:	e00a      	b.n	800164e <d_print_comp_inner+0xc9a>
 8001638:	460b      	mov	r3, r1
 800163a:	3101      	adds	r1, #1
 800163c:	45b2      	cmp	sl, r6
 800163e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001642:	f804 8003 	strb.w	r8, [r4, r3]
 8001646:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800164a:	f000 858c 	beq.w	8002166 <d_print_comp_inner+0x17b2>
 800164e:	29ff      	cmp	r1, #255	; 0xff
 8001650:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001654:	d1f0      	bne.n	8001638 <d_print_comp_inner+0xc84>
 8001656:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800165a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800165e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001662:	4620      	mov	r0, r4
 8001664:	4798      	blx	r3
 8001666:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800166a:	3301      	adds	r3, #1
 800166c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001670:	2101      	movs	r1, #1
 8001672:	2300      	movs	r3, #0
 8001674:	e7e2      	b.n	800163c <d_print_comp_inner+0xc88>
 8001676:	4e8e      	ldr	r6, [pc, #568]	; (80018b0 <d_print_comp_inner+0xefc>)
 8001678:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800167c:	f106 0a15 	add.w	sl, r6, #21
 8001680:	f04f 0900 	mov.w	r9, #0
 8001684:	e00a      	b.n	800169c <d_print_comp_inner+0xce8>
 8001686:	460b      	mov	r3, r1
 8001688:	3101      	adds	r1, #1
 800168a:	45b2      	cmp	sl, r6
 800168c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001690:	f804 8003 	strb.w	r8, [r4, r3]
 8001694:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001698:	f000 8533 	beq.w	8002102 <d_print_comp_inner+0x174e>
 800169c:	29ff      	cmp	r1, #255	; 0xff
 800169e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80016a2:	d1f0      	bne.n	8001686 <d_print_comp_inner+0xcd2>
 80016a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80016a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80016ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80016b0:	4620      	mov	r0, r4
 80016b2:	4798      	blx	r3
 80016b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80016b8:	3301      	adds	r3, #1
 80016ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80016be:	2101      	movs	r1, #1
 80016c0:	2300      	movs	r3, #0
 80016c2:	e7e2      	b.n	800168a <d_print_comp_inner+0xcd6>
 80016c4:	4e7b      	ldr	r6, [pc, #492]	; (80018b4 <d_print_comp_inner+0xf00>)
 80016c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80016ca:	f106 0a19 	add.w	sl, r6, #25
 80016ce:	f04f 0900 	mov.w	r9, #0
 80016d2:	e00a      	b.n	80016ea <d_print_comp_inner+0xd36>
 80016d4:	460b      	mov	r3, r1
 80016d6:	3101      	adds	r1, #1
 80016d8:	45b2      	cmp	sl, r6
 80016da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80016de:	f804 8003 	strb.w	r8, [r4, r3]
 80016e2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80016e6:	f000 8545 	beq.w	8002174 <d_print_comp_inner+0x17c0>
 80016ea:	29ff      	cmp	r1, #255	; 0xff
 80016ec:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80016f0:	d1f0      	bne.n	80016d4 <d_print_comp_inner+0xd20>
 80016f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80016f6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80016fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80016fe:	4620      	mov	r0, r4
 8001700:	4798      	blx	r3
 8001702:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001706:	3301      	adds	r3, #1
 8001708:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800170c:	2101      	movs	r1, #1
 800170e:	2300      	movs	r3, #0
 8001710:	e7e2      	b.n	80016d8 <d_print_comp_inner+0xd24>
 8001712:	4e69      	ldr	r6, [pc, #420]	; (80018b8 <d_print_comp_inner+0xf04>)
 8001714:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001718:	f106 0a16 	add.w	sl, r6, #22
 800171c:	f04f 0900 	mov.w	r9, #0
 8001720:	e00a      	b.n	8001738 <d_print_comp_inner+0xd84>
 8001722:	460b      	mov	r3, r1
 8001724:	3101      	adds	r1, #1
 8001726:	45b2      	cmp	sl, r6
 8001728:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800172c:	f804 8003 	strb.w	r8, [r4, r3]
 8001730:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001734:	f000 84d7 	beq.w	80020e6 <d_print_comp_inner+0x1732>
 8001738:	29ff      	cmp	r1, #255	; 0xff
 800173a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800173e:	d1f0      	bne.n	8001722 <d_print_comp_inner+0xd6e>
 8001740:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001744:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001748:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800174c:	4620      	mov	r0, r4
 800174e:	4798      	blx	r3
 8001750:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001754:	3301      	adds	r3, #1
 8001756:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800175a:	2101      	movs	r1, #1
 800175c:	2300      	movs	r3, #0
 800175e:	e7e2      	b.n	8001726 <d_print_comp_inner+0xd72>
 8001760:	4e56      	ldr	r6, [pc, #344]	; (80018bc <d_print_comp_inner+0xf08>)
 8001762:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001766:	f106 0a13 	add.w	sl, r6, #19
 800176a:	f04f 0900 	mov.w	r9, #0
 800176e:	e00a      	b.n	8001786 <d_print_comp_inner+0xdd2>
 8001770:	460b      	mov	r3, r1
 8001772:	3101      	adds	r1, #1
 8001774:	4556      	cmp	r6, sl
 8001776:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800177a:	f804 8003 	strb.w	r8, [r4, r3]
 800177e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001782:	f000 84b7 	beq.w	80020f4 <d_print_comp_inner+0x1740>
 8001786:	29ff      	cmp	r1, #255	; 0xff
 8001788:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800178c:	d1f0      	bne.n	8001770 <d_print_comp_inner+0xdbc>
 800178e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001792:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001796:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800179a:	4620      	mov	r0, r4
 800179c:	4798      	blx	r3
 800179e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80017a2:	3301      	adds	r3, #1
 80017a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80017a8:	2101      	movs	r1, #1
 80017aa:	2300      	movs	r3, #0
 80017ac:	e7e2      	b.n	8001774 <d_print_comp_inner+0xdc0>
 80017ae:	4e44      	ldr	r6, [pc, #272]	; (80018c0 <d_print_comp_inner+0xf0c>)
 80017b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80017b4:	f106 0a0f 	add.w	sl, r6, #15
 80017b8:	f04f 0900 	mov.w	r9, #0
 80017bc:	e00a      	b.n	80017d4 <d_print_comp_inner+0xe20>
 80017be:	460b      	mov	r3, r1
 80017c0:	3101      	adds	r1, #1
 80017c2:	4556      	cmp	r6, sl
 80017c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80017c8:	f804 8003 	strb.w	r8, [r4, r3]
 80017cc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80017d0:	f000 830c 	beq.w	8001dec <d_print_comp_inner+0x1438>
 80017d4:	29ff      	cmp	r1, #255	; 0xff
 80017d6:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80017da:	d1f0      	bne.n	80017be <d_print_comp_inner+0xe0a>
 80017dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80017e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80017e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80017e8:	4620      	mov	r0, r4
 80017ea:	4798      	blx	r3
 80017ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80017f0:	3301      	adds	r3, #1
 80017f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80017f6:	2101      	movs	r1, #1
 80017f8:	2300      	movs	r3, #0
 80017fa:	e7e2      	b.n	80017c2 <d_print_comp_inner+0xe0e>
 80017fc:	4e31      	ldr	r6, [pc, #196]	; (80018c4 <d_print_comp_inner+0xf10>)
 80017fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001802:	f106 0a1a 	add.w	sl, r6, #26
 8001806:	f04f 0900 	mov.w	r9, #0
 800180a:	e00a      	b.n	8001822 <d_print_comp_inner+0xe6e>
 800180c:	460b      	mov	r3, r1
 800180e:	3101      	adds	r1, #1
 8001810:	4556      	cmp	r6, sl
 8001812:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001816:	f804 8003 	strb.w	r8, [r4, r3]
 800181a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800181e:	f000 82ec 	beq.w	8001dfa <d_print_comp_inner+0x1446>
 8001822:	29ff      	cmp	r1, #255	; 0xff
 8001824:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001828:	d1f0      	bne.n	800180c <d_print_comp_inner+0xe58>
 800182a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800182e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001832:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001836:	4620      	mov	r0, r4
 8001838:	4798      	blx	r3
 800183a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800183e:	3301      	adds	r3, #1
 8001840:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001844:	2101      	movs	r1, #1
 8001846:	2300      	movs	r3, #0
 8001848:	e7e2      	b.n	8001810 <d_print_comp_inner+0xe5c>
 800184a:	f011 0704 	ands.w	r7, r1, #4
 800184e:	f040 8539 	bne.w	80022c4 <d_print_comp_inner+0x1910>
 8001852:	686a      	ldr	r2, [r5, #4]
 8001854:	6853      	ldr	r3, [r2, #4]
 8001856:	6815      	ldr	r5, [r2, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f43f a96d 	beq.w	8000b38 <d_print_comp_inner+0x184>
 800185e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001862:	eb05 0803 	add.w	r8, r5, r3
 8001866:	e009      	b.n	800187c <d_print_comp_inner+0xec8>
 8001868:	460b      	mov	r3, r1
 800186a:	3101      	adds	r1, #1
 800186c:	4545      	cmp	r5, r8
 800186e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001872:	54e6      	strb	r6, [r4, r3]
 8001874:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001878:	f43f a95e 	beq.w	8000b38 <d_print_comp_inner+0x184>
 800187c:	29ff      	cmp	r1, #255	; 0xff
 800187e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001882:	d1f1      	bne.n	8001868 <d_print_comp_inner+0xeb4>
 8001884:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001888:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800188c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001890:	4620      	mov	r0, r4
 8001892:	4798      	blx	r3
 8001894:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001898:	3301      	adds	r3, #1
 800189a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800189e:	2101      	movs	r1, #1
 80018a0:	2300      	movs	r3, #0
 80018a2:	e7e3      	b.n	800186c <d_print_comp_inner+0xeb8>
 80018a4:	0801bcaf 	.word	0x0801bcaf
 80018a8:	0801bc9b 	.word	0x0801bc9b
 80018ac:	0801bd67 	.word	0x0801bd67
 80018b0:	0801bd4f 	.word	0x0801bd4f
 80018b4:	0801bd33 	.word	0x0801bd33
 80018b8:	0801bd1b 	.word	0x0801bd1b
 80018bc:	0801bd07 	.word	0x0801bd07
 80018c0:	0801bcf7 	.word	0x0801bcf7
 80018c4:	0801bcdb 	.word	0x0801bcdb
 80018c8:	6868      	ldr	r0, [r5, #4]
 80018ca:	7803      	ldrb	r3, [r0, #0]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	f000 8699 	beq.w	8002604 <d_print_comp_inner+0x1c50>
 80018d2:	f04f 0800 	mov.w	r8, #0
 80018d6:	2b23      	cmp	r3, #35	; 0x23
 80018d8:	f000 8596 	beq.w	8002408 <d_print_comp_inner+0x1a54>
 80018dc:	782a      	ldrb	r2, [r5, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	f000 8592 	beq.w	8002408 <d_print_comp_inner+0x1a54>
 80018e4:	2b24      	cmp	r3, #36	; 0x24
 80018e6:	f001 808d 	beq.w	8002a04 <d_print_comp_inner+0x2050>
 80018ea:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 80018ee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 80018f2:	9505      	str	r5, [sp, #20]
 80018f4:	ab14      	add	r3, sp, #80	; 0x50
 80018f6:	2100      	movs	r1, #0
 80018f8:	f843 0d40 	str.w	r0, [r3, #-64]!
 80018fc:	9106      	str	r1, [sp, #24]
 80018fe:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001902:	9207      	str	r2, [sp, #28]
 8001904:	686a      	ldr	r2, [r5, #4]
 8001906:	4639      	mov	r1, r7
 8001908:	4620      	mov	r0, r4
 800190a:	f001 fc6d 	bl	80031e8 <d_print_comp>
 800190e:	9b06      	ldr	r3, [sp, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 848d 	beq.w	8002230 <d_print_comp_inner+0x187c>
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800191c:	f1b8 0f00 	cmp.w	r8, #0
 8001920:	f43f a90a 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001924:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8001928:	f7ff b906 	b.w	8000b38 <d_print_comp_inner+0x184>
 800192c:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8001930:	f04f 0800 	mov.w	r8, #0
 8001934:	e7db      	b.n	80018ee <d_print_comp_inner+0xf3a>
 8001936:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 800193a:	f1bc 0f00 	cmp.w	ip, #0
 800193e:	f001 8321 	beq.w	8002f84 <d_print_comp_inner+0x25d0>
 8001942:	4662      	mov	r2, ip
 8001944:	6891      	ldr	r1, [r2, #8]
 8001946:	b951      	cbnz	r1, 800195e <d_print_comp_inner+0xfaa>
 8001948:	6850      	ldr	r0, [r2, #4]
 800194a:	7800      	ldrb	r0, [r0, #0]
 800194c:	f1a0 0e19 	sub.w	lr, r0, #25
 8001950:	f1be 0f02 	cmp.w	lr, #2
 8001954:	f200 8705 	bhi.w	8002762 <d_print_comp_inner+0x1dae>
 8001958:	4283      	cmp	r3, r0
 800195a:	f000 8706 	beq.w	800276a <d_print_comp_inner+0x1db6>
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	2a00      	cmp	r2, #0
 8001962:	d1ef      	bne.n	8001944 <d_print_comp_inner+0xf90>
 8001964:	4660      	mov	r0, ip
 8001966:	4690      	mov	r8, r2
 8001968:	e7c1      	b.n	80018ee <d_print_comp_inner+0xf3a>
 800196a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800196e:	29ff      	cmp	r1, #255	; 0xff
 8001970:	f000 876b 	beq.w	800284a <d_print_comp_inner+0x1e96>
 8001974:	1c4a      	adds	r2, r1, #1
 8001976:	237e      	movs	r3, #126	; 0x7e
 8001978:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800197c:	5463      	strb	r3, [r4, r1]
 800197e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001982:	4639      	mov	r1, r7
 8001984:	68aa      	ldr	r2, [r5, #8]
 8001986:	4620      	mov	r0, r4
 8001988:	f001 fc2e 	bl	80031e8 <d_print_comp>
 800198c:	f7ff b8d4 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001990:	686a      	ldr	r2, [r5, #4]
 8001992:	f001 fc29 	bl	80031e8 <d_print_comp>
 8001996:	f7ff b8cf 	b.w	8000b38 <d_print_comp_inner+0x184>
 800199a:	4edd      	ldr	r6, [pc, #884]	; (8001d10 <d_print_comp_inner+0x135c>)
 800199c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80019a0:	f106 0a0d 	add.w	sl, r6, #13
 80019a4:	f04f 0900 	mov.w	r9, #0
 80019a8:	e00a      	b.n	80019c0 <d_print_comp_inner+0x100c>
 80019aa:	460b      	mov	r3, r1
 80019ac:	3101      	adds	r1, #1
 80019ae:	45b2      	cmp	sl, r6
 80019b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80019b4:	f804 8003 	strb.w	r8, [r4, r3]
 80019b8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80019bc:	f000 83e8 	beq.w	8002190 <d_print_comp_inner+0x17dc>
 80019c0:	29ff      	cmp	r1, #255	; 0xff
 80019c2:	f816 8b01 	ldrb.w	r8, [r6], #1
 80019c6:	d1f0      	bne.n	80019aa <d_print_comp_inner+0xff6>
 80019c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80019cc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80019d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80019d4:	4620      	mov	r0, r4
 80019d6:	4798      	blx	r3
 80019d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80019dc:	3301      	adds	r3, #1
 80019de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80019e2:	2101      	movs	r1, #1
 80019e4:	2300      	movs	r3, #0
 80019e6:	e7e2      	b.n	80019ae <d_print_comp_inner+0xffa>
 80019e8:	4eca      	ldr	r6, [pc, #808]	; (8001d14 <d_print_comp_inner+0x1360>)
 80019ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80019ee:	f106 0a18 	add.w	sl, r6, #24
 80019f2:	f04f 0900 	mov.w	r9, #0
 80019f6:	e00a      	b.n	8001a0e <d_print_comp_inner+0x105a>
 80019f8:	460b      	mov	r3, r1
 80019fa:	3101      	adds	r1, #1
 80019fc:	45b2      	cmp	sl, r6
 80019fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001a02:	f804 8003 	strb.w	r8, [r4, r3]
 8001a06:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001a0a:	f000 83c8 	beq.w	800219e <d_print_comp_inner+0x17ea>
 8001a0e:	29ff      	cmp	r1, #255	; 0xff
 8001a10:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001a14:	d1f0      	bne.n	80019f8 <d_print_comp_inner+0x1044>
 8001a16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001a1a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001a1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001a22:	4620      	mov	r0, r4
 8001a24:	4798      	blx	r3
 8001a26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001a30:	2101      	movs	r1, #1
 8001a32:	2300      	movs	r3, #0
 8001a34:	e7e2      	b.n	80019fc <d_print_comp_inner+0x1048>
 8001a36:	4eb8      	ldr	r6, [pc, #736]	; (8001d18 <d_print_comp_inner+0x1364>)
 8001a38:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001a3c:	f106 0a08 	add.w	sl, r6, #8
 8001a40:	f04f 0900 	mov.w	r9, #0
 8001a44:	e00a      	b.n	8001a5c <d_print_comp_inner+0x10a8>
 8001a46:	460b      	mov	r3, r1
 8001a48:	3101      	adds	r1, #1
 8001a4a:	45b2      	cmp	sl, r6
 8001a4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001a50:	f804 8003 	strb.w	r8, [r4, r3]
 8001a54:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001a58:	f000 833e 	beq.w	80020d8 <d_print_comp_inner+0x1724>
 8001a5c:	29ff      	cmp	r1, #255	; 0xff
 8001a5e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8001a62:	d1f0      	bne.n	8001a46 <d_print_comp_inner+0x1092>
 8001a64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001a68:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001a6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001a70:	4620      	mov	r0, r4
 8001a72:	4798      	blx	r3
 8001a74:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2300      	movs	r3, #0
 8001a82:	e7e2      	b.n	8001a4a <d_print_comp_inner+0x1096>
 8001a84:	4ea5      	ldr	r6, [pc, #660]	; (8001d1c <d_print_comp_inner+0x1368>)
 8001a86:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001a8a:	f106 0a0b 	add.w	sl, r6, #11
 8001a8e:	f04f 0900 	mov.w	r9, #0
 8001a92:	e00a      	b.n	8001aaa <d_print_comp_inner+0x10f6>
 8001a94:	460b      	mov	r3, r1
 8001a96:	3101      	adds	r1, #1
 8001a98:	45b2      	cmp	sl, r6
 8001a9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001a9e:	f804 8003 	strb.w	r8, [r4, r3]
 8001aa2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8001aa6:	f000 819a 	beq.w	8001dde <d_print_comp_inner+0x142a>
 8001aaa:	29ff      	cmp	r1, #255	; 0xff
 8001aac:	f816 8b01 	ldrb.w	r8, [r6], #1
 8001ab0:	d1f0      	bne.n	8001a94 <d_print_comp_inner+0x10e0>
 8001ab2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001ab6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8001aba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001abe:	4620      	mov	r0, r4
 8001ac0:	4798      	blx	r3
 8001ac2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001acc:	2101      	movs	r1, #1
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e7e2      	b.n	8001a98 <d_print_comp_inner+0x10e4>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8001ad8:	f8d0 8140 	ldr.w	r8, [r0, #320]	; 0x140
 8001adc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8001ae0:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
 8001ae4:	074a      	lsls	r2, r1, #29
 8001ae6:	686e      	ldr	r6, [r5, #4]
 8001ae8:	d505      	bpl.n	8001af6 <d_print_comp_inner+0x1142>
 8001aea:	7833      	ldrb	r3, [r6, #0]
 8001aec:	b91b      	cbnz	r3, 8001af6 <d_print_comp_inner+0x1142>
 8001aee:	68b2      	ldr	r2, [r6, #8]
 8001af0:	2a06      	cmp	r2, #6
 8001af2:	f001 808d 	beq.w	8002c10 <d_print_comp_inner+0x225c>
 8001af6:	4632      	mov	r2, r6
 8001af8:	4639      	mov	r1, r7
 8001afa:	4620      	mov	r0, r4
 8001afc:	f001 fb74 	bl	80031e8 <d_print_comp>
 8001b00:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8001b04:	2b3c      	cmp	r3, #60	; 0x3c
 8001b06:	f000 85ea 	beq.w	80026de <d_print_comp_inner+0x1d2a>
 8001b0a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	f000 879e 	beq.w	8002a50 <d_print_comp_inner+0x209c>
 8001b14:	1c59      	adds	r1, r3, #1
 8001b16:	223c      	movs	r2, #60	; 0x3c
 8001b18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001b1c:	54e2      	strb	r2, [r4, r3]
 8001b1e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8001b22:	4639      	mov	r1, r7
 8001b24:	68aa      	ldr	r2, [r5, #8]
 8001b26:	4620      	mov	r0, r4
 8001b28:	f001 fb5e 	bl	80031e8 <d_print_comp>
 8001b2c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8001b30:	2b3e      	cmp	r3, #62	; 0x3e
 8001b32:	f000 85c6 	beq.w	80026c2 <d_print_comp_inner+0x1d0e>
 8001b36:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8001b3a:	2bff      	cmp	r3, #255	; 0xff
 8001b3c:	f000 8775 	beq.w	8002a2a <d_print_comp_inner+0x2076>
 8001b40:	1c59      	adds	r1, r3, #1
 8001b42:	223e      	movs	r2, #62	; 0x3e
 8001b44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001b48:	54e2      	strb	r2, [r4, r3]
 8001b4a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8001b4e:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8001b52:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 8001b56:	f7fe bfef 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8001b60:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8001b64:	686e      	ldr	r6, [r5, #4]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2e00      	cmp	r6, #0
 8001b6a:	f000 8133 	beq.w	8001dd4 <d_print_comp_inner+0x1420>
 8001b6e:	f10d 0910 	add.w	r9, sp, #16
 8001b72:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8001b76:	4696      	mov	lr, r2
 8001b78:	4610      	mov	r0, r2
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	7831      	ldrb	r1, [r6, #0]
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f1a1 0a1c 	sub.w	sl, r1, #28
 8001b84:	f1ba 0f04 	cmp.w	sl, #4
 8001b88:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001b8c:	605e      	str	r6, [r3, #4]
 8001b8e:	6098      	str	r0, [r3, #8]
 8001b90:	f8c3 c00c 	str.w	ip, [r3, #12]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f10e 0801 	add.w	r8, lr, #1
 8001b9a:	f103 0310 	add.w	r3, r3, #16
 8001b9e:	f240 8112 	bls.w	8001dc6 <d_print_comp_inner+0x1412>
 8001ba2:	2904      	cmp	r1, #4
 8001ba4:	f001 8195 	beq.w	8002ed2 <d_print_comp_inner+0x251e>
 8001ba8:	2902      	cmp	r1, #2
 8001baa:	d137      	bne.n	8001c1c <d_print_comp_inner+0x1268>
 8001bac:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8001bb0:	f89b 3000 	ldrb.w	r3, [fp]
 8001bb4:	2b45      	cmp	r3, #69	; 0x45
 8001bb6:	bf08      	it	eq
 8001bb8:	f8db b004 	ldreq.w	fp, [fp, #4]
 8001bbc:	f89b 3000 	ldrb.w	r3, [fp]
 8001bc0:	3b1c      	subs	r3, #28
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d82a      	bhi.n	8001c1c <d_print_comp_inner+0x1268>
 8001bc6:	f1b8 0f04 	cmp.w	r8, #4
 8001bca:	f000 8103 	beq.w	8001dd4 <d_print_comp_inner+0x1420>
 8001bce:	462b      	mov	r3, r5
 8001bd0:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
 8001bd4:	46b2      	mov	sl, r6
 8001bd6:	465d      	mov	r5, fp
 8001bd8:	4666      	mov	r6, ip
 8001bda:	469b      	mov	fp, r3
 8001bdc:	46a4      	mov	ip, r4
 8001bde:	4674      	mov	r4, lr
 8001be0:	e003      	b.n	8001bea <d_print_comp_inner+0x1236>
 8001be2:	f1b8 0f04 	cmp.w	r8, #4
 8001be6:	f001 81b9 	beq.w	8002f5c <d_print_comp_inner+0x25a8>
 8001bea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bee:	f104 0e10 	add.w	lr, r4, #16
 8001bf2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611c      	str	r4, [r3, #16]
 8001bfc:	605d      	str	r5, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60de      	str	r6, [r3, #12]
 8001c02:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 8001c06:	686d      	ldr	r5, [r5, #4]
 8001c08:	782b      	ldrb	r3, [r5, #0]
 8001c0a:	3b1c      	subs	r3, #28
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	4674      	mov	r4, lr
 8001c10:	f108 0801 	add.w	r8, r8, #1
 8001c14:	d9e5      	bls.n	8001be2 <d_print_comp_inner+0x122e>
 8001c16:	4656      	mov	r6, sl
 8001c18:	4664      	mov	r4, ip
 8001c1a:	465d      	mov	r5, fp
 8001c1c:	68aa      	ldr	r2, [r5, #8]
 8001c1e:	4639      	mov	r1, r7
 8001c20:	4620      	mov	r0, r4
 8001c22:	f001 fae1 	bl	80031e8 <d_print_comp>
 8001c26:	7833      	ldrb	r3, [r6, #0]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	f001 8192 	beq.w	8002f52 <d_print_comp_inner+0x259e>
 8001c2e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 8001c32:	4646      	mov	r6, r8
 8001c34:	2520      	movs	r5, #32
 8001c36:	46b8      	mov	r8, r7
 8001c38:	f859 7c08 	ldr.w	r7, [r9, #-8]
 8001c3c:	3e01      	subs	r6, #1
 8001c3e:	b987      	cbnz	r7, 8001c62 <d_print_comp_inner+0x12ae>
 8001c40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001c44:	29ff      	cmp	r1, #255	; 0xff
 8001c46:	f001 8174 	beq.w	8002f32 <d_print_comp_inner+0x257e>
 8001c4a:	1c4b      	adds	r3, r1, #1
 8001c4c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8001c50:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8001c54:	5465      	strb	r5, [r4, r1]
 8001c56:	4620      	mov	r0, r4
 8001c58:	4641      	mov	r1, r8
 8001c5a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8001c5e:	f001 fad3 	bl	8003208 <d_print_mod>
 8001c62:	f1a9 0910 	sub.w	r9, r9, #16
 8001c66:	2e00      	cmp	r6, #0
 8001c68:	d1e6      	bne.n	8001c38 <d_print_comp_inner+0x1284>
 8001c6a:	9b00      	ldr	r3, [sp, #0]
 8001c6c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001c70:	f7fe bf62 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001c74:	686a      	ldr	r2, [r5, #4]
 8001c76:	f001 fab7 	bl	80031e8 <d_print_comp>
 8001c7a:	f017 0904 	ands.w	r9, r7, #4
 8001c7e:	f000 8477 	beq.w	8002570 <d_print_comp_inner+0x1bbc>
 8001c82:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001c86:	29ff      	cmp	r1, #255	; 0xff
 8001c88:	f000 87d5 	beq.w	8002c36 <d_print_comp_inner+0x2282>
 8001c8c:	1c4a      	adds	r2, r1, #1
 8001c8e:	232e      	movs	r3, #46	; 0x2e
 8001c90:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001c94:	5463      	strb	r3, [r4, r1]
 8001c96:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001c9a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8001c9e:	f898 3000 	ldrb.w	r3, [r8]
 8001ca2:	2b45      	cmp	r3, #69	; 0x45
 8001ca4:	f000 862e 	beq.w	8002904 <d_print_comp_inner+0x1f50>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	4639      	mov	r1, r7
 8001cac:	4620      	mov	r0, r4
 8001cae:	f001 fa9b 	bl	80031e8 <d_print_comp>
 8001cb2:	f7fe bf41 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001cb6:	f011 0704 	ands.w	r7, r1, #4
 8001cba:	f040 832d 	bne.w	8002318 <d_print_comp_inner+0x1964>
 8001cbe:	68ab      	ldr	r3, [r5, #8]
 8001cc0:	686d      	ldr	r5, [r5, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f43e af38 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001cc8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001ccc:	eb05 0803 	add.w	r8, r5, r3
 8001cd0:	e009      	b.n	8001ce6 <d_print_comp_inner+0x1332>
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	3101      	adds	r1, #1
 8001cd6:	45a8      	cmp	r8, r5
 8001cd8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001cdc:	54e6      	strb	r6, [r4, r3]
 8001cde:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001ce2:	f43e af29 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001ce6:	29ff      	cmp	r1, #255	; 0xff
 8001ce8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001cec:	d1f1      	bne.n	8001cd2 <d_print_comp_inner+0x131e>
 8001cee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001cf2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8001cf6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4798      	blx	r3
 8001cfe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001d02:	3301      	adds	r3, #1
 8001d04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001d08:	2101      	movs	r1, #1
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e7e3      	b.n	8001cd6 <d_print_comp_inner+0x1322>
 8001d0e:	bf00      	nop
 8001d10:	0801bc8c 	.word	0x0801bc8c
 8001d14:	0801bc67 	.word	0x0801bc67
 8001d18:	0801bc5b 	.word	0x0801bc5b
 8001d1c:	0801bc50 	.word	0x0801bc50
 8001d20:	686f      	ldr	r7, [r5, #4]
 8001d22:	2f00      	cmp	r7, #0
 8001d24:	f000 8375 	beq.w	8002412 <d_print_comp_inner+0x1a5e>
 8001d28:	4ddb      	ldr	r5, [pc, #876]	; (8002098 <d_print_comp_inner+0x16e4>)
 8001d2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8001d2e:	f105 0906 	add.w	r9, r5, #6
 8001d32:	f04f 0800 	mov.w	r8, #0
 8001d36:	e009      	b.n	8001d4c <d_print_comp_inner+0x1398>
 8001d38:	460b      	mov	r3, r1
 8001d3a:	3101      	adds	r1, #1
 8001d3c:	454d      	cmp	r5, r9
 8001d3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001d42:	54e6      	strb	r6, [r4, r3]
 8001d44:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001d48:	f000 8281 	beq.w	800224e <d_print_comp_inner+0x189a>
 8001d4c:	29ff      	cmp	r1, #255	; 0xff
 8001d4e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001d52:	d1f1      	bne.n	8001d38 <d_print_comp_inner+0x1384>
 8001d54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001d58:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001d5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001d60:	4620      	mov	r0, r4
 8001d62:	4798      	blx	r3
 8001d64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2300      	movs	r3, #0
 8001d72:	e7e3      	b.n	8001d3c <d_print_comp_inner+0x1388>
 8001d74:	1d29      	adds	r1, r5, #4
 8001d76:	f7fe fd77 	bl	8000868 <d_lookup_template_argument.isra.6>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	f43e aee4 	beq.w	8000b48 <d_print_comp_inner+0x194>
 8001d80:	7803      	ldrb	r3, [r0, #0]
 8001d82:	2b2f      	cmp	r3, #47	; 0x2f
 8001d84:	f000 84fd 	beq.w	8002782 <d_print_comp_inner+0x1dce>
 8001d88:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8001d8c:	682b      	ldr	r3, [r5, #0]
 8001d8e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8001d92:	4602      	mov	r2, r0
 8001d94:	4639      	mov	r1, r7
 8001d96:	4620      	mov	r0, r4
 8001d98:	f001 fa26 	bl	80031e8 <d_print_comp>
 8001d9c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8001da0:	f7fe beca 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001da4:	68aa      	ldr	r2, [r5, #8]
 8001da6:	f001 fa1f 	bl	80031e8 <d_print_comp>
 8001daa:	f7fe bec5 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001dae:	2301      	movs	r3, #1
 8001db0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8001db4:	f7fe bec0 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001db8:	f10b 0b01 	add.w	fp, fp, #1
 8001dbc:	45cb      	cmp	fp, r9
 8001dbe:	f47e af3a 	bne.w	8000c36 <d_print_comp_inner+0x282>
 8001dc2:	f7fe beb9 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001dc6:	6876      	ldr	r6, [r6, #4]
 8001dc8:	46c6      	mov	lr, r8
 8001dca:	b11e      	cbz	r6, 8001dd4 <d_print_comp_inner+0x1420>
 8001dcc:	f1be 0f04 	cmp.w	lr, #4
 8001dd0:	f47f aed4 	bne.w	8001b7c <d_print_comp_inner+0x11c8>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8001dda:	f7fe bead 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001dde:	686a      	ldr	r2, [r5, #4]
 8001de0:	4639      	mov	r1, r7
 8001de2:	4620      	mov	r0, r4
 8001de4:	f001 fa00 	bl	80031e8 <d_print_comp>
 8001de8:	f7fe bea6 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001dec:	686a      	ldr	r2, [r5, #4]
 8001dee:	4639      	mov	r1, r7
 8001df0:	4620      	mov	r0, r4
 8001df2:	f001 f9f9 	bl	80031e8 <d_print_comp>
 8001df6:	f7fe be9f 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001dfa:	686a      	ldr	r2, [r5, #4]
 8001dfc:	4639      	mov	r1, r7
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f001 f9f2 	bl	80031e8 <d_print_comp>
 8001e04:	f7fe be98 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001e08:	686a      	ldr	r2, [r5, #4]
 8001e0a:	4639      	mov	r1, r7
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f001 f9eb 	bl	80031e8 <d_print_comp>
 8001e12:	f7fe be91 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001e16:	686a      	ldr	r2, [r5, #4]
 8001e18:	4639      	mov	r1, r7
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f001 f9e4 	bl	80031e8 <d_print_comp>
 8001e20:	f7fe be8a 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001e24:	686a      	ldr	r2, [r5, #4]
 8001e26:	4639      	mov	r1, r7
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f001 f9dd 	bl	80031e8 <d_print_comp>
 8001e2e:	f7fe be83 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001e32:	4639      	mov	r1, r7
 8001e34:	686a      	ldr	r2, [r5, #4]
 8001e36:	4620      	mov	r0, r4
 8001e38:	f001 f9d6 	bl	80031e8 <d_print_comp>
 8001e3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001e40:	29ff      	cmp	r1, #255	; 0xff
 8001e42:	f000 84d2 	beq.w	80027ea <d_print_comp_inner+0x1e36>
 8001e46:	1c4a      	adds	r2, r1, #1
 8001e48:	2329      	movs	r3, #41	; 0x29
 8001e4a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001e4e:	5463      	strb	r3, [r4, r1]
 8001e50:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001e54:	f7fe be70 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001e58:	686a      	ldr	r2, [r5, #4]
 8001e5a:	4639      	mov	r1, r7
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f001 f9c3 	bl	80031e8 <d_print_comp>
 8001e62:	f7fe be69 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001e66:	686a      	ldr	r2, [r5, #4]
 8001e68:	498c      	ldr	r1, [pc, #560]	; (800209c <d_print_comp_inner+0x16e8>)
 8001e6a:	3201      	adds	r2, #1
 8001e6c:	a804      	add	r0, sp, #16
 8001e6e:	f015 fa81 	bl	8017374 <sprintf>
 8001e72:	a804      	add	r0, sp, #16
 8001e74:	f006 fb5e 	bl	8008534 <strlen>
 8001e78:	b318      	cbz	r0, 8001ec2 <d_print_comp_inner+0x150e>
 8001e7a:	ad04      	add	r5, sp, #16
 8001e7c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001e80:	182f      	adds	r7, r5, r0
 8001e82:	f04f 0800 	mov.w	r8, #0
 8001e86:	e008      	b.n	8001e9a <d_print_comp_inner+0x14e6>
 8001e88:	460b      	mov	r3, r1
 8001e8a:	3101      	adds	r1, #1
 8001e8c:	42af      	cmp	r7, r5
 8001e8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001e92:	54e6      	strb	r6, [r4, r3]
 8001e94:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001e98:	d015      	beq.n	8001ec6 <d_print_comp_inner+0x1512>
 8001e9a:	29ff      	cmp	r1, #255	; 0xff
 8001e9c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001ea0:	d1f2      	bne.n	8001e88 <d_print_comp_inner+0x14d4>
 8001ea2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001ea6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001eae:	4620      	mov	r0, r4
 8001eb0:	4798      	blx	r3
 8001eb2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e7e4      	b.n	8001e8c <d_print_comp_inner+0x14d8>
 8001ec2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001ec6:	29ff      	cmp	r1, #255	; 0xff
 8001ec8:	f000 84d0 	beq.w	800286c <d_print_comp_inner+0x1eb8>
 8001ecc:	1c4a      	adds	r2, r1, #1
 8001ece:	237d      	movs	r3, #125	; 0x7d
 8001ed0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001ed4:	5463      	strb	r3, [r4, r1]
 8001ed6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001eda:	f7fe be2d 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001ede:	4e70      	ldr	r6, [pc, #448]	; (80020a0 <d_print_comp_inner+0x16ec>)
 8001ee0:	686a      	ldr	r2, [r5, #4]
 8001ee2:	4639      	mov	r1, r7
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f001 f97f 	bl	80031e8 <d_print_comp>
 8001eea:	f106 0902 	add.w	r9, r6, #2
 8001eee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001ef2:	f04f 0800 	mov.w	r8, #0
 8001ef6:	e008      	b.n	8001f0a <d_print_comp_inner+0x1556>
 8001ef8:	460b      	mov	r3, r1
 8001efa:	3101      	adds	r1, #1
 8001efc:	45b1      	cmp	r9, r6
 8001efe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001f02:	54e7      	strb	r7, [r4, r3]
 8001f04:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8001f08:	d068      	beq.n	8001fdc <d_print_comp_inner+0x1628>
 8001f0a:	29ff      	cmp	r1, #255	; 0xff
 8001f0c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8001f10:	d1f2      	bne.n	8001ef8 <d_print_comp_inner+0x1544>
 8001f12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001f16:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001f1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4798      	blx	r3
 8001f22:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001f26:	3301      	adds	r3, #1
 8001f28:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e7e4      	b.n	8001efc <d_print_comp_inner+0x1548>
 8001f32:	686a      	ldr	r2, [r5, #4]
 8001f34:	4639      	mov	r1, r7
 8001f36:	4620      	mov	r0, r4
 8001f38:	f001 f956 	bl	80031e8 <d_print_comp>
 8001f3c:	f7fe bdfc 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001f40:	f8da 5004 	ldr.w	r5, [sl, #4]
 8001f44:	782b      	ldrb	r3, [r5, #0]
 8001f46:	3b61      	subs	r3, #97	; 0x61
 8001f48:	2b19      	cmp	r3, #25
 8001f4a:	d80b      	bhi.n	8001f64 <d_print_comp_inner+0x15b0>
 8001f4c:	29ff      	cmp	r1, #255	; 0xff
 8001f4e:	f000 8729 	beq.w	8002da4 <d_print_comp_inner+0x23f0>
 8001f52:	2320      	movs	r3, #32
 8001f54:	1c4a      	adds	r2, r1, #1
 8001f56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8001f5a:	5463      	strb	r3, [r4, r1]
 8001f5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8001f60:	f8da 5004 	ldr.w	r5, [sl, #4]
 8001f64:	19eb      	adds	r3, r5, r7
 8001f66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	bf08      	it	eq
 8001f6e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8001f72:	2f00      	cmp	r7, #0
 8001f74:	f43e ade0 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001f78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001f7c:	442f      	add	r7, r5
 8001f7e:	f04f 0800 	mov.w	r8, #0
 8001f82:	e009      	b.n	8001f98 <d_print_comp_inner+0x15e4>
 8001f84:	460b      	mov	r3, r1
 8001f86:	3101      	adds	r1, #1
 8001f88:	42af      	cmp	r7, r5
 8001f8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8001f8e:	54e6      	strb	r6, [r4, r3]
 8001f90:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8001f94:	f43e add0 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8001f98:	29ff      	cmp	r1, #255	; 0xff
 8001f9a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8001f9e:	d1f1      	bne.n	8001f84 <d_print_comp_inner+0x15d0>
 8001fa0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001fa4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8001fa8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8001fac:	4620      	mov	r0, r4
 8001fae:	4798      	blx	r3
 8001fb0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8001fba:	2101      	movs	r1, #1
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e7e3      	b.n	8001f88 <d_print_comp_inner+0x15d4>
 8001fc0:	686a      	ldr	r2, [r5, #4]
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f001 f90f 	bl	80031e8 <d_print_comp>
 8001fca:	f7fe bdb5 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001fce:	686a      	ldr	r2, [r5, #4]
 8001fd0:	4639      	mov	r1, r7
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f001 f908 	bl	80031e8 <d_print_comp>
 8001fd8:	f7fe bdae 	b.w	8000b38 <d_print_comp_inner+0x184>
 8001fdc:	68aa      	ldr	r2, [r5, #8]
 8001fde:	492f      	ldr	r1, [pc, #188]	; (800209c <d_print_comp_inner+0x16e8>)
 8001fe0:	3201      	adds	r2, #1
 8001fe2:	a804      	add	r0, sp, #16
 8001fe4:	f015 f9c6 	bl	8017374 <sprintf>
 8001fe8:	a804      	add	r0, sp, #16
 8001fea:	f006 faa3 	bl	8008534 <strlen>
 8001fee:	b318      	cbz	r0, 8002038 <d_print_comp_inner+0x1684>
 8001ff0:	ad04      	add	r5, sp, #16
 8001ff2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8001ff6:	182f      	adds	r7, r5, r0
 8001ff8:	f04f 0800 	mov.w	r8, #0
 8001ffc:	e008      	b.n	8002010 <d_print_comp_inner+0x165c>
 8001ffe:	460b      	mov	r3, r1
 8002000:	3101      	adds	r1, #1
 8002002:	42af      	cmp	r7, r5
 8002004:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002008:	54e6      	strb	r6, [r4, r3]
 800200a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800200e:	d015      	beq.n	800203c <d_print_comp_inner+0x1688>
 8002010:	29ff      	cmp	r1, #255	; 0xff
 8002012:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002016:	d1f2      	bne.n	8001ffe <d_print_comp_inner+0x164a>
 8002018:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800201c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002020:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002024:	4620      	mov	r0, r4
 8002026:	4798      	blx	r3
 8002028:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800202c:	3301      	adds	r3, #1
 800202e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002032:	2101      	movs	r1, #1
 8002034:	2300      	movs	r3, #0
 8002036:	e7e4      	b.n	8002002 <d_print_comp_inner+0x164e>
 8002038:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800203c:	29ff      	cmp	r1, #255	; 0xff
 800203e:	f000 844a 	beq.w	80028d6 <d_print_comp_inner+0x1f22>
 8002042:	1c4a      	adds	r2, r1, #1
 8002044:	237d      	movs	r3, #125	; 0x7d
 8002046:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800204a:	5463      	strb	r3, [r4, r1]
 800204c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002050:	f7fe bd72 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002054:	1d2a      	adds	r2, r5, #4
 8002056:	4639      	mov	r1, r7
 8002058:	4620      	mov	r0, r4
 800205a:	f001 fe5f 	bl	8003d1c <d_print_cast.isra.12>
 800205e:	f7fe bd6b 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002062:	4639      	mov	r1, r7
 8002064:	68aa      	ldr	r2, [r5, #8]
 8002066:	4620      	mov	r0, r4
 8002068:	f001 f8be 	bl	80031e8 <d_print_comp>
 800206c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002070:	29ff      	cmp	r1, #255	; 0xff
 8002072:	f000 841e 	beq.w	80028b2 <d_print_comp_inner+0x1efe>
 8002076:	1c4a      	adds	r2, r1, #1
 8002078:	235d      	movs	r3, #93	; 0x5d
 800207a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800207e:	5463      	strb	r3, [r4, r1]
 8002080:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002084:	f7fe bd58 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002088:	686a      	ldr	r2, [r5, #4]
 800208a:	4639      	mov	r1, r7
 800208c:	4620      	mov	r0, r4
 800208e:	f001 f8ab 	bl	80031e8 <d_print_comp>
 8002092:	f7fe bd51 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002096:	bf00      	nop
 8002098:	0801be34 	.word	0x0801be34
 800209c:	0801bc3c 	.word	0x0801bc3c
 80020a0:	0801be88 	.word	0x0801be88
 80020a4:	68aa      	ldr	r2, [r5, #8]
 80020a6:	4639      	mov	r1, r7
 80020a8:	4620      	mov	r0, r4
 80020aa:	f001 f89d 	bl	80031e8 <d_print_comp>
 80020ae:	f7fe bd43 	b.w	8000b38 <d_print_comp_inner+0x184>
 80020b2:	4639      	mov	r1, r7
 80020b4:	68aa      	ldr	r2, [r5, #8]
 80020b6:	4620      	mov	r0, r4
 80020b8:	f001 f896 	bl	80031e8 <d_print_comp>
 80020bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80020c0:	29ff      	cmp	r1, #255	; 0xff
 80020c2:	f000 83e5 	beq.w	8002890 <d_print_comp_inner+0x1edc>
 80020c6:	1c4a      	adds	r2, r1, #1
 80020c8:	235d      	movs	r3, #93	; 0x5d
 80020ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80020ce:	5463      	strb	r3, [r4, r1]
 80020d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80020d4:	f7fe bd30 	b.w	8000b38 <d_print_comp_inner+0x184>
 80020d8:	686a      	ldr	r2, [r5, #4]
 80020da:	4639      	mov	r1, r7
 80020dc:	4620      	mov	r0, r4
 80020de:	f001 f883 	bl	80031e8 <d_print_comp>
 80020e2:	f7fe bd29 	b.w	8000b38 <d_print_comp_inner+0x184>
 80020e6:	686a      	ldr	r2, [r5, #4]
 80020e8:	4639      	mov	r1, r7
 80020ea:	4620      	mov	r0, r4
 80020ec:	f001 f87c 	bl	80031e8 <d_print_comp>
 80020f0:	f7fe bd22 	b.w	8000b38 <d_print_comp_inner+0x184>
 80020f4:	686a      	ldr	r2, [r5, #4]
 80020f6:	4639      	mov	r1, r7
 80020f8:	4620      	mov	r0, r4
 80020fa:	f001 f875 	bl	80031e8 <d_print_comp>
 80020fe:	f7fe bd1b 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002102:	4ed6      	ldr	r6, [pc, #856]	; (800245c <d_print_comp_inner+0x1aa8>)
 8002104:	68aa      	ldr	r2, [r5, #8]
 8002106:	4639      	mov	r1, r7
 8002108:	4620      	mov	r0, r4
 800210a:	f001 f86d 	bl	80031e8 <d_print_comp>
 800210e:	f106 0a05 	add.w	sl, r6, #5
 8002112:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002116:	f04f 0900 	mov.w	r9, #0
 800211a:	e009      	b.n	8002130 <d_print_comp_inner+0x177c>
 800211c:	460b      	mov	r3, r1
 800211e:	3101      	adds	r1, #1
 8002120:	45b2      	cmp	sl, r6
 8002122:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002126:	f804 8003 	strb.w	r8, [r4, r3]
 800212a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800212e:	d028      	beq.n	8002182 <d_print_comp_inner+0x17ce>
 8002130:	29ff      	cmp	r1, #255	; 0xff
 8002132:	f816 8b01 	ldrb.w	r8, [r6], #1
 8002136:	d1f1      	bne.n	800211c <d_print_comp_inner+0x1768>
 8002138:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800213c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002140:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002144:	4620      	mov	r0, r4
 8002146:	4798      	blx	r3
 8002148:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800214c:	3301      	adds	r3, #1
 800214e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002152:	2101      	movs	r1, #1
 8002154:	2300      	movs	r3, #0
 8002156:	e7e3      	b.n	8002120 <d_print_comp_inner+0x176c>
 8002158:	686a      	ldr	r2, [r5, #4]
 800215a:	4639      	mov	r1, r7
 800215c:	4620      	mov	r0, r4
 800215e:	f001 f843 	bl	80031e8 <d_print_comp>
 8002162:	f7fe bce9 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002166:	686a      	ldr	r2, [r5, #4]
 8002168:	4639      	mov	r1, r7
 800216a:	4620      	mov	r0, r4
 800216c:	f001 f83c 	bl	80031e8 <d_print_comp>
 8002170:	f7fe bce2 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002174:	686a      	ldr	r2, [r5, #4]
 8002176:	4639      	mov	r1, r7
 8002178:	4620      	mov	r0, r4
 800217a:	f001 f835 	bl	80031e8 <d_print_comp>
 800217e:	f7fe bcdb 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002182:	686a      	ldr	r2, [r5, #4]
 8002184:	4639      	mov	r1, r7
 8002186:	4620      	mov	r0, r4
 8002188:	f001 f82e 	bl	80031e8 <d_print_comp>
 800218c:	f7fe bcd4 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002190:	686a      	ldr	r2, [r5, #4]
 8002192:	4639      	mov	r1, r7
 8002194:	4620      	mov	r0, r4
 8002196:	f001 f827 	bl	80031e8 <d_print_comp>
 800219a:	f7fe bccd 	b.w	8000b38 <d_print_comp_inner+0x184>
 800219e:	4eb0      	ldr	r6, [pc, #704]	; (8002460 <d_print_comp_inner+0x1aac>)
 80021a0:	686a      	ldr	r2, [r5, #4]
 80021a2:	4639      	mov	r1, r7
 80021a4:	4620      	mov	r0, r4
 80021a6:	f001 f81f 	bl	80031e8 <d_print_comp>
 80021aa:	f106 0a04 	add.w	sl, r6, #4
 80021ae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80021b2:	f04f 0900 	mov.w	r9, #0
 80021b6:	e009      	b.n	80021cc <d_print_comp_inner+0x1818>
 80021b8:	460b      	mov	r3, r1
 80021ba:	3101      	adds	r1, #1
 80021bc:	4556      	cmp	r6, sl
 80021be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80021c2:	f804 8003 	strb.w	r8, [r4, r3]
 80021c6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80021ca:	d013      	beq.n	80021f4 <d_print_comp_inner+0x1840>
 80021cc:	29ff      	cmp	r1, #255	; 0xff
 80021ce:	f816 8b01 	ldrb.w	r8, [r6], #1
 80021d2:	d1f1      	bne.n	80021b8 <d_print_comp_inner+0x1804>
 80021d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80021d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80021dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80021e0:	4620      	mov	r0, r4
 80021e2:	4798      	blx	r3
 80021e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80021e8:	3301      	adds	r3, #1
 80021ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80021ee:	2101      	movs	r1, #1
 80021f0:	2300      	movs	r3, #0
 80021f2:	e7e3      	b.n	80021bc <d_print_comp_inner+0x1808>
 80021f4:	68aa      	ldr	r2, [r5, #8]
 80021f6:	4639      	mov	r1, r7
 80021f8:	4620      	mov	r0, r4
 80021fa:	f000 fff5 	bl	80031e8 <d_print_comp>
 80021fe:	f7fe bc9b 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002202:	68aa      	ldr	r2, [r5, #8]
 8002204:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8002208:	460e      	mov	r6, r1
 800220a:	4620      	mov	r0, r4
 800220c:	4639      	mov	r1, r7
 800220e:	f000 ffeb 	bl	80031e8 <d_print_comp>
 8002212:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002216:	429d      	cmp	r5, r3
 8002218:	f47e ac8e 	bne.w	8000b38 <d_print_comp_inner+0x184>
 800221c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002220:	42b3      	cmp	r3, r6
 8002222:	f47e ac89 	bne.w	8000b38 <d_print_comp_inner+0x184>
 8002226:	3e02      	subs	r6, #2
 8002228:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800222c:	f7fe bc84 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002230:	462a      	mov	r2, r5
 8002232:	4639      	mov	r1, r7
 8002234:	4620      	mov	r0, r4
 8002236:	f000 ffe7 	bl	8003208 <d_print_mod>
 800223a:	f7ff bb6c 	b.w	8001916 <d_print_comp_inner+0xf62>
 800223e:	686b      	ldr	r3, [r5, #4]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	f1b9 0f00 	cmp.w	r9, #0
 8002246:	f47e acf0 	bne.w	8000c2a <d_print_comp_inner+0x276>
 800224a:	f7fe bc75 	b.w	8000b38 <d_print_comp_inner+0x184>
 800224e:	463a      	mov	r2, r7
 8002250:	a804      	add	r0, sp, #16
 8002252:	4984      	ldr	r1, [pc, #528]	; (8002464 <d_print_comp_inner+0x1ab0>)
 8002254:	f015 f88e 	bl	8017374 <sprintf>
 8002258:	a804      	add	r0, sp, #16
 800225a:	f006 f96b 	bl	8008534 <strlen>
 800225e:	b318      	cbz	r0, 80022a8 <d_print_comp_inner+0x18f4>
 8002260:	ad04      	add	r5, sp, #16
 8002262:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002266:	182f      	adds	r7, r5, r0
 8002268:	f04f 0800 	mov.w	r8, #0
 800226c:	e008      	b.n	8002280 <d_print_comp_inner+0x18cc>
 800226e:	460b      	mov	r3, r1
 8002270:	3101      	adds	r1, #1
 8002272:	42bd      	cmp	r5, r7
 8002274:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002278:	54e6      	strb	r6, [r4, r3]
 800227a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800227e:	d015      	beq.n	80022ac <d_print_comp_inner+0x18f8>
 8002280:	29ff      	cmp	r1, #255	; 0xff
 8002282:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002286:	d1f2      	bne.n	800226e <d_print_comp_inner+0x18ba>
 8002288:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800228c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002290:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002294:	4620      	mov	r0, r4
 8002296:	4798      	blx	r3
 8002298:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800229c:	3301      	adds	r3, #1
 800229e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80022a2:	2101      	movs	r1, #1
 80022a4:	2300      	movs	r3, #0
 80022a6:	e7e4      	b.n	8002272 <d_print_comp_inner+0x18be>
 80022a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80022ac:	29ff      	cmp	r1, #255	; 0xff
 80022ae:	f000 841f 	beq.w	8002af0 <d_print_comp_inner+0x213c>
 80022b2:	1c4a      	adds	r2, r1, #1
 80022b4:	237d      	movs	r3, #125	; 0x7d
 80022b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80022ba:	5463      	strb	r3, [r4, r1]
 80022bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80022c0:	f7fe bc3a 	b.w	8000b38 <d_print_comp_inner+0x184>
 80022c4:	686b      	ldr	r3, [r5, #4]
 80022c6:	68df      	ldr	r7, [r3, #12]
 80022c8:	689d      	ldr	r5, [r3, #8]
 80022ca:	2f00      	cmp	r7, #0
 80022cc:	f43e ac34 	beq.w	8000b38 <d_print_comp_inner+0x184>
 80022d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80022d4:	442f      	add	r7, r5
 80022d6:	f04f 0800 	mov.w	r8, #0
 80022da:	e009      	b.n	80022f0 <d_print_comp_inner+0x193c>
 80022dc:	460b      	mov	r3, r1
 80022de:	3101      	adds	r1, #1
 80022e0:	42af      	cmp	r7, r5
 80022e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80022e6:	54e6      	strb	r6, [r4, r3]
 80022e8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80022ec:	f43e ac24 	beq.w	8000b38 <d_print_comp_inner+0x184>
 80022f0:	29ff      	cmp	r1, #255	; 0xff
 80022f2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80022f6:	d1f1      	bne.n	80022dc <d_print_comp_inner+0x1928>
 80022f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80022fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002300:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002304:	4620      	mov	r0, r4
 8002306:	4798      	blx	r3
 8002308:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800230c:	3301      	adds	r3, #1
 800230e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002312:	2101      	movs	r1, #1
 8002314:	2300      	movs	r3, #0
 8002316:	e7e3      	b.n	80022e0 <d_print_comp_inner+0x192c>
 8002318:	686e      	ldr	r6, [r5, #4]
 800231a:	68af      	ldr	r7, [r5, #8]
 800231c:	4437      	add	r7, r6
 800231e:	42be      	cmp	r6, r7
 8002320:	f4be ac0a 	bcs.w	8000b38 <d_print_comp_inner+0x184>
 8002324:	f04f 0800 	mov.w	r8, #0
 8002328:	e00d      	b.n	8002346 <d_print_comp_inner+0x1992>
 800232a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800232e:	29ff      	cmp	r1, #255	; 0xff
 8002330:	d038      	beq.n	80023a4 <d_print_comp_inner+0x19f0>
 8002332:	1c4b      	adds	r3, r1, #1
 8002334:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8002338:	5465      	strb	r5, [r4, r1]
 800233a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800233e:	3601      	adds	r6, #1
 8002340:	42b7      	cmp	r7, r6
 8002342:	f67e abf9 	bls.w	8000b38 <d_print_comp_inner+0x184>
 8002346:	1bbb      	subs	r3, r7, r6
 8002348:	2b03      	cmp	r3, #3
 800234a:	7835      	ldrb	r5, [r6, #0]
 800234c:	dded      	ble.n	800232a <d_print_comp_inner+0x1976>
 800234e:	2d5f      	cmp	r5, #95	; 0x5f
 8002350:	d1eb      	bne.n	800232a <d_print_comp_inner+0x1976>
 8002352:	7872      	ldrb	r2, [r6, #1]
 8002354:	2a5f      	cmp	r2, #95	; 0x5f
 8002356:	d1e8      	bne.n	800232a <d_print_comp_inner+0x1976>
 8002358:	78b3      	ldrb	r3, [r6, #2]
 800235a:	2b55      	cmp	r3, #85	; 0x55
 800235c:	d001      	beq.n	8002362 <d_print_comp_inner+0x19ae>
 800235e:	4615      	mov	r5, r2
 8002360:	e7e3      	b.n	800232a <d_print_comp_inner+0x1976>
 8002362:	1cf3      	adds	r3, r6, #3
 8002364:	429f      	cmp	r7, r3
 8002366:	d9fa      	bls.n	800235e <d_print_comp_inner+0x19aa>
 8002368:	2000      	movs	r0, #0
 800236a:	e006      	b.n	800237a <d_print_comp_inner+0x19c6>
 800236c:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8002370:	42bb      	cmp	r3, r7
 8002372:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8002376:	f000 855a 	beq.w	8002e2e <d_print_comp_inner+0x247a>
 800237a:	4699      	mov	r9, r3
 800237c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002380:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8002384:	b2d1      	uxtb	r1, r2
 8002386:	2909      	cmp	r1, #9
 8002388:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 800238c:	d9f0      	bls.n	8002370 <d_print_comp_inner+0x19bc>
 800238e:	f1be 0f05 	cmp.w	lr, #5
 8002392:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8002396:	d9e9      	bls.n	800236c <d_print_comp_inner+0x19b8>
 8002398:	2a05      	cmp	r2, #5
 800239a:	f200 869c 	bhi.w	80030d6 <d_print_comp_inner+0x2722>
 800239e:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 80023a2:	e7e5      	b.n	8002370 <d_print_comp_inner+0x19bc>
 80023a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80023a8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80023ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80023b0:	4620      	mov	r0, r4
 80023b2:	4798      	blx	r3
 80023b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80023b8:	3301      	adds	r3, #1
 80023ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80023be:	2100      	movs	r1, #0
 80023c0:	2301      	movs	r3, #1
 80023c2:	e7b7      	b.n	8002334 <d_print_comp_inner+0x1980>
 80023c4:	4d28      	ldr	r5, [pc, #160]	; (8002468 <d_print_comp_inner+0x1ab4>)
 80023c6:	4698      	mov	r8, r3
 80023c8:	1daf      	adds	r7, r5, #6
 80023ca:	e009      	b.n	80023e0 <d_print_comp_inner+0x1a2c>
 80023cc:	460b      	mov	r3, r1
 80023ce:	3101      	adds	r1, #1
 80023d0:	42af      	cmp	r7, r5
 80023d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80023d6:	54e6      	strb	r6, [r4, r3]
 80023d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80023dc:	f43e abac 	beq.w	8000b38 <d_print_comp_inner+0x184>
 80023e0:	29ff      	cmp	r1, #255	; 0xff
 80023e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80023e6:	d1f1      	bne.n	80023cc <d_print_comp_inner+0x1a18>
 80023e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80023ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80023f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80023f4:	4620      	mov	r0, r4
 80023f6:	4798      	blx	r3
 80023f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80023fc:	3301      	adds	r3, #1
 80023fe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002402:	2101      	movs	r1, #1
 8002404:	2300      	movs	r3, #0
 8002406:	e7e3      	b.n	80023d0 <d_print_comp_inner+0x1a1c>
 8002408:	4605      	mov	r5, r0
 800240a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800240e:	f7ff ba6e 	b.w	80018ee <d_print_comp_inner+0xf3a>
 8002412:	4d16      	ldr	r5, [pc, #88]	; (800246c <d_print_comp_inner+0x1ab8>)
 8002414:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002418:	f105 0804 	add.w	r8, r5, #4
 800241c:	e009      	b.n	8002432 <d_print_comp_inner+0x1a7e>
 800241e:	460b      	mov	r3, r1
 8002420:	3101      	adds	r1, #1
 8002422:	4545      	cmp	r5, r8
 8002424:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002428:	54e6      	strb	r6, [r4, r3]
 800242a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800242e:	f43e ab83 	beq.w	8000b38 <d_print_comp_inner+0x184>
 8002432:	29ff      	cmp	r1, #255	; 0xff
 8002434:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002438:	d1f1      	bne.n	800241e <d_print_comp_inner+0x1a6a>
 800243a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800243e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8002442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002446:	4620      	mov	r0, r4
 8002448:	4798      	blx	r3
 800244a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800244e:	3301      	adds	r3, #1
 8002450:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002454:	2101      	movs	r1, #1
 8002456:	2300      	movs	r3, #0
 8002458:	e7e3      	b.n	8002422 <d_print_comp_inner+0x1a6e>
 800245a:	bf00      	nop
 800245c:	0801bd48 	.word	0x0801bd48
 8002460:	0801bc84 	.word	0x0801bc84
 8002464:	0801bc3c 	.word	0x0801bc3c
 8002468:	0801bda8 	.word	0x0801bda8
 800246c:	0801be2c 	.word	0x0801be2c
 8002470:	f021 0760 	bic.w	r7, r1, #96	; 0x60
 8002474:	f105 0208 	add.w	r2, r5, #8
 8002478:	4639      	mov	r1, r7
 800247a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800247e:	f001 fb59 	bl	8003b34 <d_print_function_type.isra.11>
 8002482:	686a      	ldr	r2, [r5, #4]
 8002484:	2a00      	cmp	r2, #0
 8002486:	f43e ab57 	beq.w	8000b38 <d_print_comp_inner+0x184>
 800248a:	4639      	mov	r1, r7
 800248c:	4620      	mov	r0, r4
 800248e:	f000 feab 	bl	80031e8 <d_print_comp>
 8002492:	f7fe bb51 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002496:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800249a:	f7fe be8e 	b.w	80011ba <d_print_comp_inner+0x806>
 800249e:	4edc      	ldr	r6, [pc, #880]	; (8002810 <d_print_comp_inner+0x1e5c>)
 80024a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80024a4:	f106 0a05 	add.w	sl, r6, #5
 80024a8:	f04f 0900 	mov.w	r9, #0
 80024ac:	e00a      	b.n	80024c4 <d_print_comp_inner+0x1b10>
 80024ae:	460b      	mov	r3, r1
 80024b0:	3101      	adds	r1, #1
 80024b2:	4556      	cmp	r6, sl
 80024b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80024b8:	f804 8003 	strb.w	r8, [r4, r3]
 80024bc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80024c0:	f43e ae65 	beq.w	800118e <d_print_comp_inner+0x7da>
 80024c4:	29ff      	cmp	r1, #255	; 0xff
 80024c6:	f816 8b01 	ldrb.w	r8, [r6], #1
 80024ca:	d1f0      	bne.n	80024ae <d_print_comp_inner+0x1afa>
 80024cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80024d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80024d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80024d8:	4620      	mov	r0, r4
 80024da:	4798      	blx	r3
 80024dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80024e0:	3301      	adds	r3, #1
 80024e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80024e6:	2101      	movs	r1, #1
 80024e8:	2300      	movs	r3, #0
 80024ea:	e7e2      	b.n	80024b2 <d_print_comp_inner+0x1afe>
 80024ec:	6873      	ldr	r3, [r6, #4]
 80024ee:	49c9      	ldr	r1, [pc, #804]	; (8002814 <d_print_comp_inner+0x1e60>)
 80024f0:	f8d3 8000 	ldr.w	r8, [r3]
 80024f4:	4640      	mov	r0, r8
 80024f6:	f006 f813 	bl	8008520 <strcmp>
 80024fa:	782b      	ldrb	r3, [r5, #0]
 80024fc:	b910      	cbnz	r0, 8002504 <d_print_comp_inner+0x1b50>
 80024fe:	2b03      	cmp	r3, #3
 8002500:	f000 84db 	beq.w	8002eba <d_print_comp_inner+0x2506>
 8002504:	2b37      	cmp	r3, #55	; 0x37
 8002506:	f000 8585 	beq.w	8003014 <d_print_comp_inner+0x2660>
 800250a:	4639      	mov	r1, r7
 800250c:	4620      	mov	r0, r4
 800250e:	4632      	mov	r2, r6
 8002510:	f001 fcd8 	bl	8003ec4 <d_print_expr_op>
 8002514:	49c0      	ldr	r1, [pc, #768]	; (8002818 <d_print_comp_inner+0x1e64>)
 8002516:	4640      	mov	r0, r8
 8002518:	f006 f802 	bl	8008520 <strcmp>
 800251c:	2800      	cmp	r0, #0
 800251e:	f000 8257 	beq.w	80029d0 <d_print_comp_inner+0x201c>
 8002522:	4640      	mov	r0, r8
 8002524:	49bd      	ldr	r1, [pc, #756]	; (800281c <d_print_comp_inner+0x1e68>)
 8002526:	f005 fffb 	bl	8008520 <strcmp>
 800252a:	4606      	mov	r6, r0
 800252c:	2800      	cmp	r0, #0
 800252e:	f47e ad44 	bne.w	8000fba <d_print_comp_inner+0x606>
 8002532:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002536:	2bff      	cmp	r3, #255	; 0xff
 8002538:	f000 8468 	beq.w	8002e0c <d_print_comp_inner+0x2458>
 800253c:	1c58      	adds	r0, r3, #1
 800253e:	2628      	movs	r6, #40	; 0x28
 8002540:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8002544:	4639      	mov	r1, r7
 8002546:	54e6      	strb	r6, [r4, r3]
 8002548:	462a      	mov	r2, r5
 800254a:	4620      	mov	r0, r4
 800254c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002550:	f000 fe4a 	bl	80031e8 <d_print_comp>
 8002554:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002558:	29ff      	cmp	r1, #255	; 0xff
 800255a:	f000 83d6 	beq.w	8002d0a <d_print_comp_inner+0x2356>
 800255e:	1c4a      	adds	r2, r1, #1
 8002560:	2329      	movs	r3, #41	; 0x29
 8002562:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002566:	5463      	strb	r3, [r4, r1]
 8002568:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800256c:	f7fe bae4 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002570:	4eab      	ldr	r6, [pc, #684]	; (8002820 <d_print_comp_inner+0x1e6c>)
 8002572:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002576:	f106 0a02 	add.w	sl, r6, #2
 800257a:	e00a      	b.n	8002592 <d_print_comp_inner+0x1bde>
 800257c:	460b      	mov	r3, r1
 800257e:	3101      	adds	r1, #1
 8002580:	4556      	cmp	r6, sl
 8002582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002586:	f804 8003 	strb.w	r8, [r4, r3]
 800258a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800258e:	f43f ab84 	beq.w	8001c9a <d_print_comp_inner+0x12e6>
 8002592:	29ff      	cmp	r1, #255	; 0xff
 8002594:	f816 8b01 	ldrb.w	r8, [r6], #1
 8002598:	d1f0      	bne.n	800257c <d_print_comp_inner+0x1bc8>
 800259a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800259e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80025a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80025a6:	4620      	mov	r0, r4
 80025a8:	4798      	blx	r3
 80025aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80025ae:	3301      	adds	r3, #1
 80025b0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80025b4:	2101      	movs	r1, #1
 80025b6:	2300      	movs	r3, #0
 80025b8:	e7e2      	b.n	8002580 <d_print_comp_inner+0x1bcc>
 80025ba:	6852      	ldr	r2, [r2, #4]
 80025bc:	7c16      	ldrb	r6, [r2, #16]
 80025be:	2e00      	cmp	r6, #0
 80025c0:	f43e ae54 	beq.w	800126c <d_print_comp_inner+0x8b8>
 80025c4:	2e06      	cmp	r6, #6
 80025c6:	f240 8357 	bls.w	8002c78 <d_print_comp_inner+0x22c4>
 80025ca:	2e07      	cmp	r6, #7
 80025cc:	f47e ae4e 	bne.w	800126c <d_print_comp_inner+0x8b8>
 80025d0:	68aa      	ldr	r2, [r5, #8]
 80025d2:	7811      	ldrb	r1, [r2, #0]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	f47e ae49 	bne.w	800126c <d_print_comp_inner+0x8b8>
 80025da:	6891      	ldr	r1, [r2, #8]
 80025dc:	2901      	cmp	r1, #1
 80025de:	f47e ae45 	bne.w	800126c <d_print_comp_inner+0x8b8>
 80025e2:	2b3b      	cmp	r3, #59	; 0x3b
 80025e4:	f47e ae42 	bne.w	800126c <d_print_comp_inner+0x8b8>
 80025e8:	6853      	ldr	r3, [r2, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b30      	cmp	r3, #48	; 0x30
 80025ee:	f000 85bb 	beq.w	8003168 <d_print_comp_inner+0x27b4>
 80025f2:	2b31      	cmp	r3, #49	; 0x31
 80025f4:	f47e ae3a 	bne.w	800126c <d_print_comp_inner+0x8b8>
 80025f8:	2204      	movs	r2, #4
 80025fa:	498a      	ldr	r1, [pc, #552]	; (8002824 <d_print_comp_inner+0x1e70>)
 80025fc:	f7fd ff1c 	bl	8000438 <d_append_buffer>
 8002600:	f7fe ba9a 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002604:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 8002608:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 800260c:	f1bc 0f00 	cmp.w	ip, #0
 8002610:	dd14      	ble.n	800263c <d_print_comp_inner+0x1c88>
 8002612:	680b      	ldr	r3, [r1, #0]
 8002614:	4298      	cmp	r0, r3
 8002616:	f000 855c 	beq.w	80030d2 <d_print_comp_inner+0x271e>
 800261a:	f101 0208 	add.w	r2, r1, #8
 800261e:	2300      	movs	r3, #0
 8002620:	46a6      	mov	lr, r4
 8002622:	e004      	b.n	800262e <d_print_comp_inner+0x1c7a>
 8002624:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8002628:	42a0      	cmp	r0, r4
 800262a:	f000 8273 	beq.w	8002b14 <d_print_comp_inner+0x2160>
 800262e:	3301      	adds	r3, #1
 8002630:	459c      	cmp	ip, r3
 8002632:	4690      	mov	r8, r2
 8002634:	f102 0208 	add.w	r2, r2, #8
 8002638:	d1f4      	bne.n	8002624 <d_print_comp_inner+0x1c70>
 800263a:	4674      	mov	r4, lr
 800263c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8002640:	459c      	cmp	ip, r3
 8002642:	f280 84f5 	bge.w	8003030 <d_print_comp_inner+0x267c>
 8002646:	f10c 0301 	add.w	r3, ip, #1
 800264a:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 800264e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8002652:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 8002656:	f841 003c 	str.w	r0, [r1, ip, lsl #3]
 800265a:	f103 0e04 	add.w	lr, r3, #4
 800265e:	f1b8 0f00 	cmp.w	r8, #0
 8002662:	d021      	beq.n	80026a8 <d_print_comp_inner+0x1cf4>
 8002664:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8002668:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800266c:	4299      	cmp	r1, r3
 800266e:	f340 84df 	ble.w	8003030 <d_print_comp_inner+0x267c>
 8002672:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8002676:	4681      	mov	r9, r0
 8002678:	e002      	b.n	8002680 <d_print_comp_inner+0x1ccc>
 800267a:	4299      	cmp	r1, r3
 800267c:	f000 84d6 	beq.w	800302c <d_print_comp_inner+0x2678>
 8002680:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8002684:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8002688:	4462      	add	r2, ip
 800268a:	3301      	adds	r3, #1
 800268c:	6050      	str	r0, [r2, #4]
 800268e:	f8ce 2000 	str.w	r2, [lr]
 8002692:	f8d8 8000 	ldr.w	r8, [r8]
 8002696:	f10c 0c08 	add.w	ip, ip, #8
 800269a:	4696      	mov	lr, r2
 800269c:	f1b8 0f00 	cmp.w	r8, #0
 80026a0:	d1eb      	bne.n	800267a <d_print_comp_inner+0x1cc6>
 80026a2:	4648      	mov	r0, r9
 80026a4:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 80026a8:	f04f 0800 	mov.w	r8, #0
 80026ac:	1d01      	adds	r1, r0, #4
 80026ae:	f8ce 8000 	str.w	r8, [lr]
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7fe f8d8 	bl	8000868 <d_lookup_template_argument.isra.6>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f040 8246 	bne.w	8002b4a <d_print_comp_inner+0x2196>
 80026be:	f7fe ba43 	b.w	8000b48 <d_print_comp_inner+0x194>
 80026c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80026c6:	29ff      	cmp	r1, #255	; 0xff
 80026c8:	f000 8411 	beq.w	8002eee <d_print_comp_inner+0x253a>
 80026cc:	2220      	movs	r2, #32
 80026ce:	1c4b      	adds	r3, r1, #1
 80026d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80026d4:	5462      	strb	r2, [r4, r1]
 80026d6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80026da:	f7ff ba2e 	b.w	8001b3a <d_print_comp_inner+0x1186>
 80026de:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80026e2:	29ff      	cmp	r1, #255	; 0xff
 80026e4:	f000 843d 	beq.w	8002f62 <d_print_comp_inner+0x25ae>
 80026e8:	2220      	movs	r2, #32
 80026ea:	1c4b      	adds	r3, r1, #1
 80026ec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80026f0:	5462      	strb	r2, [r4, r1]
 80026f2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80026f6:	f7ff ba0a 	b.w	8001b0e <d_print_comp_inner+0x115a>
 80026fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80026fe:	29ff      	cmp	r1, #255	; 0xff
 8002700:	f000 8444 	beq.w	8002f8c <d_print_comp_inner+0x25d8>
 8002704:	1c4a      	adds	r2, r1, #1
 8002706:	235b      	movs	r3, #91	; 0x5b
 8002708:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800270c:	5463      	strb	r3, [r4, r1]
 800270e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002712:	4639      	mov	r1, r7
 8002714:	68aa      	ldr	r2, [r5, #8]
 8002716:	4620      	mov	r0, r4
 8002718:	f000 fd66 	bl	80031e8 <d_print_comp>
 800271c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002720:	29ff      	cmp	r1, #255	; 0xff
 8002722:	f000 832f 	beq.w	8002d84 <d_print_comp_inner+0x23d0>
 8002726:	235d      	movs	r3, #93	; 0x5d
 8002728:	1c4a      	adds	r2, r1, #1
 800272a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800272e:	5463      	strb	r3, [r4, r1]
 8002730:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002734:	f7fe ba00 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002738:	f04f 0800 	mov.w	r8, #0
 800273c:	f804 8006 	strb.w	r8, [r4, r6]
 8002740:	4631      	mov	r1, r6
 8002742:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002746:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800274a:	4620      	mov	r0, r4
 800274c:	4798      	blx	r3
 800274e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002752:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8002756:	3301      	adds	r3, #1
 8002758:	4646      	mov	r6, r8
 800275a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800275e:	f7fe bcde 	b.w	800111e <d_print_comp_inner+0x76a>
 8002762:	4660      	mov	r0, ip
 8002764:	4688      	mov	r8, r1
 8002766:	f7ff b8c2 	b.w	80018ee <d_print_comp_inner+0xf3a>
 800276a:	686a      	ldr	r2, [r5, #4]
 800276c:	4639      	mov	r1, r7
 800276e:	4620      	mov	r0, r4
 8002770:	f000 fd3a 	bl	80031e8 <d_print_comp>
 8002774:	f7fe b9e0 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002778:	4632      	mov	r2, r6
 800277a:	f001 fba3 	bl	8003ec4 <d_print_expr_op>
 800277e:	f7fe bc1c 	b.w	8000fba <d_print_comp_inner+0x606>
 8002782:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002786:	e008      	b.n	800279a <d_print_comp_inner+0x1de6>
 8002788:	6880      	ldr	r0, [r0, #8]
 800278a:	3b01      	subs	r3, #1
 800278c:	2800      	cmp	r0, #0
 800278e:	f43e a9db 	beq.w	8000b48 <d_print_comp_inner+0x194>
 8002792:	7802      	ldrb	r2, [r0, #0]
 8002794:	2a2f      	cmp	r2, #47	; 0x2f
 8002796:	f47e a9d7 	bne.w	8000b48 <d_print_comp_inner+0x194>
 800279a:	2b00      	cmp	r3, #0
 800279c:	dcf4      	bgt.n	8002788 <d_print_comp_inner+0x1dd4>
 800279e:	f47e a9d3 	bne.w	8000b48 <d_print_comp_inner+0x194>
 80027a2:	6840      	ldr	r0, [r0, #4]
 80027a4:	2800      	cmp	r0, #0
 80027a6:	f47f aaef 	bne.w	8001d88 <d_print_comp_inner+0x13d4>
 80027aa:	f7fe b9cd 	b.w	8000b48 <d_print_comp_inner+0x194>
 80027ae:	29ff      	cmp	r1, #255	; 0xff
 80027b0:	f000 83ae 	beq.w	8002f10 <d_print_comp_inner+0x255c>
 80027b4:	232d      	movs	r3, #45	; 0x2d
 80027b6:	1c4a      	adds	r2, r1, #1
 80027b8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80027bc:	5463      	strb	r3, [r4, r1]
 80027be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80027c2:	f7fe bd74 	b.w	80012ae <d_print_comp_inner+0x8fa>
 80027c6:	2500      	movs	r5, #0
 80027c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80027cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80027d0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80027d4:	4620      	mov	r0, r4
 80027d6:	4798      	blx	r3
 80027d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80027dc:	3301      	adds	r3, #1
 80027de:	4629      	mov	r1, r5
 80027e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80027e4:	2201      	movs	r2, #1
 80027e6:	f7fe bc86 	b.w	80010f6 <d_print_comp_inner+0x742>
 80027ea:	2500      	movs	r5, #0
 80027ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80027f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80027f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80027f8:	4620      	mov	r0, r4
 80027fa:	4798      	blx	r3
 80027fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002800:	3301      	adds	r3, #1
 8002802:	4629      	mov	r1, r5
 8002804:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002808:	2201      	movs	r2, #1
 800280a:	f7ff bb1d 	b.w	8001e48 <d_print_comp_inner+0x1494>
 800280e:	bf00      	nop
 8002810:	0801bd98 	.word	0x0801bd98
 8002814:	0801bdcc 	.word	0x0801bdcc
 8002818:	0801bdd0 	.word	0x0801bdd0
 800281c:	0801c0e8 	.word	0x0801c0e8
 8002820:	0801bc28 	.word	0x0801bc28
 8002824:	0801be04 	.word	0x0801be04
 8002828:	2600      	movs	r6, #0
 800282a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800282e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8002832:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8002836:	4798      	blx	r3
 8002838:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800283c:	3301      	adds	r3, #1
 800283e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002842:	4631      	mov	r1, r6
 8002844:	2301      	movs	r3, #1
 8002846:	f7fe bb81 	b.w	8000f4c <d_print_comp_inner+0x598>
 800284a:	2600      	movs	r6, #0
 800284c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8002850:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8002854:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8002858:	4798      	blx	r3
 800285a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800285e:	3301      	adds	r3, #1
 8002860:	4631      	mov	r1, r6
 8002862:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002866:	2201      	movs	r2, #1
 8002868:	f7ff b885 	b.w	8001976 <d_print_comp_inner+0xfc2>
 800286c:	2500      	movs	r5, #0
 800286e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002872:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002876:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800287a:	4620      	mov	r0, r4
 800287c:	4798      	blx	r3
 800287e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002882:	3301      	adds	r3, #1
 8002884:	4629      	mov	r1, r5
 8002886:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800288a:	2201      	movs	r2, #1
 800288c:	f7ff bb1f 	b.w	8001ece <d_print_comp_inner+0x151a>
 8002890:	2500      	movs	r5, #0
 8002892:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002896:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800289a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800289e:	4620      	mov	r0, r4
 80028a0:	4798      	blx	r3
 80028a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80028a6:	3301      	adds	r3, #1
 80028a8:	4629      	mov	r1, r5
 80028aa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80028ae:	2201      	movs	r2, #1
 80028b0:	e40a      	b.n	80020c8 <d_print_comp_inner+0x1714>
 80028b2:	2500      	movs	r5, #0
 80028b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80028b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80028bc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80028c0:	4620      	mov	r0, r4
 80028c2:	4798      	blx	r3
 80028c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80028c8:	3301      	adds	r3, #1
 80028ca:	4629      	mov	r1, r5
 80028cc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80028d0:	2201      	movs	r2, #1
 80028d2:	f7ff bbd1 	b.w	8002078 <d_print_comp_inner+0x16c4>
 80028d6:	2500      	movs	r5, #0
 80028d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80028dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80028e0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80028e4:	4620      	mov	r0, r4
 80028e6:	4798      	blx	r3
 80028e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80028ec:	3301      	adds	r3, #1
 80028ee:	4629      	mov	r1, r5
 80028f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80028f4:	2201      	movs	r2, #1
 80028f6:	f7ff bba5 	b.w	8002044 <d_print_comp_inner+0x1690>
 80028fa:	2301      	movs	r3, #1
 80028fc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002900:	f7fe b91a 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002904:	220d      	movs	r2, #13
 8002906:	49d5      	ldr	r1, [pc, #852]	; (8002c5c <d_print_comp_inner+0x22a8>)
 8002908:	4620      	mov	r0, r4
 800290a:	f7fd fd95 	bl	8000438 <d_append_buffer>
 800290e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002912:	49d3      	ldr	r1, [pc, #844]	; (8002c60 <d_print_comp_inner+0x22ac>)
 8002914:	3201      	adds	r2, #1
 8002916:	a804      	add	r0, sp, #16
 8002918:	f014 fd2c 	bl	8017374 <sprintf>
 800291c:	a804      	add	r0, sp, #16
 800291e:	f005 fe09 	bl	8008534 <strlen>
 8002922:	b320      	cbz	r0, 800296e <d_print_comp_inner+0x1fba>
 8002924:	ad04      	add	r5, sp, #16
 8002926:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800292a:	eb05 0a00 	add.w	sl, r5, r0
 800292e:	f04f 0900 	mov.w	r9, #0
 8002932:	e008      	b.n	8002946 <d_print_comp_inner+0x1f92>
 8002934:	460b      	mov	r3, r1
 8002936:	3101      	adds	r1, #1
 8002938:	45aa      	cmp	sl, r5
 800293a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800293e:	54e6      	strb	r6, [r4, r3]
 8002940:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002944:	d013      	beq.n	800296e <d_print_comp_inner+0x1fba>
 8002946:	29ff      	cmp	r1, #255	; 0xff
 8002948:	f815 6b01 	ldrb.w	r6, [r5], #1
 800294c:	d1f2      	bne.n	8002934 <d_print_comp_inner+0x1f80>
 800294e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002952:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002956:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800295a:	4620      	mov	r0, r4
 800295c:	4798      	blx	r3
 800295e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002962:	3301      	adds	r3, #1
 8002964:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002968:	2101      	movs	r1, #1
 800296a:	2300      	movs	r3, #0
 800296c:	e7e4      	b.n	8002938 <d_print_comp_inner+0x1f84>
 800296e:	2203      	movs	r2, #3
 8002970:	49bc      	ldr	r1, [pc, #752]	; (8002c64 <d_print_comp_inner+0x22b0>)
 8002972:	4620      	mov	r0, r4
 8002974:	f7fd fd60 	bl	8000438 <d_append_buffer>
 8002978:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800297c:	f7ff b994 	b.w	8001ca8 <d_print_comp_inner+0x12f4>
 8002980:	aa14      	add	r2, sp, #80	; 0x50
 8002982:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002986:	f842 1d40 	str.w	r1, [r2, #-64]!
 800298a:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 800298e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8002992:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8002996:	686a      	ldr	r2, [r5, #4]
 8002998:	9306      	str	r3, [sp, #24]
 800299a:	4639      	mov	r1, r7
 800299c:	4620      	mov	r0, r4
 800299e:	9607      	str	r6, [sp, #28]
 80029a0:	9505      	str	r5, [sp, #20]
 80029a2:	f000 fc21 	bl	80031e8 <d_print_comp>
 80029a6:	9e06      	ldr	r6, [sp, #24]
 80029a8:	9b04      	ldr	r3, [sp, #16]
 80029aa:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80029ae:	2e00      	cmp	r6, #0
 80029b0:	f47e a8c2 	bne.w	8000b38 <d_print_comp_inner+0x184>
 80029b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80029b8:	29ff      	cmp	r1, #255	; 0xff
 80029ba:	f000 8349 	beq.w	8003050 <d_print_comp_inner+0x269c>
 80029be:	2320      	movs	r3, #32
 80029c0:	1c4a      	adds	r2, r1, #1
 80029c2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80029c6:	5463      	strb	r3, [r4, r1]
 80029c8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80029cc:	f7fe bd0e 	b.w	80013ec <d_print_comp_inner+0xa38>
 80029d0:	462a      	mov	r2, r5
 80029d2:	4639      	mov	r1, r7
 80029d4:	4620      	mov	r0, r4
 80029d6:	f000 fc07 	bl	80031e8 <d_print_comp>
 80029da:	f7fe b8ad 	b.w	8000b38 <d_print_comp_inner+0x184>
 80029de:	2500      	movs	r5, #0
 80029e0:	4619      	mov	r1, r3
 80029e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80029e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80029ea:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80029ee:	4620      	mov	r0, r4
 80029f0:	4798      	blx	r3
 80029f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80029fc:	462b      	mov	r3, r5
 80029fe:	2201      	movs	r2, #1
 8002a00:	f7fe bb68 	b.w	80010d4 <d_print_comp_inner+0x720>
 8002a04:	ab14      	add	r3, sp, #80	; 0x50
 8002a06:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002a0a:	6842      	ldr	r2, [r0, #4]
 8002a0c:	f843 1d40 	str.w	r1, [r3, #-64]!
 8002a10:	2000      	movs	r0, #0
 8002a12:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8002a16:	9505      	str	r5, [sp, #20]
 8002a18:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002a1c:	9006      	str	r0, [sp, #24]
 8002a1e:	9107      	str	r1, [sp, #28]
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	f47e af70 	bne.w	8001906 <d_print_comp_inner+0xf52>
 8002a26:	f7fe bf6d 	b.w	8001904 <d_print_comp_inner+0xf50>
 8002a2a:	2500      	movs	r5, #0
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002a32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002a36:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	4798      	blx	r3
 8002a3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002a48:	462b      	mov	r3, r5
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	f7ff b879 	b.w	8001b42 <d_print_comp_inner+0x118e>
 8002a50:	2600      	movs	r6, #0
 8002a52:	4619      	mov	r1, r3
 8002a54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002a58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002a5c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002a60:	4620      	mov	r0, r4
 8002a62:	4798      	blx	r3
 8002a64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002a6e:	4633      	mov	r3, r6
 8002a70:	2101      	movs	r1, #1
 8002a72:	f7ff b850 	b.w	8001b16 <d_print_comp_inner+0x1162>
 8002a76:	2200      	movs	r2, #0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8002a7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002a82:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002a86:	4620      	mov	r0, r4
 8002a88:	4798      	blx	r3
 8002a8a:	2329      	movs	r3, #41	; 0x29
 8002a8c:	7023      	strb	r3, [r4, #0]
 8002a8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002a92:	782a      	ldrb	r2, [r5, #0]
 8002a94:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a98:	2101      	movs	r1, #1
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	2a3c      	cmp	r2, #60	; 0x3c
 8002a9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002aa2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002aa6:	f47e ac02 	bne.w	80012ae <d_print_comp_inner+0x8fa>
 8002aaa:	e683      	b.n	80027b4 <d_print_comp_inner+0x1e00>
 8002aac:	4648      	mov	r0, r9
 8002aae:	496e      	ldr	r1, [pc, #440]	; (8002c68 <d_print_comp_inner+0x22b4>)
 8002ab0:	f005 fd36 	bl	8008520 <strcmp>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	f040 8214 	bne.w	8002ee2 <d_print_comp_inner+0x252e>
 8002aba:	68ab      	ldr	r3, [r5, #8]
 8002abc:	4639      	mov	r1, r7
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f001 fa3d 	bl	8003f40 <d_print_subexpr>
 8002ac6:	f7fe b81f 	b.w	8000b08 <d_print_comp_inner+0x154>
 8002aca:	f04f 0800 	mov.w	r8, #0
 8002ace:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ad2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ad6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002ada:	4620      	mov	r0, r4
 8002adc:	4798      	blx	r3
 8002ade:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002aea:	2201      	movs	r2, #1
 8002aec:	f7fe bbc4 	b.w	8001278 <d_print_comp_inner+0x8c4>
 8002af0:	2500      	movs	r5, #0
 8002af2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002af6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002afa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002afe:	4620      	mov	r0, r4
 8002b00:	4798      	blx	r3
 8002b02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b06:	3301      	adds	r3, #1
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f7ff bbd0 	b.w	80022b4 <d_print_comp_inner+0x1900>
 8002b14:	4674      	mov	r4, lr
 8002b16:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8002b1a:	b389      	cbz	r1, 8002b80 <d_print_comp_inner+0x21cc>
 8002b1c:	680a      	ldr	r2, [r1, #0]
 8002b1e:	4290      	cmp	r0, r2
 8002b20:	d00a      	beq.n	8002b38 <d_print_comp_inner+0x2184>
 8002b22:	460b      	mov	r3, r1
 8002b24:	e004      	b.n	8002b30 <d_print_comp_inner+0x217c>
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	b353      	cbz	r3, 8002b80 <d_print_comp_inner+0x21cc>
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4290      	cmp	r0, r2
 8002b2e:	d003      	beq.n	8002b38 <d_print_comp_inner+0x2184>
 8002b30:	4295      	cmp	r5, r2
 8002b32:	d1f8      	bne.n	8002b26 <d_print_comp_inner+0x2172>
 8002b34:	4299      	cmp	r1, r3
 8002b36:	d0f6      	beq.n	8002b26 <d_print_comp_inner+0x2172>
 8002b38:	1d01      	adds	r1, r0, #4
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f7fd fe94 	bl	8000868 <d_lookup_template_argument.isra.6>
 8002b40:	f04f 0800 	mov.w	r8, #0
 8002b44:	2800      	cmp	r0, #0
 8002b46:	f43d afff 	beq.w	8000b48 <d_print_comp_inner+0x194>
 8002b4a:	7803      	ldrb	r3, [r0, #0]
 8002b4c:	2b2f      	cmp	r3, #47	; 0x2f
 8002b4e:	f47e aec2 	bne.w	80018d6 <d_print_comp_inner+0xf22>
 8002b52:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002b56:	e008      	b.n	8002b6a <d_print_comp_inner+0x21b6>
 8002b58:	6880      	ldr	r0, [r0, #8]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f43d afee 	beq.w	8000b3e <d_print_comp_inner+0x18a>
 8002b62:	7802      	ldrb	r2, [r0, #0]
 8002b64:	2a2f      	cmp	r2, #47	; 0x2f
 8002b66:	f47d afea 	bne.w	8000b3e <d_print_comp_inner+0x18a>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	dcf4      	bgt.n	8002b58 <d_print_comp_inner+0x21a4>
 8002b6e:	f47d afe6 	bne.w	8000b3e <d_print_comp_inner+0x18a>
 8002b72:	6840      	ldr	r0, [r0, #4]
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f43d afe2 	beq.w	8000b3e <d_print_comp_inner+0x18a>
 8002b7a:	7803      	ldrb	r3, [r0, #0]
 8002b7c:	f7fe beab 	b.w	80018d6 <d_print_comp_inner+0xf22>
 8002b80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002b84:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8002b88:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8002b8c:	1d01      	adds	r1, r0, #4
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f7fd fe6a 	bl	8000868 <d_lookup_template_argument.isra.6>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	f43d afd5 	beq.w	8000b44 <d_print_comp_inner+0x190>
 8002b9a:	f04f 0801 	mov.w	r8, #1
 8002b9e:	e7d4      	b.n	8002b4a <d_print_comp_inner+0x2196>
 8002ba0:	7809      	ldrb	r1, [r1, #0]
 8002ba2:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 8002ba6:	2801      	cmp	r0, #1
 8002ba8:	d903      	bls.n	8002bb2 <d_print_comp_inner+0x21fe>
 8002baa:	3972      	subs	r1, #114	; 0x72
 8002bac:	2901      	cmp	r1, #1
 8002bae:	f63d af6c 	bhi.w	8000a8a <d_print_comp_inner+0xd6>
 8002bb2:	4639      	mov	r1, r7
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f001 f985 	bl	8003ec4 <d_print_expr_op>
 8002bba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002bbe:	29ff      	cmp	r1, #255	; 0xff
 8002bc0:	f000 8263 	beq.w	800308a <d_print_comp_inner+0x26d6>
 8002bc4:	1c4a      	adds	r2, r1, #1
 8002bc6:	233c      	movs	r3, #60	; 0x3c
 8002bc8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002bcc:	5463      	strb	r3, [r4, r1]
 8002bce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002bd2:	68ab      	ldr	r3, [r5, #8]
 8002bd4:	4639      	mov	r1, r7
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f000 fb05 	bl	80031e8 <d_print_comp>
 8002bde:	2202      	movs	r2, #2
 8002be0:	4922      	ldr	r1, [pc, #136]	; (8002c6c <d_print_comp_inner+0x22b8>)
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7fd fc28 	bl	8000438 <d_append_buffer>
 8002be8:	68ab      	ldr	r3, [r5, #8]
 8002bea:	4639      	mov	r1, r7
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f000 fafa 	bl	80031e8 <d_print_comp>
 8002bf4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002bf8:	29ff      	cmp	r1, #255	; 0xff
 8002bfa:	f000 81d8 	beq.w	8002fae <d_print_comp_inner+0x25fa>
 8002bfe:	2329      	movs	r3, #41	; 0x29
 8002c00:	1c4a      	adds	r2, r1, #1
 8002c02:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002c06:	5463      	strb	r3, [r4, r1]
 8002c08:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002c0c:	f7fd bf94 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002c10:	4917      	ldr	r1, [pc, #92]	; (8002c70 <d_print_comp_inner+0x22bc>)
 8002c12:	6870      	ldr	r0, [r6, #4]
 8002c14:	f014 fe06 	bl	8017824 <strncmp>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	f47e af6c 	bne.w	8001af6 <d_print_comp_inner+0x1142>
 8002c1e:	68aa      	ldr	r2, [r5, #8]
 8002c20:	4639      	mov	r1, r7
 8002c22:	4620      	mov	r0, r4
 8002c24:	f000 fae0 	bl	80031e8 <d_print_comp>
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4912      	ldr	r1, [pc, #72]	; (8002c74 <d_print_comp_inner+0x22c0>)
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7fd fc03 	bl	8000438 <d_append_buffer>
 8002c32:	f7fe bf8c 	b.w	8001b4e <d_print_comp_inner+0x119a>
 8002c36:	2600      	movs	r6, #0
 8002c38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c40:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002c44:	4620      	mov	r0, r4
 8002c46:	4798      	blx	r3
 8002c48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	4631      	mov	r1, r6
 8002c50:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002c54:	2201      	movs	r2, #1
 8002c56:	f7ff b81a 	b.w	8001c8e <d_print_comp_inner+0x12da>
 8002c5a:	bf00      	nop
 8002c5c:	0801bc2c 	.word	0x0801bc2c
 8002c60:	0801bc3c 	.word	0x0801bc3c
 8002c64:	0801bc40 	.word	0x0801bc40
 8002c68:	0801bdd8 	.word	0x0801bdd8
 8002c6c:	0801bdd4 	.word	0x0801bdd4
 8002c70:	0801bc44 	.word	0x0801bc44
 8002c74:	0801bc4c 	.word	0x0801bc4c
 8002c78:	68aa      	ldr	r2, [r5, #8]
 8002c7a:	f892 8000 	ldrb.w	r8, [r2]
 8002c7e:	f1b8 0f00 	cmp.w	r8, #0
 8002c82:	f47e aaf3 	bne.w	800126c <d_print_comp_inner+0x8b8>
 8002c86:	2b3c      	cmp	r3, #60	; 0x3c
 8002c88:	f000 81f3 	beq.w	8003072 <d_print_comp_inner+0x26be>
 8002c8c:	68aa      	ldr	r2, [r5, #8]
 8002c8e:	4639      	mov	r1, r7
 8002c90:	4620      	mov	r0, r4
 8002c92:	3e02      	subs	r6, #2
 8002c94:	f000 faa8 	bl	80031e8 <d_print_comp>
 8002c98:	2e04      	cmp	r6, #4
 8002c9a:	f63d af4d 	bhi.w	8000b38 <d_print_comp_inner+0x184>
 8002c9e:	e8df f006 	tbb	[pc, r6]
 8002ca2:	1826      	.short	0x1826
 8002ca4:	0a11      	.short	0x0a11
 8002ca6:	03          	.byte	0x03
 8002ca7:	00          	.byte	0x00
 8002ca8:	4620      	mov	r0, r4
 8002caa:	2203      	movs	r2, #3
 8002cac:	49e3      	ldr	r1, [pc, #908]	; (800303c <d_print_comp_inner+0x2688>)
 8002cae:	f7fd fbc3 	bl	8000438 <d_append_buffer>
 8002cb2:	f7fd bf41 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	2202      	movs	r2, #2
 8002cba:	49e1      	ldr	r1, [pc, #900]	; (8003040 <d_print_comp_inner+0x268c>)
 8002cbc:	f7fd fbbc 	bl	8000438 <d_append_buffer>
 8002cc0:	f7fd bf3a 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	49de      	ldr	r1, [pc, #888]	; (8003044 <d_print_comp_inner+0x2690>)
 8002cca:	f7fd fbb5 	bl	8000438 <d_append_buffer>
 8002cce:	f7fd bf33 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002cd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cd6:	29ff      	cmp	r1, #255	; 0xff
 8002cd8:	f000 825f 	beq.w	800319a <d_print_comp_inner+0x27e6>
 8002cdc:	236c      	movs	r3, #108	; 0x6c
 8002cde:	1c4a      	adds	r2, r1, #1
 8002ce0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002ce4:	5463      	strb	r3, [r4, r1]
 8002ce6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002cea:	f7fd bf25 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002cee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002cf2:	29ff      	cmp	r1, #255	; 0xff
 8002cf4:	f000 8263 	beq.w	80031be <d_print_comp_inner+0x280a>
 8002cf8:	2375      	movs	r3, #117	; 0x75
 8002cfa:	1c4a      	adds	r2, r1, #1
 8002cfc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d00:	5463      	strb	r3, [r4, r1]
 8002d02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d06:	f7fd bf17 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4798      	blx	r3
 8002d1c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002d20:	3301      	adds	r3, #1
 8002d22:	4629      	mov	r1, r5
 8002d24:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002d28:	2201      	movs	r2, #1
 8002d2a:	e419      	b.n	8002560 <d_print_comp_inner+0x1bac>
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d38:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	4798      	blx	r3
 8002d40:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002d4a:	4633      	mov	r3, r6
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	f7fe ba2e 	b.w	80011ae <d_print_comp_inner+0x7fa>
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	2901      	cmp	r1, #1
 8002d56:	f47d ae9c 	bne.w	8000a92 <d_print_comp_inner+0xde>
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d60:	f47d ae97 	bne.w	8000a92 <d_print_comp_inner+0xde>
 8002d64:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002d68:	29ff      	cmp	r1, #255	; 0xff
 8002d6a:	f000 81eb 	beq.w	8003144 <d_print_comp_inner+0x2790>
 8002d6e:	1c4a      	adds	r2, r1, #1
 8002d70:	2328      	movs	r3, #40	; 0x28
 8002d72:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002d76:	5463      	strb	r3, [r4, r1]
 8002d78:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002d7c:	686a      	ldr	r2, [r5, #4]
 8002d7e:	68ae      	ldr	r6, [r5, #8]
 8002d80:	f7fd be87 	b.w	8000a92 <d_print_comp_inner+0xde>
 8002d84:	2500      	movs	r5, #0
 8002d86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d8a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002d8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d92:	4620      	mov	r0, r4
 8002d94:	4798      	blx	r3
 8002d96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002da2:	e4c0      	b.n	8002726 <d_print_comp_inner+0x1d72>
 8002da4:	2500      	movs	r5, #0
 8002da6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002daa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002dae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002db2:	4620      	mov	r0, r4
 8002db4:	4798      	blx	r3
 8002db6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002dc2:	f7ff b8c6 	b.w	8001f52 <d_print_comp_inner+0x159e>
 8002dc6:	2600      	movs	r6, #0
 8002dc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002dcc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002dd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	4798      	blx	r3
 8002dd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4631      	mov	r1, r6
 8002de0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002de4:	f7fe b8e2 	b.w	8000fac <d_print_comp_inner+0x5f8>
 8002de8:	f04f 0800 	mov.w	r8, #0
 8002dec:	4619      	mov	r1, r3
 8002dee:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8002df2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8002df6:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8002dfa:	4798      	blx	r3
 8002dfc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002e06:	4643      	mov	r3, r8
 8002e08:	f7fe b8bd 	b.w	8000f86 <d_print_comp_inner+0x5d2>
 8002e0c:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002e10:	4619      	mov	r1, r3
 8002e12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	4798      	blx	r3
 8002e1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8002e28:	4633      	mov	r3, r6
 8002e2a:	f7ff bb87 	b.w	800253c <d_print_comp_inner+0x1b88>
 8002e2e:	255f      	movs	r5, #95	; 0x5f
 8002e30:	f7ff ba7b 	b.w	800232a <d_print_comp_inner+0x1976>
 8002e34:	68aa      	ldr	r2, [r5, #8]
 8002e36:	4639      	mov	r1, r7
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f000 f9d5 	bl	80031e8 <d_print_comp>
 8002e3e:	9b06      	ldr	r3, [sp, #24]
 8002e40:	9a00      	ldr	r2, [sp, #0]
 8002e42:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f43e aabc 	beq.w	80013c4 <d_print_comp_inner+0xa10>
 8002e4c:	f7fd be74 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002e50:	4642      	mov	r2, r8
 8002e52:	4639      	mov	r1, r7
 8002e54:	4620      	mov	r0, r4
 8002e56:	f001 f873 	bl	8003f40 <d_print_subexpr>
 8002e5a:	464a      	mov	r2, r9
 8002e5c:	4639      	mov	r1, r7
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f001 f830 	bl	8003ec4 <d_print_expr_op>
 8002e64:	4632      	mov	r2, r6
 8002e66:	4639      	mov	r1, r7
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f001 f869 	bl	8003f40 <d_print_subexpr>
 8002e6e:	4620      	mov	r0, r4
 8002e70:	2203      	movs	r2, #3
 8002e72:	4975      	ldr	r1, [pc, #468]	; (8003048 <d_print_comp_inner+0x2694>)
 8002e74:	f7fd fae0 	bl	8000438 <d_append_buffer>
 8002e78:	462a      	mov	r2, r5
 8002e7a:	4639      	mov	r1, r7
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f001 f85f 	bl	8003f40 <d_print_subexpr>
 8002e82:	f7fd be59 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002e86:	6893      	ldr	r3, [r2, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b29      	cmp	r3, #41	; 0x29
 8002e8c:	bf1c      	itt	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8002e94:	6852      	ldr	r2, [r2, #4]
 8002e96:	4639      	mov	r1, r7
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f001 f851 	bl	8003f40 <d_print_subexpr>
 8002e9e:	f7fd be07 	b.w	8000ab0 <d_print_comp_inner+0xfc>
 8002ea2:	686a      	ldr	r2, [r5, #4]
 8002ea4:	4639      	mov	r1, r7
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f001 f84a 	bl	8003f40 <d_print_subexpr>
 8002eac:	4620      	mov	r0, r4
 8002eae:	2203      	movs	r2, #3
 8002eb0:	4966      	ldr	r1, [pc, #408]	; (800304c <d_print_comp_inner+0x2698>)
 8002eb2:	f7fd fac1 	bl	8000438 <d_append_buffer>
 8002eb6:	f7fd be3f 	b.w	8000b38 <d_print_comp_inner+0x184>
 8002eba:	686b      	ldr	r3, [r5, #4]
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	2a01      	cmp	r2, #1
 8002ec0:	f47f ab23 	bne.w	800250a <d_print_comp_inner+0x1b56>
 8002ec4:	68aa      	ldr	r2, [r5, #8]
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	2a29      	cmp	r2, #41	; 0x29
 8002eca:	bf08      	it	eq
 8002ecc:	461d      	moveq	r5, r3
 8002ece:	f7ff bb1c 	b.w	800250a <d_print_comp_inner+0x1b56>
 8002ed2:	ab14      	add	r3, sp, #80	; 0x50
 8002ed4:	9603      	str	r6, [sp, #12]
 8002ed6:	f843 cd48 	str.w	ip, [r3, #-72]!
 8002eda:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8002ede:	f7fe be9d 	b.w	8001c1c <d_print_comp_inner+0x1268>
 8002ee2:	4642      	mov	r2, r8
 8002ee4:	4639      	mov	r1, r7
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f000 ffec 	bl	8003ec4 <d_print_expr_op>
 8002eec:	e5e5      	b.n	8002aba <d_print_comp_inner+0x2106>
 8002eee:	2500      	movs	r5, #0
 8002ef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ef4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002ef8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002efc:	4620      	mov	r0, r4
 8002efe:	4798      	blx	r3
 8002f00:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f04:	3301      	adds	r3, #1
 8002f06:	4629      	mov	r1, r5
 8002f08:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002f0c:	f7ff bbde 	b.w	80026cc <d_print_comp_inner+0x1d18>
 8002f10:	f04f 0800 	mov.w	r8, #0
 8002f14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002f1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f20:	4620      	mov	r0, r4
 8002f22:	4798      	blx	r3
 8002f24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f28:	3301      	adds	r3, #1
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002f30:	e440      	b.n	80027b4 <d_print_comp_inner+0x1e00>
 8002f32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f36:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8002f3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f3e:	4620      	mov	r0, r4
 8002f40:	4798      	blx	r3
 8002f42:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f46:	3301      	adds	r3, #1
 8002f48:	4639      	mov	r1, r7
 8002f4a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002f4e:	f7fe be7c 	b.w	8001c4a <d_print_comp_inner+0x1296>
 8002f52:	9b02      	ldr	r3, [sp, #8]
 8002f54:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8002f58:	f7fe be69 	b.w	8001c2e <d_print_comp_inner+0x127a>
 8002f5c:	4664      	mov	r4, ip
 8002f5e:	f7fe bf39 	b.w	8001dd4 <d_print_comp_inner+0x1420>
 8002f62:	2600      	movs	r6, #0
 8002f64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f68:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002f6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f70:	4620      	mov	r0, r4
 8002f72:	4798      	blx	r3
 8002f74:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4631      	mov	r1, r6
 8002f7c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002f80:	f7ff bbb2 	b.w	80026e8 <d_print_comp_inner+0x1d34>
 8002f84:	4660      	mov	r0, ip
 8002f86:	46e0      	mov	r8, ip
 8002f88:	f7fe bcb1 	b.w	80018ee <d_print_comp_inner+0xf3a>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f92:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002f96:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4798      	blx	r3
 8002f9e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002faa:	f7ff bbab 	b.w	8002704 <d_print_comp_inner+0x1d50>
 8002fae:	2500      	movs	r5, #0
 8002fb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fb4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8002fb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	4798      	blx	r3
 8002fc0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002fc4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8002fc8:	3301      	adds	r3, #1
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002fd0:	e615      	b.n	8002bfe <d_print_comp_inner+0x224a>
 8002fd2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8002fd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4798      	blx	r3
 8002fe2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4631      	mov	r1, r6
 8002fea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8002fee:	f7fd bd72 	b.w	8000ad6 <d_print_comp_inner+0x122>
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ff8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8002ffc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003000:	4620      	mov	r0, r4
 8003002:	4798      	blx	r3
 8003004:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003008:	3301      	adds	r3, #1
 800300a:	4631      	mov	r1, r6
 800300c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003010:	f7fd bd73 	b.w	8000afa <d_print_comp_inner+0x146>
 8003014:	686a      	ldr	r2, [r5, #4]
 8003016:	4639      	mov	r1, r7
 8003018:	4620      	mov	r0, r4
 800301a:	f000 ff91 	bl	8003f40 <d_print_subexpr>
 800301e:	4632      	mov	r2, r6
 8003020:	4639      	mov	r1, r7
 8003022:	4620      	mov	r0, r4
 8003024:	f000 ff4e 	bl	8003ec4 <d_print_expr_op>
 8003028:	f7fd bd86 	b.w	8000b38 <d_print_comp_inner+0x184>
 800302c:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 8003030:	2301      	movs	r3, #1
 8003032:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003036:	f7fd bd7f 	b.w	8000b38 <d_print_comp_inner+0x184>
 800303a:	bf00      	nop
 800303c:	0801bdf8 	.word	0x0801bdf8
 8003040:	0801bdf4 	.word	0x0801bdf4
 8003044:	0801bdf0 	.word	0x0801bdf0
 8003048:	0801bde4 	.word	0x0801bde4
 800304c:	0801be28 	.word	0x0801be28
 8003050:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003054:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003058:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800305c:	4620      	mov	r0, r4
 800305e:	4798      	blx	r3
 8003060:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003064:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003068:	3301      	adds	r3, #1
 800306a:	4631      	mov	r1, r6
 800306c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003070:	e4a5      	b.n	80029be <d_print_comp_inner+0x200a>
 8003072:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003076:	29ff      	cmp	r1, #255	; 0xff
 8003078:	d054      	beq.n	8003124 <d_print_comp_inner+0x2770>
 800307a:	232d      	movs	r3, #45	; 0x2d
 800307c:	1c4a      	adds	r2, r1, #1
 800307e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003082:	5463      	strb	r3, [r4, r1]
 8003084:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003088:	e600      	b.n	8002c8c <d_print_comp_inner+0x22d8>
 800308a:	2600      	movs	r6, #0
 800308c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003090:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8003094:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003098:	4620      	mov	r0, r4
 800309a:	4798      	blx	r3
 800309c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80030a0:	3301      	adds	r3, #1
 80030a2:	4631      	mov	r1, r6
 80030a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80030a8:	e58c      	b.n	8002bc4 <d_print_comp_inner+0x2210>
 80030aa:	f04f 0800 	mov.w	r8, #0
 80030ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80030b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030ba:	4620      	mov	r0, r4
 80030bc:	4798      	blx	r3
 80030be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80030c2:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80030c6:	3301      	adds	r3, #1
 80030c8:	4641      	mov	r1, r8
 80030ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80030ce:	f7fe b9c2 	b.w	8001456 <d_print_comp_inner+0xaa2>
 80030d2:	4688      	mov	r8, r1
 80030d4:	e51f      	b.n	8002b16 <d_print_comp_inner+0x2162>
 80030d6:	454f      	cmp	r7, r9
 80030d8:	f67f aea9 	bls.w	8002e2e <d_print_comp_inner+0x247a>
 80030dc:	2d5f      	cmp	r5, #95	; 0x5f
 80030de:	f47f aea6 	bne.w	8002e2e <d_print_comp_inner+0x247a>
 80030e2:	28ff      	cmp	r0, #255	; 0xff
 80030e4:	f63f a921 	bhi.w	800232a <d_print_comp_inner+0x1976>
 80030e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80030ec:	29ff      	cmp	r1, #255	; 0xff
 80030ee:	b2c5      	uxtb	r5, r0
 80030f0:	d10f      	bne.n	8003112 <d_print_comp_inner+0x275e>
 80030f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80030fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030fe:	4620      	mov	r0, r4
 8003100:	4798      	blx	r3
 8003102:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003106:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800310a:	3301      	adds	r3, #1
 800310c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003110:	2100      	movs	r1, #0
 8003112:	1c4b      	adds	r3, r1, #1
 8003114:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003118:	464e      	mov	r6, r9
 800311a:	5465      	strb	r5, [r4, r1]
 800311c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003120:	f7ff b90d 	b.w	800233e <d_print_comp_inner+0x198a>
 8003124:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003128:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800312c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003130:	4798      	blx	r3
 8003132:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003136:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800313a:	3301      	adds	r3, #1
 800313c:	4641      	mov	r1, r8
 800313e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003142:	e79a      	b.n	800307a <d_print_comp_inner+0x26c6>
 8003144:	2600      	movs	r6, #0
 8003146:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800314a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800314e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003152:	4620      	mov	r0, r4
 8003154:	4798      	blx	r3
 8003156:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800315a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800315e:	3301      	adds	r3, #1
 8003160:	4631      	mov	r1, r6
 8003162:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003166:	e602      	b.n	8002d6e <d_print_comp_inner+0x23ba>
 8003168:	2205      	movs	r2, #5
 800316a:	491e      	ldr	r1, [pc, #120]	; (80031e4 <d_print_comp_inner+0x2830>)
 800316c:	f7fd f964 	bl	8000438 <d_append_buffer>
 8003170:	f7fd bce2 	b.w	8000b38 <d_print_comp_inner+0x184>
 8003174:	2500      	movs	r5, #0
 8003176:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800317a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800317e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003182:	4620      	mov	r0, r4
 8003184:	4798      	blx	r3
 8003186:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800318a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800318e:	3301      	adds	r3, #1
 8003190:	4629      	mov	r1, r5
 8003192:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003196:	f7fd bcc8 	b.w	8000b2a <d_print_comp_inner+0x176>
 800319a:	2500      	movs	r5, #0
 800319c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031a0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80031a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031a8:	4620      	mov	r0, r4
 80031aa:	4798      	blx	r3
 80031ac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80031b0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80031b4:	3301      	adds	r3, #1
 80031b6:	4629      	mov	r1, r5
 80031b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80031bc:	e58e      	b.n	8002cdc <d_print_comp_inner+0x2328>
 80031be:	2500      	movs	r5, #0
 80031c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80031c4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80031c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80031cc:	4620      	mov	r0, r4
 80031ce:	4798      	blx	r3
 80031d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80031d4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80031d8:	3301      	adds	r3, #1
 80031da:	4629      	mov	r1, r5
 80031dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80031e0:	e58a      	b.n	8002cf8 <d_print_comp_inner+0x2344>
 80031e2:	bf00      	nop
 80031e4:	0801bdfc 	.word	0x0801bdfc

080031e8 <d_print_comp>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80031ee:	b082      	sub	sp, #8
 80031f0:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 80031f4:	4604      	mov	r4, r0
 80031f6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80031fa:	f7fd fbdb 	bl	80009b4 <d_print_comp_inner>
 80031fe:	9b01      	ldr	r3, [sp, #4]
 8003200:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003204:	b002      	add	sp, #8
 8003206:	bd10      	pop	{r4, pc}

08003208 <d_print_mod>:
 8003208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800320c:	7813      	ldrb	r3, [r2, #0]
 800320e:	3b03      	subs	r3, #3
 8003210:	b082      	sub	sp, #8
 8003212:	4615      	mov	r5, r2
 8003214:	4604      	mov	r4, r0
 8003216:	4688      	mov	r8, r1
 8003218:	2b2a      	cmp	r3, #42	; 0x2a
 800321a:	f200 81cd 	bhi.w	80035b8 <d_print_mod+0x3b0>
 800321e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003222:	0051      	.short	0x0051
 8003224:	01cb01cb 	.word	0x01cb01cb
 8003228:	01cb01cb 	.word	0x01cb01cb
 800322c:	01cb01cb 	.word	0x01cb01cb
 8003230:	01cb01cb 	.word	0x01cb01cb
 8003234:	01cb01cb 	.word	0x01cb01cb
 8003238:	01cb01cb 	.word	0x01cb01cb
 800323c:	01cb01cb 	.word	0x01cb01cb
 8003240:	01cb01cb 	.word	0x01cb01cb
 8003244:	01cb01cb 	.word	0x01cb01cb
 8003248:	01cb01cb 	.word	0x01cb01cb
 800324c:	006201cb 	.word	0x006201cb
 8003250:	00ac0087 	.word	0x00ac0087
 8003254:	00870062 	.word	0x00870062
 8003258:	00d000ac 	.word	0x00d000ac
 800325c:	011800e9 	.word	0x011800e9
 8003260:	01370126 	.word	0x01370126
 8003264:	013d013a 	.word	0x013d013a
 8003268:	01cb0163 	.word	0x01cb0163
 800326c:	01cb01cb 	.word	0x01cb01cb
 8003270:	018901cb 	.word	0x018901cb
 8003274:	002b01cb 	.word	0x002b01cb
 8003278:	4ed6      	ldr	r6, [pc, #856]	; (80035d4 <d_print_mod+0x3cc>)
 800327a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800327e:	f106 0a0a 	add.w	sl, r6, #10
 8003282:	f04f 0900 	mov.w	r9, #0
 8003286:	e009      	b.n	800329c <d_print_mod+0x94>
 8003288:	460b      	mov	r3, r1
 800328a:	3101      	adds	r1, #1
 800328c:	45b2      	cmp	sl, r6
 800328e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003292:	54e7      	strb	r7, [r4, r3]
 8003294:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003298:	f000 81ac 	beq.w	80035f4 <d_print_mod+0x3ec>
 800329c:	29ff      	cmp	r1, #255	; 0xff
 800329e:	f816 7b01 	ldrb.w	r7, [r6], #1
 80032a2:	d1f1      	bne.n	8003288 <d_print_mod+0x80>
 80032a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032a8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80032ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032b0:	4620      	mov	r0, r4
 80032b2:	4798      	blx	r3
 80032b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80032b8:	3301      	adds	r3, #1
 80032ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80032be:	2101      	movs	r1, #1
 80032c0:	2300      	movs	r3, #0
 80032c2:	e7e3      	b.n	800328c <d_print_mod+0x84>
 80032c4:	686a      	ldr	r2, [r5, #4]
 80032c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032ca:	9200      	str	r2, [sp, #0]
 80032cc:	4641      	mov	r1, r8
 80032ce:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 80032d2:	4620      	mov	r0, r4
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	f7fd fb6d 	bl	80009b4 <d_print_comp_inner>
 80032da:	9b01      	ldr	r3, [sp, #4]
 80032dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032e0:	b002      	add	sp, #8
 80032e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e6:	4dbc      	ldr	r5, [pc, #752]	; (80035d8 <d_print_mod+0x3d0>)
 80032e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80032ec:	f105 0709 	add.w	r7, r5, #9
 80032f0:	f04f 0800 	mov.w	r8, #0
 80032f4:	e008      	b.n	8003308 <d_print_mod+0x100>
 80032f6:	460b      	mov	r3, r1
 80032f8:	3101      	adds	r1, #1
 80032fa:	42af      	cmp	r7, r5
 80032fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003300:	54e6      	strb	r6, [r4, r3]
 8003302:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003306:	d0eb      	beq.n	80032e0 <d_print_mod+0xd8>
 8003308:	29ff      	cmp	r1, #255	; 0xff
 800330a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800330e:	d1f2      	bne.n	80032f6 <d_print_mod+0xee>
 8003310:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003314:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003318:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800331c:	4620      	mov	r0, r4
 800331e:	4798      	blx	r3
 8003320:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003324:	3301      	adds	r3, #1
 8003326:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800332a:	2101      	movs	r1, #1
 800332c:	2300      	movs	r3, #0
 800332e:	e7e4      	b.n	80032fa <d_print_mod+0xf2>
 8003330:	4daa      	ldr	r5, [pc, #680]	; (80035dc <d_print_mod+0x3d4>)
 8003332:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003336:	f105 0709 	add.w	r7, r5, #9
 800333a:	f04f 0800 	mov.w	r8, #0
 800333e:	e008      	b.n	8003352 <d_print_mod+0x14a>
 8003340:	460b      	mov	r3, r1
 8003342:	3101      	adds	r1, #1
 8003344:	42af      	cmp	r7, r5
 8003346:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800334a:	54e6      	strb	r6, [r4, r3]
 800334c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003350:	d0c6      	beq.n	80032e0 <d_print_mod+0xd8>
 8003352:	29ff      	cmp	r1, #255	; 0xff
 8003354:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003358:	d1f2      	bne.n	8003340 <d_print_mod+0x138>
 800335a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800335e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003362:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003366:	4620      	mov	r0, r4
 8003368:	4798      	blx	r3
 800336a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800336e:	3301      	adds	r3, #1
 8003370:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003374:	2101      	movs	r1, #1
 8003376:	2300      	movs	r3, #0
 8003378:	e7e4      	b.n	8003344 <d_print_mod+0x13c>
 800337a:	4d99      	ldr	r5, [pc, #612]	; (80035e0 <d_print_mod+0x3d8>)
 800337c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003380:	1daf      	adds	r7, r5, #6
 8003382:	f04f 0800 	mov.w	r8, #0
 8003386:	e008      	b.n	800339a <d_print_mod+0x192>
 8003388:	460b      	mov	r3, r1
 800338a:	3101      	adds	r1, #1
 800338c:	42af      	cmp	r7, r5
 800338e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003392:	54e6      	strb	r6, [r4, r3]
 8003394:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003398:	d0a2      	beq.n	80032e0 <d_print_mod+0xd8>
 800339a:	29ff      	cmp	r1, #255	; 0xff
 800339c:	f815 6b01 	ldrb.w	r6, [r5], #1
 80033a0:	d1f2      	bne.n	8003388 <d_print_mod+0x180>
 80033a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033ae:	4620      	mov	r0, r4
 80033b0:	4798      	blx	r3
 80033b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80033b6:	3301      	adds	r3, #1
 80033b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80033bc:	2101      	movs	r1, #1
 80033be:	2300      	movs	r3, #0
 80033c0:	e7e4      	b.n	800338c <d_print_mod+0x184>
 80033c2:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80033c6:	2bff      	cmp	r3, #255	; 0xff
 80033c8:	f000 8170 	beq.w	80036ac <d_print_mod+0x4a4>
 80033cc:	1c59      	adds	r1, r3, #1
 80033ce:	2220      	movs	r2, #32
 80033d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033d4:	54e2      	strb	r2, [r4, r3]
 80033d6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80033da:	29ff      	cmp	r1, #255	; 0xff
 80033dc:	f000 8134 	beq.w	8003648 <d_print_mod+0x440>
 80033e0:	1c4a      	adds	r2, r1, #1
 80033e2:	2326      	movs	r3, #38	; 0x26
 80033e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80033e8:	5463      	strb	r3, [r4, r1]
 80033ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80033ee:	b002      	add	sp, #8
 80033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80033f8:	2bff      	cmp	r3, #255	; 0xff
 80033fa:	f000 8168 	beq.w	80036ce <d_print_mod+0x4c6>
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	2220      	movs	r2, #32
 8003402:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003406:	54e2      	strb	r2, [r4, r3]
 8003408:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800340c:	4d75      	ldr	r5, [pc, #468]	; (80035e4 <d_print_mod+0x3dc>)
 800340e:	f04f 0800 	mov.w	r8, #0
 8003412:	1caf      	adds	r7, r5, #2
 8003414:	e009      	b.n	800342a <d_print_mod+0x222>
 8003416:	460b      	mov	r3, r1
 8003418:	3101      	adds	r1, #1
 800341a:	42af      	cmp	r7, r5
 800341c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003420:	54e6      	strb	r6, [r4, r3]
 8003422:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003426:	f43f af5b 	beq.w	80032e0 <d_print_mod+0xd8>
 800342a:	29ff      	cmp	r1, #255	; 0xff
 800342c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003430:	d1f1      	bne.n	8003416 <d_print_mod+0x20e>
 8003432:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003436:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800343a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800343e:	4620      	mov	r0, r4
 8003440:	4798      	blx	r3
 8003442:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003446:	3301      	adds	r3, #1
 8003448:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800344c:	2101      	movs	r1, #1
 800344e:	2300      	movs	r3, #0
 8003450:	e7e3      	b.n	800341a <d_print_mod+0x212>
 8003452:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003456:	29ff      	cmp	r1, #255	; 0xff
 8003458:	f000 8107 	beq.w	800366a <d_print_mod+0x462>
 800345c:	1c4a      	adds	r2, r1, #1
 800345e:	2320      	movs	r3, #32
 8003460:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003464:	5463      	strb	r3, [r4, r1]
 8003466:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800346a:	68aa      	ldr	r2, [r5, #8]
 800346c:	e72b      	b.n	80032c6 <d_print_mod+0xbe>
 800346e:	f011 0804 	ands.w	r8, r1, #4
 8003472:	f47f af35 	bne.w	80032e0 <d_print_mod+0xd8>
 8003476:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800347a:	29ff      	cmp	r1, #255	; 0xff
 800347c:	f000 8138 	beq.w	80036f0 <d_print_mod+0x4e8>
 8003480:	1c4a      	adds	r2, r1, #1
 8003482:	232a      	movs	r3, #42	; 0x2a
 8003484:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003488:	5463      	strb	r3, [r4, r1]
 800348a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800348e:	e727      	b.n	80032e0 <d_print_mod+0xd8>
 8003490:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003494:	e7a1      	b.n	80033da <d_print_mod+0x1d2>
 8003496:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800349a:	e7b7      	b.n	800340c <d_print_mod+0x204>
 800349c:	4d52      	ldr	r5, [pc, #328]	; (80035e8 <d_print_mod+0x3e0>)
 800349e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80034a2:	f105 0708 	add.w	r7, r5, #8
 80034a6:	f04f 0800 	mov.w	r8, #0
 80034aa:	e009      	b.n	80034c0 <d_print_mod+0x2b8>
 80034ac:	460b      	mov	r3, r1
 80034ae:	3101      	adds	r1, #1
 80034b0:	42af      	cmp	r7, r5
 80034b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034b6:	54e6      	strb	r6, [r4, r3]
 80034b8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80034bc:	f43f af10 	beq.w	80032e0 <d_print_mod+0xd8>
 80034c0:	29ff      	cmp	r1, #255	; 0xff
 80034c2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80034c6:	d1f1      	bne.n	80034ac <d_print_mod+0x2a4>
 80034c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80034d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034d4:	4620      	mov	r0, r4
 80034d6:	4798      	blx	r3
 80034d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80034dc:	3301      	adds	r3, #1
 80034de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80034e2:	2101      	movs	r1, #1
 80034e4:	2300      	movs	r3, #0
 80034e6:	e7e3      	b.n	80034b0 <d_print_mod+0x2a8>
 80034e8:	4d40      	ldr	r5, [pc, #256]	; (80035ec <d_print_mod+0x3e4>)
 80034ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80034ee:	f105 070a 	add.w	r7, r5, #10
 80034f2:	f04f 0800 	mov.w	r8, #0
 80034f6:	e009      	b.n	800350c <d_print_mod+0x304>
 80034f8:	460b      	mov	r3, r1
 80034fa:	3101      	adds	r1, #1
 80034fc:	42af      	cmp	r7, r5
 80034fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003502:	54e6      	strb	r6, [r4, r3]
 8003504:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003508:	f43f aeea 	beq.w	80032e0 <d_print_mod+0xd8>
 800350c:	29ff      	cmp	r1, #255	; 0xff
 800350e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003512:	d1f1      	bne.n	80034f8 <d_print_mod+0x2f0>
 8003514:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003518:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800351c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003520:	4620      	mov	r0, r4
 8003522:	4798      	blx	r3
 8003524:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003528:	3301      	adds	r3, #1
 800352a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800352e:	2101      	movs	r1, #1
 8003530:	2300      	movs	r3, #0
 8003532:	e7e3      	b.n	80034fc <d_print_mod+0x2f4>
 8003534:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8003538:	2b28      	cmp	r3, #40	; 0x28
 800353a:	d00a      	beq.n	8003552 <d_print_mod+0x34a>
 800353c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003540:	29ff      	cmp	r1, #255	; 0xff
 8003542:	d071      	beq.n	8003628 <d_print_mod+0x420>
 8003544:	1c4a      	adds	r2, r1, #1
 8003546:	2320      	movs	r3, #32
 8003548:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800354c:	5463      	strb	r3, [r4, r1]
 800354e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003552:	686a      	ldr	r2, [r5, #4]
 8003554:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003558:	4d25      	ldr	r5, [pc, #148]	; (80035f0 <d_print_mod+0x3e8>)
 800355a:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800355e:	4641      	mov	r1, r8
 8003560:	4620      	mov	r0, r4
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	9200      	str	r2, [sp, #0]
 8003566:	f7fd fa25 	bl	80009b4 <d_print_comp_inner>
 800356a:	9b01      	ldr	r3, [sp, #4]
 800356c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003570:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003574:	1cef      	adds	r7, r5, #3
 8003576:	f04f 0800 	mov.w	r8, #0
 800357a:	e009      	b.n	8003590 <d_print_mod+0x388>
 800357c:	460b      	mov	r3, r1
 800357e:	3101      	adds	r1, #1
 8003580:	42af      	cmp	r7, r5
 8003582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003586:	54e6      	strb	r6, [r4, r3]
 8003588:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800358c:	f43f aea8 	beq.w	80032e0 <d_print_mod+0xd8>
 8003590:	29ff      	cmp	r1, #255	; 0xff
 8003592:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003596:	d1f1      	bne.n	800357c <d_print_mod+0x374>
 8003598:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800359c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80035a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035a4:	4620      	mov	r0, r4
 80035a6:	4798      	blx	r3
 80035a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80035ac:	3301      	adds	r3, #1
 80035ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80035b2:	2101      	movs	r1, #1
 80035b4:	2300      	movs	r3, #0
 80035b6:	e7e3      	b.n	8003580 <d_print_mod+0x378>
 80035b8:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80035bc:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 80035c0:	462a      	mov	r2, r5
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	9500      	str	r5, [sp, #0]
 80035c6:	f7fd f9f5 	bl	80009b4 <d_print_comp_inner>
 80035ca:	9b01      	ldr	r3, [sp, #4]
 80035cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035d0:	e686      	b.n	80032e0 <d_print_mod+0xd8>
 80035d2:	bf00      	nop
 80035d4:	0801bee8 	.word	0x0801bee8
 80035d8:	0801bea7 	.word	0x0801bea7
 80035dc:	0801beb3 	.word	0x0801beb3
 80035e0:	0801bec0 	.word	0x0801bec0
 80035e4:	0801bec8 	.word	0x0801bec8
 80035e8:	0801becb 	.word	0x0801becb
 80035ec:	0801bed8 	.word	0x0801bed8
 80035f0:	0801bee4 	.word	0x0801bee4
 80035f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035f8:	686a      	ldr	r2, [r5, #4]
 80035fa:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 80035fe:	4641      	mov	r1, r8
 8003600:	4620      	mov	r0, r4
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	9200      	str	r2, [sp, #0]
 8003606:	f7fd f9d5 	bl	80009b4 <d_print_comp_inner>
 800360a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800360e:	9b01      	ldr	r3, [sp, #4]
 8003610:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003614:	29ff      	cmp	r1, #255	; 0xff
 8003616:	d038      	beq.n	800368a <d_print_mod+0x482>
 8003618:	1c4a      	adds	r2, r1, #1
 800361a:	2329      	movs	r3, #41	; 0x29
 800361c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003620:	5463      	strb	r3, [r4, r1]
 8003622:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003626:	e65b      	b.n	80032e0 <d_print_mod+0xd8>
 8003628:	2600      	movs	r6, #0
 800362a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800362e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003632:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8003636:	4798      	blx	r3
 8003638:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800363c:	3301      	adds	r3, #1
 800363e:	4631      	mov	r1, r6
 8003640:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003644:	2201      	movs	r2, #1
 8003646:	e77e      	b.n	8003546 <d_print_mod+0x33e>
 8003648:	2500      	movs	r5, #0
 800364a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800364e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003652:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003656:	4620      	mov	r0, r4
 8003658:	4798      	blx	r3
 800365a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800365e:	3301      	adds	r3, #1
 8003660:	4629      	mov	r1, r5
 8003662:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003666:	2201      	movs	r2, #1
 8003668:	e6bb      	b.n	80033e2 <d_print_mod+0x1da>
 800366a:	2600      	movs	r6, #0
 800366c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8003670:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8003674:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8003678:	4798      	blx	r3
 800367a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800367e:	3301      	adds	r3, #1
 8003680:	4631      	mov	r1, r6
 8003682:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003686:	2201      	movs	r2, #1
 8003688:	e6e9      	b.n	800345e <d_print_mod+0x256>
 800368a:	2500      	movs	r5, #0
 800368c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003690:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003694:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003698:	4620      	mov	r0, r4
 800369a:	4798      	blx	r3
 800369c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80036a0:	3301      	adds	r3, #1
 80036a2:	4629      	mov	r1, r5
 80036a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80036a8:	2201      	movs	r2, #1
 80036aa:	e7b6      	b.n	800361a <d_print_mod+0x412>
 80036ac:	2500      	movs	r5, #0
 80036ae:	4619      	mov	r1, r3
 80036b0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80036b4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80036b8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80036bc:	4798      	blx	r3
 80036be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80036c8:	462b      	mov	r3, r5
 80036ca:	2101      	movs	r1, #1
 80036cc:	e67f      	b.n	80033ce <d_print_mod+0x1c6>
 80036ce:	2500      	movs	r5, #0
 80036d0:	4619      	mov	r1, r3
 80036d2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80036d6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80036da:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80036de:	4798      	blx	r3
 80036e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80036ea:	462b      	mov	r3, r5
 80036ec:	2101      	movs	r1, #1
 80036ee:	e687      	b.n	8003400 <d_print_mod+0x1f8>
 80036f0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80036f4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80036f8:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 80036fc:	4798      	blx	r3
 80036fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003702:	3301      	adds	r3, #1
 8003704:	4641      	mov	r1, r8
 8003706:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800370a:	2201      	movs	r2, #1
 800370c:	e6b9      	b.n	8003482 <d_print_mod+0x27a>
 800370e:	bf00      	nop

08003710 <d_print_mod_list>:
 8003710:	2a00      	cmp	r2, #0
 8003712:	f000 809c 	beq.w	800384e <d_print_mod_list+0x13e>
 8003716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371a:	461e      	mov	r6, r3
 800371c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8003720:	b089      	sub	sp, #36	; 0x24
 8003722:	4605      	mov	r5, r0
 8003724:	bb33      	cbnz	r3, 8003774 <d_print_mod_list+0x64>
 8003726:	460f      	mov	r7, r1
 8003728:	4614      	mov	r4, r2
 800372a:	f04f 0801 	mov.w	r8, #1
 800372e:	e002      	b.n	8003736 <d_print_mod_list+0x26>
 8003730:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003734:	b9f3      	cbnz	r3, 8003774 <d_print_mod_list+0x64>
 8003736:	68a3      	ldr	r3, [r4, #8]
 8003738:	b9cb      	cbnz	r3, 800376e <d_print_mod_list+0x5e>
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	7813      	ldrb	r3, [r2, #0]
 800373e:	b91e      	cbnz	r6, 8003748 <d_print_mod_list+0x38>
 8003740:	f1a3 011c 	sub.w	r1, r3, #28
 8003744:	2904      	cmp	r1, #4
 8003746:	d912      	bls.n	800376e <d_print_mod_list+0x5e>
 8003748:	68e1      	ldr	r1, [r4, #12]
 800374a:	f8c4 8008 	str.w	r8, [r4, #8]
 800374e:	2b29      	cmp	r3, #41	; 0x29
 8003750:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8003754:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8003758:	d00f      	beq.n	800377a <d_print_mod_list+0x6a>
 800375a:	2b2a      	cmp	r3, #42	; 0x2a
 800375c:	d018      	beq.n	8003790 <d_print_mod_list+0x80>
 800375e:	2b02      	cmp	r3, #2
 8003760:	d021      	beq.n	80037a6 <d_print_mod_list+0x96>
 8003762:	4639      	mov	r1, r7
 8003764:	4628      	mov	r0, r5
 8003766:	f7ff fd4f 	bl	8003208 <d_print_mod>
 800376a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800376e:	6824      	ldr	r4, [r4, #0]
 8003770:	2c00      	cmp	r4, #0
 8003772:	d1dd      	bne.n	8003730 <d_print_mod_list+0x20>
 8003774:	b009      	add	sp, #36	; 0x24
 8003776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	3208      	adds	r2, #8
 800377e:	4639      	mov	r1, r7
 8003780:	4628      	mov	r0, r5
 8003782:	f000 f9d7 	bl	8003b34 <d_print_function_type.isra.11>
 8003786:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800378a:	b009      	add	sp, #36	; 0x24
 800378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	3204      	adds	r2, #4
 8003794:	4639      	mov	r1, r7
 8003796:	4628      	mov	r0, r5
 8003798:	f000 f8f0 	bl	800397c <d_print_array_type.isra.10>
 800379c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 80037a0:	b009      	add	sp, #36	; 0x24
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	2600      	movs	r6, #0
 80037a8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 80037ac:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 80037b0:	6852      	ldr	r2, [r2, #4]
 80037b2:	4639      	mov	r1, r7
 80037b4:	4628      	mov	r0, r5
 80037b6:	f7ff fd17 	bl	80031e8 <d_print_comp>
 80037ba:	f017 0b04 	ands.w	fp, r7, #4
 80037be:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 80037c2:	d020      	beq.n	8003806 <d_print_mod_list+0xf6>
 80037c4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80037c8:	29ff      	cmp	r1, #255	; 0xff
 80037ca:	f000 80be 	beq.w	800394a <d_print_mod_list+0x23a>
 80037ce:	1c4a      	adds	r2, r1, #1
 80037d0:	232e      	movs	r3, #46	; 0x2e
 80037d2:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 80037d6:	546b      	strb	r3, [r5, r1]
 80037d8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 80037dc:	6863      	ldr	r3, [r4, #4]
 80037de:	689c      	ldr	r4, [r3, #8]
 80037e0:	7823      	ldrb	r3, [r4, #0]
 80037e2:	2b45      	cmp	r3, #69	; 0x45
 80037e4:	d102      	bne.n	80037ec <d_print_mod_list+0xdc>
 80037e6:	e033      	b.n	8003850 <d_print_mod_list+0x140>
 80037e8:	6864      	ldr	r4, [r4, #4]
 80037ea:	7823      	ldrb	r3, [r4, #0]
 80037ec:	3b1c      	subs	r3, #28
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d9fa      	bls.n	80037e8 <d_print_mod_list+0xd8>
 80037f2:	4622      	mov	r2, r4
 80037f4:	4639      	mov	r1, r7
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7ff fcf6 	bl	80031e8 <d_print_comp>
 80037fc:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8003800:	b009      	add	sp, #36	; 0x24
 8003802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003806:	4e59      	ldr	r6, [pc, #356]	; (800396c <d_print_mod_list+0x25c>)
 8003808:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800380c:	f106 0a02 	add.w	sl, r6, #2
 8003810:	e009      	b.n	8003826 <d_print_mod_list+0x116>
 8003812:	460b      	mov	r3, r1
 8003814:	3101      	adds	r1, #1
 8003816:	45b2      	cmp	sl, r6
 8003818:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800381c:	f805 8003 	strb.w	r8, [r5, r3]
 8003820:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8003824:	d0da      	beq.n	80037dc <d_print_mod_list+0xcc>
 8003826:	29ff      	cmp	r1, #255	; 0xff
 8003828:	f816 8b01 	ldrb.w	r8, [r6], #1
 800382c:	d1f1      	bne.n	8003812 <d_print_mod_list+0x102>
 800382e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8003832:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8003836:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800383a:	4628      	mov	r0, r5
 800383c:	4798      	blx	r3
 800383e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8003842:	3301      	adds	r3, #1
 8003844:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003848:	2101      	movs	r1, #1
 800384a:	2300      	movs	r3, #0
 800384c:	e7e3      	b.n	8003816 <d_print_mod_list+0x106>
 800384e:	4770      	bx	lr
 8003850:	4e47      	ldr	r6, [pc, #284]	; (8003970 <d_print_mod_list+0x260>)
 8003852:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8003856:	f106 0a0d 	add.w	sl, r6, #13
 800385a:	f04f 0b00 	mov.w	fp, #0
 800385e:	e009      	b.n	8003874 <d_print_mod_list+0x164>
 8003860:	460b      	mov	r3, r1
 8003862:	3101      	adds	r1, #1
 8003864:	45b2      	cmp	sl, r6
 8003866:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800386a:	f805 8003 	strb.w	r8, [r5, r3]
 800386e:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8003872:	d013      	beq.n	800389c <d_print_mod_list+0x18c>
 8003874:	29ff      	cmp	r1, #255	; 0xff
 8003876:	f816 8b01 	ldrb.w	r8, [r6], #1
 800387a:	d1f1      	bne.n	8003860 <d_print_mod_list+0x150>
 800387c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8003880:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8003884:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8003888:	4628      	mov	r0, r5
 800388a:	4798      	blx	r3
 800388c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8003890:	3301      	adds	r3, #1
 8003892:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003896:	2101      	movs	r1, #1
 8003898:	2300      	movs	r3, #0
 800389a:	e7e3      	b.n	8003864 <d_print_mod_list+0x154>
 800389c:	68a2      	ldr	r2, [r4, #8]
 800389e:	4935      	ldr	r1, [pc, #212]	; (8003974 <d_print_mod_list+0x264>)
 80038a0:	3201      	adds	r2, #1
 80038a2:	a801      	add	r0, sp, #4
 80038a4:	f013 fd66 	bl	8017374 <sprintf>
 80038a8:	a801      	add	r0, sp, #4
 80038aa:	f004 fe43 	bl	8008534 <strlen>
 80038ae:	b328      	cbz	r0, 80038fc <d_print_mod_list+0x1ec>
 80038b0:	ae01      	add	r6, sp, #4
 80038b2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80038b6:	eb06 0a00 	add.w	sl, r6, r0
 80038ba:	f04f 0b00 	mov.w	fp, #0
 80038be:	e009      	b.n	80038d4 <d_print_mod_list+0x1c4>
 80038c0:	460b      	mov	r3, r1
 80038c2:	3101      	adds	r1, #1
 80038c4:	45b2      	cmp	sl, r6
 80038c6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 80038ca:	f805 8003 	strb.w	r8, [r5, r3]
 80038ce:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 80038d2:	d015      	beq.n	8003900 <d_print_mod_list+0x1f0>
 80038d4:	29ff      	cmp	r1, #255	; 0xff
 80038d6:	f816 8b01 	ldrb.w	r8, [r6], #1
 80038da:	d1f1      	bne.n	80038c0 <d_print_mod_list+0x1b0>
 80038dc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 80038e0:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 80038e4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 80038e8:	4628      	mov	r0, r5
 80038ea:	4798      	blx	r3
 80038ec:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80038f0:	3301      	adds	r3, #1
 80038f2:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 80038f6:	2101      	movs	r1, #1
 80038f8:	2300      	movs	r3, #0
 80038fa:	e7e3      	b.n	80038c4 <d_print_mod_list+0x1b4>
 80038fc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8003900:	4e1d      	ldr	r6, [pc, #116]	; (8003978 <d_print_mod_list+0x268>)
 8003902:	f04f 0b00 	mov.w	fp, #0
 8003906:	f106 0a03 	add.w	sl, r6, #3
 800390a:	e00a      	b.n	8003922 <d_print_mod_list+0x212>
 800390c:	460b      	mov	r3, r1
 800390e:	3101      	adds	r1, #1
 8003910:	4556      	cmp	r6, sl
 8003912:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8003916:	f805 8003 	strb.w	r8, [r5, r3]
 800391a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800391e:	f43f af63 	beq.w	80037e8 <d_print_mod_list+0xd8>
 8003922:	29ff      	cmp	r1, #255	; 0xff
 8003924:	f816 8b01 	ldrb.w	r8, [r6], #1
 8003928:	d1f0      	bne.n	800390c <d_print_mod_list+0x1fc>
 800392a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800392e:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8003932:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8003936:	4628      	mov	r0, r5
 8003938:	4798      	blx	r3
 800393a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800393e:	3301      	adds	r3, #1
 8003940:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003944:	2101      	movs	r1, #1
 8003946:	2300      	movs	r3, #0
 8003948:	e7e2      	b.n	8003910 <d_print_mod_list+0x200>
 800394a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800394e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8003952:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8003956:	4628      	mov	r0, r5
 8003958:	4798      	blx	r3
 800395a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800395e:	3301      	adds	r3, #1
 8003960:	4631      	mov	r1, r6
 8003962:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8003966:	2201      	movs	r2, #1
 8003968:	e732      	b.n	80037d0 <d_print_mod_list+0xc0>
 800396a:	bf00      	nop
 800396c:	0801bc28 	.word	0x0801bc28
 8003970:	0801bc2c 	.word	0x0801bc2c
 8003974:	0801bc3c 	.word	0x0801bc3c
 8003978:	0801bc40 	.word	0x0801bc40

0800397c <d_print_array_type.isra.10>:
 800397c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003980:	4604      	mov	r4, r0
 8003982:	460f      	mov	r7, r1
 8003984:	4690      	mov	r8, r2
 8003986:	b163      	cbz	r3, 80039a2 <d_print_array_type.isra.10+0x26>
 8003988:	461e      	mov	r6, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6893      	ldr	r3, [r2, #8]
 800398e:	b393      	cbz	r3, 80039f6 <d_print_array_type.isra.10+0x7a>
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	2a00      	cmp	r2, #0
 8003994:	d1fa      	bne.n	800398c <d_print_array_type.isra.10+0x10>
 8003996:	4613      	mov	r3, r2
 8003998:	4639      	mov	r1, r7
 800399a:	4632      	mov	r2, r6
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff feb7 	bl	8003710 <d_print_mod_list>
 80039a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80039a6:	29ff      	cmp	r1, #255	; 0xff
 80039a8:	f000 808d 	beq.w	8003ac6 <d_print_array_type.isra.10+0x14a>
 80039ac:	1c4b      	adds	r3, r1, #1
 80039ae:	2220      	movs	r2, #32
 80039b0:	2bff      	cmp	r3, #255	; 0xff
 80039b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80039b6:	5462      	strb	r2, [r4, r1]
 80039b8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80039bc:	d068      	beq.n	8003a90 <d_print_array_type.isra.10+0x114>
 80039be:	225b      	movs	r2, #91	; 0x5b
 80039c0:	1c59      	adds	r1, r3, #1
 80039c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039c6:	54e2      	strb	r2, [r4, r3]
 80039c8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80039cc:	f8d8 2000 	ldr.w	r2, [r8]
 80039d0:	b12a      	cbz	r2, 80039de <d_print_array_type.isra.10+0x62>
 80039d2:	4639      	mov	r1, r7
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7ff fc07 	bl	80031e8 <d_print_comp>
 80039da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80039de:	29ff      	cmp	r1, #255	; 0xff
 80039e0:	f000 8082 	beq.w	8003ae8 <d_print_array_type.isra.10+0x16c>
 80039e4:	1c4a      	adds	r2, r1, #1
 80039e6:	235d      	movs	r3, #93	; 0x5d
 80039e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80039ec:	5463      	strb	r3, [r4, r1]
 80039ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80039f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f6:	6852      	ldr	r2, [r2, #4]
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	2a2a      	cmp	r2, #42	; 0x2a
 80039fc:	d03f      	beq.n	8003a7e <d_print_array_type.isra.10+0x102>
 80039fe:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8003b30 <d_print_array_type.isra.10+0x1b4>
 8003a02:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003a06:	461d      	mov	r5, r3
 8003a08:	f109 0b02 	add.w	fp, r9, #2
 8003a0c:	e00a      	b.n	8003a24 <d_print_array_type.isra.10+0xa8>
 8003a0e:	460b      	mov	r3, r1
 8003a10:	45cb      	cmp	fp, r9
 8003a12:	f101 0101 	add.w	r1, r1, #1
 8003a16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a1a:	f804 a003 	strb.w	sl, [r4, r3]
 8003a1e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a22:	d01a      	beq.n	8003a5a <d_print_array_type.isra.10+0xde>
 8003a24:	29ff      	cmp	r1, #255	; 0xff
 8003a26:	f819 ab01 	ldrb.w	sl, [r9], #1
 8003a2a:	d1f0      	bne.n	8003a0e <d_print_array_type.isra.10+0x92>
 8003a2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a30:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003a34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4798      	blx	r3
 8003a3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003a40:	3301      	adds	r3, #1
 8003a42:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003a46:	2300      	movs	r3, #0
 8003a48:	2101      	movs	r1, #1
 8003a4a:	45cb      	cmp	fp, r9
 8003a4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a50:	f804 a003 	strb.w	sl, [r4, r3]
 8003a54:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8003a58:	d1e4      	bne.n	8003a24 <d_print_array_type.isra.10+0xa8>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4632      	mov	r2, r6
 8003a5e:	4639      	mov	r1, r7
 8003a60:	4620      	mov	r0, r4
 8003a62:	f7ff fe55 	bl	8003710 <d_print_mod_list>
 8003a66:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a6a:	2bff      	cmp	r3, #255	; 0xff
 8003a6c:	d04d      	beq.n	8003b0a <d_print_array_type.isra.10+0x18e>
 8003a6e:	1c59      	adds	r1, r3, #1
 8003a70:	2229      	movs	r2, #41	; 0x29
 8003a72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a76:	54e2      	strb	r2, [r4, r3]
 8003a78:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003a7c:	e793      	b.n	80039a6 <d_print_array_type.isra.10+0x2a>
 8003a7e:	4632      	mov	r2, r6
 8003a80:	4639      	mov	r1, r7
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7ff fe44 	bl	8003710 <d_print_mod_list>
 8003a88:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003a8c:	2bff      	cmp	r3, #255	; 0xff
 8003a8e:	d196      	bne.n	80039be <d_print_array_type.isra.10+0x42>
 8003a90:	2200      	movs	r2, #0
 8003a92:	4619      	mov	r1, r3
 8003a94:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8003a98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4798      	blx	r3
 8003aa4:	235b      	movs	r3, #91	; 0x5b
 8003aa6:	7023      	strb	r3, [r4, #0]
 8003aa8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003aac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ab0:	f8d8 2000 	ldr.w	r2, [r8]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003abc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	d186      	bne.n	80039d2 <d_print_array_type.isra.10+0x56>
 8003ac4:	e78e      	b.n	80039e4 <d_print_array_type.isra.10+0x68>
 8003ac6:	2500      	movs	r5, #0
 8003ac8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003acc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003ad0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4798      	blx	r3
 8003ad8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003adc:	3301      	adds	r3, #1
 8003ade:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e762      	b.n	80039ae <d_print_array_type.isra.10+0x32>
 8003ae8:	2500      	movs	r5, #0
 8003aea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003aee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003af2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003af6:	4620      	mov	r0, r4
 8003af8:	4798      	blx	r3
 8003afa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003afe:	3301      	adds	r3, #1
 8003b00:	4629      	mov	r1, r5
 8003b02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003b06:	2201      	movs	r2, #1
 8003b08:	e76d      	b.n	80039e6 <d_print_array_type.isra.10+0x6a>
 8003b0a:	2500      	movs	r5, #0
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b16:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	4798      	blx	r3
 8003b1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003b28:	462b      	mov	r3, r5
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	e7a0      	b.n	8003a70 <d_print_array_type.isra.10+0xf4>
 8003b2e:	bf00      	nop
 8003b30:	0801be24 	.word	0x0801be24

08003b34 <d_print_function_type.isra.11>:
 8003b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b38:	4604      	mov	r4, r0
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	460e      	mov	r6, r1
 8003b3e:	4617      	mov	r7, r2
 8003b40:	461d      	mov	r5, r3
 8003b42:	b353      	cbz	r3, 8003b9a <d_print_function_type.isra.11+0x66>
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	bb43      	cbnz	r3, 8003b9a <d_print_function_type.isra.11+0x66>
 8003b48:	462a      	mov	r2, r5
 8003b4a:	f04f 0e01 	mov.w	lr, #1
 8003b4e:	e006      	b.n	8003b5e <d_print_function_type.isra.11+0x2a>
 8003b50:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 8003b54:	d15c      	bne.n	8003c10 <d_print_function_type.isra.11+0xdc>
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	b1fa      	cbz	r2, 8003b9a <d_print_function_type.isra.11+0x66>
 8003b5a:	6893      	ldr	r3, [r2, #8]
 8003b5c:	b9eb      	cbnz	r3, 8003b9a <d_print_function_type.isra.11+0x66>
 8003b5e:	6853      	ldr	r3, [r2, #4]
 8003b60:	496d      	ldr	r1, [pc, #436]	; (8003d18 <d_print_function_type.isra.11+0x1e4>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	3b19      	subs	r3, #25
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	fa0e f003 	lsl.w	r0, lr, r3
 8003b6c:	2b12      	cmp	r3, #18
 8003b6e:	ea01 0100 	and.w	r1, r1, r0
 8003b72:	d8f0      	bhi.n	8003b56 <d_print_function_type.isra.11+0x22>
 8003b74:	2900      	cmp	r1, #0
 8003b76:	d0eb      	beq.n	8003b50 <d_print_function_type.isra.11+0x1c>
 8003b78:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d04d      	beq.n	8003c1c <d_print_function_type.isra.11+0xe8>
 8003b80:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b84:	2bff      	cmp	r3, #255	; 0xff
 8003b86:	f000 80b4 	beq.w	8003cf2 <d_print_function_type.isra.11+0x1be>
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b92:	54e2      	strb	r2, [r4, r3]
 8003b94:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003b98:	e042      	b.n	8003c20 <d_print_function_type.isra.11+0xec>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8003ba0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003ba4:	4631      	mov	r1, r6
 8003ba6:	462a      	mov	r2, r5
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff fdb1 	bl	8003710 <d_print_mod_list>
 8003bae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003bb2:	29ff      	cmp	r1, #255	; 0xff
 8003bb4:	d056      	beq.n	8003c64 <d_print_function_type.isra.11+0x130>
 8003bb6:	1c4b      	adds	r3, r1, #1
 8003bb8:	2228      	movs	r2, #40	; 0x28
 8003bba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003bbe:	5462      	strb	r2, [r4, r1]
 8003bc0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003bc4:	6838      	ldr	r0, [r7, #0]
 8003bc6:	b178      	cbz	r0, 8003be8 <d_print_function_type.isra.11+0xb4>
 8003bc8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bcc:	9000      	str	r0, [sp, #0]
 8003bce:	4602      	mov	r2, r0
 8003bd0:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	f7fc feeb 	bl	80009b4 <d_print_comp_inner>
 8003bde:	9a01      	ldr	r2, [sp, #4]
 8003be0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003be4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003be8:	2bff      	cmp	r3, #255	; 0xff
 8003bea:	d04d      	beq.n	8003c88 <d_print_function_type.isra.11+0x154>
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	2029      	movs	r0, #41	; 0x29
 8003bf0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	54e0      	strb	r0, [r4, r3]
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7ff fd85 	bl	8003710 <d_print_mod_list>
 8003c06:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8003c0a:	b003      	add	sp, #12
 8003c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c10:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003c14:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8003c18:	2a28      	cmp	r2, #40	; 0x28
 8003c1a:	d1af      	bne.n	8003b7c <d_print_function_type.isra.11+0x48>
 8003c1c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003c20:	29ff      	cmp	r1, #255	; 0xff
 8003c22:	d054      	beq.n	8003cce <d_print_function_type.isra.11+0x19a>
 8003c24:	1c4a      	adds	r2, r1, #1
 8003c26:	2328      	movs	r3, #40	; 0x28
 8003c28:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c2c:	5463      	strb	r3, [r4, r1]
 8003c2e:	f04f 0900 	mov.w	r9, #0
 8003c32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c36:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8003c3a:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8003c3e:	464b      	mov	r3, r9
 8003c40:	462a      	mov	r2, r5
 8003c42:	4631      	mov	r1, r6
 8003c44:	4620      	mov	r0, r4
 8003c46:	f7ff fd63 	bl	8003710 <d_print_mod_list>
 8003c4a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003c4e:	2bff      	cmp	r3, #255	; 0xff
 8003c50:	d02c      	beq.n	8003cac <d_print_function_type.isra.11+0x178>
 8003c52:	1c59      	adds	r1, r3, #1
 8003c54:	2229      	movs	r2, #41	; 0x29
 8003c56:	29ff      	cmp	r1, #255	; 0xff
 8003c58:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c5c:	54e2      	strb	r2, [r4, r3]
 8003c5e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003c62:	d1a8      	bne.n	8003bb6 <d_print_function_type.isra.11+0x82>
 8003c64:	f04f 0900 	mov.w	r9, #0
 8003c68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c6c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c74:	4620      	mov	r0, r4
 8003c76:	4798      	blx	r3
 8003c78:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003c82:	4649      	mov	r1, r9
 8003c84:	2301      	movs	r3, #1
 8003c86:	e797      	b.n	8003bb8 <d_print_function_type.isra.11+0x84>
 8003c88:	2700      	movs	r7, #0
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c94:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8003c98:	4620      	mov	r0, r4
 8003c9a:	4798      	blx	r3
 8003c9c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	2201      	movs	r2, #1
 8003caa:	e7a0      	b.n	8003bee <d_print_function_type.isra.11+0xba>
 8003cac:	4619      	mov	r1, r3
 8003cae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cb6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4798      	blx	r3
 8003cbe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003cc8:	464b      	mov	r3, r9
 8003cca:	2101      	movs	r1, #1
 8003ccc:	e7c2      	b.n	8003c54 <d_print_function_type.isra.11+0x120>
 8003cce:	f04f 0800 	mov.w	r8, #0
 8003cd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003cd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4798      	blx	r3
 8003ce2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4641      	mov	r1, r8
 8003cea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003cee:	2201      	movs	r2, #1
 8003cf0:	e799      	b.n	8003c26 <d_print_function_type.isra.11+0xf2>
 8003cf2:	f04f 0800 	mov.w	r8, #0
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cfc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d00:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003d04:	4620      	mov	r0, r4
 8003d06:	4798      	blx	r3
 8003d08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003d12:	4643      	mov	r3, r8
 8003d14:	2101      	movs	r1, #1
 8003d16:	e739      	b.n	8003b8c <d_print_function_type.isra.11+0x58>
 8003d18:	00043107 	.word	0x00043107

08003d1c <d_print_cast.isra.12>:
 8003d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d20:	460e      	mov	r6, r1
 8003d22:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
 8003d26:	b084      	sub	sp, #16
 8003d28:	4604      	mov	r4, r0
 8003d2a:	4615      	mov	r5, r2
 8003d2c:	b139      	cbz	r1, 8003d3e <d_print_cast.isra.12+0x22>
 8003d2e:	ab04      	add	r3, sp, #16
 8003d30:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003d34:	f843 2d10 	str.w	r2, [r3, #-16]!
 8003d38:	9101      	str	r1, [sp, #4]
 8003d3a:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8003d3e:	682b      	ldr	r3, [r5, #0]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	2a04      	cmp	r2, #4
 8003d44:	d017      	beq.n	8003d76 <d_print_cast.isra.12+0x5a>
 8003d46:	a802      	add	r0, sp, #8
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8003d4e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8003d52:	4631      	mov	r1, r6
 8003d54:	4620      	mov	r0, r4
 8003d56:	9302      	str	r3, [sp, #8]
 8003d58:	9503      	str	r5, [sp, #12]
 8003d5a:	f7fc fe2b 	bl	80009b4 <d_print_comp_inner>
 8003d5e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003d62:	9a03      	ldr	r2, [sp, #12]
 8003d64:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003d68:	b113      	cbz	r3, 8003d70 <d_print_cast.isra.12+0x54>
 8003d6a:	9b00      	ldr	r3, [sp, #0]
 8003d6c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003d70:	b004      	add	sp, #16
 8003d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d76:	af02      	add	r7, sp, #8
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d7e:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 8003d82:	4631      	mov	r1, r6
 8003d84:	4620      	mov	r0, r4
 8003d86:	9202      	str	r2, [sp, #8]
 8003d88:	9303      	str	r3, [sp, #12]
 8003d8a:	f7fc fe13 	bl	80009b4 <d_print_comp_inner>
 8003d8e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8003d92:	9a03      	ldr	r2, [sp, #12]
 8003d94:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003d98:	b113      	cbz	r3, 8003da0 <d_print_cast.isra.12+0x84>
 8003d9a:	9b00      	ldr	r3, [sp, #0]
 8003d9c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003da0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003da4:	2b3c      	cmp	r3, #60	; 0x3c
 8003da6:	d02c      	beq.n	8003e02 <d_print_cast.isra.12+0xe6>
 8003da8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003dac:	29ff      	cmp	r1, #255	; 0xff
 8003dae:	d051      	beq.n	8003e54 <d_print_cast.isra.12+0x138>
 8003db0:	1c4a      	adds	r2, r1, #1
 8003db2:	233c      	movs	r3, #60	; 0x3c
 8003db4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003db8:	5463      	strb	r3, [r4, r1]
 8003dba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003dbe:	682b      	ldr	r3, [r5, #0]
 8003dc0:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4631      	mov	r1, r6
 8003dce:	4620      	mov	r0, r4
 8003dd0:	9302      	str	r3, [sp, #8]
 8003dd2:	9503      	str	r5, [sp, #12]
 8003dd4:	f7fc fdee 	bl	80009b4 <d_print_comp_inner>
 8003dd8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8003ddc:	9a03      	ldr	r2, [sp, #12]
 8003dde:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003de2:	2b3e      	cmp	r3, #62	; 0x3e
 8003de4:	d019      	beq.n	8003e1a <d_print_cast.isra.12+0xfe>
 8003de6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003dea:	29ff      	cmp	r1, #255	; 0xff
 8003dec:	d021      	beq.n	8003e32 <d_print_cast.isra.12+0x116>
 8003dee:	1c4a      	adds	r2, r1, #1
 8003df0:	233e      	movs	r3, #62	; 0x3e
 8003df2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003df6:	5463      	strb	r3, [r4, r1]
 8003df8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003dfc:	b004      	add	sp, #16
 8003dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e02:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e06:	2bff      	cmp	r3, #255	; 0xff
 8003e08:	d048      	beq.n	8003e9c <d_print_cast.isra.12+0x180>
 8003e0a:	1c59      	adds	r1, r3, #1
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e12:	54e2      	strb	r2, [r4, r3]
 8003e14:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003e18:	e7c8      	b.n	8003dac <d_print_cast.isra.12+0x90>
 8003e1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003e1e:	2bff      	cmp	r3, #255	; 0xff
 8003e20:	d02a      	beq.n	8003e78 <d_print_cast.isra.12+0x15c>
 8003e22:	1c59      	adds	r1, r3, #1
 8003e24:	2220      	movs	r2, #32
 8003e26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e2a:	54e2      	strb	r2, [r4, r3]
 8003e2c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003e30:	e7db      	b.n	8003dea <d_print_cast.isra.12+0xce>
 8003e32:	2500      	movs	r5, #0
 8003e34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e3c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003e40:	4620      	mov	r0, r4
 8003e42:	4798      	blx	r3
 8003e44:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003e50:	2201      	movs	r2, #1
 8003e52:	e7cd      	b.n	8003df0 <d_print_cast.isra.12+0xd4>
 8003e54:	f04f 0800 	mov.w	r8, #0
 8003e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e60:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003e64:	4620      	mov	r0, r4
 8003e66:	4798      	blx	r3
 8003e68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	4641      	mov	r1, r8
 8003e70:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003e74:	2201      	movs	r2, #1
 8003e76:	e79c      	b.n	8003db2 <d_print_cast.isra.12+0x96>
 8003e78:	2500      	movs	r5, #0
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e84:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4798      	blx	r3
 8003e8c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003e96:	462b      	mov	r3, r5
 8003e98:	2101      	movs	r1, #1
 8003e9a:	e7c3      	b.n	8003e24 <d_print_cast.isra.12+0x108>
 8003e9c:	f04f 0800 	mov.w	r8, #0
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ea6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003eaa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003eae:	4620      	mov	r0, r4
 8003eb0:	4798      	blx	r3
 8003eb2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	e7a4      	b.n	8003e0c <d_print_cast.isra.12+0xf0>
 8003ec2:	bf00      	nop

08003ec4 <d_print_expr_op>:
 8003ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec8:	7815      	ldrb	r5, [r2, #0]
 8003eca:	2d31      	cmp	r5, #49	; 0x31
 8003ecc:	b082      	sub	sp, #8
 8003ece:	4613      	mov	r3, r2
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	d00d      	beq.n	8003ef0 <d_print_expr_op+0x2c>
 8003ed4:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 8003ed8:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8003edc:	e88d 0028 	stmia.w	sp, {r3, r5}
 8003ee0:	f7fc fd68 	bl	80009b4 <d_print_comp_inner>
 8003ee4:	9b01      	ldr	r3, [sp, #4]
 8003ee6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003eea:	b002      	add	sp, #8
 8003eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef0:	6853      	ldr	r3, [r2, #4]
 8003ef2:	689f      	ldr	r7, [r3, #8]
 8003ef4:	685d      	ldr	r5, [r3, #4]
 8003ef6:	2f00      	cmp	r7, #0
 8003ef8:	d0f7      	beq.n	8003eea <d_print_expr_op+0x26>
 8003efa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003efe:	442f      	add	r7, r5
 8003f00:	f04f 0800 	mov.w	r8, #0
 8003f04:	e008      	b.n	8003f18 <d_print_expr_op+0x54>
 8003f06:	460b      	mov	r3, r1
 8003f08:	3101      	adds	r1, #1
 8003f0a:	42bd      	cmp	r5, r7
 8003f0c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f10:	54e6      	strb	r6, [r4, r3]
 8003f12:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003f16:	d0e8      	beq.n	8003eea <d_print_expr_op+0x26>
 8003f18:	29ff      	cmp	r1, #255	; 0xff
 8003f1a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003f1e:	d1f2      	bne.n	8003f06 <d_print_expr_op+0x42>
 8003f20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f24:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	4798      	blx	r3
 8003f30:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003f34:	3301      	adds	r3, #1
 8003f36:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e7e4      	b.n	8003f0a <d_print_expr_op+0x46>

08003f40 <d_print_subexpr>:
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	7813      	ldrb	r3, [r2, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	b083      	sub	sp, #12
 8003f48:	4615      	mov	r5, r2
 8003f4a:	460e      	mov	r6, r1
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	d929      	bls.n	8003fa4 <d_print_subexpr+0x64>
 8003f50:	2b30      	cmp	r3, #48	; 0x30
 8003f52:	d027      	beq.n	8003fa4 <d_print_subexpr+0x64>
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d025      	beq.n	8003fa4 <d_print_subexpr+0x64>
 8003f58:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003f5c:	29ff      	cmp	r1, #255	; 0xff
 8003f5e:	d031      	beq.n	8003fc4 <d_print_subexpr+0x84>
 8003f60:	1c4a      	adds	r2, r1, #1
 8003f62:	2328      	movs	r3, #40	; 0x28
 8003f64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f68:	5463      	strb	r3, [r4, r1]
 8003f6a:	462a      	mov	r2, r5
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003f72:	4620      	mov	r0, r4
 8003f74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003f78:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	9500      	str	r5, [sp, #0]
 8003f80:	f7fc fd18 	bl	80009b4 <d_print_comp_inner>
 8003f84:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003f8e:	29ff      	cmp	r1, #255	; 0xff
 8003f90:	d028      	beq.n	8003fe4 <d_print_subexpr+0xa4>
 8003f92:	1c4a      	adds	r2, r1, #1
 8003f94:	2329      	movs	r3, #41	; 0x29
 8003f96:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f9a:	5463      	strb	r3, [r4, r1]
 8003f9c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003fa0:	b003      	add	sp, #12
 8003fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003fa8:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8003fac:	4631      	mov	r1, r6
 8003fae:	462a      	mov	r2, r5
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	9500      	str	r5, [sp, #0]
 8003fb6:	f7fc fcfd 	bl	80009b4 <d_print_comp_inner>
 8003fba:	9b01      	ldr	r3, [sp, #4]
 8003fbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fc0:	b003      	add	sp, #12
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc4:	2700      	movs	r7, #0
 8003fc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fce:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8003fd2:	4798      	blx	r3
 8003fd4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003fd8:	3301      	adds	r3, #1
 8003fda:	4639      	mov	r1, r7
 8003fdc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	e7be      	b.n	8003f62 <d_print_subexpr+0x22>
 8003fe4:	2500      	movs	r5, #0
 8003fe6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fee:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4798      	blx	r3
 8003ff6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8004002:	2201      	movs	r2, #1
 8004004:	e7c6      	b.n	8003f94 <d_print_subexpr+0x54>
 8004006:	bf00      	nop

08004008 <d_template_args>:
 8004008:	68c1      	ldr	r1, [r0, #12]
 800400a:	780b      	ldrb	r3, [r1, #0]
 800400c:	3b49      	subs	r3, #73	; 0x49
 800400e:	2b01      	cmp	r3, #1
 8004010:	f200 80ac 	bhi.w	800416c <d_template_args+0x164>
 8004014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004018:	1c4a      	adds	r2, r1, #1
 800401a:	60c2      	str	r2, [r0, #12]
 800401c:	784b      	ldrb	r3, [r1, #1]
 800401e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8004022:	2b45      	cmp	r3, #69	; 0x45
 8004024:	b085      	sub	sp, #20
 8004026:	4604      	mov	r4, r0
 8004028:	f000 8166 	beq.w	80042f8 <d_template_args+0x2f0>
 800402c:	ae04      	add	r6, sp, #16
 800402e:	2100      	movs	r1, #0
 8004030:	f846 1d04 	str.w	r1, [r6, #-4]!
 8004034:	3b49      	subs	r3, #73	; 0x49
 8004036:	2b0f      	cmp	r3, #15
 8004038:	d854      	bhi.n	80040e4 <d_template_args+0xdc>
 800403a:	e8df f003 	tbb	[pc, r3]
 800403e:	4e4e      	.short	0x4e4e
 8004040:	53533253 	.word	0x53533253
 8004044:	53535353 	.word	0x53535353
 8004048:	53535353 	.word	0x53535353
 800404c:	0853      	.short	0x0853
 800404e:	1c53      	adds	r3, r2, #1
 8004050:	2501      	movs	r5, #1
 8004052:	60e3      	str	r3, [r4, #12]
 8004054:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8004056:	6365      	str	r5, [r4, #52]	; 0x34
 8004058:	7853      	ldrb	r3, [r2, #1]
 800405a:	2b4c      	cmp	r3, #76	; 0x4c
 800405c:	f000 8088 	beq.w	8004170 <d_template_args+0x168>
 8004060:	2b54      	cmp	r3, #84	; 0x54
 8004062:	f000 808b 	beq.w	800417c <d_template_args+0x174>
 8004066:	2b73      	cmp	r3, #115	; 0x73
 8004068:	d044      	beq.n	80040f4 <d_template_args+0xec>
 800406a:	2b66      	cmp	r3, #102	; 0x66
 800406c:	d060      	beq.n	8004130 <d_template_args+0x128>
 800406e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004072:	2909      	cmp	r1, #9
 8004074:	f200 81b1 	bhi.w	80043da <d_template_args+0x3d2>
 8004078:	4620      	mov	r0, r4
 800407a:	f003 f91f 	bl	80072bc <d_unqualified_name>
 800407e:	4605      	mov	r5, r0
 8004080:	2800      	cmp	r0, #0
 8004082:	f000 8229 	beq.w	80044d8 <d_template_args+0x4d0>
 8004086:	68e3      	ldr	r3, [r4, #12]
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	2a49      	cmp	r2, #73	; 0x49
 800408c:	f000 8128 	beq.w	80042e0 <d_template_args+0x2d8>
 8004090:	4602      	mov	r2, r0
 8004092:	6367      	str	r7, [r4, #52]	; 0x34
 8004094:	7819      	ldrb	r1, [r3, #0]
 8004096:	2945      	cmp	r1, #69	; 0x45
 8004098:	d029      	beq.n	80040ee <d_template_args+0xe6>
 800409a:	2000      	movs	r0, #0
 800409c:	b005      	add	sp, #20
 800409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a2:	4620      	mov	r0, r4
 80040a4:	f003 ff76 	bl	8007f94 <d_expr_primary>
 80040a8:	4602      	mov	r2, r0
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	d0f5      	beq.n	800409a <d_template_args+0x92>
 80040ae:	2300      	movs	r3, #0
 80040b0:	212f      	movs	r1, #47	; 0x2f
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7fc f8ac 	bl	8000210 <d_make_comp>
 80040b8:	6030      	str	r0, [r6, #0]
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d0ed      	beq.n	800409a <d_template_args+0x92>
 80040be:	68e2      	ldr	r2, [r4, #12]
 80040c0:	7813      	ldrb	r3, [r2, #0]
 80040c2:	2b45      	cmp	r3, #69	; 0x45
 80040c4:	f100 0608 	add.w	r6, r0, #8
 80040c8:	d1b4      	bne.n	8004034 <d_template_args+0x2c>
 80040ca:	9803      	ldr	r0, [sp, #12]
 80040cc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80040d0:	3201      	adds	r2, #1
 80040d2:	60e2      	str	r2, [r4, #12]
 80040d4:	b005      	add	sp, #20
 80040d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040da:	4620      	mov	r0, r4
 80040dc:	f7ff ff94 	bl	8004008 <d_template_args>
 80040e0:	4602      	mov	r2, r0
 80040e2:	e7e2      	b.n	80040aa <d_template_args+0xa2>
 80040e4:	4620      	mov	r0, r4
 80040e6:	f002 fc6b 	bl	80069c0 <d_type>
 80040ea:	4602      	mov	r2, r0
 80040ec:	e7dd      	b.n	80040aa <d_template_args+0xa2>
 80040ee:	3301      	adds	r3, #1
 80040f0:	60e3      	str	r3, [r4, #12]
 80040f2:	e7da      	b.n	80040aa <d_template_args+0xa2>
 80040f4:	7893      	ldrb	r3, [r2, #2]
 80040f6:	2b72      	cmp	r3, #114	; 0x72
 80040f8:	f000 8149 	beq.w	800438e <d_template_args+0x386>
 80040fc:	2b70      	cmp	r3, #112	; 0x70
 80040fe:	f000 81aa 	beq.w	8004456 <d_template_args+0x44e>
 8004102:	4620      	mov	r0, r4
 8004104:	f003 f81a 	bl	800713c <d_operator_name>
 8004108:	4605      	mov	r5, r0
 800410a:	2800      	cmp	r0, #0
 800410c:	f000 81e4 	beq.w	80044d8 <d_template_args+0x4d0>
 8004110:	f890 9000 	ldrb.w	r9, [r0]
 8004114:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 8004118:	d036      	beq.n	8004188 <d_template_args+0x180>
 800411a:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 800411e:	f000 80cf 	beq.w	80042c0 <d_template_args+0x2b8>
 8004122:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 8004126:	f000 8172 	beq.w	800440e <d_template_args+0x406>
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	e7b0      	b.n	8004092 <d_template_args+0x8a>
 8004130:	7893      	ldrb	r3, [r2, #2]
 8004132:	2b70      	cmp	r3, #112	; 0x70
 8004134:	d1e5      	bne.n	8004102 <d_template_args+0xfa>
 8004136:	1cd3      	adds	r3, r2, #3
 8004138:	60e3      	str	r3, [r4, #12]
 800413a:	78d3      	ldrb	r3, [r2, #3]
 800413c:	2b54      	cmp	r3, #84	; 0x54
 800413e:	f040 813c 	bne.w	80043ba <d_template_args+0x3b2>
 8004142:	3204      	adds	r2, #4
 8004144:	60e2      	str	r2, [r4, #12]
 8004146:	2000      	movs	r0, #0
 8004148:	6963      	ldr	r3, [r4, #20]
 800414a:	69a1      	ldr	r1, [r4, #24]
 800414c:	428b      	cmp	r3, r1
 800414e:	daec      	bge.n	800412a <d_template_args+0x122>
 8004150:	6921      	ldr	r1, [r4, #16]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004158:	6162      	str	r2, [r4, #20]
 800415a:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800415e:	d06d      	beq.n	800423c <d_template_args+0x234>
 8004160:	2506      	movs	r5, #6
 8004162:	f801 5023 	strb.w	r5, [r1, r3, lsl #2]
 8004166:	6050      	str	r0, [r2, #4]
 8004168:	68e3      	ldr	r3, [r4, #12]
 800416a:	e792      	b.n	8004092 <d_template_args+0x8a>
 800416c:	2000      	movs	r0, #0
 800416e:	4770      	bx	lr
 8004170:	4620      	mov	r0, r4
 8004172:	f003 ff0f 	bl	8007f94 <d_expr_primary>
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	4602      	mov	r2, r0
 800417a:	e78a      	b.n	8004092 <d_template_args+0x8a>
 800417c:	4620      	mov	r0, r4
 800417e:	f7fc f9eb 	bl	8000558 <d_template_param>
 8004182:	68e3      	ldr	r3, [r4, #12]
 8004184:	4602      	mov	r2, r0
 8004186:	e784      	b.n	8004092 <d_template_args+0x8a>
 8004188:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800418c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800418e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004192:	f8db a000 	ldr.w	sl, [fp]
 8004196:	49cb      	ldr	r1, [pc, #812]	; (80044c4 <d_template_args+0x4bc>)
 8004198:	3b02      	subs	r3, #2
 800419a:	441a      	add	r2, r3
 800419c:	6322      	str	r2, [r4, #48]	; 0x30
 800419e:	4650      	mov	r0, sl
 80041a0:	f004 f9be 	bl	8008520 <strcmp>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	f000 8188 	beq.w	80044ba <d_template_args+0x4b2>
 80041aa:	f8db 300c 	ldr.w	r3, [fp, #12]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d8bb      	bhi.n	800412a <d_template_args+0x122>
 80041b2:	e8df f003 	tbb	[pc, r3]
 80041b6:	ab7c      	.short	0xab7c
 80041b8:	0447      	.short	0x0447
 80041ba:	f04f 0a00 	mov.w	sl, #0
 80041be:	49c2      	ldr	r1, [pc, #776]	; (80044c8 <d_template_args+0x4c0>)
 80041c0:	4650      	mov	r0, sl
 80041c2:	f004 f9ad 	bl	8008520 <strcmp>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	f000 819d 	beq.w	8004506 <d_template_args+0x4fe>
 80041cc:	f89a 3000 	ldrb.w	r3, [sl]
 80041d0:	2b6e      	cmp	r3, #110	; 0x6e
 80041d2:	d1aa      	bne.n	800412a <d_template_args+0x122>
 80041d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80041d8:	2b77      	cmp	r3, #119	; 0x77
 80041da:	d001      	beq.n	80041e0 <d_template_args+0x1d8>
 80041dc:	2b61      	cmp	r3, #97	; 0x61
 80041de:	d1a4      	bne.n	800412a <d_template_args+0x122>
 80041e0:	215f      	movs	r1, #95	; 0x5f
 80041e2:	4620      	mov	r0, r4
 80041e4:	f000 fd82 	bl	8004cec <d_exprlist>
 80041e8:	4681      	mov	r9, r0
 80041ea:	4620      	mov	r0, r4
 80041ec:	f002 fbe8 	bl	80069c0 <d_type>
 80041f0:	68e3      	ldr	r3, [r4, #12]
 80041f2:	7819      	ldrb	r1, [r3, #0]
 80041f4:	2945      	cmp	r1, #69	; 0x45
 80041f6:	4682      	mov	sl, r0
 80041f8:	f000 825d 	beq.w	80046b6 <d_template_args+0x6ae>
 80041fc:	2970      	cmp	r1, #112	; 0x70
 80041fe:	f000 8342 	beq.w	8004886 <d_template_args+0x87e>
 8004202:	2969      	cmp	r1, #105	; 0x69
 8004204:	f040 824d 	bne.w	80046a2 <d_template_args+0x69a>
 8004208:	785a      	ldrb	r2, [r3, #1]
 800420a:	2a6c      	cmp	r2, #108	; 0x6c
 800420c:	f040 8249 	bne.w	80046a2 <d_template_args+0x69a>
 8004210:	4620      	mov	r0, r4
 8004212:	f002 fa03 	bl	800661c <d_expression_1>
 8004216:	4603      	mov	r3, r0
 8004218:	4652      	mov	r2, sl
 800421a:	213a      	movs	r1, #58	; 0x3a
 800421c:	4620      	mov	r0, r4
 800421e:	f7fb fff7 	bl	8000210 <d_make_comp>
 8004222:	464a      	mov	r2, r9
 8004224:	4603      	mov	r3, r0
 8004226:	2139      	movs	r1, #57	; 0x39
 8004228:	4620      	mov	r0, r4
 800422a:	f7fb fff1 	bl	8000210 <d_make_comp>
 800422e:	462a      	mov	r2, r5
 8004230:	4603      	mov	r3, r0
 8004232:	2138      	movs	r1, #56	; 0x38
 8004234:	4620      	mov	r0, r4
 8004236:	f7fb ffeb 	bl	8000210 <d_make_comp>
 800423a:	4602      	mov	r2, r0
 800423c:	68e3      	ldr	r3, [r4, #12]
 800423e:	e728      	b.n	8004092 <d_template_args+0x8a>
 8004240:	f04f 0a00 	mov.w	sl, #0
 8004244:	686b      	ldr	r3, [r5, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	785a      	ldrb	r2, [r3, #1]
 800424a:	2a63      	cmp	r2, #99	; 0x63
 800424c:	f000 814d 	beq.w	80044ea <d_template_args+0x4e2>
 8004250:	4620      	mov	r0, r4
 8004252:	f002 f9e3 	bl	800661c <d_expression_1>
 8004256:	4681      	mov	r9, r0
 8004258:	499c      	ldr	r1, [pc, #624]	; (80044cc <d_template_args+0x4c4>)
 800425a:	4650      	mov	r0, sl
 800425c:	f004 f960 	bl	8008520 <strcmp>
 8004260:	2800      	cmp	r0, #0
 8004262:	f000 813c 	beq.w	80044de <d_template_args+0x4d6>
 8004266:	499a      	ldr	r1, [pc, #616]	; (80044d0 <d_template_args+0x4c8>)
 8004268:	4650      	mov	r0, sl
 800426a:	f004 f959 	bl	8008520 <strcmp>
 800426e:	b130      	cbz	r0, 800427e <d_template_args+0x276>
 8004270:	4650      	mov	r0, sl
 8004272:	4998      	ldr	r1, [pc, #608]	; (80044d4 <d_template_args+0x4cc>)
 8004274:	f004 f954 	bl	8008520 <strcmp>
 8004278:	2800      	cmp	r0, #0
 800427a:	f040 8214 	bne.w	80046a6 <d_template_args+0x69e>
 800427e:	4620      	mov	r0, r4
 8004280:	f003 f81c 	bl	80072bc <d_unqualified_name>
 8004284:	68e3      	ldr	r3, [r4, #12]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b49      	cmp	r3, #73	; 0x49
 800428a:	4682      	mov	sl, r0
 800428c:	f000 82d2 	beq.w	8004834 <d_template_args+0x82c>
 8004290:	4653      	mov	r3, sl
 8004292:	464a      	mov	r2, r9
 8004294:	2137      	movs	r1, #55	; 0x37
 8004296:	4620      	mov	r0, r4
 8004298:	f7fb ffba 	bl	8000210 <d_make_comp>
 800429c:	462a      	mov	r2, r5
 800429e:	4603      	mov	r3, r0
 80042a0:	2136      	movs	r1, #54	; 0x36
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7fb ffb4 	bl	8000210 <d_make_comp>
 80042a8:	68e3      	ldr	r3, [r4, #12]
 80042aa:	4602      	mov	r2, r0
 80042ac:	e6f1      	b.n	8004092 <d_template_args+0x8a>
 80042ae:	462a      	mov	r2, r5
 80042b0:	2300      	movs	r3, #0
 80042b2:	2134      	movs	r1, #52	; 0x34
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7fb ffab 	bl	8000210 <d_make_comp>
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	4602      	mov	r2, r0
 80042be:	e6e8      	b.n	8004092 <d_template_args+0x8a>
 80042c0:	686b      	ldr	r3, [r5, #4]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	f63f af31 	bhi.w	800412a <d_template_args+0x122>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <d_template_args+0x2c8>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042af 	.word	0x080042af
 80042d4:	080043cb 	.word	0x080043cb
 80042d8:	08004241 	.word	0x08004241
 80042dc:	080041bb 	.word	0x080041bb
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff fe91 	bl	8004008 <d_template_args>
 80042e6:	462a      	mov	r2, r5
 80042e8:	4603      	mov	r3, r0
 80042ea:	2104      	movs	r1, #4
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7fb ff8f 	bl	8000210 <d_make_comp>
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	4602      	mov	r2, r0
 80042f6:	e6cc      	b.n	8004092 <d_template_args+0x8a>
 80042f8:	3102      	adds	r1, #2
 80042fa:	2300      	movs	r3, #0
 80042fc:	60c1      	str	r1, [r0, #12]
 80042fe:	461a      	mov	r2, r3
 8004300:	212f      	movs	r1, #47	; 0x2f
 8004302:	b005      	add	sp, #20
 8004304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004308:	f7fb bf82 	b.w	8000210 <d_make_comp>
 800430c:	f1ba 0f00 	cmp.w	sl, #0
 8004310:	d05b      	beq.n	80043ca <d_template_args+0x3c2>
 8004312:	f89a 3000 	ldrb.w	r3, [sl]
 8004316:	2b70      	cmp	r3, #112	; 0x70
 8004318:	d001      	beq.n	800431e <d_template_args+0x316>
 800431a:	2b6d      	cmp	r3, #109	; 0x6d
 800431c:	d155      	bne.n	80043ca <d_template_args+0x3c2>
 800431e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8004322:	429a      	cmp	r2, r3
 8004324:	d151      	bne.n	80043ca <d_template_args+0x3c2>
 8004326:	68e2      	ldr	r2, [r4, #12]
 8004328:	7813      	ldrb	r3, [r2, #0]
 800432a:	2b5f      	cmp	r3, #95	; 0x5f
 800432c:	f000 8334 	beq.w	8004998 <d_template_args+0x990>
 8004330:	f04f 0a01 	mov.w	sl, #1
 8004334:	2b4c      	cmp	r3, #76	; 0x4c
 8004336:	f000 82bf 	beq.w	80048b8 <d_template_args+0x8b0>
 800433a:	2b54      	cmp	r3, #84	; 0x54
 800433c:	f000 82af 	beq.w	800489e <d_template_args+0x896>
 8004340:	2b73      	cmp	r3, #115	; 0x73
 8004342:	f000 80ed 	beq.w	8004520 <d_template_args+0x518>
 8004346:	2b66      	cmp	r3, #102	; 0x66
 8004348:	f000 818b 	beq.w	8004662 <d_template_args+0x65a>
 800434c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004350:	2909      	cmp	r1, #9
 8004352:	f200 8400 	bhi.w	8004b56 <d_template_args+0xb4e>
 8004356:	4620      	mov	r0, r4
 8004358:	f002 ffb0 	bl	80072bc <d_unqualified_name>
 800435c:	4681      	mov	r9, r0
 800435e:	b118      	cbz	r0, 8004368 <d_template_args+0x360>
 8004360:	68e3      	ldr	r3, [r4, #12]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b49      	cmp	r3, #73	; 0x49
 8004366:	d064      	beq.n	8004432 <d_template_args+0x42a>
 8004368:	f1ba 0f00 	cmp.w	sl, #0
 800436c:	f000 80a3 	beq.w	80044b6 <d_template_args+0x4ae>
 8004370:	464b      	mov	r3, r9
 8004372:	464a      	mov	r2, r9
 8004374:	2137      	movs	r1, #55	; 0x37
 8004376:	4620      	mov	r0, r4
 8004378:	f7fb ff4a 	bl	8000210 <d_make_comp>
 800437c:	4603      	mov	r3, r0
 800437e:	462a      	mov	r2, r5
 8004380:	2135      	movs	r1, #53	; 0x35
 8004382:	4620      	mov	r0, r4
 8004384:	f7fb ff44 	bl	8000210 <d_make_comp>
 8004388:	68e3      	ldr	r3, [r4, #12]
 800438a:	4602      	mov	r2, r0
 800438c:	e681      	b.n	8004092 <d_template_args+0x8a>
 800438e:	3203      	adds	r2, #3
 8004390:	60e2      	str	r2, [r4, #12]
 8004392:	4620      	mov	r0, r4
 8004394:	f002 fb14 	bl	80069c0 <d_type>
 8004398:	4681      	mov	r9, r0
 800439a:	4620      	mov	r0, r4
 800439c:	f002 ff8e 	bl	80072bc <d_unqualified_name>
 80043a0:	68e3      	ldr	r3, [r4, #12]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b49      	cmp	r3, #73	; 0x49
 80043a6:	4682      	mov	sl, r0
 80043a8:	d038      	beq.n	800441c <d_template_args+0x414>
 80043aa:	4603      	mov	r3, r0
 80043ac:	464a      	mov	r2, r9
 80043ae:	4629      	mov	r1, r5
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7fb ff2d 	bl	8000210 <d_make_comp>
 80043b6:	4602      	mov	r2, r0
 80043b8:	e740      	b.n	800423c <d_template_args+0x234>
 80043ba:	4620      	mov	r0, r4
 80043bc:	f7fc f8b4 	bl	8000528 <d_compact_number>
 80043c0:	3001      	adds	r0, #1
 80043c2:	f47f aec1 	bne.w	8004148 <d_template_args+0x140>
 80043c6:	4602      	mov	r2, r0
 80043c8:	e738      	b.n	800423c <d_template_args+0x234>
 80043ca:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 80043ce:	68e2      	ldr	r2, [r4, #12]
 80043d0:	d01e      	beq.n	8004410 <d_template_args+0x408>
 80043d2:	7813      	ldrb	r3, [r2, #0]
 80043d4:	f04f 0a00 	mov.w	sl, #0
 80043d8:	e7ac      	b.n	8004334 <d_template_args+0x32c>
 80043da:	2b6f      	cmp	r3, #111	; 0x6f
 80043dc:	d034      	beq.n	8004448 <d_template_args+0x440>
 80043de:	2b69      	cmp	r3, #105	; 0x69
 80043e0:	f040 8421 	bne.w	8004c26 <d_template_args+0xc1e>
 80043e4:	7893      	ldrb	r3, [r2, #2]
 80043e6:	2b6c      	cmp	r3, #108	; 0x6c
 80043e8:	f47f ae8b 	bne.w	8004102 <d_template_args+0xfa>
 80043ec:	2500      	movs	r5, #0
 80043ee:	68e3      	ldr	r3, [r4, #12]
 80043f0:	3302      	adds	r3, #2
 80043f2:	60e3      	str	r3, [r4, #12]
 80043f4:	2145      	movs	r1, #69	; 0x45
 80043f6:	4620      	mov	r0, r4
 80043f8:	f000 fc78 	bl	8004cec <d_exprlist>
 80043fc:	462a      	mov	r2, r5
 80043fe:	4603      	mov	r3, r0
 8004400:	2130      	movs	r1, #48	; 0x30
 8004402:	4620      	mov	r0, r4
 8004404:	f7fb ff04 	bl	8000210 <d_make_comp>
 8004408:	68e3      	ldr	r3, [r4, #12]
 800440a:	4602      	mov	r2, r0
 800440c:	e641      	b.n	8004092 <d_template_args+0x8a>
 800440e:	68e2      	ldr	r2, [r4, #12]
 8004410:	7813      	ldrb	r3, [r2, #0]
 8004412:	2b5f      	cmp	r3, #95	; 0x5f
 8004414:	d048      	beq.n	80044a8 <d_template_args+0x4a0>
 8004416:	f04f 0a00 	mov.w	sl, #0
 800441a:	e78b      	b.n	8004334 <d_template_args+0x32c>
 800441c:	4620      	mov	r0, r4
 800441e:	f7ff fdf3 	bl	8004008 <d_template_args>
 8004422:	4652      	mov	r2, sl
 8004424:	4603      	mov	r3, r0
 8004426:	2104      	movs	r1, #4
 8004428:	4620      	mov	r0, r4
 800442a:	f7fb fef1 	bl	8000210 <d_make_comp>
 800442e:	4603      	mov	r3, r0
 8004430:	e7bc      	b.n	80043ac <d_template_args+0x3a4>
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff fde8 	bl	8004008 <d_template_args>
 8004438:	464a      	mov	r2, r9
 800443a:	4603      	mov	r3, r0
 800443c:	2104      	movs	r1, #4
 800443e:	4620      	mov	r0, r4
 8004440:	f7fb fee6 	bl	8000210 <d_make_comp>
 8004444:	4681      	mov	r9, r0
 8004446:	e78f      	b.n	8004368 <d_template_args+0x360>
 8004448:	7893      	ldrb	r3, [r2, #2]
 800444a:	2b6e      	cmp	r3, #110	; 0x6e
 800444c:	f47f ae59 	bne.w	8004102 <d_template_args+0xfa>
 8004450:	3203      	adds	r2, #3
 8004452:	60e2      	str	r2, [r4, #12]
 8004454:	e610      	b.n	8004078 <d_template_args+0x70>
 8004456:	1cd3      	adds	r3, r2, #3
 8004458:	60e3      	str	r3, [r4, #12]
 800445a:	78d3      	ldrb	r3, [r2, #3]
 800445c:	2b4c      	cmp	r3, #76	; 0x4c
 800445e:	f000 8259 	beq.w	8004914 <d_template_args+0x90c>
 8004462:	2b54      	cmp	r3, #84	; 0x54
 8004464:	f000 8273 	beq.w	800494e <d_template_args+0x946>
 8004468:	2b73      	cmp	r3, #115	; 0x73
 800446a:	f000 8128 	beq.w	80046be <d_template_args+0x6b6>
 800446e:	2b66      	cmp	r3, #102	; 0x66
 8004470:	f000 81c1 	beq.w	80047f6 <d_template_args+0x7ee>
 8004474:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004478:	2909      	cmp	r1, #9
 800447a:	f200 83e1 	bhi.w	8004c40 <d_template_args+0xc38>
 800447e:	4620      	mov	r0, r4
 8004480:	f002 ff1c 	bl	80072bc <d_unqualified_name>
 8004484:	4605      	mov	r5, r0
 8004486:	2800      	cmp	r0, #0
 8004488:	f000 8242 	beq.w	8004910 <d_template_args+0x908>
 800448c:	68e3      	ldr	r3, [r4, #12]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b49      	cmp	r3, #73	; 0x49
 8004492:	f000 8284 	beq.w	800499e <d_template_args+0x996>
 8004496:	4602      	mov	r2, r0
 8004498:	2300      	movs	r3, #0
 800449a:	2149      	movs	r1, #73	; 0x49
 800449c:	4620      	mov	r0, r4
 800449e:	f7fb feb7 	bl	8000210 <d_make_comp>
 80044a2:	68e3      	ldr	r3, [r4, #12]
 80044a4:	4602      	mov	r2, r0
 80044a6:	e5f4      	b.n	8004092 <d_template_args+0x8a>
 80044a8:	3201      	adds	r2, #1
 80044aa:	60e2      	str	r2, [r4, #12]
 80044ac:	2145      	movs	r1, #69	; 0x45
 80044ae:	4620      	mov	r0, r4
 80044b0:	f000 fc1c 	bl	8004cec <d_exprlist>
 80044b4:	4681      	mov	r9, r0
 80044b6:	464b      	mov	r3, r9
 80044b8:	e761      	b.n	800437e <d_template_args+0x376>
 80044ba:	4620      	mov	r0, r4
 80044bc:	f002 fa80 	bl	80069c0 <d_type>
 80044c0:	4603      	mov	r3, r0
 80044c2:	e75c      	b.n	800437e <d_template_args+0x376>
 80044c4:	0801c0e8 	.word	0x0801c0e8
 80044c8:	0801bde0 	.word	0x0801bde0
 80044cc:	0801bdd8 	.word	0x0801bdd8
 80044d0:	0801bef4 	.word	0x0801bef4
 80044d4:	0801bef8 	.word	0x0801bef8
 80044d8:	462a      	mov	r2, r5
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	e5d9      	b.n	8004092 <d_template_args+0x8a>
 80044de:	2145      	movs	r1, #69	; 0x45
 80044e0:	4620      	mov	r0, r4
 80044e2:	f000 fc03 	bl	8004cec <d_exprlist>
 80044e6:	4682      	mov	sl, r0
 80044e8:	e6d2      	b.n	8004290 <d_template_args+0x288>
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80044f0:	2a01      	cmp	r2, #1
 80044f2:	d903      	bls.n	80044fc <d_template_args+0x4f4>
 80044f4:	3b72      	subs	r3, #114	; 0x72
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	f63f aeaa 	bhi.w	8004250 <d_template_args+0x248>
 80044fc:	4620      	mov	r0, r4
 80044fe:	f002 fa5f 	bl	80069c0 <d_type>
 8004502:	4681      	mov	r9, r0
 8004504:	e6a8      	b.n	8004258 <d_template_args+0x250>
 8004506:	4620      	mov	r0, r4
 8004508:	f002 f888 	bl	800661c <d_expression_1>
 800450c:	4681      	mov	r9, r0
 800450e:	4620      	mov	r0, r4
 8004510:	f002 f884 	bl	800661c <d_expression_1>
 8004514:	4682      	mov	sl, r0
 8004516:	4620      	mov	r0, r4
 8004518:	f002 f880 	bl	800661c <d_expression_1>
 800451c:	4603      	mov	r3, r0
 800451e:	e67b      	b.n	8004218 <d_template_args+0x210>
 8004520:	7853      	ldrb	r3, [r2, #1]
 8004522:	2b72      	cmp	r3, #114	; 0x72
 8004524:	f000 8265 	beq.w	80049f2 <d_template_args+0x9ea>
 8004528:	2b70      	cmp	r3, #112	; 0x70
 800452a:	f000 82a2 	beq.w	8004a72 <d_template_args+0xa6a>
 800452e:	4620      	mov	r0, r4
 8004530:	f002 fe04 	bl	800713c <d_operator_name>
 8004534:	4681      	mov	r9, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	f43f af16 	beq.w	8004368 <d_template_args+0x360>
 800453c:	7803      	ldrb	r3, [r0, #0]
 800453e:	2b31      	cmp	r3, #49	; 0x31
 8004540:	f000 81bf 	beq.w	80048c2 <d_template_args+0x8ba>
 8004544:	2b32      	cmp	r3, #50	; 0x32
 8004546:	f040 8180 	bne.w	800484a <d_template_args+0x842>
 800454a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800454e:	2b03      	cmp	r3, #3
 8004550:	f200 80ae 	bhi.w	80046b0 <d_template_args+0x6a8>
 8004554:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004558:	01810004 	.word	0x01810004
 800455c:	000c004e 	.word	0x000c004e
 8004560:	464a      	mov	r2, r9
 8004562:	2300      	movs	r3, #0
 8004564:	2134      	movs	r1, #52	; 0x34
 8004566:	4620      	mov	r0, r4
 8004568:	f7fb fe52 	bl	8000210 <d_make_comp>
 800456c:	4681      	mov	r9, r0
 800456e:	e6fb      	b.n	8004368 <d_template_args+0x360>
 8004570:	f04f 0b00 	mov.w	fp, #0
 8004574:	49cc      	ldr	r1, [pc, #816]	; (80048a8 <d_template_args+0x8a0>)
 8004576:	4658      	mov	r0, fp
 8004578:	f003 ffd2 	bl	8008520 <strcmp>
 800457c:	2800      	cmp	r0, #0
 800457e:	f000 82a2 	beq.w	8004ac6 <d_template_args+0xabe>
 8004582:	f89b 3000 	ldrb.w	r3, [fp]
 8004586:	2b6e      	cmp	r3, #110	; 0x6e
 8004588:	f040 8092 	bne.w	80046b0 <d_template_args+0x6a8>
 800458c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8004590:	2b77      	cmp	r3, #119	; 0x77
 8004592:	d002      	beq.n	800459a <d_template_args+0x592>
 8004594:	2b61      	cmp	r3, #97	; 0x61
 8004596:	f040 808b 	bne.w	80046b0 <d_template_args+0x6a8>
 800459a:	215f      	movs	r1, #95	; 0x5f
 800459c:	4620      	mov	r0, r4
 800459e:	f000 fba5 	bl	8004cec <d_exprlist>
 80045a2:	9001      	str	r0, [sp, #4]
 80045a4:	4620      	mov	r0, r4
 80045a6:	f002 fa0b 	bl	80069c0 <d_type>
 80045aa:	68e3      	ldr	r3, [r4, #12]
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	2a45      	cmp	r2, #69	; 0x45
 80045b0:	4683      	mov	fp, r0
 80045b2:	f000 8316 	beq.w	8004be2 <d_template_args+0xbda>
 80045b6:	2a70      	cmp	r2, #112	; 0x70
 80045b8:	f000 8308 	beq.w	8004bcc <d_template_args+0xbc4>
 80045bc:	2a69      	cmp	r2, #105	; 0x69
 80045be:	d177      	bne.n	80046b0 <d_template_args+0x6a8>
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	2b6c      	cmp	r3, #108	; 0x6c
 80045c4:	d174      	bne.n	80046b0 <d_template_args+0x6a8>
 80045c6:	4620      	mov	r0, r4
 80045c8:	f002 f828 	bl	800661c <d_expression_1>
 80045cc:	4603      	mov	r3, r0
 80045ce:	465a      	mov	r2, fp
 80045d0:	213a      	movs	r1, #58	; 0x3a
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7fb fe1c 	bl	8000210 <d_make_comp>
 80045d8:	9a01      	ldr	r2, [sp, #4]
 80045da:	4603      	mov	r3, r0
 80045dc:	2139      	movs	r1, #57	; 0x39
 80045de:	4620      	mov	r0, r4
 80045e0:	f7fb fe16 	bl	8000210 <d_make_comp>
 80045e4:	464a      	mov	r2, r9
 80045e6:	4603      	mov	r3, r0
 80045e8:	2138      	movs	r1, #56	; 0x38
 80045ea:	4620      	mov	r0, r4
 80045ec:	f7fb fe10 	bl	8000210 <d_make_comp>
 80045f0:	4681      	mov	r9, r0
 80045f2:	e6b9      	b.n	8004368 <d_template_args+0x360>
 80045f4:	f04f 0b00 	mov.w	fp, #0
 80045f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	785a      	ldrb	r2, [r3, #1]
 8004600:	2a63      	cmp	r2, #99	; 0x63
 8004602:	f000 8295 	beq.w	8004b30 <d_template_args+0xb28>
 8004606:	4620      	mov	r0, r4
 8004608:	f002 f808 	bl	800661c <d_expression_1>
 800460c:	9001      	str	r0, [sp, #4]
 800460e:	49a7      	ldr	r1, [pc, #668]	; (80048ac <d_template_args+0x8a4>)
 8004610:	4658      	mov	r0, fp
 8004612:	f003 ff85 	bl	8008520 <strcmp>
 8004616:	2800      	cmp	r0, #0
 8004618:	f000 8243 	beq.w	8004aa2 <d_template_args+0xa9a>
 800461c:	49a4      	ldr	r1, [pc, #656]	; (80048b0 <d_template_args+0x8a8>)
 800461e:	4658      	mov	r0, fp
 8004620:	f003 ff7e 	bl	8008520 <strcmp>
 8004624:	b130      	cbz	r0, 8004634 <d_template_args+0x62c>
 8004626:	4658      	mov	r0, fp
 8004628:	49a2      	ldr	r1, [pc, #648]	; (80048b4 <d_template_args+0x8ac>)
 800462a:	f003 ff79 	bl	8008520 <strcmp>
 800462e:	2800      	cmp	r0, #0
 8004630:	f040 828c 	bne.w	8004b4c <d_template_args+0xb44>
 8004634:	4620      	mov	r0, r4
 8004636:	f002 fe41 	bl	80072bc <d_unqualified_name>
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b49      	cmp	r3, #73	; 0x49
 8004640:	4683      	mov	fp, r0
 8004642:	f000 833c 	beq.w	8004cbe <d_template_args+0xcb6>
 8004646:	465b      	mov	r3, fp
 8004648:	9a01      	ldr	r2, [sp, #4]
 800464a:	2137      	movs	r1, #55	; 0x37
 800464c:	4620      	mov	r0, r4
 800464e:	f7fb fddf 	bl	8000210 <d_make_comp>
 8004652:	464a      	mov	r2, r9
 8004654:	4603      	mov	r3, r0
 8004656:	2136      	movs	r1, #54	; 0x36
 8004658:	4620      	mov	r0, r4
 800465a:	f7fb fdd9 	bl	8000210 <d_make_comp>
 800465e:	4681      	mov	r9, r0
 8004660:	e682      	b.n	8004368 <d_template_args+0x360>
 8004662:	7853      	ldrb	r3, [r2, #1]
 8004664:	2b70      	cmp	r3, #112	; 0x70
 8004666:	f47f af62 	bne.w	800452e <d_template_args+0x526>
 800466a:	1c93      	adds	r3, r2, #2
 800466c:	60e3      	str	r3, [r4, #12]
 800466e:	7893      	ldrb	r3, [r2, #2]
 8004670:	2b54      	cmp	r3, #84	; 0x54
 8004672:	f040 81b6 	bne.w	80049e2 <d_template_args+0x9da>
 8004676:	3203      	adds	r2, #3
 8004678:	60e2      	str	r2, [r4, #12]
 800467a:	2000      	movs	r0, #0
 800467c:	6963      	ldr	r3, [r4, #20]
 800467e:	69a2      	ldr	r2, [r4, #24]
 8004680:	4293      	cmp	r3, r2
 8004682:	da15      	bge.n	80046b0 <d_template_args+0x6a8>
 8004684:	6922      	ldr	r2, [r4, #16]
 8004686:	1c59      	adds	r1, r3, #1
 8004688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800468c:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 8004690:	6161      	str	r1, [r4, #20]
 8004692:	f43f ae69 	beq.w	8004368 <d_template_args+0x360>
 8004696:	2106      	movs	r1, #6
 8004698:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800469c:	f8c9 0004 	str.w	r0, [r9, #4]
 80046a0:	e662      	b.n	8004368 <d_template_args+0x360>
 80046a2:	2200      	movs	r2, #0
 80046a4:	e4f5      	b.n	8004092 <d_template_args+0x8a>
 80046a6:	4620      	mov	r0, r4
 80046a8:	f001 ffb8 	bl	800661c <d_expression_1>
 80046ac:	4682      	mov	sl, r0
 80046ae:	e5ef      	b.n	8004290 <d_template_args+0x288>
 80046b0:	f04f 0900 	mov.w	r9, #0
 80046b4:	e658      	b.n	8004368 <d_template_args+0x360>
 80046b6:	3301      	adds	r3, #1
 80046b8:	60e3      	str	r3, [r4, #12]
 80046ba:	2300      	movs	r3, #0
 80046bc:	e5ac      	b.n	8004218 <d_template_args+0x210>
 80046be:	7913      	ldrb	r3, [r2, #4]
 80046c0:	2b72      	cmp	r3, #114	; 0x72
 80046c2:	f000 81ac 	beq.w	8004a1e <d_template_args+0xa16>
 80046c6:	2b70      	cmp	r3, #112	; 0x70
 80046c8:	f000 8222 	beq.w	8004b10 <d_template_args+0xb08>
 80046cc:	4620      	mov	r0, r4
 80046ce:	f002 fd35 	bl	800713c <d_operator_name>
 80046d2:	4681      	mov	r9, r0
 80046d4:	2800      	cmp	r0, #0
 80046d6:	f000 811b 	beq.w	8004910 <d_template_args+0x908>
 80046da:	7803      	ldrb	r3, [r0, #0]
 80046dc:	2b31      	cmp	r3, #49	; 0x31
 80046de:	f000 813a 	beq.w	8004956 <d_template_args+0x94e>
 80046e2:	2b32      	cmp	r3, #50	; 0x32
 80046e4:	f040 811a 	bne.w	800491c <d_template_args+0x914>
 80046e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	f200 810f 	bhi.w	8004910 <d_template_args+0x908>
 80046f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046f6:	0004      	.short	0x0004
 80046f8:	004b011a 	.word	0x004b011a
 80046fc:	000b      	.short	0x000b
 80046fe:	464a      	mov	r2, r9
 8004700:	2300      	movs	r3, #0
 8004702:	2134      	movs	r1, #52	; 0x34
 8004704:	4620      	mov	r0, r4
 8004706:	f7fb fd83 	bl	8000210 <d_make_comp>
 800470a:	e6c4      	b.n	8004496 <d_template_args+0x48e>
 800470c:	2500      	movs	r5, #0
 800470e:	4966      	ldr	r1, [pc, #408]	; (80048a8 <d_template_args+0x8a0>)
 8004710:	4628      	mov	r0, r5
 8004712:	f003 ff05 	bl	8008520 <strcmp>
 8004716:	2800      	cmp	r0, #0
 8004718:	f000 81c9 	beq.w	8004aae <d_template_args+0xaa6>
 800471c:	782b      	ldrb	r3, [r5, #0]
 800471e:	2b6e      	cmp	r3, #110	; 0x6e
 8004720:	f040 80f6 	bne.w	8004910 <d_template_args+0x908>
 8004724:	786b      	ldrb	r3, [r5, #1]
 8004726:	2b77      	cmp	r3, #119	; 0x77
 8004728:	d002      	beq.n	8004730 <d_template_args+0x728>
 800472a:	2b61      	cmp	r3, #97	; 0x61
 800472c:	f040 80f0 	bne.w	8004910 <d_template_args+0x908>
 8004730:	215f      	movs	r1, #95	; 0x5f
 8004732:	4620      	mov	r0, r4
 8004734:	f000 fada 	bl	8004cec <d_exprlist>
 8004738:	4605      	mov	r5, r0
 800473a:	4620      	mov	r0, r4
 800473c:	f002 f940 	bl	80069c0 <d_type>
 8004740:	68e3      	ldr	r3, [r4, #12]
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	2a45      	cmp	r2, #69	; 0x45
 8004746:	4682      	mov	sl, r0
 8004748:	f000 82b5 	beq.w	8004cb6 <d_template_args+0xcae>
 800474c:	2a70      	cmp	r2, #112	; 0x70
 800474e:	f000 82a7 	beq.w	8004ca0 <d_template_args+0xc98>
 8004752:	2a69      	cmp	r2, #105	; 0x69
 8004754:	f040 80dc 	bne.w	8004910 <d_template_args+0x908>
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	2b6c      	cmp	r3, #108	; 0x6c
 800475c:	f040 80d8 	bne.w	8004910 <d_template_args+0x908>
 8004760:	4620      	mov	r0, r4
 8004762:	f001 ff5b 	bl	800661c <d_expression_1>
 8004766:	4603      	mov	r3, r0
 8004768:	4652      	mov	r2, sl
 800476a:	213a      	movs	r1, #58	; 0x3a
 800476c:	4620      	mov	r0, r4
 800476e:	f7fb fd4f 	bl	8000210 <d_make_comp>
 8004772:	462a      	mov	r2, r5
 8004774:	4603      	mov	r3, r0
 8004776:	2139      	movs	r1, #57	; 0x39
 8004778:	4620      	mov	r0, r4
 800477a:	f7fb fd49 	bl	8000210 <d_make_comp>
 800477e:	464a      	mov	r2, r9
 8004780:	4603      	mov	r3, r0
 8004782:	2138      	movs	r1, #56	; 0x38
 8004784:	4620      	mov	r0, r4
 8004786:	f7fb fd43 	bl	8000210 <d_make_comp>
 800478a:	e684      	b.n	8004496 <d_template_args+0x48e>
 800478c:	2500      	movs	r5, #0
 800478e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	785a      	ldrb	r2, [r3, #1]
 8004796:	2a63      	cmp	r2, #99	; 0x63
 8004798:	f000 81a7 	beq.w	8004aea <d_template_args+0xae2>
 800479c:	4620      	mov	r0, r4
 800479e:	f001 ff3d 	bl	800661c <d_expression_1>
 80047a2:	4682      	mov	sl, r0
 80047a4:	4941      	ldr	r1, [pc, #260]	; (80048ac <d_template_args+0x8a4>)
 80047a6:	4628      	mov	r0, r5
 80047a8:	f003 feba 	bl	8008520 <strcmp>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	f000 8196 	beq.w	8004ade <d_template_args+0xad6>
 80047b2:	493f      	ldr	r1, [pc, #252]	; (80048b0 <d_template_args+0x8a8>)
 80047b4:	4628      	mov	r0, r5
 80047b6:	f003 feb3 	bl	8008520 <strcmp>
 80047ba:	b130      	cbz	r0, 80047ca <d_template_args+0x7c2>
 80047bc:	4628      	mov	r0, r5
 80047be:	493d      	ldr	r1, [pc, #244]	; (80048b4 <d_template_args+0x8ac>)
 80047c0:	f003 feae 	bl	8008520 <strcmp>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f040 8229 	bne.w	8004c1c <d_template_args+0xc14>
 80047ca:	4620      	mov	r0, r4
 80047cc:	f002 fd76 	bl	80072bc <d_unqualified_name>
 80047d0:	68e3      	ldr	r3, [r4, #12]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b49      	cmp	r3, #73	; 0x49
 80047d6:	4605      	mov	r5, r0
 80047d8:	f000 820a 	beq.w	8004bf0 <d_template_args+0xbe8>
 80047dc:	462b      	mov	r3, r5
 80047de:	4652      	mov	r2, sl
 80047e0:	2137      	movs	r1, #55	; 0x37
 80047e2:	4620      	mov	r0, r4
 80047e4:	f7fb fd14 	bl	8000210 <d_make_comp>
 80047e8:	464a      	mov	r2, r9
 80047ea:	4603      	mov	r3, r0
 80047ec:	2136      	movs	r1, #54	; 0x36
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7fb fd0e 	bl	8000210 <d_make_comp>
 80047f4:	e64f      	b.n	8004496 <d_template_args+0x48e>
 80047f6:	7913      	ldrb	r3, [r2, #4]
 80047f8:	2b70      	cmp	r3, #112	; 0x70
 80047fa:	f47f af67 	bne.w	80046cc <d_template_args+0x6c4>
 80047fe:	1d53      	adds	r3, r2, #5
 8004800:	60e3      	str	r3, [r4, #12]
 8004802:	7953      	ldrb	r3, [r2, #5]
 8004804:	2b54      	cmp	r3, #84	; 0x54
 8004806:	d17d      	bne.n	8004904 <d_template_args+0x8fc>
 8004808:	3206      	adds	r2, #6
 800480a:	60e2      	str	r2, [r4, #12]
 800480c:	2500      	movs	r5, #0
 800480e:	6963      	ldr	r3, [r4, #20]
 8004810:	69a2      	ldr	r2, [r4, #24]
 8004812:	4293      	cmp	r3, r2
 8004814:	da7c      	bge.n	8004910 <d_template_args+0x908>
 8004816:	6921      	ldr	r1, [r4, #16]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800481e:	6162      	str	r2, [r4, #20]
 8004820:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 8004824:	f000 8236 	beq.w	8004c94 <d_template_args+0xc8c>
 8004828:	2006      	movs	r0, #6
 800482a:	f801 0023 	strb.w	r0, [r1, r3, lsl #2]
 800482e:	4610      	mov	r0, r2
 8004830:	6055      	str	r5, [r2, #4]
 8004832:	e630      	b.n	8004496 <d_template_args+0x48e>
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff fbe7 	bl	8004008 <d_template_args>
 800483a:	4652      	mov	r2, sl
 800483c:	4603      	mov	r3, r0
 800483e:	2104      	movs	r1, #4
 8004840:	4620      	mov	r0, r4
 8004842:	f7fb fce5 	bl	8000210 <d_make_comp>
 8004846:	4682      	mov	sl, r0
 8004848:	e522      	b.n	8004290 <d_template_args+0x288>
 800484a:	2b33      	cmp	r3, #51	; 0x33
 800484c:	f47f af30 	bne.w	80046b0 <d_template_args+0x6a8>
 8004850:	68e3      	ldr	r3, [r4, #12]
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	2a5f      	cmp	r2, #95	; 0x5f
 8004856:	f000 81a1 	beq.w	8004b9c <d_template_args+0xb94>
 800485a:	f04f 0b00 	mov.w	fp, #0
 800485e:	4620      	mov	r0, r4
 8004860:	f001 fedc 	bl	800661c <d_expression_1>
 8004864:	4603      	mov	r3, r0
 8004866:	f1bb 0f00 	cmp.w	fp, #0
 800486a:	d005      	beq.n	8004878 <d_template_args+0x870>
 800486c:	4602      	mov	r2, r0
 800486e:	2137      	movs	r1, #55	; 0x37
 8004870:	4620      	mov	r0, r4
 8004872:	f7fb fccd 	bl	8000210 <d_make_comp>
 8004876:	4603      	mov	r3, r0
 8004878:	464a      	mov	r2, r9
 800487a:	2135      	movs	r1, #53	; 0x35
 800487c:	4620      	mov	r0, r4
 800487e:	f7fb fcc7 	bl	8000210 <d_make_comp>
 8004882:	4681      	mov	r9, r0
 8004884:	e570      	b.n	8004368 <d_template_args+0x360>
 8004886:	785a      	ldrb	r2, [r3, #1]
 8004888:	2a69      	cmp	r2, #105	; 0x69
 800488a:	f47f af0a 	bne.w	80046a2 <d_template_args+0x69a>
 800488e:	3302      	adds	r3, #2
 8004890:	60e3      	str	r3, [r4, #12]
 8004892:	2145      	movs	r1, #69	; 0x45
 8004894:	4620      	mov	r0, r4
 8004896:	f000 fa29 	bl	8004cec <d_exprlist>
 800489a:	4603      	mov	r3, r0
 800489c:	e4bc      	b.n	8004218 <d_template_args+0x210>
 800489e:	4620      	mov	r0, r4
 80048a0:	f7fb fe5a 	bl	8000558 <d_template_param>
 80048a4:	4681      	mov	r9, r0
 80048a6:	e55f      	b.n	8004368 <d_template_args+0x360>
 80048a8:	0801bde0 	.word	0x0801bde0
 80048ac:	0801bdd8 	.word	0x0801bdd8
 80048b0:	0801bef4 	.word	0x0801bef4
 80048b4:	0801bef8 	.word	0x0801bef8
 80048b8:	4620      	mov	r0, r4
 80048ba:	f003 fb6b 	bl	8007f94 <d_expr_primary>
 80048be:	4681      	mov	r9, r0
 80048c0:	e552      	b.n	8004368 <d_template_args+0x360>
 80048c2:	6843      	ldr	r3, [r0, #4]
 80048c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	f8d3 b000 	ldr.w	fp, [r3]
 80048cc:	49ce      	ldr	r1, [pc, #824]	; (8004c08 <d_template_args+0xc00>)
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	3a02      	subs	r2, #2
 80048d2:	4402      	add	r2, r0
 80048d4:	6322      	str	r2, [r4, #48]	; 0x30
 80048d6:	4658      	mov	r0, fp
 80048d8:	f003 fe22 	bl	8008520 <strcmp>
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	2800      	cmp	r0, #0
 80048e0:	f000 8111 	beq.w	8004b06 <d_template_args+0xafe>
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	f63f aee2 	bhi.w	80046b0 <d_template_args+0x6a8>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <d_template_args+0x8ec>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004561 	.word	0x08004561
 80048f8:	080049b3 	.word	0x080049b3
 80048fc:	080045f9 	.word	0x080045f9
 8004900:	08004575 	.word	0x08004575
 8004904:	4620      	mov	r0, r4
 8004906:	f7fb fe0f 	bl	8000528 <d_compact_number>
 800490a:	1c45      	adds	r5, r0, #1
 800490c:	f47f af7f 	bne.w	800480e <d_template_args+0x806>
 8004910:	2000      	movs	r0, #0
 8004912:	e5c0      	b.n	8004496 <d_template_args+0x48e>
 8004914:	4620      	mov	r0, r4
 8004916:	f003 fb3d 	bl	8007f94 <d_expr_primary>
 800491a:	e5bc      	b.n	8004496 <d_template_args+0x48e>
 800491c:	2b33      	cmp	r3, #51	; 0x33
 800491e:	d1f7      	bne.n	8004910 <d_template_args+0x908>
 8004920:	68e3      	ldr	r3, [r4, #12]
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	2a5f      	cmp	r2, #95	; 0x5f
 8004926:	f000 8171 	beq.w	8004c0c <d_template_args+0xc04>
 800492a:	2500      	movs	r5, #0
 800492c:	4620      	mov	r0, r4
 800492e:	f001 fe75 	bl	800661c <d_expression_1>
 8004932:	4603      	mov	r3, r0
 8004934:	b12d      	cbz	r5, 8004942 <d_template_args+0x93a>
 8004936:	4602      	mov	r2, r0
 8004938:	2137      	movs	r1, #55	; 0x37
 800493a:	4620      	mov	r0, r4
 800493c:	f7fb fc68 	bl	8000210 <d_make_comp>
 8004940:	4603      	mov	r3, r0
 8004942:	464a      	mov	r2, r9
 8004944:	2135      	movs	r1, #53	; 0x35
 8004946:	4620      	mov	r0, r4
 8004948:	f7fb fc62 	bl	8000210 <d_make_comp>
 800494c:	e5a3      	b.n	8004496 <d_template_args+0x48e>
 800494e:	4620      	mov	r0, r4
 8004950:	f7fb fe02 	bl	8000558 <d_template_param>
 8004954:	e59f      	b.n	8004496 <d_template_args+0x48e>
 8004956:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800495a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800495c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004960:	f8da 5000 	ldr.w	r5, [sl]
 8004964:	49a8      	ldr	r1, [pc, #672]	; (8004c08 <d_template_args+0xc00>)
 8004966:	3b02      	subs	r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	6323      	str	r3, [r4, #48]	; 0x30
 800496c:	4628      	mov	r0, r5
 800496e:	f003 fdd7 	bl	8008520 <strcmp>
 8004972:	2800      	cmp	r0, #0
 8004974:	f000 80d8 	beq.w	8004b28 <d_template_args+0xb20>
 8004978:	f8da 300c 	ldr.w	r3, [sl, #12]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d8c7      	bhi.n	8004910 <d_template_args+0x908>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <d_template_args+0x980>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080046ff 	.word	0x080046ff
 800498c:	08004a4b 	.word	0x08004a4b
 8004990:	0800478f 	.word	0x0800478f
 8004994:	0800470f 	.word	0x0800470f
 8004998:	3201      	adds	r2, #1
 800499a:	60e2      	str	r2, [r4, #12]
 800499c:	e519      	b.n	80043d2 <d_template_args+0x3ca>
 800499e:	4620      	mov	r0, r4
 80049a0:	f7ff fb32 	bl	8004008 <d_template_args>
 80049a4:	462a      	mov	r2, r5
 80049a6:	4603      	mov	r3, r0
 80049a8:	2104      	movs	r1, #4
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7fb fc30 	bl	8000210 <d_make_comp>
 80049b0:	e571      	b.n	8004496 <d_template_args+0x48e>
 80049b2:	f1bb 0f00 	cmp.w	fp, #0
 80049b6:	f43f af50 	beq.w	800485a <d_template_args+0x852>
 80049ba:	f89b 3000 	ldrb.w	r3, [fp]
 80049be:	2b70      	cmp	r3, #112	; 0x70
 80049c0:	d002      	beq.n	80049c8 <d_template_args+0x9c0>
 80049c2:	2b6d      	cmp	r3, #109	; 0x6d
 80049c4:	f47f af49 	bne.w	800485a <d_template_args+0x852>
 80049c8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	f47f af44 	bne.w	800485a <d_template_args+0x852>
 80049d2:	68e3      	ldr	r3, [r4, #12]
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	2a5f      	cmp	r2, #95	; 0x5f
 80049d8:	f000 8107 	beq.w	8004bea <d_template_args+0xbe2>
 80049dc:	f04f 0b01 	mov.w	fp, #1
 80049e0:	e73d      	b.n	800485e <d_template_args+0x856>
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7fb fda0 	bl	8000528 <d_compact_number>
 80049e8:	3001      	adds	r0, #1
 80049ea:	f47f ae47 	bne.w	800467c <d_template_args+0x674>
 80049ee:	4681      	mov	r9, r0
 80049f0:	e4ba      	b.n	8004368 <d_template_args+0x360>
 80049f2:	3202      	adds	r2, #2
 80049f4:	60e2      	str	r2, [r4, #12]
 80049f6:	4620      	mov	r0, r4
 80049f8:	f001 ffe2 	bl	80069c0 <d_type>
 80049fc:	4681      	mov	r9, r0
 80049fe:	4620      	mov	r0, r4
 8004a00:	f002 fc5c 	bl	80072bc <d_unqualified_name>
 8004a04:	68e3      	ldr	r3, [r4, #12]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b49      	cmp	r3, #73	; 0x49
 8004a0a:	4683      	mov	fp, r0
 8004a0c:	d03e      	beq.n	8004a8c <d_template_args+0xa84>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	464a      	mov	r2, r9
 8004a12:	2101      	movs	r1, #1
 8004a14:	4620      	mov	r0, r4
 8004a16:	f7fb fbfb 	bl	8000210 <d_make_comp>
 8004a1a:	4681      	mov	r9, r0
 8004a1c:	e4a4      	b.n	8004368 <d_template_args+0x360>
 8004a1e:	3205      	adds	r2, #5
 8004a20:	60e2      	str	r2, [r4, #12]
 8004a22:	4620      	mov	r0, r4
 8004a24:	f001 ffcc 	bl	80069c0 <d_type>
 8004a28:	4605      	mov	r5, r0
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f002 fc46 	bl	80072bc <d_unqualified_name>
 8004a30:	68e3      	ldr	r3, [r4, #12]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b49      	cmp	r3, #73	; 0x49
 8004a36:	4681      	mov	r9, r0
 8004a38:	f000 80b8 	beq.w	8004bac <d_template_args+0xba4>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	462a      	mov	r2, r5
 8004a40:	2101      	movs	r1, #1
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7fb fbe4 	bl	8000210 <d_make_comp>
 8004a48:	e525      	b.n	8004496 <d_template_args+0x48e>
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	f43f af6d 	beq.w	800492a <d_template_args+0x922>
 8004a50:	782b      	ldrb	r3, [r5, #0]
 8004a52:	2b70      	cmp	r3, #112	; 0x70
 8004a54:	d002      	beq.n	8004a5c <d_template_args+0xa54>
 8004a56:	2b6d      	cmp	r3, #109	; 0x6d
 8004a58:	f47f af67 	bne.w	800492a <d_template_args+0x922>
 8004a5c:	786a      	ldrb	r2, [r5, #1]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	f47f af63 	bne.w	800492a <d_template_args+0x922>
 8004a64:	68e3      	ldr	r3, [r4, #12]
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	2a5f      	cmp	r2, #95	; 0x5f
 8004a6a:	f000 8116 	beq.w	8004c9a <d_template_args+0xc92>
 8004a6e:	2501      	movs	r5, #1
 8004a70:	e75c      	b.n	800492c <d_template_args+0x924>
 8004a72:	3202      	adds	r2, #2
 8004a74:	60e2      	str	r2, [r4, #12]
 8004a76:	4620      	mov	r0, r4
 8004a78:	f001 fdd0 	bl	800661c <d_expression_1>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4602      	mov	r2, r0
 8004a80:	2149      	movs	r1, #73	; 0x49
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7fb fbc4 	bl	8000210 <d_make_comp>
 8004a88:	4681      	mov	r9, r0
 8004a8a:	e46d      	b.n	8004368 <d_template_args+0x360>
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff fabb 	bl	8004008 <d_template_args>
 8004a92:	465a      	mov	r2, fp
 8004a94:	4603      	mov	r3, r0
 8004a96:	2104      	movs	r1, #4
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7fb fbb9 	bl	8000210 <d_make_comp>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	e7b6      	b.n	8004a10 <d_template_args+0xa08>
 8004aa2:	2145      	movs	r1, #69	; 0x45
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f000 f921 	bl	8004cec <d_exprlist>
 8004aaa:	4683      	mov	fp, r0
 8004aac:	e5cb      	b.n	8004646 <d_template_args+0x63e>
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f001 fdb4 	bl	800661c <d_expression_1>
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f001 fdb0 	bl	800661c <d_expression_1>
 8004abc:	4682      	mov	sl, r0
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f001 fdac 	bl	800661c <d_expression_1>
 8004ac4:	e64f      	b.n	8004766 <d_template_args+0x75e>
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	f001 fda8 	bl	800661c <d_expression_1>
 8004acc:	9001      	str	r0, [sp, #4]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f001 fda4 	bl	800661c <d_expression_1>
 8004ad4:	4683      	mov	fp, r0
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f001 fda0 	bl	800661c <d_expression_1>
 8004adc:	e576      	b.n	80045cc <d_template_args+0x5c4>
 8004ade:	2145      	movs	r1, #69	; 0x45
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 f903 	bl	8004cec <d_exprlist>
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	e678      	b.n	80047dc <d_template_args+0x7d4>
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8004af0:	2a01      	cmp	r2, #1
 8004af2:	d903      	bls.n	8004afc <d_template_args+0xaf4>
 8004af4:	3b72      	subs	r3, #114	; 0x72
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	f63f ae50 	bhi.w	800479c <d_template_args+0x794>
 8004afc:	4620      	mov	r0, r4
 8004afe:	f001 ff5f 	bl	80069c0 <d_type>
 8004b02:	4682      	mov	sl, r0
 8004b04:	e64e      	b.n	80047a4 <d_template_args+0x79c>
 8004b06:	4620      	mov	r0, r4
 8004b08:	f001 ff5a 	bl	80069c0 <d_type>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	e6b3      	b.n	8004878 <d_template_args+0x870>
 8004b10:	3205      	adds	r2, #5
 8004b12:	60e2      	str	r2, [r4, #12]
 8004b14:	4620      	mov	r0, r4
 8004b16:	f001 fd81 	bl	800661c <d_expression_1>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	2149      	movs	r1, #73	; 0x49
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7fb fb75 	bl	8000210 <d_make_comp>
 8004b26:	e4b6      	b.n	8004496 <d_template_args+0x48e>
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f001 ff49 	bl	80069c0 <d_type>
 8004b2e:	e707      	b.n	8004940 <d_template_args+0x938>
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8004b36:	2a01      	cmp	r2, #1
 8004b38:	d903      	bls.n	8004b42 <d_template_args+0xb3a>
 8004b3a:	3b72      	subs	r3, #114	; 0x72
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	f63f ad62 	bhi.w	8004606 <d_template_args+0x5fe>
 8004b42:	4620      	mov	r0, r4
 8004b44:	f001 ff3c 	bl	80069c0 <d_type>
 8004b48:	9001      	str	r0, [sp, #4]
 8004b4a:	e560      	b.n	800460e <d_template_args+0x606>
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f001 fd65 	bl	800661c <d_expression_1>
 8004b52:	4683      	mov	fp, r0
 8004b54:	e577      	b.n	8004646 <d_template_args+0x63e>
 8004b56:	2b6f      	cmp	r3, #111	; 0x6f
 8004b58:	d018      	beq.n	8004b8c <d_template_args+0xb84>
 8004b5a:	2b69      	cmp	r3, #105	; 0x69
 8004b5c:	f040 80ba 	bne.w	8004cd4 <d_template_args+0xccc>
 8004b60:	7853      	ldrb	r3, [r2, #1]
 8004b62:	2b6c      	cmp	r3, #108	; 0x6c
 8004b64:	f47f ace3 	bne.w	800452e <d_template_args+0x526>
 8004b68:	f04f 0900 	mov.w	r9, #0
 8004b6c:	68e3      	ldr	r3, [r4, #12]
 8004b6e:	3302      	adds	r3, #2
 8004b70:	60e3      	str	r3, [r4, #12]
 8004b72:	2145      	movs	r1, #69	; 0x45
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 f8b9 	bl	8004cec <d_exprlist>
 8004b7a:	464a      	mov	r2, r9
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2130      	movs	r1, #48	; 0x30
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7fb fb45 	bl	8000210 <d_make_comp>
 8004b86:	4681      	mov	r9, r0
 8004b88:	f7ff bbee 	b.w	8004368 <d_template_args+0x360>
 8004b8c:	7853      	ldrb	r3, [r2, #1]
 8004b8e:	2b6e      	cmp	r3, #110	; 0x6e
 8004b90:	f47f accd 	bne.w	800452e <d_template_args+0x526>
 8004b94:	3202      	adds	r2, #2
 8004b96:	60e2      	str	r2, [r4, #12]
 8004b98:	f7ff bbdd 	b.w	8004356 <d_template_args+0x34e>
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	60e3      	str	r3, [r4, #12]
 8004ba0:	2145      	movs	r1, #69	; 0x45
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f000 f8a2 	bl	8004cec <d_exprlist>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	e665      	b.n	8004878 <d_template_args+0x870>
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff fa2b 	bl	8004008 <d_template_args>
 8004bb2:	464a      	mov	r2, r9
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2104      	movs	r1, #4
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7fb fb29 	bl	8000210 <d_make_comp>
 8004bbe:	462a      	mov	r2, r5
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f7fb fb23 	bl	8000210 <d_make_comp>
 8004bca:	e464      	b.n	8004496 <d_template_args+0x48e>
 8004bcc:	785a      	ldrb	r2, [r3, #1]
 8004bce:	2a69      	cmp	r2, #105	; 0x69
 8004bd0:	f47f ad6e 	bne.w	80046b0 <d_template_args+0x6a8>
 8004bd4:	3302      	adds	r3, #2
 8004bd6:	60e3      	str	r3, [r4, #12]
 8004bd8:	2145      	movs	r1, #69	; 0x45
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 f886 	bl	8004cec <d_exprlist>
 8004be0:	e4f4      	b.n	80045cc <d_template_args+0x5c4>
 8004be2:	3301      	adds	r3, #1
 8004be4:	60e3      	str	r3, [r4, #12]
 8004be6:	2000      	movs	r0, #0
 8004be8:	e4f0      	b.n	80045cc <d_template_args+0x5c4>
 8004bea:	3301      	adds	r3, #1
 8004bec:	60e3      	str	r3, [r4, #12]
 8004bee:	e634      	b.n	800485a <d_template_args+0x852>
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7ff fa09 	bl	8004008 <d_template_args>
 8004bf6:	462a      	mov	r2, r5
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7fb fb07 	bl	8000210 <d_make_comp>
 8004c02:	4605      	mov	r5, r0
 8004c04:	e5ea      	b.n	80047dc <d_template_args+0x7d4>
 8004c06:	bf00      	nop
 8004c08:	0801c0e8 	.word	0x0801c0e8
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60e3      	str	r3, [r4, #12]
 8004c10:	2145      	movs	r1, #69	; 0x45
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 f86a 	bl	8004cec <d_exprlist>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	e692      	b.n	8004942 <d_template_args+0x93a>
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f001 fcfd 	bl	800661c <d_expression_1>
 8004c22:	4605      	mov	r5, r0
 8004c24:	e5da      	b.n	80047dc <d_template_args+0x7d4>
 8004c26:	2b74      	cmp	r3, #116	; 0x74
 8004c28:	f47f aa6b 	bne.w	8004102 <d_template_args+0xfa>
 8004c2c:	7893      	ldrb	r3, [r2, #2]
 8004c2e:	2b6c      	cmp	r3, #108	; 0x6c
 8004c30:	f47f aa67 	bne.w	8004102 <d_template_args+0xfa>
 8004c34:	4620      	mov	r0, r4
 8004c36:	f001 fec3 	bl	80069c0 <d_type>
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	f7ff bbd7 	b.w	80043ee <d_template_args+0x3e6>
 8004c40:	2b6f      	cmp	r3, #111	; 0x6f
 8004c42:	d014      	beq.n	8004c6e <d_template_args+0xc66>
 8004c44:	2b69      	cmp	r3, #105	; 0x69
 8004c46:	d119      	bne.n	8004c7c <d_template_args+0xc74>
 8004c48:	7913      	ldrb	r3, [r2, #4]
 8004c4a:	2b6c      	cmp	r3, #108	; 0x6c
 8004c4c:	f47f ad3e 	bne.w	80046cc <d_template_args+0x6c4>
 8004c50:	2500      	movs	r5, #0
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	3302      	adds	r3, #2
 8004c56:	60e3      	str	r3, [r4, #12]
 8004c58:	2145      	movs	r1, #69	; 0x45
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f000 f846 	bl	8004cec <d_exprlist>
 8004c60:	462a      	mov	r2, r5
 8004c62:	4603      	mov	r3, r0
 8004c64:	2130      	movs	r1, #48	; 0x30
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7fb fad2 	bl	8000210 <d_make_comp>
 8004c6c:	e413      	b.n	8004496 <d_template_args+0x48e>
 8004c6e:	7913      	ldrb	r3, [r2, #4]
 8004c70:	2b6e      	cmp	r3, #110	; 0x6e
 8004c72:	f47f ad2b 	bne.w	80046cc <d_template_args+0x6c4>
 8004c76:	3205      	adds	r2, #5
 8004c78:	60e2      	str	r2, [r4, #12]
 8004c7a:	e400      	b.n	800447e <d_template_args+0x476>
 8004c7c:	2b74      	cmp	r3, #116	; 0x74
 8004c7e:	f47f ad25 	bne.w	80046cc <d_template_args+0x6c4>
 8004c82:	7913      	ldrb	r3, [r2, #4]
 8004c84:	2b6c      	cmp	r3, #108	; 0x6c
 8004c86:	f47f ad21 	bne.w	80046cc <d_template_args+0x6c4>
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f001 fe98 	bl	80069c0 <d_type>
 8004c90:	4605      	mov	r5, r0
 8004c92:	e7de      	b.n	8004c52 <d_template_args+0xc4a>
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7ff bbfe 	b.w	8004496 <d_template_args+0x48e>
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60e3      	str	r3, [r4, #12]
 8004c9e:	e644      	b.n	800492a <d_template_args+0x922>
 8004ca0:	785a      	ldrb	r2, [r3, #1]
 8004ca2:	2a69      	cmp	r2, #105	; 0x69
 8004ca4:	f47f ae34 	bne.w	8004910 <d_template_args+0x908>
 8004ca8:	3302      	adds	r3, #2
 8004caa:	60e3      	str	r3, [r4, #12]
 8004cac:	2145      	movs	r1, #69	; 0x45
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f000 f81c 	bl	8004cec <d_exprlist>
 8004cb4:	e557      	b.n	8004766 <d_template_args+0x75e>
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60e3      	str	r3, [r4, #12]
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e553      	b.n	8004766 <d_template_args+0x75e>
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7ff f9a2 	bl	8004008 <d_template_args>
 8004cc4:	465a      	mov	r2, fp
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2104      	movs	r1, #4
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7fb faa0 	bl	8000210 <d_make_comp>
 8004cd0:	4683      	mov	fp, r0
 8004cd2:	e4b8      	b.n	8004646 <d_template_args+0x63e>
 8004cd4:	2b74      	cmp	r3, #116	; 0x74
 8004cd6:	f47f ac2a 	bne.w	800452e <d_template_args+0x526>
 8004cda:	7853      	ldrb	r3, [r2, #1]
 8004cdc:	2b6c      	cmp	r3, #108	; 0x6c
 8004cde:	f47f ac26 	bne.w	800452e <d_template_args+0x526>
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f001 fe6c 	bl	80069c0 <d_type>
 8004ce8:	4681      	mov	r9, r0
 8004cea:	e73f      	b.n	8004b6c <d_template_args+0xb64>

08004cec <d_exprlist>:
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	68c2      	ldr	r2, [r0, #12]
 8004cf2:	7815      	ldrb	r5, [r2, #0]
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	428d      	cmp	r5, r1
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	9303      	str	r3, [sp, #12]
 8004cfe:	f000 8261 	beq.w	80051c4 <d_exprlist+0x4d8>
 8004d02:	460f      	mov	r7, r1
 8004d04:	ae03      	add	r6, sp, #12
 8004d06:	e022      	b.n	8004d4e <d_exprlist+0x62>
 8004d08:	2b66      	cmp	r3, #102	; 0x66
 8004d0a:	d04b      	beq.n	8004da4 <d_exprlist+0xb8>
 8004d0c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004d10:	2909      	cmp	r1, #9
 8004d12:	f201 844e 	bhi.w	80065b2 <d_exprlist+0x18c6>
 8004d16:	4620      	mov	r0, r4
 8004d18:	f002 fad0 	bl	80072bc <d_unqualified_name>
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d064      	beq.n	8004dec <d_exprlist+0x100>
 8004d22:	68e3      	ldr	r3, [r4, #12]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b49      	cmp	r3, #73	; 0x49
 8004d28:	f000 808b 	beq.w	8004e42 <d_exprlist+0x156>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6365      	str	r5, [r4, #52]	; 0x34
 8004d30:	2300      	movs	r3, #0
 8004d32:	212e      	movs	r1, #46	; 0x2e
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7fb fa6b 	bl	8000210 <d_make_comp>
 8004d3a:	6030      	str	r0, [r6, #0]
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d056      	beq.n	8004dee <d_exprlist+0x102>
 8004d40:	68e2      	ldr	r2, [r4, #12]
 8004d42:	7813      	ldrb	r3, [r2, #0]
 8004d44:	42bb      	cmp	r3, r7
 8004d46:	f100 0608 	add.w	r6, r0, #8
 8004d4a:	f000 8179 	beq.w	8005040 <d_exprlist+0x354>
 8004d4e:	f04f 0801 	mov.w	r8, #1
 8004d52:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004d54:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 8004d58:	7813      	ldrb	r3, [r2, #0]
 8004d5a:	2b4c      	cmp	r3, #76	; 0x4c
 8004d5c:	d04b      	beq.n	8004df6 <d_exprlist+0x10a>
 8004d5e:	2b54      	cmp	r3, #84	; 0x54
 8004d60:	d051      	beq.n	8004e06 <d_exprlist+0x11a>
 8004d62:	2b73      	cmp	r3, #115	; 0x73
 8004d64:	d1d0      	bne.n	8004d08 <d_exprlist+0x1c>
 8004d66:	7853      	ldrb	r3, [r2, #1]
 8004d68:	2b72      	cmp	r3, #114	; 0x72
 8004d6a:	f000 8152 	beq.w	8005012 <d_exprlist+0x326>
 8004d6e:	2b70      	cmp	r3, #112	; 0x70
 8004d70:	f000 816c 	beq.w	800504c <d_exprlist+0x360>
 8004d74:	4620      	mov	r0, r4
 8004d76:	f002 f9e1 	bl	800713c <d_operator_name>
 8004d7a:	4680      	mov	r8, r0
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d035      	beq.n	8004dec <d_exprlist+0x100>
 8004d80:	f890 a000 	ldrb.w	sl, [r0]
 8004d84:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8004d88:	d042      	beq.n	8004e10 <d_exprlist+0x124>
 8004d8a:	f1ba 0f32 	cmp.w	sl, #50	; 0x32
 8004d8e:	d129      	bne.n	8004de4 <d_exprlist+0xf8>
 8004d90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d829      	bhi.n	8004dec <d_exprlist+0x100>
 8004d98:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d9c:	01080062 	.word	0x01080062
 8004da0:	006a00ac 	.word	0x006a00ac
 8004da4:	7853      	ldrb	r3, [r2, #1]
 8004da6:	2b70      	cmp	r3, #112	; 0x70
 8004da8:	d1e4      	bne.n	8004d74 <d_exprlist+0x88>
 8004daa:	1c93      	adds	r3, r2, #2
 8004dac:	60e3      	str	r3, [r4, #12]
 8004dae:	7893      	ldrb	r3, [r2, #2]
 8004db0:	2b54      	cmp	r3, #84	; 0x54
 8004db2:	d051      	beq.n	8004e58 <d_exprlist+0x16c>
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7fb fbb7 	bl	8000528 <d_compact_number>
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d016      	beq.n	8004dec <d_exprlist+0x100>
 8004dbe:	6963      	ldr	r3, [r4, #20]
 8004dc0:	69a2      	ldr	r2, [r4, #24]
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	da12      	bge.n	8004dec <d_exprlist+0x100>
 8004dc6:	6922      	ldr	r2, [r4, #16]
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004dce:	6161      	str	r1, [r4, #20]
 8004dd0:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 8004dd4:	d00a      	beq.n	8004dec <d_exprlist+0x100>
 8004dd6:	f04f 0e06 	mov.w	lr, #6
 8004dda:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 8004dde:	460a      	mov	r2, r1
 8004de0:	6048      	str	r0, [r1, #4]
 8004de2:	e7a4      	b.n	8004d2e <d_exprlist+0x42>
 8004de4:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 8004de8:	f000 8158 	beq.w	800509c <d_exprlist+0x3b0>
 8004dec:	6365      	str	r5, [r4, #52]	; 0x34
 8004dee:	2000      	movs	r0, #0
 8004df0:	b005      	add	sp, #20
 8004df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df6:	4620      	mov	r0, r4
 8004df8:	f003 f8cc 	bl	8007f94 <d_expr_primary>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6365      	str	r5, [r4, #52]	; 0x34
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	d195      	bne.n	8004d30 <d_exprlist+0x44>
 8004e04:	e7f3      	b.n	8004dee <d_exprlist+0x102>
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7fb fba6 	bl	8000558 <d_template_param>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	e7f6      	b.n	8004dfe <d_exprlist+0x112>
 8004e10:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8004e14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e16:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004e1a:	f8db 9000 	ldr.w	r9, [fp]
 8004e1e:	49b0      	ldr	r1, [pc, #704]	; (80050e0 <d_exprlist+0x3f4>)
 8004e20:	3b02      	subs	r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	6322      	str	r2, [r4, #48]	; 0x30
 8004e26:	4648      	mov	r0, r9
 8004e28:	f003 fb7a 	bl	8008520 <strcmp>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f000 8152 	beq.w	80050d6 <d_exprlist+0x3ea>
 8004e32:	f8db 300c 	ldr.w	r3, [fp, #12]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d8d8      	bhi.n	8004dec <d_exprlist+0x100>
 8004e3a:	e8df f003 	tbb	[pc, r3]
 8004e3e:	ad11      	.short	0xad11
 8004e40:	1b5d      	.short	0x1b5d
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7ff f8e0 	bl	8004008 <d_template_args>
 8004e48:	4642      	mov	r2, r8
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2104      	movs	r1, #4
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f7fb f9de 	bl	8000210 <d_make_comp>
 8004e54:	4602      	mov	r2, r0
 8004e56:	e7d2      	b.n	8004dfe <d_exprlist+0x112>
 8004e58:	3203      	adds	r2, #3
 8004e5a:	60e2      	str	r2, [r4, #12]
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	e7ae      	b.n	8004dbe <d_exprlist+0xd2>
 8004e60:	4642      	mov	r2, r8
 8004e62:	2300      	movs	r3, #0
 8004e64:	2134      	movs	r1, #52	; 0x34
 8004e66:	4620      	mov	r0, r4
 8004e68:	f7fb f9d2 	bl	8000210 <d_make_comp>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	e7c6      	b.n	8004dfe <d_exprlist+0x112>
 8004e70:	f04f 0900 	mov.w	r9, #0
 8004e74:	499b      	ldr	r1, [pc, #620]	; (80050e4 <d_exprlist+0x3f8>)
 8004e76:	4648      	mov	r0, r9
 8004e78:	f003 fb52 	bl	8008520 <strcmp>
 8004e7c:	4683      	mov	fp, r0
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	f000 8138 	beq.w	80050f4 <d_exprlist+0x408>
 8004e84:	f899 3000 	ldrb.w	r3, [r9]
 8004e88:	2b6e      	cmp	r3, #110	; 0x6e
 8004e8a:	d1af      	bne.n	8004dec <d_exprlist+0x100>
 8004e8c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004e90:	2b77      	cmp	r3, #119	; 0x77
 8004e92:	d001      	beq.n	8004e98 <d_exprlist+0x1ac>
 8004e94:	2b61      	cmp	r3, #97	; 0x61
 8004e96:	d1a9      	bne.n	8004dec <d_exprlist+0x100>
 8004e98:	215f      	movs	r1, #95	; 0x5f
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f7ff ff26 	bl	8004cec <d_exprlist>
 8004ea0:	4682      	mov	sl, r0
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f001 fd8c 	bl	80069c0 <d_type>
 8004ea8:	68e3      	ldr	r3, [r4, #12]
 8004eaa:	781a      	ldrb	r2, [r3, #0]
 8004eac:	2a45      	cmp	r2, #69	; 0x45
 8004eae:	4681      	mov	r9, r0
 8004eb0:	f000 81cf 	beq.w	8005252 <d_exprlist+0x566>
 8004eb4:	2a70      	cmp	r2, #112	; 0x70
 8004eb6:	f000 84c9 	beq.w	800584c <d_exprlist+0xb60>
 8004eba:	2a69      	cmp	r2, #105	; 0x69
 8004ebc:	d196      	bne.n	8004dec <d_exprlist+0x100>
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b6c      	cmp	r3, #108	; 0x6c
 8004ec2:	d193      	bne.n	8004dec <d_exprlist+0x100>
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f001 fba9 	bl	800661c <d_expression_1>
 8004eca:	4683      	mov	fp, r0
 8004ecc:	465b      	mov	r3, fp
 8004ece:	464a      	mov	r2, r9
 8004ed0:	213a      	movs	r1, #58	; 0x3a
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f7fb f99c 	bl	8000210 <d_make_comp>
 8004ed8:	4652      	mov	r2, sl
 8004eda:	4603      	mov	r3, r0
 8004edc:	2139      	movs	r1, #57	; 0x39
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f7fb f996 	bl	8000210 <d_make_comp>
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2138      	movs	r1, #56	; 0x38
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7fb f990 	bl	8000210 <d_make_comp>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	e784      	b.n	8004dfe <d_exprlist+0x112>
 8004ef4:	f04f 0900 	mov.w	r9, #0
 8004ef8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	785a      	ldrb	r2, [r3, #1]
 8004f00:	2a63      	cmp	r2, #99	; 0x63
 8004f02:	f000 8146 	beq.w	8005192 <d_exprlist+0x4a6>
 8004f06:	68e1      	ldr	r1, [r4, #12]
 8004f08:	780b      	ldrb	r3, [r1, #0]
 8004f0a:	2b4c      	cmp	r3, #76	; 0x4c
 8004f0c:	f000 8619 	beq.w	8005b42 <d_exprlist+0xe56>
 8004f10:	2b54      	cmp	r3, #84	; 0x54
 8004f12:	f000 81fd 	beq.w	8005310 <d_exprlist+0x624>
 8004f16:	2b73      	cmp	r3, #115	; 0x73
 8004f18:	f000 8437 	beq.w	800578a <d_exprlist+0xa9e>
 8004f1c:	2b66      	cmp	r3, #102	; 0x66
 8004f1e:	f000 8475 	beq.w	800580c <d_exprlist+0xb20>
 8004f22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004f26:	2a09      	cmp	r2, #9
 8004f28:	f200 81bf 	bhi.w	80052aa <d_exprlist+0x5be>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f002 f9c5 	bl	80072bc <d_unqualified_name>
 8004f32:	4682      	mov	sl, r0
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f000 84a8 	beq.w	800588a <d_exprlist+0xb9e>
 8004f3a:	68e3      	ldr	r3, [r4, #12]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b49      	cmp	r3, #73	; 0x49
 8004f40:	f000 8708 	beq.w	8005d54 <d_exprlist+0x1068>
 8004f44:	4968      	ldr	r1, [pc, #416]	; (80050e8 <d_exprlist+0x3fc>)
 8004f46:	4648      	mov	r0, r9
 8004f48:	f003 faea 	bl	8008520 <strcmp>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f000 811a 	beq.w	8005186 <d_exprlist+0x49a>
 8004f52:	4966      	ldr	r1, [pc, #408]	; (80050ec <d_exprlist+0x400>)
 8004f54:	4648      	mov	r0, r9
 8004f56:	f003 fae3 	bl	8008520 <strcmp>
 8004f5a:	b130      	cbz	r0, 8004f6a <d_exprlist+0x27e>
 8004f5c:	4648      	mov	r0, r9
 8004f5e:	4964      	ldr	r1, [pc, #400]	; (80050f0 <d_exprlist+0x404>)
 8004f60:	f003 fade 	bl	8008520 <strcmp>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	f040 816f 	bne.w	8005248 <d_exprlist+0x55c>
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f002 f9a6 	bl	80072bc <d_unqualified_name>
 8004f70:	68e3      	ldr	r3, [r4, #12]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b49      	cmp	r3, #73	; 0x49
 8004f76:	4681      	mov	r9, r0
 8004f78:	f000 843c 	beq.w	80057f4 <d_exprlist+0xb08>
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	4652      	mov	r2, sl
 8004f80:	2137      	movs	r1, #55	; 0x37
 8004f82:	4620      	mov	r0, r4
 8004f84:	f7fb f944 	bl	8000210 <d_make_comp>
 8004f88:	4642      	mov	r2, r8
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2136      	movs	r1, #54	; 0x36
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f7fb f93e 	bl	8000210 <d_make_comp>
 8004f94:	4602      	mov	r2, r0
 8004f96:	e732      	b.n	8004dfe <d_exprlist+0x112>
 8004f98:	f1b9 0f00 	cmp.w	r9, #0
 8004f9c:	d006      	beq.n	8004fac <d_exprlist+0x2c0>
 8004f9e:	f899 3000 	ldrb.w	r3, [r9]
 8004fa2:	2b70      	cmp	r3, #112	; 0x70
 8004fa4:	f000 8081 	beq.w	80050aa <d_exprlist+0x3be>
 8004fa8:	2b6d      	cmp	r3, #109	; 0x6d
 8004faa:	d07e      	beq.n	80050aa <d_exprlist+0x3be>
 8004fac:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 8004fb0:	68e1      	ldr	r1, [r4, #12]
 8004fb2:	d074      	beq.n	800509e <d_exprlist+0x3b2>
 8004fb4:	780b      	ldrb	r3, [r1, #0]
 8004fb6:	f04f 0a00 	mov.w	sl, #0
 8004fba:	2b4c      	cmp	r3, #76	; 0x4c
 8004fbc:	f000 8453 	beq.w	8005866 <d_exprlist+0xb7a>
 8004fc0:	2b54      	cmp	r3, #84	; 0x54
 8004fc2:	f000 8466 	beq.w	8005892 <d_exprlist+0xba6>
 8004fc6:	2b73      	cmp	r3, #115	; 0x73
 8004fc8:	f000 8105 	beq.w	80051d6 <d_exprlist+0x4ea>
 8004fcc:	2b66      	cmp	r3, #102	; 0x66
 8004fce:	f000 811c 	beq.w	800520a <d_exprlist+0x51e>
 8004fd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004fd6:	2a09      	cmp	r2, #9
 8004fd8:	f201 82ac 	bhi.w	8006534 <d_exprlist+0x1848>
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f002 f96d 	bl	80072bc <d_unqualified_name>
 8004fe2:	4681      	mov	r9, r0
 8004fe4:	b120      	cbz	r0, 8004ff0 <d_exprlist+0x304>
 8004fe6:	68e3      	ldr	r3, [r4, #12]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b49      	cmp	r3, #73	; 0x49
 8004fec:	f000 8185 	beq.w	80052fa <d_exprlist+0x60e>
 8004ff0:	f1ba 0f00 	cmp.w	sl, #0
 8004ff4:	d06d      	beq.n	80050d2 <d_exprlist+0x3e6>
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	464a      	mov	r2, r9
 8004ffa:	2137      	movs	r1, #55	; 0x37
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f7fb f907 	bl	8000210 <d_make_comp>
 8005002:	4603      	mov	r3, r0
 8005004:	4642      	mov	r2, r8
 8005006:	2135      	movs	r1, #53	; 0x35
 8005008:	4620      	mov	r0, r4
 800500a:	f7fb f901 	bl	8000210 <d_make_comp>
 800500e:	4602      	mov	r2, r0
 8005010:	e6f5      	b.n	8004dfe <d_exprlist+0x112>
 8005012:	3202      	adds	r2, #2
 8005014:	60e2      	str	r2, [r4, #12]
 8005016:	4620      	mov	r0, r4
 8005018:	f001 fcd2 	bl	80069c0 <d_type>
 800501c:	4681      	mov	r9, r0
 800501e:	4620      	mov	r0, r4
 8005020:	f002 f94c 	bl	80072bc <d_unqualified_name>
 8005024:	68e3      	ldr	r3, [r4, #12]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b49      	cmp	r3, #73	; 0x49
 800502a:	4682      	mov	sl, r0
 800502c:	f000 80bf 	beq.w	80051ae <d_exprlist+0x4c2>
 8005030:	4603      	mov	r3, r0
 8005032:	464a      	mov	r2, r9
 8005034:	4641      	mov	r1, r8
 8005036:	4620      	mov	r0, r4
 8005038:	f7fb f8ea 	bl	8000210 <d_make_comp>
 800503c:	4602      	mov	r2, r0
 800503e:	e6de      	b.n	8004dfe <d_exprlist+0x112>
 8005040:	9803      	ldr	r0, [sp, #12]
 8005042:	3201      	adds	r2, #1
 8005044:	60e2      	str	r2, [r4, #12]
 8005046:	b005      	add	sp, #20
 8005048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504c:	1c91      	adds	r1, r2, #2
 800504e:	60e1      	str	r1, [r4, #12]
 8005050:	7893      	ldrb	r3, [r2, #2]
 8005052:	2b4c      	cmp	r3, #76	; 0x4c
 8005054:	f000 814c 	beq.w	80052f0 <d_exprlist+0x604>
 8005058:	2b54      	cmp	r3, #84	; 0x54
 800505a:	f000 8578 	beq.w	8005b4e <d_exprlist+0xe62>
 800505e:	2b73      	cmp	r3, #115	; 0x73
 8005060:	f000 82e7 	beq.w	8005632 <d_exprlist+0x946>
 8005064:	2b66      	cmp	r3, #102	; 0x66
 8005066:	f000 83a5 	beq.w	80057b4 <d_exprlist+0xac8>
 800506a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800506e:	2809      	cmp	r0, #9
 8005070:	f201 8206 	bhi.w	8006480 <d_exprlist+0x1794>
 8005074:	4620      	mov	r0, r4
 8005076:	f002 f921 	bl	80072bc <d_unqualified_name>
 800507a:	4680      	mov	r8, r0
 800507c:	2800      	cmp	r0, #0
 800507e:	f000 83fd 	beq.w	800587c <d_exprlist+0xb90>
 8005082:	68e3      	ldr	r3, [r4, #12]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b49      	cmp	r3, #73	; 0x49
 8005088:	f000 8633 	beq.w	8005cf2 <d_exprlist+0x1006>
 800508c:	4602      	mov	r2, r0
 800508e:	2300      	movs	r3, #0
 8005090:	2149      	movs	r1, #73	; 0x49
 8005092:	4620      	mov	r0, r4
 8005094:	f7fb f8bc 	bl	8000210 <d_make_comp>
 8005098:	4602      	mov	r2, r0
 800509a:	e6b0      	b.n	8004dfe <d_exprlist+0x112>
 800509c:	68e1      	ldr	r1, [r4, #12]
 800509e:	780b      	ldrb	r3, [r1, #0]
 80050a0:	2b5f      	cmp	r3, #95	; 0x5f
 80050a2:	d00f      	beq.n	80050c4 <d_exprlist+0x3d8>
 80050a4:	f04f 0a00 	mov.w	sl, #0
 80050a8:	e787      	b.n	8004fba <d_exprlist+0x2ce>
 80050aa:	f899 2001 	ldrb.w	r2, [r9, #1]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	f47f af7c 	bne.w	8004fac <d_exprlist+0x2c0>
 80050b4:	68e1      	ldr	r1, [r4, #12]
 80050b6:	780b      	ldrb	r3, [r1, #0]
 80050b8:	2b5f      	cmp	r3, #95	; 0x5f
 80050ba:	f000 85b2 	beq.w	8005c22 <d_exprlist+0xf36>
 80050be:	f04f 0a01 	mov.w	sl, #1
 80050c2:	e77a      	b.n	8004fba <d_exprlist+0x2ce>
 80050c4:	3101      	adds	r1, #1
 80050c6:	60e1      	str	r1, [r4, #12]
 80050c8:	4620      	mov	r0, r4
 80050ca:	2145      	movs	r1, #69	; 0x45
 80050cc:	f7ff fe0e 	bl	8004cec <d_exprlist>
 80050d0:	4681      	mov	r9, r0
 80050d2:	464b      	mov	r3, r9
 80050d4:	e796      	b.n	8005004 <d_exprlist+0x318>
 80050d6:	4620      	mov	r0, r4
 80050d8:	f001 fc72 	bl	80069c0 <d_type>
 80050dc:	4603      	mov	r3, r0
 80050de:	e791      	b.n	8005004 <d_exprlist+0x318>
 80050e0:	0801c0e8 	.word	0x0801c0e8
 80050e4:	0801bde0 	.word	0x0801bde0
 80050e8:	0801bdd8 	.word	0x0801bdd8
 80050ec:	0801bef4 	.word	0x0801bef4
 80050f0:	0801bef8 	.word	0x0801bef8
 80050f4:	4620      	mov	r0, r4
 80050f6:	f001 fa91 	bl	800661c <d_expression_1>
 80050fa:	4682      	mov	sl, r0
 80050fc:	68e0      	ldr	r0, [r4, #12]
 80050fe:	7803      	ldrb	r3, [r0, #0]
 8005100:	2b4c      	cmp	r3, #76	; 0x4c
 8005102:	f000 8611 	beq.w	8005d28 <d_exprlist+0x103c>
 8005106:	2b54      	cmp	r3, #84	; 0x54
 8005108:	f000 8630 	beq.w	8005d6c <d_exprlist+0x1080>
 800510c:	2b73      	cmp	r3, #115	; 0x73
 800510e:	f000 84a1 	beq.w	8005a54 <d_exprlist+0xd68>
 8005112:	2b66      	cmp	r3, #102	; 0x66
 8005114:	f000 80ac 	beq.w	8005270 <d_exprlist+0x584>
 8005118:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800511c:	2909      	cmp	r1, #9
 800511e:	f201 8194 	bhi.w	800644a <d_exprlist+0x175e>
 8005122:	4620      	mov	r0, r4
 8005124:	f002 f8ca 	bl	80072bc <d_unqualified_name>
 8005128:	68e2      	ldr	r2, [r4, #12]
 800512a:	4681      	mov	r9, r0
 800512c:	7813      	ldrb	r3, [r2, #0]
 800512e:	b110      	cbz	r0, 8005136 <d_exprlist+0x44a>
 8005130:	2b49      	cmp	r3, #73	; 0x49
 8005132:	f000 86ef 	beq.w	8005f14 <d_exprlist+0x1228>
 8005136:	2b4c      	cmp	r3, #76	; 0x4c
 8005138:	f000 85e7 	beq.w	8005d0a <d_exprlist+0x101e>
 800513c:	2b54      	cmp	r3, #84	; 0x54
 800513e:	f000 8603 	beq.w	8005d48 <d_exprlist+0x105c>
 8005142:	2b73      	cmp	r3, #115	; 0x73
 8005144:	f000 83cc 	beq.w	80058e0 <d_exprlist+0xbf4>
 8005148:	2b66      	cmp	r3, #102	; 0x66
 800514a:	f000 8493 	beq.w	8005a74 <d_exprlist+0xd88>
 800514e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005152:	2909      	cmp	r1, #9
 8005154:	f201 8129 	bhi.w	80063aa <d_exprlist+0x16be>
 8005158:	4620      	mov	r0, r4
 800515a:	f002 f8af 	bl	80072bc <d_unqualified_name>
 800515e:	4683      	mov	fp, r0
 8005160:	2800      	cmp	r0, #0
 8005162:	f43f aeb3 	beq.w	8004ecc <d_exprlist+0x1e0>
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b49      	cmp	r3, #73	; 0x49
 800516c:	f47f aeae 	bne.w	8004ecc <d_exprlist+0x1e0>
 8005170:	4620      	mov	r0, r4
 8005172:	f7fe ff49 	bl	8004008 <d_template_args>
 8005176:	465a      	mov	r2, fp
 8005178:	4603      	mov	r3, r0
 800517a:	2104      	movs	r1, #4
 800517c:	4620      	mov	r0, r4
 800517e:	f7fb f847 	bl	8000210 <d_make_comp>
 8005182:	4683      	mov	fp, r0
 8005184:	e6a2      	b.n	8004ecc <d_exprlist+0x1e0>
 8005186:	2145      	movs	r1, #69	; 0x45
 8005188:	4620      	mov	r0, r4
 800518a:	f7ff fdaf 	bl	8004cec <d_exprlist>
 800518e:	4681      	mov	r9, r0
 8005190:	e6f4      	b.n	8004f7c <d_exprlist+0x290>
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8005198:	2a01      	cmp	r2, #1
 800519a:	d903      	bls.n	80051a4 <d_exprlist+0x4b8>
 800519c:	3b72      	subs	r3, #114	; 0x72
 800519e:	2b01      	cmp	r3, #1
 80051a0:	f63f aeb1 	bhi.w	8004f06 <d_exprlist+0x21a>
 80051a4:	4620      	mov	r0, r4
 80051a6:	f001 fc0b 	bl	80069c0 <d_type>
 80051aa:	4682      	mov	sl, r0
 80051ac:	e6ca      	b.n	8004f44 <d_exprlist+0x258>
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7fe ff2a 	bl	8004008 <d_template_args>
 80051b4:	4652      	mov	r2, sl
 80051b6:	4603      	mov	r3, r0
 80051b8:	2104      	movs	r1, #4
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7fb f828 	bl	8000210 <d_make_comp>
 80051c0:	4603      	mov	r3, r0
 80051c2:	e736      	b.n	8005032 <d_exprlist+0x346>
 80051c4:	3201      	adds	r2, #1
 80051c6:	60c2      	str	r2, [r0, #12]
 80051c8:	212e      	movs	r1, #46	; 0x2e
 80051ca:	461a      	mov	r2, r3
 80051cc:	b005      	add	sp, #20
 80051ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d2:	f7fb b81d 	b.w	8000210 <d_make_comp>
 80051d6:	784b      	ldrb	r3, [r1, #1]
 80051d8:	2b72      	cmp	r3, #114	; 0x72
 80051da:	f000 8540 	beq.w	8005c5e <d_exprlist+0xf72>
 80051de:	2b70      	cmp	r3, #112	; 0x70
 80051e0:	f000 860e 	beq.w	8005e00 <d_exprlist+0x1114>
 80051e4:	4620      	mov	r0, r4
 80051e6:	f001 ffa9 	bl	800713c <d_operator_name>
 80051ea:	4681      	mov	r9, r0
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f43f aeff 	beq.w	8004ff0 <d_exprlist+0x304>
 80051f2:	7803      	ldrb	r3, [r0, #0]
 80051f4:	2b31      	cmp	r3, #49	; 0x31
 80051f6:	f000 8352 	beq.w	800589e <d_exprlist+0xbb2>
 80051fa:	2b32      	cmp	r3, #50	; 0x32
 80051fc:	d02e      	beq.n	800525c <d_exprlist+0x570>
 80051fe:	2b33      	cmp	r3, #51	; 0x33
 8005200:	f000 8646 	beq.w	8005e90 <d_exprlist+0x11a4>
 8005204:	f04f 0900 	mov.w	r9, #0
 8005208:	e6f2      	b.n	8004ff0 <d_exprlist+0x304>
 800520a:	784b      	ldrb	r3, [r1, #1]
 800520c:	2b70      	cmp	r3, #112	; 0x70
 800520e:	d1e9      	bne.n	80051e4 <d_exprlist+0x4f8>
 8005210:	1c8b      	adds	r3, r1, #2
 8005212:	60e3      	str	r3, [r4, #12]
 8005214:	788b      	ldrb	r3, [r1, #2]
 8005216:	2b54      	cmp	r3, #84	; 0x54
 8005218:	f040 857d 	bne.w	8005d16 <d_exprlist+0x102a>
 800521c:	3103      	adds	r1, #3
 800521e:	60e1      	str	r1, [r4, #12]
 8005220:	2000      	movs	r0, #0
 8005222:	6963      	ldr	r3, [r4, #20]
 8005224:	69a2      	ldr	r2, [r4, #24]
 8005226:	4293      	cmp	r3, r2
 8005228:	daec      	bge.n	8005204 <d_exprlist+0x518>
 800522a:	6922      	ldr	r2, [r4, #16]
 800522c:	1c59      	adds	r1, r3, #1
 800522e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005232:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 8005236:	6161      	str	r1, [r4, #20]
 8005238:	f43f aeda 	beq.w	8004ff0 <d_exprlist+0x304>
 800523c:	2106      	movs	r1, #6
 800523e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8005242:	f8c9 0004 	str.w	r0, [r9, #4]
 8005246:	e6d3      	b.n	8004ff0 <d_exprlist+0x304>
 8005248:	4620      	mov	r0, r4
 800524a:	f001 f9e7 	bl	800661c <d_expression_1>
 800524e:	4681      	mov	r9, r0
 8005250:	e694      	b.n	8004f7c <d_exprlist+0x290>
 8005252:	3301      	adds	r3, #1
 8005254:	60e3      	str	r3, [r4, #12]
 8005256:	f04f 0b00 	mov.w	fp, #0
 800525a:	e637      	b.n	8004ecc <d_exprlist+0x1e0>
 800525c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d8cf      	bhi.n	8005204 <d_exprlist+0x518>
 8005264:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005268:	04c60059 	.word	0x04c60059
 800526c:	006100a5 	.word	0x006100a5
 8005270:	7843      	ldrb	r3, [r0, #1]
 8005272:	2b70      	cmp	r3, #112	; 0x70
 8005274:	f000 85d2 	beq.w	8005e1c <d_exprlist+0x1130>
 8005278:	4620      	mov	r0, r4
 800527a:	f001 ff5f 	bl	800713c <d_operator_name>
 800527e:	4681      	mov	r9, r0
 8005280:	2800      	cmp	r0, #0
 8005282:	f000 8157 	beq.w	8005534 <d_exprlist+0x848>
 8005286:	7803      	ldrb	r3, [r0, #0]
 8005288:	2b31      	cmp	r3, #49	; 0x31
 800528a:	f000 8599 	beq.w	8005dc0 <d_exprlist+0x10d4>
 800528e:	2b32      	cmp	r3, #50	; 0x32
 8005290:	f040 84cb 	bne.w	8005c2a <d_exprlist+0xf3e>
 8005294:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005298:	2b03      	cmp	r3, #3
 800529a:	f200 8483 	bhi.w	8005ba4 <d_exprlist+0xeb8>
 800529e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80052a2:	0142      	.short	0x0142
 80052a4:	018c04cb 	.word	0x018c04cb
 80052a8:	014c      	.short	0x014c
 80052aa:	2b6f      	cmp	r3, #111	; 0x6f
 80052ac:	f000 8441 	beq.w	8005b32 <d_exprlist+0xe46>
 80052b0:	2b69      	cmp	r3, #105	; 0x69
 80052b2:	f041 8171 	bne.w	8006598 <d_exprlist+0x18ac>
 80052b6:	784b      	ldrb	r3, [r1, #1]
 80052b8:	2b6c      	cmp	r3, #108	; 0x6c
 80052ba:	f001 80b5 	beq.w	8006428 <d_exprlist+0x173c>
 80052be:	4620      	mov	r0, r4
 80052c0:	f001 ff3c 	bl	800713c <d_operator_name>
 80052c4:	4682      	mov	sl, r0
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f000 82df 	beq.w	800588a <d_exprlist+0xb9e>
 80052cc:	7803      	ldrb	r3, [r0, #0]
 80052ce:	2b31      	cmp	r3, #49	; 0x31
 80052d0:	f000 846e 	beq.w	8005bb0 <d_exprlist+0xec4>
 80052d4:	2b32      	cmp	r3, #50	; 0x32
 80052d6:	f040 840d 	bne.w	8005af4 <d_exprlist+0xe08>
 80052da:	f8da 3004 	ldr.w	r3, [sl, #4]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	f200 82d3 	bhi.w	800588a <d_exprlist+0xb9e>
 80052e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80052e8:	040e009c 	.word	0x040e009c
 80052ec:	00a400e8 	.word	0x00a400e8
 80052f0:	4620      	mov	r0, r4
 80052f2:	f002 fe4f 	bl	8007f94 <d_expr_primary>
 80052f6:	4602      	mov	r2, r0
 80052f8:	e6c9      	b.n	800508e <d_exprlist+0x3a2>
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7fe fe84 	bl	8004008 <d_template_args>
 8005300:	464a      	mov	r2, r9
 8005302:	4603      	mov	r3, r0
 8005304:	2104      	movs	r1, #4
 8005306:	4620      	mov	r0, r4
 8005308:	f7fa ff82 	bl	8000210 <d_make_comp>
 800530c:	4681      	mov	r9, r0
 800530e:	e66f      	b.n	8004ff0 <d_exprlist+0x304>
 8005310:	4620      	mov	r0, r4
 8005312:	f7fb f921 	bl	8000558 <d_template_param>
 8005316:	4682      	mov	sl, r0
 8005318:	e614      	b.n	8004f44 <d_exprlist+0x258>
 800531a:	464a      	mov	r2, r9
 800531c:	2300      	movs	r3, #0
 800531e:	2134      	movs	r1, #52	; 0x34
 8005320:	4620      	mov	r0, r4
 8005322:	f7fa ff75 	bl	8000210 <d_make_comp>
 8005326:	4681      	mov	r9, r0
 8005328:	e662      	b.n	8004ff0 <d_exprlist+0x304>
 800532a:	f04f 0b00 	mov.w	fp, #0
 800532e:	49d1      	ldr	r1, [pc, #836]	; (8005674 <d_exprlist+0x988>)
 8005330:	4658      	mov	r0, fp
 8005332:	f003 f8f5 	bl	8008520 <strcmp>
 8005336:	2800      	cmp	r0, #0
 8005338:	f000 861b 	beq.w	8005f72 <d_exprlist+0x1286>
 800533c:	f89b 3000 	ldrb.w	r3, [fp]
 8005340:	2b6e      	cmp	r3, #110	; 0x6e
 8005342:	f47f af5f 	bne.w	8005204 <d_exprlist+0x518>
 8005346:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800534a:	2b77      	cmp	r3, #119	; 0x77
 800534c:	d002      	beq.n	8005354 <d_exprlist+0x668>
 800534e:	2b61      	cmp	r3, #97	; 0x61
 8005350:	f47f af58 	bne.w	8005204 <d_exprlist+0x518>
 8005354:	215f      	movs	r1, #95	; 0x5f
 8005356:	4620      	mov	r0, r4
 8005358:	f7ff fcc8 	bl	8004cec <d_exprlist>
 800535c:	9000      	str	r0, [sp, #0]
 800535e:	4620      	mov	r0, r4
 8005360:	f001 fb2e 	bl	80069c0 <d_type>
 8005364:	68e3      	ldr	r3, [r4, #12]
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	2a45      	cmp	r2, #69	; 0x45
 800536a:	4683      	mov	fp, r0
 800536c:	f000 8740 	beq.w	80061f0 <d_exprlist+0x1504>
 8005370:	2a70      	cmp	r2, #112	; 0x70
 8005372:	f000 8794 	beq.w	800629e <d_exprlist+0x15b2>
 8005376:	2a69      	cmp	r2, #105	; 0x69
 8005378:	f47f af44 	bne.w	8005204 <d_exprlist+0x518>
 800537c:	785b      	ldrb	r3, [r3, #1]
 800537e:	2b6c      	cmp	r3, #108	; 0x6c
 8005380:	f47f af40 	bne.w	8005204 <d_exprlist+0x518>
 8005384:	4620      	mov	r0, r4
 8005386:	f001 f949 	bl	800661c <d_expression_1>
 800538a:	4603      	mov	r3, r0
 800538c:	465a      	mov	r2, fp
 800538e:	213a      	movs	r1, #58	; 0x3a
 8005390:	4620      	mov	r0, r4
 8005392:	f7fa ff3d 	bl	8000210 <d_make_comp>
 8005396:	9a00      	ldr	r2, [sp, #0]
 8005398:	4603      	mov	r3, r0
 800539a:	2139      	movs	r1, #57	; 0x39
 800539c:	4620      	mov	r0, r4
 800539e:	f7fa ff37 	bl	8000210 <d_make_comp>
 80053a2:	464a      	mov	r2, r9
 80053a4:	4603      	mov	r3, r0
 80053a6:	2138      	movs	r1, #56	; 0x38
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7fa ff31 	bl	8000210 <d_make_comp>
 80053ae:	4681      	mov	r9, r0
 80053b0:	e61e      	b.n	8004ff0 <d_exprlist+0x304>
 80053b2:	f04f 0b00 	mov.w	fp, #0
 80053b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	785a      	ldrb	r2, [r3, #1]
 80053be:	2a63      	cmp	r2, #99	; 0x63
 80053c0:	f000 85c8 	beq.w	8005f54 <d_exprlist+0x1268>
 80053c4:	4620      	mov	r0, r4
 80053c6:	f001 f929 	bl	800661c <d_expression_1>
 80053ca:	9000      	str	r0, [sp, #0]
 80053cc:	49aa      	ldr	r1, [pc, #680]	; (8005678 <d_exprlist+0x98c>)
 80053ce:	4658      	mov	r0, fp
 80053d0:	f003 f8a6 	bl	8008520 <strcmp>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f000 862b 	beq.w	8006030 <d_exprlist+0x1344>
 80053da:	49a8      	ldr	r1, [pc, #672]	; (800567c <d_exprlist+0x990>)
 80053dc:	4658      	mov	r0, fp
 80053de:	f003 f89f 	bl	8008520 <strcmp>
 80053e2:	b130      	cbz	r0, 80053f2 <d_exprlist+0x706>
 80053e4:	4658      	mov	r0, fp
 80053e6:	49a6      	ldr	r1, [pc, #664]	; (8005680 <d_exprlist+0x994>)
 80053e8:	f003 f89a 	bl	8008520 <strcmp>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	f040 86d8 	bne.w	80061a2 <d_exprlist+0x14b6>
 80053f2:	4620      	mov	r0, r4
 80053f4:	f001 ff62 	bl	80072bc <d_unqualified_name>
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b49      	cmp	r3, #73	; 0x49
 80053fe:	4683      	mov	fp, r0
 8005400:	f000 86d5 	beq.w	80061ae <d_exprlist+0x14c2>
 8005404:	465b      	mov	r3, fp
 8005406:	9a00      	ldr	r2, [sp, #0]
 8005408:	2137      	movs	r1, #55	; 0x37
 800540a:	4620      	mov	r0, r4
 800540c:	f7fa ff00 	bl	8000210 <d_make_comp>
 8005410:	464a      	mov	r2, r9
 8005412:	4603      	mov	r3, r0
 8005414:	2136      	movs	r1, #54	; 0x36
 8005416:	4620      	mov	r0, r4
 8005418:	f7fa fefa 	bl	8000210 <d_make_comp>
 800541c:	4681      	mov	r9, r0
 800541e:	e5e7      	b.n	8004ff0 <d_exprlist+0x304>
 8005420:	4652      	mov	r2, sl
 8005422:	2300      	movs	r3, #0
 8005424:	2134      	movs	r1, #52	; 0x34
 8005426:	4620      	mov	r0, r4
 8005428:	f7fa fef2 	bl	8000210 <d_make_comp>
 800542c:	4682      	mov	sl, r0
 800542e:	e589      	b.n	8004f44 <d_exprlist+0x258>
 8005430:	f04f 0b00 	mov.w	fp, #0
 8005434:	498f      	ldr	r1, [pc, #572]	; (8005674 <d_exprlist+0x988>)
 8005436:	4658      	mov	r0, fp
 8005438:	f003 f872 	bl	8008520 <strcmp>
 800543c:	2800      	cmp	r0, #0
 800543e:	f000 86c2 	beq.w	80061c6 <d_exprlist+0x14da>
 8005442:	f89b 3000 	ldrb.w	r3, [fp]
 8005446:	2b6e      	cmp	r3, #110	; 0x6e
 8005448:	f040 821f 	bne.w	800588a <d_exprlist+0xb9e>
 800544c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8005450:	2b77      	cmp	r3, #119	; 0x77
 8005452:	d002      	beq.n	800545a <d_exprlist+0x76e>
 8005454:	2b61      	cmp	r3, #97	; 0x61
 8005456:	f040 8218 	bne.w	800588a <d_exprlist+0xb9e>
 800545a:	215f      	movs	r1, #95	; 0x5f
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff fc45 	bl	8004cec <d_exprlist>
 8005462:	9000      	str	r0, [sp, #0]
 8005464:	4620      	mov	r0, r4
 8005466:	f001 faab 	bl	80069c0 <d_type>
 800546a:	68e3      	ldr	r3, [r4, #12]
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	2a45      	cmp	r2, #69	; 0x45
 8005470:	4683      	mov	fp, r0
 8005472:	f000 86ce 	beq.w	8006212 <d_exprlist+0x1526>
 8005476:	2a70      	cmp	r2, #112	; 0x70
 8005478:	f000 86bf 	beq.w	80061fa <d_exprlist+0x150e>
 800547c:	2a69      	cmp	r2, #105	; 0x69
 800547e:	f040 8204 	bne.w	800588a <d_exprlist+0xb9e>
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b6c      	cmp	r3, #108	; 0x6c
 8005486:	f040 8200 	bne.w	800588a <d_exprlist+0xb9e>
 800548a:	4620      	mov	r0, r4
 800548c:	f001 f8c6 	bl	800661c <d_expression_1>
 8005490:	4603      	mov	r3, r0
 8005492:	465a      	mov	r2, fp
 8005494:	213a      	movs	r1, #58	; 0x3a
 8005496:	4620      	mov	r0, r4
 8005498:	f7fa feba 	bl	8000210 <d_make_comp>
 800549c:	9a00      	ldr	r2, [sp, #0]
 800549e:	4603      	mov	r3, r0
 80054a0:	2139      	movs	r1, #57	; 0x39
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7fa feb4 	bl	8000210 <d_make_comp>
 80054a8:	4652      	mov	r2, sl
 80054aa:	4603      	mov	r3, r0
 80054ac:	2138      	movs	r1, #56	; 0x38
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7fa feae 	bl	8000210 <d_make_comp>
 80054b4:	4682      	mov	sl, r0
 80054b6:	e545      	b.n	8004f44 <d_exprlist+0x258>
 80054b8:	f04f 0b00 	mov.w	fp, #0
 80054bc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	785a      	ldrb	r2, [r3, #1]
 80054c4:	2a63      	cmp	r2, #99	; 0x63
 80054c6:	f000 8630 	beq.w	800612a <d_exprlist+0x143e>
 80054ca:	4620      	mov	r0, r4
 80054cc:	f001 f8a6 	bl	800661c <d_expression_1>
 80054d0:	9000      	str	r0, [sp, #0]
 80054d2:	4969      	ldr	r1, [pc, #420]	; (8005678 <d_exprlist+0x98c>)
 80054d4:	4658      	mov	r0, fp
 80054d6:	f003 f823 	bl	8008520 <strcmp>
 80054da:	2800      	cmp	r0, #0
 80054dc:	f000 863f 	beq.w	800615e <d_exprlist+0x1472>
 80054e0:	4966      	ldr	r1, [pc, #408]	; (800567c <d_exprlist+0x990>)
 80054e2:	4658      	mov	r0, fp
 80054e4:	f003 f81c 	bl	8008520 <strcmp>
 80054e8:	b130      	cbz	r0, 80054f8 <d_exprlist+0x80c>
 80054ea:	4658      	mov	r0, fp
 80054ec:	4964      	ldr	r1, [pc, #400]	; (8005680 <d_exprlist+0x994>)
 80054ee:	f003 f817 	bl	8008520 <strcmp>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f040 8692 	bne.w	800621c <d_exprlist+0x1530>
 80054f8:	4620      	mov	r0, r4
 80054fa:	f001 fedf 	bl	80072bc <d_unqualified_name>
 80054fe:	68e3      	ldr	r3, [r4, #12]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b49      	cmp	r3, #73	; 0x49
 8005504:	4683      	mov	fp, r0
 8005506:	f000 86d6 	beq.w	80062b6 <d_exprlist+0x15ca>
 800550a:	465b      	mov	r3, fp
 800550c:	9a00      	ldr	r2, [sp, #0]
 800550e:	2137      	movs	r1, #55	; 0x37
 8005510:	4620      	mov	r0, r4
 8005512:	f7fa fe7d 	bl	8000210 <d_make_comp>
 8005516:	4652      	mov	r2, sl
 8005518:	4603      	mov	r3, r0
 800551a:	2136      	movs	r1, #54	; 0x36
 800551c:	4620      	mov	r0, r4
 800551e:	f7fa fe77 	bl	8000210 <d_make_comp>
 8005522:	4682      	mov	sl, r0
 8005524:	e50e      	b.n	8004f44 <d_exprlist+0x258>
 8005526:	464a      	mov	r2, r9
 8005528:	2300      	movs	r3, #0
 800552a:	2134      	movs	r1, #52	; 0x34
 800552c:	4620      	mov	r0, r4
 800552e:	f7fa fe6f 	bl	8000210 <d_make_comp>
 8005532:	4681      	mov	r9, r0
 8005534:	68e2      	ldr	r2, [r4, #12]
 8005536:	7813      	ldrb	r3, [r2, #0]
 8005538:	e5fd      	b.n	8005136 <d_exprlist+0x44a>
 800553a:	f04f 0b00 	mov.w	fp, #0
 800553e:	494d      	ldr	r1, [pc, #308]	; (8005674 <d_exprlist+0x988>)
 8005540:	4658      	mov	r0, fp
 8005542:	f002 ffed 	bl	8008520 <strcmp>
 8005546:	2800      	cmp	r0, #0
 8005548:	f000 86e3 	beq.w	8006312 <d_exprlist+0x1626>
 800554c:	f89b 3000 	ldrb.w	r3, [fp]
 8005550:	2b6e      	cmp	r3, #110	; 0x6e
 8005552:	f040 8327 	bne.w	8005ba4 <d_exprlist+0xeb8>
 8005556:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800555a:	2b77      	cmp	r3, #119	; 0x77
 800555c:	d002      	beq.n	8005564 <d_exprlist+0x878>
 800555e:	2b61      	cmp	r3, #97	; 0x61
 8005560:	f040 8320 	bne.w	8005ba4 <d_exprlist+0xeb8>
 8005564:	215f      	movs	r1, #95	; 0x5f
 8005566:	4620      	mov	r0, r4
 8005568:	f7ff fbc0 	bl	8004cec <d_exprlist>
 800556c:	9000      	str	r0, [sp, #0]
 800556e:	4620      	mov	r0, r4
 8005570:	f001 fa26 	bl	80069c0 <d_type>
 8005574:	68e2      	ldr	r2, [r4, #12]
 8005576:	7813      	ldrb	r3, [r2, #0]
 8005578:	2b45      	cmp	r3, #69	; 0x45
 800557a:	4683      	mov	fp, r0
 800557c:	f000 86d6 	beq.w	800632c <d_exprlist+0x1640>
 8005580:	2b70      	cmp	r3, #112	; 0x70
 8005582:	f000 87bc 	beq.w	80064fe <d_exprlist+0x1812>
 8005586:	2b69      	cmp	r3, #105	; 0x69
 8005588:	f041 8044 	bne.w	8006614 <d_exprlist+0x1928>
 800558c:	7853      	ldrb	r3, [r2, #1]
 800558e:	2b6c      	cmp	r3, #108	; 0x6c
 8005590:	f041 803d 	bne.w	800660e <d_exprlist+0x1922>
 8005594:	4620      	mov	r0, r4
 8005596:	f001 f841 	bl	800661c <d_expression_1>
 800559a:	4603      	mov	r3, r0
 800559c:	465a      	mov	r2, fp
 800559e:	213a      	movs	r1, #58	; 0x3a
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7fa fe35 	bl	8000210 <d_make_comp>
 80055a6:	9a00      	ldr	r2, [sp, #0]
 80055a8:	4603      	mov	r3, r0
 80055aa:	2139      	movs	r1, #57	; 0x39
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7fa fe2f 	bl	8000210 <d_make_comp>
 80055b2:	464a      	mov	r2, r9
 80055b4:	4603      	mov	r3, r0
 80055b6:	2138      	movs	r1, #56	; 0x38
 80055b8:	e7b8      	b.n	800552c <d_exprlist+0x840>
 80055ba:	f04f 0b00 	mov.w	fp, #0
 80055be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	785a      	ldrb	r2, [r3, #1]
 80055c6:	2a63      	cmp	r2, #99	; 0x63
 80055c8:	f000 865a 	beq.w	8006280 <d_exprlist+0x1594>
 80055cc:	4620      	mov	r0, r4
 80055ce:	f001 f825 	bl	800661c <d_expression_1>
 80055d2:	9000      	str	r0, [sp, #0]
 80055d4:	4928      	ldr	r1, [pc, #160]	; (8005678 <d_exprlist+0x98c>)
 80055d6:	4658      	mov	r0, fp
 80055d8:	f002 ffa2 	bl	8008520 <strcmp>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f000 8648 	beq.w	8006272 <d_exprlist+0x1586>
 80055e2:	4926      	ldr	r1, [pc, #152]	; (800567c <d_exprlist+0x990>)
 80055e4:	4658      	mov	r0, fp
 80055e6:	f002 ff9b 	bl	8008520 <strcmp>
 80055ea:	b130      	cbz	r0, 80055fa <d_exprlist+0x90e>
 80055ec:	4658      	mov	r0, fp
 80055ee:	4924      	ldr	r1, [pc, #144]	; (8005680 <d_exprlist+0x994>)
 80055f0:	f002 ff96 	bl	8008520 <strcmp>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f040 8617 	bne.w	8006228 <d_exprlist+0x153c>
 80055fa:	4620      	mov	r0, r4
 80055fc:	f001 fe5e 	bl	80072bc <d_unqualified_name>
 8005600:	68e3      	ldr	r3, [r4, #12]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b49      	cmp	r3, #73	; 0x49
 8005606:	4683      	mov	fp, r0
 8005608:	d109      	bne.n	800561e <d_exprlist+0x932>
 800560a:	4620      	mov	r0, r4
 800560c:	f7fe fcfc 	bl	8004008 <d_template_args>
 8005610:	465a      	mov	r2, fp
 8005612:	4603      	mov	r3, r0
 8005614:	2104      	movs	r1, #4
 8005616:	4620      	mov	r0, r4
 8005618:	f7fa fdfa 	bl	8000210 <d_make_comp>
 800561c:	4683      	mov	fp, r0
 800561e:	465b      	mov	r3, fp
 8005620:	9a00      	ldr	r2, [sp, #0]
 8005622:	2137      	movs	r1, #55	; 0x37
 8005624:	4620      	mov	r0, r4
 8005626:	f7fa fdf3 	bl	8000210 <d_make_comp>
 800562a:	464a      	mov	r2, r9
 800562c:	4603      	mov	r3, r0
 800562e:	2136      	movs	r1, #54	; 0x36
 8005630:	e77c      	b.n	800552c <d_exprlist+0x840>
 8005632:	78d3      	ldrb	r3, [r2, #3]
 8005634:	2b72      	cmp	r3, #114	; 0x72
 8005636:	f000 8450 	beq.w	8005eda <d_exprlist+0x11ee>
 800563a:	2b70      	cmp	r3, #112	; 0x70
 800563c:	f000 84a6 	beq.w	8005f8c <d_exprlist+0x12a0>
 8005640:	4620      	mov	r0, r4
 8005642:	f001 fd7b 	bl	800713c <d_operator_name>
 8005646:	4680      	mov	r8, r0
 8005648:	2800      	cmp	r0, #0
 800564a:	f000 8117 	beq.w	800587c <d_exprlist+0xb90>
 800564e:	7803      	ldrb	r3, [r0, #0]
 8005650:	2b31      	cmp	r3, #49	; 0x31
 8005652:	f000 8286 	beq.w	8005b62 <d_exprlist+0xe76>
 8005656:	2b32      	cmp	r3, #50	; 0x32
 8005658:	f040 822d 	bne.w	8005ab6 <d_exprlist+0xdca>
 800565c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005660:	2b03      	cmp	r3, #3
 8005662:	f200 810b 	bhi.w	800587c <d_exprlist+0xb90>
 8005666:	e8df f013 	tbh	[pc, r3, lsl #1]
 800566a:	000d      	.short	0x000d
 800566c:	0059022e 	.word	0x0059022e
 8005670:	0015      	.short	0x0015
 8005672:	bf00      	nop
 8005674:	0801bde0 	.word	0x0801bde0
 8005678:	0801bdd8 	.word	0x0801bdd8
 800567c:	0801bef4 	.word	0x0801bef4
 8005680:	0801bef8 	.word	0x0801bef8
 8005684:	4642      	mov	r2, r8
 8005686:	2300      	movs	r3, #0
 8005688:	2134      	movs	r1, #52	; 0x34
 800568a:	4620      	mov	r0, r4
 800568c:	f7fa fdc0 	bl	8000210 <d_make_comp>
 8005690:	4602      	mov	r2, r0
 8005692:	e4fc      	b.n	800508e <d_exprlist+0x3a2>
 8005694:	f04f 0900 	mov.w	r9, #0
 8005698:	49c8      	ldr	r1, [pc, #800]	; (80059bc <d_exprlist+0xcd0>)
 800569a:	4648      	mov	r0, r9
 800569c:	f002 ff40 	bl	8008520 <strcmp>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f000 8571 	beq.w	8006188 <d_exprlist+0x149c>
 80056a6:	f899 3000 	ldrb.w	r3, [r9]
 80056aa:	2b6e      	cmp	r3, #110	; 0x6e
 80056ac:	f040 80e6 	bne.w	800587c <d_exprlist+0xb90>
 80056b0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80056b4:	2b77      	cmp	r3, #119	; 0x77
 80056b6:	d002      	beq.n	80056be <d_exprlist+0x9d2>
 80056b8:	2b61      	cmp	r3, #97	; 0x61
 80056ba:	f040 80df 	bne.w	800587c <d_exprlist+0xb90>
 80056be:	215f      	movs	r1, #95	; 0x5f
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff fb13 	bl	8004cec <d_exprlist>
 80056c6:	4681      	mov	r9, r0
 80056c8:	4620      	mov	r0, r4
 80056ca:	f001 f979 	bl	80069c0 <d_type>
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	2a45      	cmp	r2, #69	; 0x45
 80056d4:	4682      	mov	sl, r0
 80056d6:	f000 85c7 	beq.w	8006268 <d_exprlist+0x157c>
 80056da:	2a70      	cmp	r2, #112	; 0x70
 80056dc:	f000 85b8 	beq.w	8006250 <d_exprlist+0x1564>
 80056e0:	2a69      	cmp	r2, #105	; 0x69
 80056e2:	f040 80cb 	bne.w	800587c <d_exprlist+0xb90>
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b6c      	cmp	r3, #108	; 0x6c
 80056ea:	f040 80c7 	bne.w	800587c <d_exprlist+0xb90>
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 ff94 	bl	800661c <d_expression_1>
 80056f4:	4603      	mov	r3, r0
 80056f6:	4652      	mov	r2, sl
 80056f8:	213a      	movs	r1, #58	; 0x3a
 80056fa:	4620      	mov	r0, r4
 80056fc:	f7fa fd88 	bl	8000210 <d_make_comp>
 8005700:	464a      	mov	r2, r9
 8005702:	4603      	mov	r3, r0
 8005704:	2139      	movs	r1, #57	; 0x39
 8005706:	4620      	mov	r0, r4
 8005708:	f7fa fd82 	bl	8000210 <d_make_comp>
 800570c:	4642      	mov	r2, r8
 800570e:	4603      	mov	r3, r0
 8005710:	2138      	movs	r1, #56	; 0x38
 8005712:	4620      	mov	r0, r4
 8005714:	f7fa fd7c 	bl	8000210 <d_make_comp>
 8005718:	4602      	mov	r2, r0
 800571a:	e4b8      	b.n	800508e <d_exprlist+0x3a2>
 800571c:	f04f 0900 	mov.w	r9, #0
 8005720:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	785a      	ldrb	r2, [r3, #1]
 8005728:	2a63      	cmp	r2, #99	; 0x63
 800572a:	f000 84d9 	beq.w	80060e0 <d_exprlist+0x13f4>
 800572e:	4620      	mov	r0, r4
 8005730:	f000 ff74 	bl	800661c <d_expression_1>
 8005734:	4682      	mov	sl, r0
 8005736:	49a2      	ldr	r1, [pc, #648]	; (80059c0 <d_exprlist+0xcd4>)
 8005738:	4648      	mov	r0, r9
 800573a:	f002 fef1 	bl	8008520 <strcmp>
 800573e:	2800      	cmp	r0, #0
 8005740:	f000 84c5 	beq.w	80060ce <d_exprlist+0x13e2>
 8005744:	499f      	ldr	r1, [pc, #636]	; (80059c4 <d_exprlist+0xcd8>)
 8005746:	4648      	mov	r0, r9
 8005748:	f002 feea 	bl	8008520 <strcmp>
 800574c:	b130      	cbz	r0, 800575c <d_exprlist+0xa70>
 800574e:	4648      	mov	r0, r9
 8005750:	499d      	ldr	r1, [pc, #628]	; (80059c8 <d_exprlist+0xcdc>)
 8005752:	f002 fee5 	bl	8008520 <strcmp>
 8005756:	2800      	cmp	r0, #0
 8005758:	f040 8574 	bne.w	8006244 <d_exprlist+0x1558>
 800575c:	4620      	mov	r0, r4
 800575e:	f001 fdad 	bl	80072bc <d_unqualified_name>
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b49      	cmp	r3, #73	; 0x49
 8005768:	4681      	mov	r9, r0
 800576a:	f000 85c6 	beq.w	80062fa <d_exprlist+0x160e>
 800576e:	464b      	mov	r3, r9
 8005770:	4652      	mov	r2, sl
 8005772:	2137      	movs	r1, #55	; 0x37
 8005774:	4620      	mov	r0, r4
 8005776:	f7fa fd4b 	bl	8000210 <d_make_comp>
 800577a:	4642      	mov	r2, r8
 800577c:	4603      	mov	r3, r0
 800577e:	2136      	movs	r1, #54	; 0x36
 8005780:	4620      	mov	r0, r4
 8005782:	f7fa fd45 	bl	8000210 <d_make_comp>
 8005786:	4602      	mov	r2, r0
 8005788:	e481      	b.n	800508e <d_exprlist+0x3a2>
 800578a:	784b      	ldrb	r3, [r1, #1]
 800578c:	2b72      	cmp	r3, #114	; 0x72
 800578e:	f000 83c9 	beq.w	8005f24 <d_exprlist+0x1238>
 8005792:	2b70      	cmp	r3, #112	; 0x70
 8005794:	f47f ad93 	bne.w	80052be <d_exprlist+0x5d2>
 8005798:	3102      	adds	r1, #2
 800579a:	60e1      	str	r1, [r4, #12]
 800579c:	4620      	mov	r0, r4
 800579e:	f000 ff3d 	bl	800661c <d_expression_1>
 80057a2:	2300      	movs	r3, #0
 80057a4:	4602      	mov	r2, r0
 80057a6:	2149      	movs	r1, #73	; 0x49
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7fa fd31 	bl	8000210 <d_make_comp>
 80057ae:	4682      	mov	sl, r0
 80057b0:	f7ff bbc8 	b.w	8004f44 <d_exprlist+0x258>
 80057b4:	78d3      	ldrb	r3, [r2, #3]
 80057b6:	2b70      	cmp	r3, #112	; 0x70
 80057b8:	f47f af42 	bne.w	8005640 <d_exprlist+0x954>
 80057bc:	1d13      	adds	r3, r2, #4
 80057be:	60e3      	str	r3, [r4, #12]
 80057c0:	7913      	ldrb	r3, [r2, #4]
 80057c2:	2b54      	cmp	r3, #84	; 0x54
 80057c4:	d155      	bne.n	8005872 <d_exprlist+0xb86>
 80057c6:	3205      	adds	r2, #5
 80057c8:	60e2      	str	r2, [r4, #12]
 80057ca:	2000      	movs	r0, #0
 80057cc:	6963      	ldr	r3, [r4, #20]
 80057ce:	69a2      	ldr	r2, [r4, #24]
 80057d0:	4293      	cmp	r3, r2
 80057d2:	da53      	bge.n	800587c <d_exprlist+0xb90>
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	1c59      	adds	r1, r3, #1
 80057d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80057dc:	6161      	str	r1, [r4, #20]
 80057de:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 80057e2:	f000 8610 	beq.w	8006406 <d_exprlist+0x171a>
 80057e6:	f04f 0e06 	mov.w	lr, #6
 80057ea:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 80057ee:	460a      	mov	r2, r1
 80057f0:	6048      	str	r0, [r1, #4]
 80057f2:	e44c      	b.n	800508e <d_exprlist+0x3a2>
 80057f4:	4620      	mov	r0, r4
 80057f6:	f7fe fc07 	bl	8004008 <d_template_args>
 80057fa:	464a      	mov	r2, r9
 80057fc:	4603      	mov	r3, r0
 80057fe:	2104      	movs	r1, #4
 8005800:	4620      	mov	r0, r4
 8005802:	f7fa fd05 	bl	8000210 <d_make_comp>
 8005806:	4681      	mov	r9, r0
 8005808:	f7ff bbb8 	b.w	8004f7c <d_exprlist+0x290>
 800580c:	784b      	ldrb	r3, [r1, #1]
 800580e:	2b70      	cmp	r3, #112	; 0x70
 8005810:	f47f ad55 	bne.w	80052be <d_exprlist+0x5d2>
 8005814:	1c8b      	adds	r3, r1, #2
 8005816:	60e3      	str	r3, [r4, #12]
 8005818:	788b      	ldrb	r3, [r1, #2]
 800581a:	2b54      	cmp	r3, #84	; 0x54
 800581c:	d130      	bne.n	8005880 <d_exprlist+0xb94>
 800581e:	3103      	adds	r1, #3
 8005820:	60e1      	str	r1, [r4, #12]
 8005822:	2000      	movs	r0, #0
 8005824:	6963      	ldr	r3, [r4, #20]
 8005826:	69a2      	ldr	r2, [r4, #24]
 8005828:	4293      	cmp	r3, r2
 800582a:	da2e      	bge.n	800588a <d_exprlist+0xb9e>
 800582c:	6922      	ldr	r2, [r4, #16]
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005834:	eb12 0a83 	adds.w	sl, r2, r3, lsl #2
 8005838:	6161      	str	r1, [r4, #20]
 800583a:	f43f ab83 	beq.w	8004f44 <d_exprlist+0x258>
 800583e:	2106      	movs	r1, #6
 8005840:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8005844:	f8ca 0004 	str.w	r0, [sl, #4]
 8005848:	f7ff bb7c 	b.w	8004f44 <d_exprlist+0x258>
 800584c:	785a      	ldrb	r2, [r3, #1]
 800584e:	2a69      	cmp	r2, #105	; 0x69
 8005850:	f47f aacc 	bne.w	8004dec <d_exprlist+0x100>
 8005854:	3302      	adds	r3, #2
 8005856:	60e3      	str	r3, [r4, #12]
 8005858:	2145      	movs	r1, #69	; 0x45
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff fa46 	bl	8004cec <d_exprlist>
 8005860:	4683      	mov	fp, r0
 8005862:	f7ff bb33 	b.w	8004ecc <d_exprlist+0x1e0>
 8005866:	4620      	mov	r0, r4
 8005868:	f002 fb94 	bl	8007f94 <d_expr_primary>
 800586c:	4681      	mov	r9, r0
 800586e:	f7ff bbbf 	b.w	8004ff0 <d_exprlist+0x304>
 8005872:	4620      	mov	r0, r4
 8005874:	f7fa fe58 	bl	8000528 <d_compact_number>
 8005878:	3001      	adds	r0, #1
 800587a:	d1a7      	bne.n	80057cc <d_exprlist+0xae0>
 800587c:	2200      	movs	r2, #0
 800587e:	e406      	b.n	800508e <d_exprlist+0x3a2>
 8005880:	4620      	mov	r0, r4
 8005882:	f7fa fe51 	bl	8000528 <d_compact_number>
 8005886:	3001      	adds	r0, #1
 8005888:	d1cc      	bne.n	8005824 <d_exprlist+0xb38>
 800588a:	f04f 0a00 	mov.w	sl, #0
 800588e:	f7ff bb59 	b.w	8004f44 <d_exprlist+0x258>
 8005892:	4620      	mov	r0, r4
 8005894:	f7fa fe60 	bl	8000558 <d_template_param>
 8005898:	4681      	mov	r9, r0
 800589a:	f7ff bba9 	b.w	8004ff0 <d_exprlist+0x304>
 800589e:	6843      	ldr	r3, [r0, #4]
 80058a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	f8d3 b000 	ldr.w	fp, [r3]
 80058a8:	4948      	ldr	r1, [pc, #288]	; (80059cc <d_exprlist+0xce0>)
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	3a02      	subs	r2, #2
 80058ae:	4402      	add	r2, r0
 80058b0:	6322      	str	r2, [r4, #48]	; 0x30
 80058b2:	4658      	mov	r0, fp
 80058b4:	f002 fe34 	bl	8008520 <strcmp>
 80058b8:	9b00      	ldr	r3, [sp, #0]
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f000 8325 	beq.w	8005f0a <d_exprlist+0x121e>
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	f63f ac9e 	bhi.w	8005204 <d_exprlist+0x518>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <d_exprlist+0xbe4>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	0800531b 	.word	0x0800531b
 80058d4:	08005ccb 	.word	0x08005ccb
 80058d8:	080053b7 	.word	0x080053b7
 80058dc:	0800532f 	.word	0x0800532f
 80058e0:	7853      	ldrb	r3, [r2, #1]
 80058e2:	2b72      	cmp	r3, #114	; 0x72
 80058e4:	f000 8384 	beq.w	8005ff0 <d_exprlist+0x1304>
 80058e8:	2b70      	cmp	r3, #112	; 0x70
 80058ea:	f000 843f 	beq.w	800616c <d_exprlist+0x1480>
 80058ee:	4620      	mov	r0, r4
 80058f0:	f001 fc24 	bl	800713c <d_operator_name>
 80058f4:	4683      	mov	fp, r0
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f43f aae8 	beq.w	8004ecc <d_exprlist+0x1e0>
 80058fc:	7803      	ldrb	r3, [r0, #0]
 80058fe:	2b31      	cmp	r3, #49	; 0x31
 8005900:	f000 823c 	beq.w	8005d7c <d_exprlist+0x1090>
 8005904:	2b32      	cmp	r3, #50	; 0x32
 8005906:	f040 81c2 	bne.w	8005c8e <d_exprlist+0xfa2>
 800590a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800590e:	2b03      	cmp	r3, #3
 8005910:	f200 8123 	bhi.w	8005b5a <d_exprlist+0xe6e>
 8005914:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005918:	01c30004 	.word	0x01c30004
 800591c:	000d005c 	.word	0x000d005c
 8005920:	465a      	mov	r2, fp
 8005922:	2300      	movs	r3, #0
 8005924:	2134      	movs	r1, #52	; 0x34
 8005926:	4620      	mov	r0, r4
 8005928:	f7fa fc72 	bl	8000210 <d_make_comp>
 800592c:	4683      	mov	fp, r0
 800592e:	f7ff bacd 	b.w	8004ecc <d_exprlist+0x1e0>
 8005932:	2300      	movs	r3, #0
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	4921      	ldr	r1, [pc, #132]	; (80059bc <d_exprlist+0xcd0>)
 8005938:	9800      	ldr	r0, [sp, #0]
 800593a:	f002 fdf1 	bl	8008520 <strcmp>
 800593e:	2800      	cmp	r0, #0
 8005940:	f000 850a 	beq.w	8006358 <d_exprlist+0x166c>
 8005944:	9900      	ldr	r1, [sp, #0]
 8005946:	780a      	ldrb	r2, [r1, #0]
 8005948:	2a6e      	cmp	r2, #110	; 0x6e
 800594a:	f040 8106 	bne.w	8005b5a <d_exprlist+0xe6e>
 800594e:	784b      	ldrb	r3, [r1, #1]
 8005950:	2b77      	cmp	r3, #119	; 0x77
 8005952:	d002      	beq.n	800595a <d_exprlist+0xc6e>
 8005954:	2b61      	cmp	r3, #97	; 0x61
 8005956:	f040 8100 	bne.w	8005b5a <d_exprlist+0xe6e>
 800595a:	215f      	movs	r1, #95	; 0x5f
 800595c:	4620      	mov	r0, r4
 800595e:	f7ff f9c5 	bl	8004cec <d_exprlist>
 8005962:	9000      	str	r0, [sp, #0]
 8005964:	4620      	mov	r0, r4
 8005966:	f001 f82b 	bl	80069c0 <d_type>
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	9001      	str	r0, [sp, #4]
 800596e:	781a      	ldrb	r2, [r3, #0]
 8005970:	2a45      	cmp	r2, #69	; 0x45
 8005972:	f000 84e0 	beq.w	8006336 <d_exprlist+0x164a>
 8005976:	2a70      	cmp	r2, #112	; 0x70
 8005978:	f000 85c8 	beq.w	800650c <d_exprlist+0x1820>
 800597c:	2a69      	cmp	r2, #105	; 0x69
 800597e:	f040 80ec 	bne.w	8005b5a <d_exprlist+0xe6e>
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b6c      	cmp	r3, #108	; 0x6c
 8005986:	f040 80e8 	bne.w	8005b5a <d_exprlist+0xe6e>
 800598a:	4620      	mov	r0, r4
 800598c:	f000 fe46 	bl	800661c <d_expression_1>
 8005990:	4603      	mov	r3, r0
 8005992:	9a01      	ldr	r2, [sp, #4]
 8005994:	213a      	movs	r1, #58	; 0x3a
 8005996:	4620      	mov	r0, r4
 8005998:	f7fa fc3a 	bl	8000210 <d_make_comp>
 800599c:	9a00      	ldr	r2, [sp, #0]
 800599e:	4603      	mov	r3, r0
 80059a0:	2139      	movs	r1, #57	; 0x39
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fa fc34 	bl	8000210 <d_make_comp>
 80059a8:	465a      	mov	r2, fp
 80059aa:	4603      	mov	r3, r0
 80059ac:	2138      	movs	r1, #56	; 0x38
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7fa fc2e 	bl	8000210 <d_make_comp>
 80059b4:	4683      	mov	fp, r0
 80059b6:	f7ff ba89 	b.w	8004ecc <d_exprlist+0x1e0>
 80059ba:	bf00      	nop
 80059bc:	0801bde0 	.word	0x0801bde0
 80059c0:	0801bdd8 	.word	0x0801bdd8
 80059c4:	0801bef4 	.word	0x0801bef4
 80059c8:	0801bef8 	.word	0x0801bef8
 80059cc:	0801c0e8 	.word	0x0801c0e8
 80059d0:	2300      	movs	r3, #0
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	f8db 2004 	ldr.w	r2, [fp, #4]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	7851      	ldrb	r1, [r2, #1]
 80059dc:	2963      	cmp	r1, #99	; 0x63
 80059de:	f000 84cf 	beq.w	8006380 <d_exprlist+0x1694>
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fe1a 	bl	800661c <d_expression_1>
 80059e8:	9001      	str	r0, [sp, #4]
 80059ea:	49d3      	ldr	r1, [pc, #844]	; (8005d38 <d_exprlist+0x104c>)
 80059ec:	9800      	ldr	r0, [sp, #0]
 80059ee:	f002 fd97 	bl	8008520 <strcmp>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	f000 84bd 	beq.w	8006372 <d_exprlist+0x1686>
 80059f8:	49d0      	ldr	r1, [pc, #832]	; (8005d3c <d_exprlist+0x1050>)
 80059fa:	9800      	ldr	r0, [sp, #0]
 80059fc:	f002 fd90 	bl	8008520 <strcmp>
 8005a00:	b130      	cbz	r0, 8005a10 <d_exprlist+0xd24>
 8005a02:	9800      	ldr	r0, [sp, #0]
 8005a04:	49ce      	ldr	r1, [pc, #824]	; (8005d40 <d_exprlist+0x1054>)
 8005a06:	f002 fd8b 	bl	8008520 <strcmp>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f040 84c7 	bne.w	800639e <d_exprlist+0x16b2>
 8005a10:	4620      	mov	r0, r4
 8005a12:	f001 fc53 	bl	80072bc <d_unqualified_name>
 8005a16:	68e3      	ldr	r3, [r4, #12]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b49      	cmp	r3, #73	; 0x49
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	d10a      	bne.n	8005a36 <d_exprlist+0xd4a>
 8005a20:	9000      	str	r0, [sp, #0]
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7fe faf0 	bl	8004008 <d_template_args>
 8005a28:	9a00      	ldr	r2, [sp, #0]
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f7fa fbee 	bl	8000210 <d_make_comp>
 8005a34:	4602      	mov	r2, r0
 8005a36:	4613      	mov	r3, r2
 8005a38:	2137      	movs	r1, #55	; 0x37
 8005a3a:	9a01      	ldr	r2, [sp, #4]
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7fa fbe7 	bl	8000210 <d_make_comp>
 8005a42:	465a      	mov	r2, fp
 8005a44:	4603      	mov	r3, r0
 8005a46:	2136      	movs	r1, #54	; 0x36
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7fa fbe1 	bl	8000210 <d_make_comp>
 8005a4e:	4683      	mov	fp, r0
 8005a50:	f7ff ba3c 	b.w	8004ecc <d_exprlist+0x1e0>
 8005a54:	7843      	ldrb	r3, [r0, #1]
 8005a56:	2b72      	cmp	r3, #114	; 0x72
 8005a58:	f000 82a6 	beq.w	8005fa8 <d_exprlist+0x12bc>
 8005a5c:	2b70      	cmp	r3, #112	; 0x70
 8005a5e:	f47f ac0b 	bne.w	8005278 <d_exprlist+0x58c>
 8005a62:	1c82      	adds	r2, r0, #2
 8005a64:	60e2      	str	r2, [r4, #12]
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fdd8 	bl	800661c <d_expression_1>
 8005a6c:	465b      	mov	r3, fp
 8005a6e:	4602      	mov	r2, r0
 8005a70:	2149      	movs	r1, #73	; 0x49
 8005a72:	e55b      	b.n	800552c <d_exprlist+0x840>
 8005a74:	7853      	ldrb	r3, [r2, #1]
 8005a76:	2b70      	cmp	r3, #112	; 0x70
 8005a78:	f47f af39 	bne.w	80058ee <d_exprlist+0xc02>
 8005a7c:	1c93      	adds	r3, r2, #2
 8005a7e:	60e3      	str	r3, [r4, #12]
 8005a80:	7893      	ldrb	r3, [r2, #2]
 8005a82:	2b54      	cmp	r3, #84	; 0x54
 8005a84:	f040 82cb 	bne.w	800601e <d_exprlist+0x1332>
 8005a88:	3203      	adds	r2, #3
 8005a8a:	60e2      	str	r2, [r4, #12]
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	6963      	ldr	r3, [r4, #20]
 8005a90:	69a2      	ldr	r2, [r4, #24]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	da61      	bge.n	8005b5a <d_exprlist+0xe6e>
 8005a96:	6922      	ldr	r2, [r4, #16]
 8005a98:	1c59      	adds	r1, r3, #1
 8005a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a9e:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 8005aa2:	6161      	str	r1, [r4, #20]
 8005aa4:	f43f aa12 	beq.w	8004ecc <d_exprlist+0x1e0>
 8005aa8:	2106      	movs	r1, #6
 8005aaa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8005aae:	f8cb 0004 	str.w	r0, [fp, #4]
 8005ab2:	f7ff ba0b 	b.w	8004ecc <d_exprlist+0x1e0>
 8005ab6:	2b33      	cmp	r3, #51	; 0x33
 8005ab8:	f47f aee0 	bne.w	800587c <d_exprlist+0xb90>
 8005abc:	68e3      	ldr	r3, [r4, #12]
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	2a5f      	cmp	r2, #95	; 0x5f
 8005ac2:	f000 83b7 	beq.w	8006234 <d_exprlist+0x1548>
 8005ac6:	f04f 0900 	mov.w	r9, #0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fda6 	bl	800661c <d_expression_1>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f1b9 0f00 	cmp.w	r9, #0
 8005ad6:	d005      	beq.n	8005ae4 <d_exprlist+0xdf8>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	2137      	movs	r1, #55	; 0x37
 8005adc:	4620      	mov	r0, r4
 8005ade:	f7fa fb97 	bl	8000210 <d_make_comp>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	2135      	movs	r1, #53	; 0x35
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f7fa fb91 	bl	8000210 <d_make_comp>
 8005aee:	4602      	mov	r2, r0
 8005af0:	f7ff bacd 	b.w	800508e <d_exprlist+0x3a2>
 8005af4:	2b33      	cmp	r3, #51	; 0x33
 8005af6:	f47f aec8 	bne.w	800588a <d_exprlist+0xb9e>
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	2a5f      	cmp	r2, #95	; 0x5f
 8005b00:	f000 83e5 	beq.w	80062ce <d_exprlist+0x15e2>
 8005b04:	f04f 0b00 	mov.w	fp, #0
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fd87 	bl	800661c <d_expression_1>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f1bb 0f00 	cmp.w	fp, #0
 8005b14:	d005      	beq.n	8005b22 <d_exprlist+0xe36>
 8005b16:	4602      	mov	r2, r0
 8005b18:	2137      	movs	r1, #55	; 0x37
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f7fa fb78 	bl	8000210 <d_make_comp>
 8005b20:	4603      	mov	r3, r0
 8005b22:	4652      	mov	r2, sl
 8005b24:	2135      	movs	r1, #53	; 0x35
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7fa fb72 	bl	8000210 <d_make_comp>
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	f7ff ba09 	b.w	8004f44 <d_exprlist+0x258>
 8005b32:	784b      	ldrb	r3, [r1, #1]
 8005b34:	2b6e      	cmp	r3, #110	; 0x6e
 8005b36:	f47f abc2 	bne.w	80052be <d_exprlist+0x5d2>
 8005b3a:	3102      	adds	r1, #2
 8005b3c:	60e1      	str	r1, [r4, #12]
 8005b3e:	f7ff b9f5 	b.w	8004f2c <d_exprlist+0x240>
 8005b42:	4620      	mov	r0, r4
 8005b44:	f002 fa26 	bl	8007f94 <d_expr_primary>
 8005b48:	4682      	mov	sl, r0
 8005b4a:	f7ff b9fb 	b.w	8004f44 <d_exprlist+0x258>
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7fa fd02 	bl	8000558 <d_template_param>
 8005b54:	4602      	mov	r2, r0
 8005b56:	f7ff ba9a 	b.w	800508e <d_exprlist+0x3a2>
 8005b5a:	f04f 0b00 	mov.w	fp, #0
 8005b5e:	f7ff b9b5 	b.w	8004ecc <d_exprlist+0x1e0>
 8005b62:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8005b66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005b68:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005b6c:	f8da 9000 	ldr.w	r9, [sl]
 8005b70:	4974      	ldr	r1, [pc, #464]	; (8005d44 <d_exprlist+0x1058>)
 8005b72:	3b02      	subs	r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	6323      	str	r3, [r4, #48]	; 0x30
 8005b78:	4648      	mov	r0, r9
 8005b7a:	f002 fcd1 	bl	8008520 <strcmp>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f000 8280 	beq.w	8006084 <d_exprlist+0x1398>
 8005b84:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	f63f ae77 	bhi.w	800587c <d_exprlist+0xb90>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <d_exprlist+0xea8>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005685 	.word	0x08005685
 8005b98:	08005e61 	.word	0x08005e61
 8005b9c:	08005721 	.word	0x08005721
 8005ba0:	08005699 	.word	0x08005699
 8005ba4:	68e2      	ldr	r2, [r4, #12]
 8005ba6:	f04f 0900 	mov.w	r9, #0
 8005baa:	7813      	ldrb	r3, [r2, #0]
 8005bac:	f7ff bac3 	b.w	8005136 <d_exprlist+0x44a>
 8005bb0:	6843      	ldr	r3, [r0, #4]
 8005bb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	f8d3 b000 	ldr.w	fp, [r3]
 8005bba:	4962      	ldr	r1, [pc, #392]	; (8005d44 <d_exprlist+0x1058>)
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	3a02      	subs	r2, #2
 8005bc0:	4402      	add	r2, r0
 8005bc2:	6322      	str	r2, [r4, #48]	; 0x30
 8005bc4:	4658      	mov	r0, fp
 8005bc6:	f002 fcab 	bl	8008520 <strcmp>
 8005bca:	9b00      	ldr	r3, [sp, #0]
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f000 8274 	beq.w	80060ba <d_exprlist+0x13ce>
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	f63f ae58 	bhi.w	800588a <d_exprlist+0xb9e>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <d_exprlist+0xef4>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005421 	.word	0x08005421
 8005be4:	08005eab 	.word	0x08005eab
 8005be8:	080054bd 	.word	0x080054bd
 8005bec:	08005435 	.word	0x08005435
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	60e3      	str	r3, [r4, #12]
 8005bf4:	f04f 0b00 	mov.w	fp, #0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 fd0f 	bl	800661c <d_expression_1>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f1bb 0f00 	cmp.w	fp, #0
 8005c04:	d005      	beq.n	8005c12 <d_exprlist+0xf26>
 8005c06:	4602      	mov	r2, r0
 8005c08:	2137      	movs	r1, #55	; 0x37
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f7fa fb00 	bl	8000210 <d_make_comp>
 8005c10:	4603      	mov	r3, r0
 8005c12:	464a      	mov	r2, r9
 8005c14:	2135      	movs	r1, #53	; 0x35
 8005c16:	4620      	mov	r0, r4
 8005c18:	f7fa fafa 	bl	8000210 <d_make_comp>
 8005c1c:	4681      	mov	r9, r0
 8005c1e:	f7ff b9e7 	b.w	8004ff0 <d_exprlist+0x304>
 8005c22:	3101      	adds	r1, #1
 8005c24:	60e1      	str	r1, [r4, #12]
 8005c26:	f7ff b9c5 	b.w	8004fb4 <d_exprlist+0x2c8>
 8005c2a:	2b33      	cmp	r3, #51	; 0x33
 8005c2c:	d1ba      	bne.n	8005ba4 <d_exprlist+0xeb8>
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	781a      	ldrb	r2, [r3, #0]
 8005c32:	2a5f      	cmp	r2, #95	; 0x5f
 8005c34:	f000 8288 	beq.w	8006148 <d_exprlist+0x145c>
 8005c38:	f04f 0b00 	mov.w	fp, #0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 fced 	bl	800661c <d_expression_1>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f1bb 0f00 	cmp.w	fp, #0
 8005c48:	f000 8285 	beq.w	8006156 <d_exprlist+0x146a>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	2137      	movs	r1, #55	; 0x37
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7fa fadd 	bl	8000210 <d_make_comp>
 8005c56:	464a      	mov	r2, r9
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2135      	movs	r1, #53	; 0x35
 8005c5c:	e466      	b.n	800552c <d_exprlist+0x840>
 8005c5e:	3102      	adds	r1, #2
 8005c60:	60e1      	str	r1, [r4, #12]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 feac 	bl	80069c0 <d_type>
 8005c68:	4681      	mov	r9, r0
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f001 fb26 	bl	80072bc <d_unqualified_name>
 8005c70:	68e3      	ldr	r3, [r4, #12]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b49      	cmp	r3, #73	; 0x49
 8005c76:	4683      	mov	fp, r0
 8005c78:	f000 81e1 	beq.w	800603e <d_exprlist+0x1352>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	464a      	mov	r2, r9
 8005c80:	2101      	movs	r1, #1
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7fa fac4 	bl	8000210 <d_make_comp>
 8005c88:	4681      	mov	r9, r0
 8005c8a:	f7ff b9b1 	b.w	8004ff0 <d_exprlist+0x304>
 8005c8e:	2b33      	cmp	r3, #51	; 0x33
 8005c90:	f47f af63 	bne.w	8005b5a <d_exprlist+0xe6e>
 8005c94:	68e3      	ldr	r3, [r4, #12]
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	2a5f      	cmp	r2, #95	; 0x5f
 8005c9a:	f000 83b7 	beq.w	800640c <d_exprlist+0x1720>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	9200      	str	r2, [sp, #0]
 8005ca4:	f000 fcba 	bl	800661c <d_expression_1>
 8005ca8:	9a00      	ldr	r2, [sp, #0]
 8005caa:	4603      	mov	r3, r0
 8005cac:	b12a      	cbz	r2, 8005cba <d_exprlist+0xfce>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	2137      	movs	r1, #55	; 0x37
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f7fa faac 	bl	8000210 <d_make_comp>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	465a      	mov	r2, fp
 8005cbc:	2135      	movs	r1, #53	; 0x35
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f7fa faa6 	bl	8000210 <d_make_comp>
 8005cc4:	4683      	mov	fp, r0
 8005cc6:	f7ff b901 	b.w	8004ecc <d_exprlist+0x1e0>
 8005cca:	f1bb 0f00 	cmp.w	fp, #0
 8005cce:	d091      	beq.n	8005bf4 <d_exprlist+0xf08>
 8005cd0:	f89b 3000 	ldrb.w	r3, [fp]
 8005cd4:	2b70      	cmp	r3, #112	; 0x70
 8005cd6:	d001      	beq.n	8005cdc <d_exprlist+0xff0>
 8005cd8:	2b6d      	cmp	r3, #109	; 0x6d
 8005cda:	d18b      	bne.n	8005bf4 <d_exprlist+0xf08>
 8005cdc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d187      	bne.n	8005bf4 <d_exprlist+0xf08>
 8005ce4:	68e3      	ldr	r3, [r4, #12]
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	2a5f      	cmp	r2, #95	; 0x5f
 8005cea:	d081      	beq.n	8005bf0 <d_exprlist+0xf04>
 8005cec:	f04f 0b01 	mov.w	fp, #1
 8005cf0:	e782      	b.n	8005bf8 <d_exprlist+0xf0c>
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7fe f988 	bl	8004008 <d_template_args>
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2104      	movs	r1, #4
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f7fa fa86 	bl	8000210 <d_make_comp>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f7ff b9c2 	b.w	800508e <d_exprlist+0x3a2>
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f002 f942 	bl	8007f94 <d_expr_primary>
 8005d10:	4683      	mov	fp, r0
 8005d12:	f7ff b8db 	b.w	8004ecc <d_exprlist+0x1e0>
 8005d16:	4620      	mov	r0, r4
 8005d18:	f7fa fc06 	bl	8000528 <d_compact_number>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	f47f aa80 	bne.w	8005222 <d_exprlist+0x536>
 8005d22:	4681      	mov	r9, r0
 8005d24:	f7ff b964 	b.w	8004ff0 <d_exprlist+0x304>
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f002 f933 	bl	8007f94 <d_expr_primary>
 8005d2e:	68e2      	ldr	r2, [r4, #12]
 8005d30:	4681      	mov	r9, r0
 8005d32:	7813      	ldrb	r3, [r2, #0]
 8005d34:	f7ff b9ff 	b.w	8005136 <d_exprlist+0x44a>
 8005d38:	0801bdd8 	.word	0x0801bdd8
 8005d3c:	0801bef4 	.word	0x0801bef4
 8005d40:	0801bef8 	.word	0x0801bef8
 8005d44:	0801c0e8 	.word	0x0801c0e8
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f7fa fc05 	bl	8000558 <d_template_param>
 8005d4e:	4683      	mov	fp, r0
 8005d50:	f7ff b8bc 	b.w	8004ecc <d_exprlist+0x1e0>
 8005d54:	4620      	mov	r0, r4
 8005d56:	f7fe f957 	bl	8004008 <d_template_args>
 8005d5a:	4652      	mov	r2, sl
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2104      	movs	r1, #4
 8005d60:	4620      	mov	r0, r4
 8005d62:	f7fa fa55 	bl	8000210 <d_make_comp>
 8005d66:	4682      	mov	sl, r0
 8005d68:	f7ff b8ec 	b.w	8004f44 <d_exprlist+0x258>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7fa fbf3 	bl	8000558 <d_template_param>
 8005d72:	68e2      	ldr	r2, [r4, #12]
 8005d74:	4681      	mov	r9, r0
 8005d76:	7813      	ldrb	r3, [r2, #0]
 8005d78:	f7ff b9dd 	b.w	8005136 <d_exprlist+0x44a>
 8005d7c:	6843      	ldr	r3, [r0, #4]
 8005d7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	3a02      	subs	r2, #2
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4410      	add	r0, r2
 8005d8c:	9100      	str	r1, [sp, #0]
 8005d8e:	6320      	str	r0, [r4, #48]	; 0x30
 8005d90:	49d2      	ldr	r1, [pc, #840]	; (80060dc <d_exprlist+0x13f0>)
 8005d92:	4618      	mov	r0, r3
 8005d94:	f002 fbc4 	bl	8008520 <strcmp>
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	f000 8192 	beq.w	80060c4 <d_exprlist+0x13d8>
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	2a03      	cmp	r2, #3
 8005da4:	f63f aed9 	bhi.w	8005b5a <d_exprlist+0xe6e>
 8005da8:	a301      	add	r3, pc, #4	; (adr r3, 8005db0 <d_exprlist+0x10c4>)
 8005daa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005921 	.word	0x08005921
 8005db4:	0800608f 	.word	0x0800608f
 8005db8:	080059d5 	.word	0x080059d5
 8005dbc:	08005937 	.word	0x08005937
 8005dc0:	6843      	ldr	r3, [r0, #4]
 8005dc2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	f8d3 b000 	ldr.w	fp, [r3]
 8005dca:	49c4      	ldr	r1, [pc, #784]	; (80060dc <d_exprlist+0x13f0>)
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	3a02      	subs	r2, #2
 8005dd0:	4402      	add	r2, r0
 8005dd2:	6322      	str	r2, [r4, #48]	; 0x30
 8005dd4:	4658      	mov	r0, fp
 8005dd6:	f002 fba3 	bl	8008520 <strcmp>
 8005dda:	9b00      	ldr	r3, [sp, #0]
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f000 81ff 	beq.w	80061e0 <d_exprlist+0x14f4>
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	f63f aedd 	bhi.w	8005ba4 <d_exprlist+0xeb8>
 8005dea:	a201      	add	r2, pc, #4	; (adr r2, 8005df0 <d_exprlist+0x1104>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005527 	.word	0x08005527
 8005df4:	08006055 	.word	0x08006055
 8005df8:	080055bf 	.word	0x080055bf
 8005dfc:	0800553f 	.word	0x0800553f
 8005e00:	3102      	adds	r1, #2
 8005e02:	60e1      	str	r1, [r4, #12]
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 fc09 	bl	800661c <d_expression_1>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	2149      	movs	r1, #73	; 0x49
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7fa f9fd 	bl	8000210 <d_make_comp>
 8005e16:	4681      	mov	r9, r0
 8005e18:	f7ff b8ea 	b.w	8004ff0 <d_exprlist+0x304>
 8005e1c:	1c83      	adds	r3, r0, #2
 8005e1e:	60e3      	str	r3, [r4, #12]
 8005e20:	7883      	ldrb	r3, [r0, #2]
 8005e22:	2b54      	cmp	r3, #84	; 0x54
 8005e24:	f040 80d9 	bne.w	8005fda <d_exprlist+0x12ee>
 8005e28:	1cc2      	adds	r2, r0, #3
 8005e2a:	60e2      	str	r2, [r4, #12]
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	6963      	ldr	r3, [r4, #20]
 8005e30:	69a1      	ldr	r1, [r4, #24]
 8005e32:	428b      	cmp	r3, r1
 8005e34:	f280 80cc 	bge.w	8005fd0 <d_exprlist+0x12e4>
 8005e38:	6921      	ldr	r1, [r4, #16]
 8005e3a:	f103 0e01 	add.w	lr, r3, #1
 8005e3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005e42:	eb11 0983 	adds.w	r9, r1, r3, lsl #2
 8005e46:	f8c4 e014 	str.w	lr, [r4, #20]
 8005e4a:	f43f ab74 	beq.w	8005536 <d_exprlist+0x84a>
 8005e4e:	f04f 0e06 	mov.w	lr, #6
 8005e52:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 8005e56:	f8c9 0004 	str.w	r0, [r9, #4]
 8005e5a:	7813      	ldrb	r3, [r2, #0]
 8005e5c:	f7ff b96b 	b.w	8005136 <d_exprlist+0x44a>
 8005e60:	f1b9 0f00 	cmp.w	r9, #0
 8005e64:	f43f ae2f 	beq.w	8005ac6 <d_exprlist+0xdda>
 8005e68:	f899 3000 	ldrb.w	r3, [r9]
 8005e6c:	2b70      	cmp	r3, #112	; 0x70
 8005e6e:	d002      	beq.n	8005e76 <d_exprlist+0x118a>
 8005e70:	2b6d      	cmp	r3, #109	; 0x6d
 8005e72:	f47f ae28 	bne.w	8005ac6 <d_exprlist+0xdda>
 8005e76:	f899 2001 	ldrb.w	r2, [r9, #1]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f47f ae23 	bne.w	8005ac6 <d_exprlist+0xdda>
 8005e80:	68e3      	ldr	r3, [r4, #12]
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	2a5f      	cmp	r2, #95	; 0x5f
 8005e86:	f000 8376 	beq.w	8006576 <d_exprlist+0x188a>
 8005e8a:	f04f 0901 	mov.w	r9, #1
 8005e8e:	e61c      	b.n	8005aca <d_exprlist+0xdde>
 8005e90:	68e3      	ldr	r3, [r4, #12]
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	2a5f      	cmp	r2, #95	; 0x5f
 8005e96:	f47f aead 	bne.w	8005bf4 <d_exprlist+0xf08>
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60e3      	str	r3, [r4, #12]
 8005e9e:	2145      	movs	r1, #69	; 0x45
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7fe ff23 	bl	8004cec <d_exprlist>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	e6b3      	b.n	8005c12 <d_exprlist+0xf26>
 8005eaa:	f1bb 0f00 	cmp.w	fp, #0
 8005eae:	f43f ae29 	beq.w	8005b04 <d_exprlist+0xe18>
 8005eb2:	f89b 3000 	ldrb.w	r3, [fp]
 8005eb6:	2b70      	cmp	r3, #112	; 0x70
 8005eb8:	d002      	beq.n	8005ec0 <d_exprlist+0x11d4>
 8005eba:	2b6d      	cmp	r3, #109	; 0x6d
 8005ebc:	f47f ae22 	bne.w	8005b04 <d_exprlist+0xe18>
 8005ec0:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	f47f ae1d 	bne.w	8005b04 <d_exprlist+0xe18>
 8005eca:	68e3      	ldr	r3, [r4, #12]
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	2a5f      	cmp	r2, #95	; 0x5f
 8005ed0:	f000 82f7 	beq.w	80064c2 <d_exprlist+0x17d6>
 8005ed4:	f04f 0b01 	mov.w	fp, #1
 8005ed8:	e616      	b.n	8005b08 <d_exprlist+0xe1c>
 8005eda:	3204      	adds	r2, #4
 8005edc:	60e2      	str	r2, [r4, #12]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 fd6e 	bl	80069c0 <d_type>
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f001 f9e8 	bl	80072bc <d_unqualified_name>
 8005eec:	68e3      	ldr	r3, [r4, #12]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b49      	cmp	r3, #73	; 0x49
 8005ef2:	4681      	mov	r9, r0
 8005ef4:	f000 810e 	beq.w	8006114 <d_exprlist+0x1428>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4642      	mov	r2, r8
 8005efc:	2101      	movs	r1, #1
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fa f986 	bl	8000210 <d_make_comp>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f7ff b8c2 	b.w	800508e <d_exprlist+0x3a2>
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fd58 	bl	80069c0 <d_type>
 8005f10:	4603      	mov	r3, r0
 8005f12:	e67e      	b.n	8005c12 <d_exprlist+0xf26>
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7fe f877 	bl	8004008 <d_template_args>
 8005f1a:	464a      	mov	r2, r9
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2104      	movs	r1, #4
 8005f20:	f7ff bb04 	b.w	800552c <d_exprlist+0x840>
 8005f24:	3102      	adds	r1, #2
 8005f26:	60e1      	str	r1, [r4, #12]
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fd49 	bl	80069c0 <d_type>
 8005f2e:	4682      	mov	sl, r0
 8005f30:	4620      	mov	r0, r4
 8005f32:	f001 f9c3 	bl	80072bc <d_unqualified_name>
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b49      	cmp	r3, #73	; 0x49
 8005f3c:	4683      	mov	fp, r0
 8005f3e:	f000 80de 	beq.w	80060fe <d_exprlist+0x1412>
 8005f42:	4603      	mov	r3, r0
 8005f44:	4652      	mov	r2, sl
 8005f46:	2101      	movs	r1, #1
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7fa f961 	bl	8000210 <d_make_comp>
 8005f4e:	4682      	mov	sl, r0
 8005f50:	f7fe bff8 	b.w	8004f44 <d_exprlist+0x258>
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8005f5a:	2a01      	cmp	r2, #1
 8005f5c:	d903      	bls.n	8005f66 <d_exprlist+0x127a>
 8005f5e:	3b72      	subs	r3, #114	; 0x72
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	f63f aa2f 	bhi.w	80053c4 <d_exprlist+0x6d8>
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 fd2a 	bl	80069c0 <d_type>
 8005f6c:	9000      	str	r0, [sp, #0]
 8005f6e:	f7ff ba2d 	b.w	80053cc <d_exprlist+0x6e0>
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 fb52 	bl	800661c <d_expression_1>
 8005f78:	9000      	str	r0, [sp, #0]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 fb4e 	bl	800661c <d_expression_1>
 8005f80:	4683      	mov	fp, r0
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 fb4a 	bl	800661c <d_expression_1>
 8005f88:	f7ff b9ff 	b.w	800538a <d_exprlist+0x69e>
 8005f8c:	3204      	adds	r2, #4
 8005f8e:	60e2      	str	r2, [r4, #12]
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 fb43 	bl	800661c <d_expression_1>
 8005f96:	2300      	movs	r3, #0
 8005f98:	4602      	mov	r2, r0
 8005f9a:	2149      	movs	r1, #73	; 0x49
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7fa f937 	bl	8000210 <d_make_comp>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	f7ff b873 	b.w	800508e <d_exprlist+0x3a2>
 8005fa8:	1c82      	adds	r2, r0, #2
 8005faa:	60e2      	str	r2, [r4, #12]
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 fd07 	bl	80069c0 <d_type>
 8005fb2:	4681      	mov	r9, r0
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f001 f981 	bl	80072bc <d_unqualified_name>
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b49      	cmp	r3, #73	; 0x49
 8005fc0:	4683      	mov	fp, r0
 8005fc2:	f000 818c 	beq.w	80062de <d_exprlist+0x15f2>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	464a      	mov	r2, r9
 8005fca:	2101      	movs	r1, #1
 8005fcc:	f7ff baae 	b.w	800552c <d_exprlist+0x840>
 8005fd0:	7813      	ldrb	r3, [r2, #0]
 8005fd2:	f04f 0900 	mov.w	r9, #0
 8005fd6:	f7ff b8ae 	b.w	8005136 <d_exprlist+0x44a>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7fa faa4 	bl	8000528 <d_compact_number>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	68e2      	ldr	r2, [r4, #12]
 8005fe4:	f47f af23 	bne.w	8005e2e <d_exprlist+0x1142>
 8005fe8:	4681      	mov	r9, r0
 8005fea:	7813      	ldrb	r3, [r2, #0]
 8005fec:	f7ff b8a3 	b.w	8005136 <d_exprlist+0x44a>
 8005ff0:	3202      	adds	r2, #2
 8005ff2:	60e2      	str	r2, [r4, #12]
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fce3 	bl	80069c0 <d_type>
 8005ffa:	4683      	mov	fp, r0
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f001 f95d 	bl	80072bc <d_unqualified_name>
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b49      	cmp	r3, #73	; 0x49
 8006008:	f000 819a 	beq.w	8006340 <d_exprlist+0x1654>
 800600c:	4603      	mov	r3, r0
 800600e:	465a      	mov	r2, fp
 8006010:	2101      	movs	r1, #1
 8006012:	4620      	mov	r0, r4
 8006014:	f7fa f8fc 	bl	8000210 <d_make_comp>
 8006018:	4683      	mov	fp, r0
 800601a:	f7fe bf57 	b.w	8004ecc <d_exprlist+0x1e0>
 800601e:	4620      	mov	r0, r4
 8006020:	f7fa fa82 	bl	8000528 <d_compact_number>
 8006024:	3001      	adds	r0, #1
 8006026:	f47f ad32 	bne.w	8005a8e <d_exprlist+0xda2>
 800602a:	4683      	mov	fp, r0
 800602c:	f7fe bf4e 	b.w	8004ecc <d_exprlist+0x1e0>
 8006030:	2145      	movs	r1, #69	; 0x45
 8006032:	4620      	mov	r0, r4
 8006034:	f7fe fe5a 	bl	8004cec <d_exprlist>
 8006038:	4683      	mov	fp, r0
 800603a:	f7ff b9e3 	b.w	8005404 <d_exprlist+0x718>
 800603e:	4620      	mov	r0, r4
 8006040:	f7fd ffe2 	bl	8004008 <d_template_args>
 8006044:	465a      	mov	r2, fp
 8006046:	4603      	mov	r3, r0
 8006048:	2104      	movs	r1, #4
 800604a:	4620      	mov	r0, r4
 800604c:	f7fa f8e0 	bl	8000210 <d_make_comp>
 8006050:	4603      	mov	r3, r0
 8006052:	e614      	b.n	8005c7e <d_exprlist+0xf92>
 8006054:	f1bb 0f00 	cmp.w	fp, #0
 8006058:	f43f adee 	beq.w	8005c38 <d_exprlist+0xf4c>
 800605c:	f89b 3000 	ldrb.w	r3, [fp]
 8006060:	2b70      	cmp	r3, #112	; 0x70
 8006062:	d002      	beq.n	800606a <d_exprlist+0x137e>
 8006064:	2b6d      	cmp	r3, #109	; 0x6d
 8006066:	f47f ade7 	bne.w	8005c38 <d_exprlist+0xf4c>
 800606a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800606e:	429a      	cmp	r2, r3
 8006070:	f47f ade2 	bne.w	8005c38 <d_exprlist+0xf4c>
 8006074:	68e3      	ldr	r3, [r4, #12]
 8006076:	781a      	ldrb	r2, [r3, #0]
 8006078:	2a5f      	cmp	r2, #95	; 0x5f
 800607a:	f000 81cf 	beq.w	800641c <d_exprlist+0x1730>
 800607e:	f04f 0b01 	mov.w	fp, #1
 8006082:	e5db      	b.n	8005c3c <d_exprlist+0xf50>
 8006084:	4620      	mov	r0, r4
 8006086:	f000 fc9b 	bl	80069c0 <d_type>
 800608a:	4603      	mov	r3, r0
 800608c:	e52a      	b.n	8005ae4 <d_exprlist+0xdf8>
 800608e:	9b00      	ldr	r3, [sp, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f43f ae04 	beq.w	8005c9e <d_exprlist+0xfb2>
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	2a70      	cmp	r2, #112	; 0x70
 800609a:	d002      	beq.n	80060a2 <d_exprlist+0x13b6>
 800609c:	2a6d      	cmp	r2, #109	; 0x6d
 800609e:	f47f adfe 	bne.w	8005c9e <d_exprlist+0xfb2>
 80060a2:	9b00      	ldr	r3, [sp, #0]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	4293      	cmp	r3, r2
 80060a8:	f47f adf9 	bne.w	8005c9e <d_exprlist+0xfb2>
 80060ac:	68e3      	ldr	r3, [r4, #12]
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	2a5f      	cmp	r2, #95	; 0x5f
 80060b2:	f000 81b6 	beq.w	8006422 <d_exprlist+0x1736>
 80060b6:	2201      	movs	r2, #1
 80060b8:	e5f2      	b.n	8005ca0 <d_exprlist+0xfb4>
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 fc80 	bl	80069c0 <d_type>
 80060c0:	4603      	mov	r3, r0
 80060c2:	e52e      	b.n	8005b22 <d_exprlist+0xe36>
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 fc7b 	bl	80069c0 <d_type>
 80060ca:	4603      	mov	r3, r0
 80060cc:	e5f5      	b.n	8005cba <d_exprlist+0xfce>
 80060ce:	2145      	movs	r1, #69	; 0x45
 80060d0:	4620      	mov	r0, r4
 80060d2:	f7fe fe0b 	bl	8004cec <d_exprlist>
 80060d6:	4681      	mov	r9, r0
 80060d8:	f7ff bb49 	b.w	800576e <d_exprlist+0xa82>
 80060dc:	0801c0e8 	.word	0x0801c0e8
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80060e6:	2a01      	cmp	r2, #1
 80060e8:	d903      	bls.n	80060f2 <d_exprlist+0x1406>
 80060ea:	3b72      	subs	r3, #114	; 0x72
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f63f ab1e 	bhi.w	800572e <d_exprlist+0xa42>
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 fc64 	bl	80069c0 <d_type>
 80060f8:	4682      	mov	sl, r0
 80060fa:	f7ff bb1c 	b.w	8005736 <d_exprlist+0xa4a>
 80060fe:	4620      	mov	r0, r4
 8006100:	f7fd ff82 	bl	8004008 <d_template_args>
 8006104:	465a      	mov	r2, fp
 8006106:	4603      	mov	r3, r0
 8006108:	2104      	movs	r1, #4
 800610a:	4620      	mov	r0, r4
 800610c:	f7fa f880 	bl	8000210 <d_make_comp>
 8006110:	4603      	mov	r3, r0
 8006112:	e717      	b.n	8005f44 <d_exprlist+0x1258>
 8006114:	4620      	mov	r0, r4
 8006116:	f7fd ff77 	bl	8004008 <d_template_args>
 800611a:	464a      	mov	r2, r9
 800611c:	4603      	mov	r3, r0
 800611e:	2104      	movs	r1, #4
 8006120:	4620      	mov	r0, r4
 8006122:	f7fa f875 	bl	8000210 <d_make_comp>
 8006126:	4603      	mov	r3, r0
 8006128:	e6e7      	b.n	8005efa <d_exprlist+0x120e>
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8006130:	2a01      	cmp	r2, #1
 8006132:	d903      	bls.n	800613c <d_exprlist+0x1450>
 8006134:	3b72      	subs	r3, #114	; 0x72
 8006136:	2b01      	cmp	r3, #1
 8006138:	f63f a9c7 	bhi.w	80054ca <d_exprlist+0x7de>
 800613c:	4620      	mov	r0, r4
 800613e:	f000 fc3f 	bl	80069c0 <d_type>
 8006142:	9000      	str	r0, [sp, #0]
 8006144:	f7ff b9c5 	b.w	80054d2 <d_exprlist+0x7e6>
 8006148:	3301      	adds	r3, #1
 800614a:	60e3      	str	r3, [r4, #12]
 800614c:	2145      	movs	r1, #69	; 0x45
 800614e:	4620      	mov	r0, r4
 8006150:	f7fe fdcc 	bl	8004cec <d_exprlist>
 8006154:	4603      	mov	r3, r0
 8006156:	464a      	mov	r2, r9
 8006158:	2135      	movs	r1, #53	; 0x35
 800615a:	f7ff b9e7 	b.w	800552c <d_exprlist+0x840>
 800615e:	2145      	movs	r1, #69	; 0x45
 8006160:	4620      	mov	r0, r4
 8006162:	f7fe fdc3 	bl	8004cec <d_exprlist>
 8006166:	4683      	mov	fp, r0
 8006168:	f7ff b9cf 	b.w	800550a <d_exprlist+0x81e>
 800616c:	3202      	adds	r2, #2
 800616e:	60e2      	str	r2, [r4, #12]
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fa53 	bl	800661c <d_expression_1>
 8006176:	2300      	movs	r3, #0
 8006178:	4602      	mov	r2, r0
 800617a:	2149      	movs	r1, #73	; 0x49
 800617c:	4620      	mov	r0, r4
 800617e:	f7fa f847 	bl	8000210 <d_make_comp>
 8006182:	4683      	mov	fp, r0
 8006184:	f7fe bea2 	b.w	8004ecc <d_exprlist+0x1e0>
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fa47 	bl	800661c <d_expression_1>
 800618e:	4681      	mov	r9, r0
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fa43 	bl	800661c <d_expression_1>
 8006196:	4682      	mov	sl, r0
 8006198:	4620      	mov	r0, r4
 800619a:	f000 fa3f 	bl	800661c <d_expression_1>
 800619e:	f7ff baa9 	b.w	80056f4 <d_exprlist+0xa08>
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 fa3a 	bl	800661c <d_expression_1>
 80061a8:	4683      	mov	fp, r0
 80061aa:	f7ff b92b 	b.w	8005404 <d_exprlist+0x718>
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7fd ff2a 	bl	8004008 <d_template_args>
 80061b4:	465a      	mov	r2, fp
 80061b6:	4603      	mov	r3, r0
 80061b8:	2104      	movs	r1, #4
 80061ba:	4620      	mov	r0, r4
 80061bc:	f7fa f828 	bl	8000210 <d_make_comp>
 80061c0:	4683      	mov	fp, r0
 80061c2:	f7ff b91f 	b.w	8005404 <d_exprlist+0x718>
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 fa28 	bl	800661c <d_expression_1>
 80061cc:	9000      	str	r0, [sp, #0]
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 fa24 	bl	800661c <d_expression_1>
 80061d4:	4683      	mov	fp, r0
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 fa20 	bl	800661c <d_expression_1>
 80061dc:	f7ff b958 	b.w	8005490 <d_exprlist+0x7a4>
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 fbed 	bl	80069c0 <d_type>
 80061e6:	464a      	mov	r2, r9
 80061e8:	4603      	mov	r3, r0
 80061ea:	2135      	movs	r1, #53	; 0x35
 80061ec:	f7ff b99e 	b.w	800552c <d_exprlist+0x840>
 80061f0:	3301      	adds	r3, #1
 80061f2:	60e3      	str	r3, [r4, #12]
 80061f4:	2000      	movs	r0, #0
 80061f6:	f7ff b8c8 	b.w	800538a <d_exprlist+0x69e>
 80061fa:	785a      	ldrb	r2, [r3, #1]
 80061fc:	2a69      	cmp	r2, #105	; 0x69
 80061fe:	f47f ab44 	bne.w	800588a <d_exprlist+0xb9e>
 8006202:	3302      	adds	r3, #2
 8006204:	60e3      	str	r3, [r4, #12]
 8006206:	2145      	movs	r1, #69	; 0x45
 8006208:	4620      	mov	r0, r4
 800620a:	f7fe fd6f 	bl	8004cec <d_exprlist>
 800620e:	f7ff b93f 	b.w	8005490 <d_exprlist+0x7a4>
 8006212:	3301      	adds	r3, #1
 8006214:	60e3      	str	r3, [r4, #12]
 8006216:	2000      	movs	r0, #0
 8006218:	f7ff b93a 	b.w	8005490 <d_exprlist+0x7a4>
 800621c:	4620      	mov	r0, r4
 800621e:	f000 f9fd 	bl	800661c <d_expression_1>
 8006222:	4683      	mov	fp, r0
 8006224:	f7ff b971 	b.w	800550a <d_exprlist+0x81e>
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f9f7 	bl	800661c <d_expression_1>
 800622e:	4683      	mov	fp, r0
 8006230:	f7ff b9f5 	b.w	800561e <d_exprlist+0x932>
 8006234:	3301      	adds	r3, #1
 8006236:	60e3      	str	r3, [r4, #12]
 8006238:	2145      	movs	r1, #69	; 0x45
 800623a:	4620      	mov	r0, r4
 800623c:	f7fe fd56 	bl	8004cec <d_exprlist>
 8006240:	4603      	mov	r3, r0
 8006242:	e44f      	b.n	8005ae4 <d_exprlist+0xdf8>
 8006244:	4620      	mov	r0, r4
 8006246:	f000 f9e9 	bl	800661c <d_expression_1>
 800624a:	4681      	mov	r9, r0
 800624c:	f7ff ba8f 	b.w	800576e <d_exprlist+0xa82>
 8006250:	785a      	ldrb	r2, [r3, #1]
 8006252:	2a69      	cmp	r2, #105	; 0x69
 8006254:	f47f ab12 	bne.w	800587c <d_exprlist+0xb90>
 8006258:	3302      	adds	r3, #2
 800625a:	60e3      	str	r3, [r4, #12]
 800625c:	2145      	movs	r1, #69	; 0x45
 800625e:	4620      	mov	r0, r4
 8006260:	f7fe fd44 	bl	8004cec <d_exprlist>
 8006264:	f7ff ba46 	b.w	80056f4 <d_exprlist+0xa08>
 8006268:	3301      	adds	r3, #1
 800626a:	60e3      	str	r3, [r4, #12]
 800626c:	2000      	movs	r0, #0
 800626e:	f7ff ba41 	b.w	80056f4 <d_exprlist+0xa08>
 8006272:	2145      	movs	r1, #69	; 0x45
 8006274:	4620      	mov	r0, r4
 8006276:	f7fe fd39 	bl	8004cec <d_exprlist>
 800627a:	4683      	mov	fp, r0
 800627c:	f7ff b9cf 	b.w	800561e <d_exprlist+0x932>
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8006286:	2a01      	cmp	r2, #1
 8006288:	d903      	bls.n	8006292 <d_exprlist+0x15a6>
 800628a:	3b72      	subs	r3, #114	; 0x72
 800628c:	2b01      	cmp	r3, #1
 800628e:	f63f a99d 	bhi.w	80055cc <d_exprlist+0x8e0>
 8006292:	4620      	mov	r0, r4
 8006294:	f000 fb94 	bl	80069c0 <d_type>
 8006298:	9000      	str	r0, [sp, #0]
 800629a:	f7ff b99b 	b.w	80055d4 <d_exprlist+0x8e8>
 800629e:	785a      	ldrb	r2, [r3, #1]
 80062a0:	2a69      	cmp	r2, #105	; 0x69
 80062a2:	f47e afaf 	bne.w	8005204 <d_exprlist+0x518>
 80062a6:	3302      	adds	r3, #2
 80062a8:	60e3      	str	r3, [r4, #12]
 80062aa:	2145      	movs	r1, #69	; 0x45
 80062ac:	4620      	mov	r0, r4
 80062ae:	f7fe fd1d 	bl	8004cec <d_exprlist>
 80062b2:	f7ff b86a 	b.w	800538a <d_exprlist+0x69e>
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7fd fea6 	bl	8004008 <d_template_args>
 80062bc:	465a      	mov	r2, fp
 80062be:	4603      	mov	r3, r0
 80062c0:	2104      	movs	r1, #4
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7f9 ffa4 	bl	8000210 <d_make_comp>
 80062c8:	4683      	mov	fp, r0
 80062ca:	f7ff b91e 	b.w	800550a <d_exprlist+0x81e>
 80062ce:	3301      	adds	r3, #1
 80062d0:	60e3      	str	r3, [r4, #12]
 80062d2:	2145      	movs	r1, #69	; 0x45
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7fe fd09 	bl	8004cec <d_exprlist>
 80062da:	4603      	mov	r3, r0
 80062dc:	e421      	b.n	8005b22 <d_exprlist+0xe36>
 80062de:	4620      	mov	r0, r4
 80062e0:	f7fd fe92 	bl	8004008 <d_template_args>
 80062e4:	465a      	mov	r2, fp
 80062e6:	4603      	mov	r3, r0
 80062e8:	2104      	movs	r1, #4
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7f9 ff90 	bl	8000210 <d_make_comp>
 80062f0:	464a      	mov	r2, r9
 80062f2:	4603      	mov	r3, r0
 80062f4:	2101      	movs	r1, #1
 80062f6:	f7ff b919 	b.w	800552c <d_exprlist+0x840>
 80062fa:	4620      	mov	r0, r4
 80062fc:	f7fd fe84 	bl	8004008 <d_template_args>
 8006300:	464a      	mov	r2, r9
 8006302:	4603      	mov	r3, r0
 8006304:	2104      	movs	r1, #4
 8006306:	4620      	mov	r0, r4
 8006308:	f7f9 ff82 	bl	8000210 <d_make_comp>
 800630c:	4681      	mov	r9, r0
 800630e:	f7ff ba2e 	b.w	800576e <d_exprlist+0xa82>
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f982 	bl	800661c <d_expression_1>
 8006318:	9000      	str	r0, [sp, #0]
 800631a:	4620      	mov	r0, r4
 800631c:	f000 f97e 	bl	800661c <d_expression_1>
 8006320:	4683      	mov	fp, r0
 8006322:	4620      	mov	r0, r4
 8006324:	f000 f97a 	bl	800661c <d_expression_1>
 8006328:	f7ff b937 	b.w	800559a <d_exprlist+0x8ae>
 800632c:	3201      	adds	r2, #1
 800632e:	60e2      	str	r2, [r4, #12]
 8006330:	2000      	movs	r0, #0
 8006332:	f7ff b932 	b.w	800559a <d_exprlist+0x8ae>
 8006336:	3301      	adds	r3, #1
 8006338:	60e3      	str	r3, [r4, #12]
 800633a:	2000      	movs	r0, #0
 800633c:	f7ff bb28 	b.w	8005990 <d_exprlist+0xca4>
 8006340:	9000      	str	r0, [sp, #0]
 8006342:	4620      	mov	r0, r4
 8006344:	f7fd fe60 	bl	8004008 <d_template_args>
 8006348:	9a00      	ldr	r2, [sp, #0]
 800634a:	4603      	mov	r3, r0
 800634c:	2104      	movs	r1, #4
 800634e:	4620      	mov	r0, r4
 8006350:	f7f9 ff5e 	bl	8000210 <d_make_comp>
 8006354:	4603      	mov	r3, r0
 8006356:	e65a      	b.n	800600e <d_exprlist+0x1322>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f95f 	bl	800661c <d_expression_1>
 800635e:	9000      	str	r0, [sp, #0]
 8006360:	4620      	mov	r0, r4
 8006362:	f000 f95b 	bl	800661c <d_expression_1>
 8006366:	9001      	str	r0, [sp, #4]
 8006368:	4620      	mov	r0, r4
 800636a:	f000 f957 	bl	800661c <d_expression_1>
 800636e:	f7ff bb0f 	b.w	8005990 <d_exprlist+0xca4>
 8006372:	2145      	movs	r1, #69	; 0x45
 8006374:	4620      	mov	r0, r4
 8006376:	f7fe fcb9 	bl	8004cec <d_exprlist>
 800637a:	4602      	mov	r2, r0
 800637c:	f7ff bb5b 	b.w	8005a36 <d_exprlist+0xd4a>
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 8006386:	2901      	cmp	r1, #1
 8006388:	d903      	bls.n	8006392 <d_exprlist+0x16a6>
 800638a:	3a72      	subs	r2, #114	; 0x72
 800638c:	2a01      	cmp	r2, #1
 800638e:	f63f ab28 	bhi.w	80059e2 <d_exprlist+0xcf6>
 8006392:	4620      	mov	r0, r4
 8006394:	f000 fb14 	bl	80069c0 <d_type>
 8006398:	9001      	str	r0, [sp, #4]
 800639a:	f7ff bb26 	b.w	80059ea <d_exprlist+0xcfe>
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 f93c 	bl	800661c <d_expression_1>
 80063a4:	4602      	mov	r2, r0
 80063a6:	f7ff bb46 	b.w	8005a36 <d_exprlist+0xd4a>
 80063aa:	2b6f      	cmp	r3, #111	; 0x6f
 80063ac:	d017      	beq.n	80063de <d_exprlist+0x16f2>
 80063ae:	2b69      	cmp	r3, #105	; 0x69
 80063b0:	d11d      	bne.n	80063ee <d_exprlist+0x1702>
 80063b2:	7853      	ldrb	r3, [r2, #1]
 80063b4:	2b6c      	cmp	r3, #108	; 0x6c
 80063b6:	f47f aa9a 	bne.w	80058ee <d_exprlist+0xc02>
 80063ba:	f04f 0b00 	mov.w	fp, #0
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	3302      	adds	r3, #2
 80063c2:	60e3      	str	r3, [r4, #12]
 80063c4:	2145      	movs	r1, #69	; 0x45
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7fe fc90 	bl	8004cec <d_exprlist>
 80063cc:	465a      	mov	r2, fp
 80063ce:	4603      	mov	r3, r0
 80063d0:	2130      	movs	r1, #48	; 0x30
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7f9 ff1c 	bl	8000210 <d_make_comp>
 80063d8:	4683      	mov	fp, r0
 80063da:	f7fe bd77 	b.w	8004ecc <d_exprlist+0x1e0>
 80063de:	7853      	ldrb	r3, [r2, #1]
 80063e0:	2b6e      	cmp	r3, #110	; 0x6e
 80063e2:	f47f aa84 	bne.w	80058ee <d_exprlist+0xc02>
 80063e6:	3202      	adds	r2, #2
 80063e8:	60e2      	str	r2, [r4, #12]
 80063ea:	f7fe beb5 	b.w	8005158 <d_exprlist+0x46c>
 80063ee:	2b74      	cmp	r3, #116	; 0x74
 80063f0:	f47f aa7d 	bne.w	80058ee <d_exprlist+0xc02>
 80063f4:	7853      	ldrb	r3, [r2, #1]
 80063f6:	2b6c      	cmp	r3, #108	; 0x6c
 80063f8:	f47f aa79 	bne.w	80058ee <d_exprlist+0xc02>
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 fadf 	bl	80069c0 <d_type>
 8006402:	4683      	mov	fp, r0
 8006404:	e7db      	b.n	80063be <d_exprlist+0x16d2>
 8006406:	460a      	mov	r2, r1
 8006408:	f7fe be41 	b.w	800508e <d_exprlist+0x3a2>
 800640c:	3301      	adds	r3, #1
 800640e:	60e3      	str	r3, [r4, #12]
 8006410:	2145      	movs	r1, #69	; 0x45
 8006412:	4620      	mov	r0, r4
 8006414:	f7fe fc6a 	bl	8004cec <d_exprlist>
 8006418:	4603      	mov	r3, r0
 800641a:	e44e      	b.n	8005cba <d_exprlist+0xfce>
 800641c:	3301      	adds	r3, #1
 800641e:	60e3      	str	r3, [r4, #12]
 8006420:	e40a      	b.n	8005c38 <d_exprlist+0xf4c>
 8006422:	3301      	adds	r3, #1
 8006424:	60e3      	str	r3, [r4, #12]
 8006426:	e43a      	b.n	8005c9e <d_exprlist+0xfb2>
 8006428:	f04f 0a00 	mov.w	sl, #0
 800642c:	3102      	adds	r1, #2
 800642e:	60e1      	str	r1, [r4, #12]
 8006430:	4620      	mov	r0, r4
 8006432:	2145      	movs	r1, #69	; 0x45
 8006434:	f7fe fc5a 	bl	8004cec <d_exprlist>
 8006438:	4652      	mov	r2, sl
 800643a:	4603      	mov	r3, r0
 800643c:	2130      	movs	r1, #48	; 0x30
 800643e:	4620      	mov	r0, r4
 8006440:	f7f9 fee6 	bl	8000210 <d_make_comp>
 8006444:	4682      	mov	sl, r0
 8006446:	f7fe bd7d 	b.w	8004f44 <d_exprlist+0x258>
 800644a:	2b6f      	cmp	r3, #111	; 0x6f
 800644c:	d010      	beq.n	8006470 <d_exprlist+0x1784>
 800644e:	2b69      	cmp	r3, #105	; 0x69
 8006450:	d13b      	bne.n	80064ca <d_exprlist+0x17de>
 8006452:	7843      	ldrb	r3, [r0, #1]
 8006454:	2b6c      	cmp	r3, #108	; 0x6c
 8006456:	f47e af0f 	bne.w	8005278 <d_exprlist+0x58c>
 800645a:	1c82      	adds	r2, r0, #2
 800645c:	60e2      	str	r2, [r4, #12]
 800645e:	2145      	movs	r1, #69	; 0x45
 8006460:	4620      	mov	r0, r4
 8006462:	f7fe fc43 	bl	8004cec <d_exprlist>
 8006466:	465a      	mov	r2, fp
 8006468:	4603      	mov	r3, r0
 800646a:	2130      	movs	r1, #48	; 0x30
 800646c:	f7ff b85e 	b.w	800552c <d_exprlist+0x840>
 8006470:	7843      	ldrb	r3, [r0, #1]
 8006472:	2b6e      	cmp	r3, #110	; 0x6e
 8006474:	f47e af00 	bne.w	8005278 <d_exprlist+0x58c>
 8006478:	1c82      	adds	r2, r0, #2
 800647a:	60e2      	str	r2, [r4, #12]
 800647c:	f7fe be51 	b.w	8005122 <d_exprlist+0x436>
 8006480:	2b6f      	cmp	r3, #111	; 0x6f
 8006482:	d016      	beq.n	80064b2 <d_exprlist+0x17c6>
 8006484:	2b69      	cmp	r3, #105	; 0x69
 8006486:	d12d      	bne.n	80064e4 <d_exprlist+0x17f8>
 8006488:	78d3      	ldrb	r3, [r2, #3]
 800648a:	2b6c      	cmp	r3, #108	; 0x6c
 800648c:	f47f a8d8 	bne.w	8005640 <d_exprlist+0x954>
 8006490:	f04f 0800 	mov.w	r8, #0
 8006494:	3102      	adds	r1, #2
 8006496:	60e1      	str	r1, [r4, #12]
 8006498:	4620      	mov	r0, r4
 800649a:	2145      	movs	r1, #69	; 0x45
 800649c:	f7fe fc26 	bl	8004cec <d_exprlist>
 80064a0:	4642      	mov	r2, r8
 80064a2:	4603      	mov	r3, r0
 80064a4:	2130      	movs	r1, #48	; 0x30
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7f9 feb2 	bl	8000210 <d_make_comp>
 80064ac:	4602      	mov	r2, r0
 80064ae:	f7fe bdee 	b.w	800508e <d_exprlist+0x3a2>
 80064b2:	78d3      	ldrb	r3, [r2, #3]
 80064b4:	2b6e      	cmp	r3, #110	; 0x6e
 80064b6:	f47f a8c3 	bne.w	8005640 <d_exprlist+0x954>
 80064ba:	3204      	adds	r2, #4
 80064bc:	60e2      	str	r2, [r4, #12]
 80064be:	f7fe bdd9 	b.w	8005074 <d_exprlist+0x388>
 80064c2:	3301      	adds	r3, #1
 80064c4:	60e3      	str	r3, [r4, #12]
 80064c6:	f7ff bb1d 	b.w	8005b04 <d_exprlist+0xe18>
 80064ca:	2b74      	cmp	r3, #116	; 0x74
 80064cc:	f47e aed4 	bne.w	8005278 <d_exprlist+0x58c>
 80064d0:	7843      	ldrb	r3, [r0, #1]
 80064d2:	2b6c      	cmp	r3, #108	; 0x6c
 80064d4:	f47e aed0 	bne.w	8005278 <d_exprlist+0x58c>
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fa71 	bl	80069c0 <d_type>
 80064de:	4683      	mov	fp, r0
 80064e0:	68e0      	ldr	r0, [r4, #12]
 80064e2:	e7ba      	b.n	800645a <d_exprlist+0x176e>
 80064e4:	2b74      	cmp	r3, #116	; 0x74
 80064e6:	f47f a8ab 	bne.w	8005640 <d_exprlist+0x954>
 80064ea:	78d3      	ldrb	r3, [r2, #3]
 80064ec:	2b6c      	cmp	r3, #108	; 0x6c
 80064ee:	f47f a8a7 	bne.w	8005640 <d_exprlist+0x954>
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fa64 	bl	80069c0 <d_type>
 80064f8:	68e1      	ldr	r1, [r4, #12]
 80064fa:	4680      	mov	r8, r0
 80064fc:	e7ca      	b.n	8006494 <d_exprlist+0x17a8>
 80064fe:	7853      	ldrb	r3, [r2, #1]
 8006500:	2b69      	cmp	r3, #105	; 0x69
 8006502:	d00f      	beq.n	8006524 <d_exprlist+0x1838>
 8006504:	f04f 0900 	mov.w	r9, #0
 8006508:	f7ff b9f1 	b.w	80058ee <d_exprlist+0xc02>
 800650c:	785a      	ldrb	r2, [r3, #1]
 800650e:	2a69      	cmp	r2, #105	; 0x69
 8006510:	f47f ab23 	bne.w	8005b5a <d_exprlist+0xe6e>
 8006514:	3302      	adds	r3, #2
 8006516:	60e3      	str	r3, [r4, #12]
 8006518:	2145      	movs	r1, #69	; 0x45
 800651a:	4620      	mov	r0, r4
 800651c:	f7fe fbe6 	bl	8004cec <d_exprlist>
 8006520:	f7ff ba36 	b.w	8005990 <d_exprlist+0xca4>
 8006524:	3202      	adds	r2, #2
 8006526:	60e2      	str	r2, [r4, #12]
 8006528:	2145      	movs	r1, #69	; 0x45
 800652a:	4620      	mov	r0, r4
 800652c:	f7fe fbde 	bl	8004cec <d_exprlist>
 8006530:	f7ff b833 	b.w	800559a <d_exprlist+0x8ae>
 8006534:	2b6f      	cmp	r3, #111	; 0x6f
 8006536:	d016      	beq.n	8006566 <d_exprlist+0x187a>
 8006538:	2b69      	cmp	r3, #105	; 0x69
 800653a:	d120      	bne.n	800657e <d_exprlist+0x1892>
 800653c:	784b      	ldrb	r3, [r1, #1]
 800653e:	2b6c      	cmp	r3, #108	; 0x6c
 8006540:	f47e ae50 	bne.w	80051e4 <d_exprlist+0x4f8>
 8006544:	f04f 0900 	mov.w	r9, #0
 8006548:	3102      	adds	r1, #2
 800654a:	60e1      	str	r1, [r4, #12]
 800654c:	4620      	mov	r0, r4
 800654e:	2145      	movs	r1, #69	; 0x45
 8006550:	f7fe fbcc 	bl	8004cec <d_exprlist>
 8006554:	464a      	mov	r2, r9
 8006556:	4603      	mov	r3, r0
 8006558:	2130      	movs	r1, #48	; 0x30
 800655a:	4620      	mov	r0, r4
 800655c:	f7f9 fe58 	bl	8000210 <d_make_comp>
 8006560:	4681      	mov	r9, r0
 8006562:	f7fe bd45 	b.w	8004ff0 <d_exprlist+0x304>
 8006566:	784b      	ldrb	r3, [r1, #1]
 8006568:	2b6e      	cmp	r3, #110	; 0x6e
 800656a:	f47e ae3b 	bne.w	80051e4 <d_exprlist+0x4f8>
 800656e:	3102      	adds	r1, #2
 8006570:	60e1      	str	r1, [r4, #12]
 8006572:	f7fe bd33 	b.w	8004fdc <d_exprlist+0x2f0>
 8006576:	3301      	adds	r3, #1
 8006578:	60e3      	str	r3, [r4, #12]
 800657a:	f7ff baa4 	b.w	8005ac6 <d_exprlist+0xdda>
 800657e:	2b74      	cmp	r3, #116	; 0x74
 8006580:	f47e ae30 	bne.w	80051e4 <d_exprlist+0x4f8>
 8006584:	784b      	ldrb	r3, [r1, #1]
 8006586:	2b6c      	cmp	r3, #108	; 0x6c
 8006588:	f47e ae2c 	bne.w	80051e4 <d_exprlist+0x4f8>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 fa17 	bl	80069c0 <d_type>
 8006592:	68e1      	ldr	r1, [r4, #12]
 8006594:	4681      	mov	r9, r0
 8006596:	e7d7      	b.n	8006548 <d_exprlist+0x185c>
 8006598:	2b74      	cmp	r3, #116	; 0x74
 800659a:	f47e ae90 	bne.w	80052be <d_exprlist+0x5d2>
 800659e:	784b      	ldrb	r3, [r1, #1]
 80065a0:	2b6c      	cmp	r3, #108	; 0x6c
 80065a2:	f47e ae8c 	bne.w	80052be <d_exprlist+0x5d2>
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fa0a 	bl	80069c0 <d_type>
 80065ac:	68e1      	ldr	r1, [r4, #12]
 80065ae:	4682      	mov	sl, r0
 80065b0:	e73c      	b.n	800642c <d_exprlist+0x1740>
 80065b2:	2b6f      	cmp	r3, #111	; 0x6f
 80065b4:	d016      	beq.n	80065e4 <d_exprlist+0x18f8>
 80065b6:	2b69      	cmp	r3, #105	; 0x69
 80065b8:	d11c      	bne.n	80065f4 <d_exprlist+0x1908>
 80065ba:	7853      	ldrb	r3, [r2, #1]
 80065bc:	2b6c      	cmp	r3, #108	; 0x6c
 80065be:	f47e abd9 	bne.w	8004d74 <d_exprlist+0x88>
 80065c2:	f04f 0800 	mov.w	r8, #0
 80065c6:	3202      	adds	r2, #2
 80065c8:	60e2      	str	r2, [r4, #12]
 80065ca:	2145      	movs	r1, #69	; 0x45
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7fe fb8d 	bl	8004cec <d_exprlist>
 80065d2:	4642      	mov	r2, r8
 80065d4:	4603      	mov	r3, r0
 80065d6:	2130      	movs	r1, #48	; 0x30
 80065d8:	4620      	mov	r0, r4
 80065da:	f7f9 fe19 	bl	8000210 <d_make_comp>
 80065de:	4602      	mov	r2, r0
 80065e0:	f7fe bc0d 	b.w	8004dfe <d_exprlist+0x112>
 80065e4:	7853      	ldrb	r3, [r2, #1]
 80065e6:	2b6e      	cmp	r3, #110	; 0x6e
 80065e8:	f47e abc4 	bne.w	8004d74 <d_exprlist+0x88>
 80065ec:	3202      	adds	r2, #2
 80065ee:	60e2      	str	r2, [r4, #12]
 80065f0:	f7fe bb91 	b.w	8004d16 <d_exprlist+0x2a>
 80065f4:	2b74      	cmp	r3, #116	; 0x74
 80065f6:	f47e abbd 	bne.w	8004d74 <d_exprlist+0x88>
 80065fa:	7853      	ldrb	r3, [r2, #1]
 80065fc:	2b6c      	cmp	r3, #108	; 0x6c
 80065fe:	f47e abb9 	bne.w	8004d74 <d_exprlist+0x88>
 8006602:	4620      	mov	r0, r4
 8006604:	f000 f9dc 	bl	80069c0 <d_type>
 8006608:	68e2      	ldr	r2, [r4, #12]
 800660a:	4680      	mov	r8, r0
 800660c:	e7db      	b.n	80065c6 <d_exprlist+0x18da>
 800660e:	f04f 0900 	mov.w	r9, #0
 8006612:	e6ce      	b.n	80063b2 <d_exprlist+0x16c6>
 8006614:	f04f 0900 	mov.w	r9, #0
 8006618:	f7fe bd8d 	b.w	8005136 <d_exprlist+0x44a>

0800661c <d_expression_1>:
 800661c:	68c2      	ldr	r2, [r0, #12]
 800661e:	7813      	ldrb	r3, [r2, #0]
 8006620:	2b4c      	cmp	r3, #76	; 0x4c
 8006622:	d060      	beq.n	80066e6 <d_expression_1+0xca>
 8006624:	2b54      	cmp	r3, #84	; 0x54
 8006626:	d060      	beq.n	80066ea <d_expression_1+0xce>
 8006628:	2b73      	cmp	r3, #115	; 0x73
 800662a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662e:	4604      	mov	r4, r0
 8006630:	d024      	beq.n	800667c <d_expression_1+0x60>
 8006632:	2b66      	cmp	r3, #102	; 0x66
 8006634:	d00f      	beq.n	8006656 <d_expression_1+0x3a>
 8006636:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800663a:	2909      	cmp	r1, #9
 800663c:	f200 818b 	bhi.w	8006956 <d_expression_1+0x33a>
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fe3b 	bl	80072bc <d_unqualified_name>
 8006646:	4605      	mov	r5, r0
 8006648:	b1a8      	cbz	r0, 8006676 <d_expression_1+0x5a>
 800664a:	68e3      	ldr	r3, [r4, #12]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b49      	cmp	r3, #73	; 0x49
 8006650:	d062      	beq.n	8006718 <d_expression_1+0xfc>
 8006652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006656:	7853      	ldrb	r3, [r2, #1]
 8006658:	2b70      	cmp	r3, #112	; 0x70
 800665a:	d029      	beq.n	80066b0 <d_expression_1+0x94>
 800665c:	4620      	mov	r0, r4
 800665e:	f000 fd6d 	bl	800713c <d_operator_name>
 8006662:	4605      	mov	r5, r0
 8006664:	b138      	cbz	r0, 8006676 <d_expression_1+0x5a>
 8006666:	7803      	ldrb	r3, [r0, #0]
 8006668:	2b31      	cmp	r3, #49	; 0x31
 800666a:	d040      	beq.n	80066ee <d_expression_1+0xd2>
 800666c:	2b32      	cmp	r3, #50	; 0x32
 800666e:	d016      	beq.n	800669e <d_expression_1+0x82>
 8006670:	2b33      	cmp	r3, #51	; 0x33
 8006672:	f000 8115 	beq.w	80068a0 <d_expression_1+0x284>
 8006676:	2000      	movs	r0, #0
 8006678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800667c:	7853      	ldrb	r3, [r2, #1]
 800667e:	2b72      	cmp	r3, #114	; 0x72
 8006680:	d055      	beq.n	800672e <d_expression_1+0x112>
 8006682:	2b70      	cmp	r3, #112	; 0x70
 8006684:	d1ea      	bne.n	800665c <d_expression_1+0x40>
 8006686:	3202      	adds	r2, #2
 8006688:	60c2      	str	r2, [r0, #12]
 800668a:	f7ff ffc7 	bl	800661c <d_expression_1>
 800668e:	2300      	movs	r3, #0
 8006690:	4602      	mov	r2, r0
 8006692:	2149      	movs	r1, #73	; 0x49
 8006694:	4620      	mov	r0, r4
 8006696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800669a:	f7f9 bdb9 	b.w	8000210 <d_make_comp>
 800669e:	686b      	ldr	r3, [r5, #4]
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d8e8      	bhi.n	8006676 <d_expression_1+0x5a>
 80066a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80066a8:	00d9005d 	.word	0x00d9005d
 80066ac:	006500a6 	.word	0x006500a6
 80066b0:	1c93      	adds	r3, r2, #2
 80066b2:	60c3      	str	r3, [r0, #12]
 80066b4:	7893      	ldrb	r3, [r2, #2]
 80066b6:	2b54      	cmp	r3, #84	; 0x54
 80066b8:	d04f      	beq.n	800675a <d_expression_1+0x13e>
 80066ba:	f7f9 ff35 	bl	8000528 <d_compact_number>
 80066be:	1c45      	adds	r5, r0, #1
 80066c0:	d0d9      	beq.n	8006676 <d_expression_1+0x5a>
 80066c2:	6963      	ldr	r3, [r4, #20]
 80066c4:	69a2      	ldr	r2, [r4, #24]
 80066c6:	4293      	cmp	r3, r2
 80066c8:	dad5      	bge.n	8006676 <d_expression_1+0x5a>
 80066ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80066ce:	6921      	ldr	r1, [r4, #16]
 80066d0:	3301      	adds	r3, #1
 80066d2:	0092      	lsls	r2, r2, #2
 80066d4:	6163      	str	r3, [r4, #20]
 80066d6:	188b      	adds	r3, r1, r2
 80066d8:	d0cd      	beq.n	8006676 <d_expression_1+0x5a>
 80066da:	2006      	movs	r0, #6
 80066dc:	5488      	strb	r0, [r1, r2]
 80066de:	605d      	str	r5, [r3, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e6:	f001 bc55 	b.w	8007f94 <d_expr_primary>
 80066ea:	f7f9 bf35 	b.w	8000558 <d_template_param>
 80066ee:	6847      	ldr	r7, [r0, #4]
 80066f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	683e      	ldr	r6, [r7, #0]
 80066f6:	49ad      	ldr	r1, [pc, #692]	; (80069ac <d_expression_1+0x390>)
 80066f8:	3b02      	subs	r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	6323      	str	r3, [r4, #48]	; 0x30
 80066fe:	4630      	mov	r0, r6
 8006700:	f001 ff0e 	bl	8008520 <strcmp>
 8006704:	2800      	cmp	r0, #0
 8006706:	f000 80d7 	beq.w	80068b8 <d_expression_1+0x29c>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d8b2      	bhi.n	8006676 <d_expression_1+0x5a>
 8006710:	e8df f003 	tbb	[pc, r3]
 8006714:	3071b627 	.word	0x3071b627
 8006718:	4620      	mov	r0, r4
 800671a:	f7fd fc75 	bl	8004008 <d_template_args>
 800671e:	462a      	mov	r2, r5
 8006720:	4603      	mov	r3, r0
 8006722:	2104      	movs	r1, #4
 8006724:	4620      	mov	r0, r4
 8006726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800672a:	f7f9 bd71 	b.w	8000210 <d_make_comp>
 800672e:	3202      	adds	r2, #2
 8006730:	60c2      	str	r2, [r0, #12]
 8006732:	f000 f945 	bl	80069c0 <d_type>
 8006736:	4605      	mov	r5, r0
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fdbf 	bl	80072bc <d_unqualified_name>
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b49      	cmp	r3, #73	; 0x49
 8006744:	4606      	mov	r6, r0
 8006746:	f000 80db 	beq.w	8006900 <d_expression_1+0x2e4>
 800674a:	4603      	mov	r3, r0
 800674c:	462a      	mov	r2, r5
 800674e:	4620      	mov	r0, r4
 8006750:	2101      	movs	r1, #1
 8006752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	f7f9 bd5b 	b.w	8000210 <d_make_comp>
 800675a:	3203      	adds	r2, #3
 800675c:	60c2      	str	r2, [r0, #12]
 800675e:	2500      	movs	r5, #0
 8006760:	e7af      	b.n	80066c2 <d_expression_1+0xa6>
 8006762:	462a      	mov	r2, r5
 8006764:	4620      	mov	r0, r4
 8006766:	2300      	movs	r3, #0
 8006768:	2134      	movs	r1, #52	; 0x34
 800676a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676e:	f7f9 bd4f 	b.w	8000210 <d_make_comp>
 8006772:	2600      	movs	r6, #0
 8006774:	498e      	ldr	r1, [pc, #568]	; (80069b0 <d_expression_1+0x394>)
 8006776:	4630      	mov	r0, r6
 8006778:	f001 fed2 	bl	8008520 <strcmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	f000 809f 	beq.w	80068c0 <d_expression_1+0x2a4>
 8006782:	7833      	ldrb	r3, [r6, #0]
 8006784:	2b6e      	cmp	r3, #110	; 0x6e
 8006786:	f47f af76 	bne.w	8006676 <d_expression_1+0x5a>
 800678a:	7873      	ldrb	r3, [r6, #1]
 800678c:	2b77      	cmp	r3, #119	; 0x77
 800678e:	d002      	beq.n	8006796 <d_expression_1+0x17a>
 8006790:	2b61      	cmp	r3, #97	; 0x61
 8006792:	f47f af70 	bne.w	8006676 <d_expression_1+0x5a>
 8006796:	215f      	movs	r1, #95	; 0x5f
 8006798:	4620      	mov	r0, r4
 800679a:	f7fe faa7 	bl	8004cec <d_exprlist>
 800679e:	4606      	mov	r6, r0
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 f90d 	bl	80069c0 <d_type>
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	2945      	cmp	r1, #69	; 0x45
 80067ac:	4607      	mov	r7, r0
 80067ae:	f000 80b7 	beq.w	8006920 <d_expression_1+0x304>
 80067b2:	2970      	cmp	r1, #112	; 0x70
 80067b4:	f000 80c3 	beq.w	800693e <d_expression_1+0x322>
 80067b8:	2969      	cmp	r1, #105	; 0x69
 80067ba:	f47f af5c 	bne.w	8006676 <d_expression_1+0x5a>
 80067be:	785b      	ldrb	r3, [r3, #1]
 80067c0:	2b6c      	cmp	r3, #108	; 0x6c
 80067c2:	f47f af58 	bne.w	8006676 <d_expression_1+0x5a>
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7ff ff28 	bl	800661c <d_expression_1>
 80067cc:	4603      	mov	r3, r0
 80067ce:	463a      	mov	r2, r7
 80067d0:	213a      	movs	r1, #58	; 0x3a
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7f9 fd1c 	bl	8000210 <d_make_comp>
 80067d8:	4632      	mov	r2, r6
 80067da:	4603      	mov	r3, r0
 80067dc:	2139      	movs	r1, #57	; 0x39
 80067de:	4620      	mov	r0, r4
 80067e0:	f7f9 fd16 	bl	8000210 <d_make_comp>
 80067e4:	462a      	mov	r2, r5
 80067e6:	4603      	mov	r3, r0
 80067e8:	2138      	movs	r1, #56	; 0x38
 80067ea:	4620      	mov	r0, r4
 80067ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	f7f9 bd0e 	b.w	8000210 <d_make_comp>
 80067f4:	2600      	movs	r6, #0
 80067f6:	686b      	ldr	r3, [r5, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	785a      	ldrb	r2, [r3, #1]
 80067fc:	2a63      	cmp	r2, #99	; 0x63
 80067fe:	d072      	beq.n	80068e6 <d_expression_1+0x2ca>
 8006800:	4620      	mov	r0, r4
 8006802:	f7ff ff0b 	bl	800661c <d_expression_1>
 8006806:	4607      	mov	r7, r0
 8006808:	496a      	ldr	r1, [pc, #424]	; (80069b4 <d_expression_1+0x398>)
 800680a:	4630      	mov	r0, r6
 800680c:	f001 fe88 	bl	8008520 <strcmp>
 8006810:	2800      	cmp	r0, #0
 8006812:	d062      	beq.n	80068da <d_expression_1+0x2be>
 8006814:	4968      	ldr	r1, [pc, #416]	; (80069b8 <d_expression_1+0x39c>)
 8006816:	4630      	mov	r0, r6
 8006818:	f001 fe82 	bl	8008520 <strcmp>
 800681c:	b128      	cbz	r0, 800682a <d_expression_1+0x20e>
 800681e:	4630      	mov	r0, r6
 8006820:	4966      	ldr	r1, [pc, #408]	; (80069bc <d_expression_1+0x3a0>)
 8006822:	f001 fe7d 	bl	8008520 <strcmp>
 8006826:	2800      	cmp	r0, #0
 8006828:	d175      	bne.n	8006916 <d_expression_1+0x2fa>
 800682a:	4620      	mov	r0, r4
 800682c:	f000 fd46 	bl	80072bc <d_unqualified_name>
 8006830:	68e3      	ldr	r3, [r4, #12]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b49      	cmp	r3, #73	; 0x49
 8006836:	4606      	mov	r6, r0
 8006838:	d076      	beq.n	8006928 <d_expression_1+0x30c>
 800683a:	4633      	mov	r3, r6
 800683c:	463a      	mov	r2, r7
 800683e:	2137      	movs	r1, #55	; 0x37
 8006840:	4620      	mov	r0, r4
 8006842:	f7f9 fce5 	bl	8000210 <d_make_comp>
 8006846:	462a      	mov	r2, r5
 8006848:	4603      	mov	r3, r0
 800684a:	2136      	movs	r1, #54	; 0x36
 800684c:	4620      	mov	r0, r4
 800684e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006852:	f7f9 bcdd 	b.w	8000210 <d_make_comp>
 8006856:	3301      	adds	r3, #1
 8006858:	60e3      	str	r3, [r4, #12]
 800685a:	2600      	movs	r6, #0
 800685c:	4620      	mov	r0, r4
 800685e:	f7ff fedd 	bl	800661c <d_expression_1>
 8006862:	4603      	mov	r3, r0
 8006864:	b12e      	cbz	r6, 8006872 <d_expression_1+0x256>
 8006866:	4602      	mov	r2, r0
 8006868:	2137      	movs	r1, #55	; 0x37
 800686a:	4620      	mov	r0, r4
 800686c:	f7f9 fcd0 	bl	8000210 <d_make_comp>
 8006870:	4603      	mov	r3, r0
 8006872:	462a      	mov	r2, r5
 8006874:	4620      	mov	r0, r4
 8006876:	2135      	movs	r1, #53	; 0x35
 8006878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687c:	f7f9 bcc8 	b.w	8000210 <d_make_comp>
 8006880:	2e00      	cmp	r6, #0
 8006882:	d0ea      	beq.n	800685a <d_expression_1+0x23e>
 8006884:	7833      	ldrb	r3, [r6, #0]
 8006886:	2b70      	cmp	r3, #112	; 0x70
 8006888:	d001      	beq.n	800688e <d_expression_1+0x272>
 800688a:	2b6d      	cmp	r3, #109	; 0x6d
 800688c:	d1e5      	bne.n	800685a <d_expression_1+0x23e>
 800688e:	7872      	ldrb	r2, [r6, #1]
 8006890:	429a      	cmp	r2, r3
 8006892:	d1e2      	bne.n	800685a <d_expression_1+0x23e>
 8006894:	68e3      	ldr	r3, [r4, #12]
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	2a5f      	cmp	r2, #95	; 0x5f
 800689a:	d0dc      	beq.n	8006856 <d_expression_1+0x23a>
 800689c:	2601      	movs	r6, #1
 800689e:	e7dd      	b.n	800685c <d_expression_1+0x240>
 80068a0:	68e3      	ldr	r3, [r4, #12]
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	2a5f      	cmp	r2, #95	; 0x5f
 80068a6:	d1d8      	bne.n	800685a <d_expression_1+0x23e>
 80068a8:	3301      	adds	r3, #1
 80068aa:	60e3      	str	r3, [r4, #12]
 80068ac:	2145      	movs	r1, #69	; 0x45
 80068ae:	4620      	mov	r0, r4
 80068b0:	f7fe fa1c 	bl	8004cec <d_exprlist>
 80068b4:	4603      	mov	r3, r0
 80068b6:	e7dc      	b.n	8006872 <d_expression_1+0x256>
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 f881 	bl	80069c0 <d_type>
 80068be:	e7d7      	b.n	8006870 <d_expression_1+0x254>
 80068c0:	4620      	mov	r0, r4
 80068c2:	f7ff feab 	bl	800661c <d_expression_1>
 80068c6:	4606      	mov	r6, r0
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff fea7 	bl	800661c <d_expression_1>
 80068ce:	4607      	mov	r7, r0
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff fea3 	bl	800661c <d_expression_1>
 80068d6:	4603      	mov	r3, r0
 80068d8:	e779      	b.n	80067ce <d_expression_1+0x1b2>
 80068da:	2145      	movs	r1, #69	; 0x45
 80068dc:	4620      	mov	r0, r4
 80068de:	f7fe fa05 	bl	8004cec <d_exprlist>
 80068e2:	4606      	mov	r6, r0
 80068e4:	e7a9      	b.n	800683a <d_expression_1+0x21e>
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80068ec:	2a01      	cmp	r2, #1
 80068ee:	d902      	bls.n	80068f6 <d_expression_1+0x2da>
 80068f0:	3b72      	subs	r3, #114	; 0x72
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d884      	bhi.n	8006800 <d_expression_1+0x1e4>
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 f862 	bl	80069c0 <d_type>
 80068fc:	4607      	mov	r7, r0
 80068fe:	e783      	b.n	8006808 <d_expression_1+0x1ec>
 8006900:	4620      	mov	r0, r4
 8006902:	f7fd fb81 	bl	8004008 <d_template_args>
 8006906:	4632      	mov	r2, r6
 8006908:	4603      	mov	r3, r0
 800690a:	2104      	movs	r1, #4
 800690c:	4620      	mov	r0, r4
 800690e:	f7f9 fc7f 	bl	8000210 <d_make_comp>
 8006912:	4603      	mov	r3, r0
 8006914:	e71a      	b.n	800674c <d_expression_1+0x130>
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff fe80 	bl	800661c <d_expression_1>
 800691c:	4606      	mov	r6, r0
 800691e:	e78c      	b.n	800683a <d_expression_1+0x21e>
 8006920:	3301      	adds	r3, #1
 8006922:	60e3      	str	r3, [r4, #12]
 8006924:	2300      	movs	r3, #0
 8006926:	e752      	b.n	80067ce <d_expression_1+0x1b2>
 8006928:	4620      	mov	r0, r4
 800692a:	f7fd fb6d 	bl	8004008 <d_template_args>
 800692e:	4632      	mov	r2, r6
 8006930:	4603      	mov	r3, r0
 8006932:	2104      	movs	r1, #4
 8006934:	4620      	mov	r0, r4
 8006936:	f7f9 fc6b 	bl	8000210 <d_make_comp>
 800693a:	4606      	mov	r6, r0
 800693c:	e77d      	b.n	800683a <d_expression_1+0x21e>
 800693e:	785a      	ldrb	r2, [r3, #1]
 8006940:	2a69      	cmp	r2, #105	; 0x69
 8006942:	f47f ae98 	bne.w	8006676 <d_expression_1+0x5a>
 8006946:	3302      	adds	r3, #2
 8006948:	60e3      	str	r3, [r4, #12]
 800694a:	2145      	movs	r1, #69	; 0x45
 800694c:	4620      	mov	r0, r4
 800694e:	f7fe f9cd 	bl	8004cec <d_exprlist>
 8006952:	4603      	mov	r3, r0
 8006954:	e73b      	b.n	80067ce <d_expression_1+0x1b2>
 8006956:	2b6f      	cmp	r3, #111	; 0x6f
 8006958:	d014      	beq.n	8006984 <d_expression_1+0x368>
 800695a:	2b69      	cmp	r3, #105	; 0x69
 800695c:	d119      	bne.n	8006992 <d_expression_1+0x376>
 800695e:	7853      	ldrb	r3, [r2, #1]
 8006960:	2b6c      	cmp	r3, #108	; 0x6c
 8006962:	f47f ae7b 	bne.w	800665c <d_expression_1+0x40>
 8006966:	2500      	movs	r5, #0
 8006968:	3202      	adds	r2, #2
 800696a:	60e2      	str	r2, [r4, #12]
 800696c:	2145      	movs	r1, #69	; 0x45
 800696e:	4620      	mov	r0, r4
 8006970:	f7fe f9bc 	bl	8004cec <d_exprlist>
 8006974:	462a      	mov	r2, r5
 8006976:	4603      	mov	r3, r0
 8006978:	2130      	movs	r1, #48	; 0x30
 800697a:	4620      	mov	r0, r4
 800697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	f7f9 bc46 	b.w	8000210 <d_make_comp>
 8006984:	7853      	ldrb	r3, [r2, #1]
 8006986:	2b6e      	cmp	r3, #110	; 0x6e
 8006988:	f47f ae68 	bne.w	800665c <d_expression_1+0x40>
 800698c:	3202      	adds	r2, #2
 800698e:	60c2      	str	r2, [r0, #12]
 8006990:	e656      	b.n	8006640 <d_expression_1+0x24>
 8006992:	2b74      	cmp	r3, #116	; 0x74
 8006994:	f47f ae62 	bne.w	800665c <d_expression_1+0x40>
 8006998:	7853      	ldrb	r3, [r2, #1]
 800699a:	2b6c      	cmp	r3, #108	; 0x6c
 800699c:	f47f ae5e 	bne.w	800665c <d_expression_1+0x40>
 80069a0:	f000 f80e 	bl	80069c0 <d_type>
 80069a4:	68e2      	ldr	r2, [r4, #12]
 80069a6:	4605      	mov	r5, r0
 80069a8:	e7de      	b.n	8006968 <d_expression_1+0x34c>
 80069aa:	bf00      	nop
 80069ac:	0801c0e8 	.word	0x0801c0e8
 80069b0:	0801bde0 	.word	0x0801bde0
 80069b4:	0801bdd8 	.word	0x0801bdd8
 80069b8:	0801bef4 	.word	0x0801bef4
 80069bc:	0801bef8 	.word	0x0801bef8

080069c0 <d_type>:
 80069c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069c4:	68c1      	ldr	r1, [r0, #12]
 80069c6:	780b      	ldrb	r3, [r1, #0]
 80069c8:	2b72      	cmp	r3, #114	; 0x72
 80069ca:	b083      	sub	sp, #12
 80069cc:	4604      	mov	r4, r0
 80069ce:	d055      	beq.n	8006a7c <d_type+0xbc>
 80069d0:	2b56      	cmp	r3, #86	; 0x56
 80069d2:	d053      	beq.n	8006a7c <d_type+0xbc>
 80069d4:	2b4b      	cmp	r3, #75	; 0x4b
 80069d6:	d051      	beq.n	8006a7c <d_type+0xbc>
 80069d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80069dc:	2a4a      	cmp	r2, #74	; 0x4a
 80069de:	f200 808a 	bhi.w	8006af6 <d_type+0x136>
 80069e2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80069e6:	00b2      	.short	0x00b2
 80069e8:	00b200b2 	.word	0x00b200b2
 80069ec:	00b200b2 	.word	0x00b200b2
 80069f0:	00b200b2 	.word	0x00b200b2
 80069f4:	00b200b2 	.word	0x00b200b2
 80069f8:	008800b2 	.word	0x008800b2
 80069fc:	00880088 	.word	0x00880088
 8006a00:	00880088 	.word	0x00880088
 8006a04:	00880088 	.word	0x00880088
 8006a08:	008800b8 	.word	0x008800b8
 8006a0c:	010300e1 	.word	0x010300e1
 8006a10:	00ef0088 	.word	0x00ef0088
 8006a14:	008800f5 	.word	0x008800f5
 8006a18:	00880088 	.word	0x00880088
 8006a1c:	00880088 	.word	0x00880088
 8006a20:	00b20175 	.word	0x00b20175
 8006a24:	019b018d 	.word	0x019b018d
 8006a28:	01a90088 	.word	0x01a90088
 8006a2c:	020f01b7 	.word	0x020f01b7
 8006a30:	008801d8 	.word	0x008801d8
 8006a34:	00880088 	.word	0x00880088
 8006a38:	00b20088 	.word	0x00b20088
 8006a3c:	00880088 	.word	0x00880088
 8006a40:	00880088 	.word	0x00880088
 8006a44:	00880088 	.word	0x00880088
 8006a48:	01ea01ea 	.word	0x01ea01ea
 8006a4c:	01ea01ea 	.word	0x01ea01ea
 8006a50:	01ea01ea 	.word	0x01ea01ea
 8006a54:	01ea01ea 	.word	0x01ea01ea
 8006a58:	01ea01ea 	.word	0x01ea01ea
 8006a5c:	01ea0088 	.word	0x01ea0088
 8006a60:	01ea01ea 	.word	0x01ea01ea
 8006a64:	008801ea 	.word	0x008801ea
 8006a68:	00880088 	.word	0x00880088
 8006a6c:	01ea01ea 	.word	0x01ea01ea
 8006a70:	01ea0098 	.word	0x01ea0098
 8006a74:	01ea01ea 	.word	0x01ea01ea
 8006a78:	01ea01ea 	.word	0x01ea01ea
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	a901      	add	r1, sp, #4
 8006a80:	4620      	mov	r0, r4
 8006a82:	f7f9 fc11 	bl	80002a8 <d_cv_qualifiers>
 8006a86:	4605      	mov	r5, r0
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d034      	beq.n	8006af6 <d_type+0x136>
 8006a8c:	68e3      	ldr	r3, [r4, #12]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b46      	cmp	r3, #70	; 0x46
 8006a92:	4620      	mov	r0, r4
 8006a94:	d034      	beq.n	8006b00 <d_type+0x140>
 8006a96:	f7ff ff93 	bl	80069c0 <d_type>
 8006a9a:	6028      	str	r0, [r5, #0]
 8006a9c:	b358      	cbz	r0, 8006af6 <d_type+0x136>
 8006a9e:	7803      	ldrb	r3, [r0, #0]
 8006aa0:	3b1f      	subs	r3, #31
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d930      	bls.n	8006b08 <d_type+0x148>
 8006aa6:	9a01      	ldr	r2, [sp, #4]
 8006aa8:	b32a      	cbz	r2, 8006af6 <d_type+0x136>
 8006aaa:	6a23      	ldr	r3, [r4, #32]
 8006aac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006aae:	428b      	cmp	r3, r1
 8006ab0:	da21      	bge.n	8006af6 <d_type+0x136>
 8006ab2:	69e0      	ldr	r0, [r4, #28]
 8006ab4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8006ab8:	9d01      	ldr	r5, [sp, #4]
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	4628      	mov	r0, r5
 8006abe:	6221      	str	r1, [r4, #32]
 8006ac0:	b003      	add	sp, #12
 8006ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006aca:	6363      	str	r3, [r4, #52]	; 0x34
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff fda5 	bl	800661c <d_expression_1>
 8006ad2:	6365      	str	r5, [r4, #52]	; 0x34
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2141      	movs	r1, #65	; 0x41
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7f9 fb98 	bl	8000210 <d_make_comp>
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	9001      	str	r0, [sp, #4]
 8006ae4:	b138      	cbz	r0, 8006af6 <d_type+0x136>
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	781a      	ldrb	r2, [r3, #0]
 8006aea:	b122      	cbz	r2, 8006af6 <d_type+0x136>
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	60e2      	str	r2, [r4, #12]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b45      	cmp	r3, #69	; 0x45
 8006af4:	d01e      	beq.n	8006b34 <d_type+0x174>
 8006af6:	2500      	movs	r5, #0
 8006af8:	4628      	mov	r0, r5
 8006afa:	b003      	add	sp, #12
 8006afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b00:	f000 fd32 	bl	8007568 <d_function_type>
 8006b04:	6028      	str	r0, [r5, #0]
 8006b06:	e7c9      	b.n	8006a9c <d_type+0xdc>
 8006b08:	9a01      	ldr	r2, [sp, #4]
 8006b0a:	6843      	ldr	r3, [r0, #4]
 8006b0c:	6042      	str	r2, [r0, #4]
 8006b0e:	682a      	ldr	r2, [r5, #0]
 8006b10:	9201      	str	r2, [sp, #4]
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	e7c7      	b.n	8006aa6 <d_type+0xe6>
 8006b16:	3101      	adds	r1, #1
 8006b18:	60e1      	str	r1, [r4, #12]
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7f9 fd3e 	bl	800059c <d_source_name>
 8006b20:	2300      	movs	r3, #0
 8006b22:	4602      	mov	r2, r0
 8006b24:	2128      	movs	r1, #40	; 0x28
 8006b26:	4620      	mov	r0, r4
 8006b28:	f7f9 fb72 	bl	8000210 <d_make_comp>
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	9001      	str	r0, [sp, #4]
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	d0e0      	beq.n	8006af6 <d_type+0x136>
 8006b34:	6a23      	ldr	r3, [r4, #32]
 8006b36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	dadc      	bge.n	8006af6 <d_type+0x136>
 8006b3c:	69e1      	ldr	r1, [r4, #28]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8006b44:	9d01      	ldr	r5, [sp, #4]
 8006b46:	6222      	str	r2, [r4, #32]
 8006b48:	e7d6      	b.n	8006af8 <d_type+0x138>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 fd2c 	bl	80075a8 <d_name>
 8006b50:	4605      	mov	r5, r0
 8006b52:	9001      	str	r0, [sp, #4]
 8006b54:	e7ec      	b.n	8006b30 <d_type+0x170>
 8006b56:	1c48      	adds	r0, r1, #1
 8006b58:	60e0      	str	r0, [r4, #12]
 8006b5a:	784b      	ldrb	r3, [r1, #1]
 8006b5c:	2b5f      	cmp	r3, #95	; 0x5f
 8006b5e:	f000 8275 	beq.w	800704c <d_type+0x68c>
 8006b62:	3b30      	subs	r3, #48	; 0x30
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	f200 827f 	bhi.w	8007068 <d_type+0x6a8>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60e3      	str	r3, [r4, #12]
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	3a30      	subs	r2, #48	; 0x30
 8006b74:	2a09      	cmp	r2, #9
 8006b76:	d9f9      	bls.n	8006b6c <d_type+0x1ac>
 8006b78:	6962      	ldr	r2, [r4, #20]
 8006b7a:	69a1      	ldr	r1, [r4, #24]
 8006b7c:	428a      	cmp	r2, r1
 8006b7e:	da11      	bge.n	8006ba4 <d_type+0x1e4>
 8006b80:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006b84:	6926      	ldr	r6, [r4, #16]
 8006b86:	0089      	lsls	r1, r1, #2
 8006b88:	3201      	adds	r2, #1
 8006b8a:	1875      	adds	r5, r6, r1
 8006b8c:	6162      	str	r2, [r4, #20]
 8006b8e:	d009      	beq.n	8006ba4 <d_type+0x1e4>
 8006b90:	1a1a      	subs	r2, r3, r0
 8006b92:	d007      	beq.n	8006ba4 <d_type+0x1e4>
 8006b94:	2700      	movs	r7, #0
 8006b96:	5477      	strb	r7, [r6, r1]
 8006b98:	6068      	str	r0, [r5, #4]
 8006b9a:	60aa      	str	r2, [r5, #8]
 8006b9c:	781a      	ldrb	r2, [r3, #0]
 8006b9e:	2a5f      	cmp	r2, #95	; 0x5f
 8006ba0:	f000 82c9 	beq.w	8007136 <d_type+0x776>
 8006ba4:	2500      	movs	r5, #0
 8006ba6:	e0a9      	b.n	8006cfc <d_type+0x33c>
 8006ba8:	3101      	adds	r1, #1
 8006baa:	60e1      	str	r1, [r4, #12]
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7ff ff07 	bl	80069c0 <d_type>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	2125      	movs	r1, #37	; 0x25
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f7f9 fb29 	bl	8000210 <d_make_comp>
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	9001      	str	r0, [sp, #4]
 8006bc2:	e7b5      	b.n	8006b30 <d_type+0x170>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fccf 	bl	8007568 <d_function_type>
 8006bca:	4605      	mov	r5, r0
 8006bcc:	9001      	str	r0, [sp, #4]
 8006bce:	e7af      	b.n	8006b30 <d_type+0x170>
 8006bd0:	3101      	adds	r1, #1
 8006bd2:	60e1      	str	r1, [r4, #12]
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7ff fef3 	bl	80069c0 <d_type>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4602      	mov	r2, r0
 8006bde:	2126      	movs	r1, #38	; 0x26
 8006be0:	4620      	mov	r0, r4
 8006be2:	f7f9 fb15 	bl	8000210 <d_make_comp>
 8006be6:	4605      	mov	r5, r0
 8006be8:	9001      	str	r0, [sp, #4]
 8006bea:	e7a1      	b.n	8006b30 <d_type+0x170>
 8006bec:	1c4b      	adds	r3, r1, #1
 8006bee:	60e3      	str	r3, [r4, #12]
 8006bf0:	784b      	ldrb	r3, [r1, #1]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f43f af7f 	beq.w	8006af6 <d_type+0x136>
 8006bf8:	1c8b      	adds	r3, r1, #2
 8006bfa:	60e3      	str	r3, [r4, #12]
 8006bfc:	784b      	ldrb	r3, [r1, #1]
 8006bfe:	3b46      	subs	r3, #70	; 0x46
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	f63f af78 	bhi.w	8006af6 <d_type+0x136>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <d_type+0x24c>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006fdb 	.word	0x08006fdb
 8006c10:	08006af7 	.word	0x08006af7
 8006c14:	08006af7 	.word	0x08006af7
 8006c18:	08006af7 	.word	0x08006af7
 8006c1c:	08006af7 	.word	0x08006af7
 8006c20:	08006af7 	.word	0x08006af7
 8006c24:	08006af7 	.word	0x08006af7
 8006c28:	08006af7 	.word	0x08006af7
 8006c2c:	08006af7 	.word	0x08006af7
 8006c30:	08006af7 	.word	0x08006af7
 8006c34:	08006af7 	.word	0x08006af7
 8006c38:	08006af7 	.word	0x08006af7
 8006c3c:	08006af7 	.word	0x08006af7
 8006c40:	08006af7 	.word	0x08006af7
 8006c44:	08006ac7 	.word	0x08006ac7
 8006c48:	08006af7 	.word	0x08006af7
 8006c4c:	08006af7 	.word	0x08006af7
 8006c50:	08006af7 	.word	0x08006af7
 8006c54:	08006af7 	.word	0x08006af7
 8006c58:	08006af7 	.word	0x08006af7
 8006c5c:	08006af7 	.word	0x08006af7
 8006c60:	08006af7 	.word	0x08006af7
 8006c64:	08006af7 	.word	0x08006af7
 8006c68:	08006af7 	.word	0x08006af7
 8006c6c:	08006af7 	.word	0x08006af7
 8006c70:	08006af7 	.word	0x08006af7
 8006c74:	08006af7 	.word	0x08006af7
 8006c78:	08006fb1 	.word	0x08006fb1
 8006c7c:	08006af7 	.word	0x08006af7
 8006c80:	08006af7 	.word	0x08006af7
 8006c84:	08006f93 	.word	0x08006f93
 8006c88:	08006ecd 	.word	0x08006ecd
 8006c8c:	08006ea1 	.word	0x08006ea1
 8006c90:	08006af7 	.word	0x08006af7
 8006c94:	08006e75 	.word	0x08006e75
 8006c98:	08006e49 	.word	0x08006e49
 8006c9c:	08006af7 	.word	0x08006af7
 8006ca0:	08006af7 	.word	0x08006af7
 8006ca4:	08006af7 	.word	0x08006af7
 8006ca8:	08006af7 	.word	0x08006af7
 8006cac:	08006f6b 	.word	0x08006f6b
 8006cb0:	08006af7 	.word	0x08006af7
 8006cb4:	08006f53 	.word	0x08006f53
 8006cb8:	08006af7 	.word	0x08006af7
 8006cbc:	08006af7 	.word	0x08006af7
 8006cc0:	08006f33 	.word	0x08006f33
 8006cc4:	08006ac7 	.word	0x08006ac7
 8006cc8:	08006af7 	.word	0x08006af7
 8006ccc:	08006ef9 	.word	0x08006ef9
 8006cd0:	3101      	adds	r1, #1
 8006cd2:	60e1      	str	r1, [r4, #12]
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f7ff fe73 	bl	80069c0 <d_type>
 8006cda:	4605      	mov	r5, r0
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	f43f af61 	beq.w	8006ba4 <d_type+0x1e4>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f7ff fe6c 	bl	80069c0 <d_type>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	f43f af5b 	beq.w	8006ba4 <d_type+0x1e4>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	212b      	movs	r1, #43	; 0x2b
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7f9 fa8b 	bl	8000210 <d_make_comp>
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	9501      	str	r5, [sp, #4]
 8006cfe:	e717      	b.n	8006b30 <d_type+0x170>
 8006d00:	3101      	adds	r1, #1
 8006d02:	60e1      	str	r1, [r4, #12]
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7ff fe5b 	bl	80069c0 <d_type>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	2124      	movs	r1, #36	; 0x24
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7f9 fa7d 	bl	8000210 <d_make_comp>
 8006d16:	4605      	mov	r5, r0
 8006d18:	9001      	str	r0, [sp, #4]
 8006d1a:	e709      	b.n	8006b30 <d_type+0x170>
 8006d1c:	3101      	adds	r1, #1
 8006d1e:	60e1      	str	r1, [r4, #12]
 8006d20:	4620      	mov	r0, r4
 8006d22:	f7ff fe4d 	bl	80069c0 <d_type>
 8006d26:	2300      	movs	r3, #0
 8006d28:	4602      	mov	r2, r0
 8006d2a:	2122      	movs	r1, #34	; 0x22
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7f9 fa6f 	bl	8000210 <d_make_comp>
 8006d32:	4605      	mov	r5, r0
 8006d34:	9001      	str	r0, [sp, #4]
 8006d36:	e6fb      	b.n	8006b30 <d_type+0x170>
 8006d38:	3101      	adds	r1, #1
 8006d3a:	60e1      	str	r1, [r4, #12]
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f7ff fe3f 	bl	80069c0 <d_type>
 8006d42:	2300      	movs	r3, #0
 8006d44:	4602      	mov	r2, r0
 8006d46:	2123      	movs	r1, #35	; 0x23
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f7f9 fa61 	bl	8000210 <d_make_comp>
 8006d4e:	4605      	mov	r5, r0
 8006d50:	9001      	str	r0, [sp, #4]
 8006d52:	e6ed      	b.n	8006b30 <d_type+0x170>
 8006d54:	784b      	ldrb	r3, [r1, #1]
 8006d56:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d5a:	2a09      	cmp	r2, #9
 8006d5c:	d905      	bls.n	8006d6a <d_type+0x3aa>
 8006d5e:	2b5f      	cmp	r3, #95	; 0x5f
 8006d60:	d003      	beq.n	8006d6a <d_type+0x3aa>
 8006d62:	3b41      	subs	r3, #65	; 0x41
 8006d64:	2b19      	cmp	r3, #25
 8006d66:	f200 818c 	bhi.w	8007082 <d_type+0x6c2>
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f7f9 fc8b 	bl	8000688 <d_substitution>
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	9001      	str	r0, [sp, #4]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b49      	cmp	r3, #73	; 0x49
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	f47f aebc 	bne.w	8006af8 <d_type+0x138>
 8006d80:	4620      	mov	r0, r4
 8006d82:	f7fd f941 	bl	8004008 <d_template_args>
 8006d86:	462a      	mov	r2, r5
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2104      	movs	r1, #4
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f7f9 fa3f 	bl	8000210 <d_make_comp>
 8006d92:	4605      	mov	r5, r0
 8006d94:	e7b2      	b.n	8006cfc <d_type+0x33c>
 8006d96:	3101      	adds	r1, #1
 8006d98:	60e1      	str	r1, [r4, #12]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7f9 fbfe 	bl	800059c <d_source_name>
 8006da0:	9001      	str	r0, [sp, #4]
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7ff fe0c 	bl	80069c0 <d_type>
 8006da8:	9b01      	ldr	r3, [sp, #4]
 8006daa:	4602      	mov	r2, r0
 8006dac:	2121      	movs	r1, #33	; 0x21
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7f9 fa2e 	bl	8000210 <d_make_comp>
 8006db4:	4605      	mov	r5, r0
 8006db6:	9001      	str	r0, [sp, #4]
 8006db8:	e6ba      	b.n	8006b30 <d_type+0x170>
 8006dba:	3b61      	subs	r3, #97	; 0x61
 8006dbc:	4fb7      	ldr	r7, [pc, #732]	; (800709c <d_type+0x6dc>)
 8006dbe:	6962      	ldr	r2, [r4, #20]
 8006dc0:	69a5      	ldr	r5, [r4, #24]
 8006dc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8006dcc:	42aa      	cmp	r2, r5
 8006dce:	4418      	add	r0, r3
 8006dd0:	f280 8138 	bge.w	8007044 <d_type+0x684>
 8006dd4:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8006dd8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006ddc:	00b6      	lsls	r6, r6, #2
 8006dde:	3201      	adds	r2, #1
 8006de0:	eb1e 0506 	adds.w	r5, lr, r6
 8006de4:	6162      	str	r2, [r4, #20]
 8006de6:	f000 812d 	beq.w	8007044 <d_type+0x684>
 8006dea:	2227      	movs	r2, #39	; 0x27
 8006dec:	443b      	add	r3, r7
 8006dee:	f80e 2006 	strb.w	r2, [lr, r6]
 8006df2:	6068      	str	r0, [r5, #4]
 8006df4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006df6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006dfa:	3101      	adds	r1, #1
 8006dfc:	4413      	add	r3, r2
 8006dfe:	60e1      	str	r1, [r4, #12]
 8006e00:	6323      	str	r3, [r4, #48]	; 0x30
 8006e02:	e679      	b.n	8006af8 <d_type+0x138>
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7f9 fba7 	bl	8000558 <d_template_param>
 8006e0a:	68e6      	ldr	r6, [r4, #12]
 8006e0c:	9001      	str	r0, [sp, #4]
 8006e0e:	7833      	ldrb	r3, [r6, #0]
 8006e10:	2b49      	cmp	r3, #73	; 0x49
 8006e12:	4605      	mov	r5, r0
 8006e14:	f47f ae8c 	bne.w	8006b30 <d_type+0x170>
 8006e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 8150 	bne.w	80070c0 <d_type+0x700>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f43f ae68 	beq.w	8006af6 <d_type+0x136>
 8006e26:	6a23      	ldr	r3, [r4, #32]
 8006e28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	f6bf ae63 	bge.w	8006af6 <d_type+0x136>
 8006e30:	69e1      	ldr	r1, [r4, #28]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8006e38:	6222      	str	r2, [r4, #32]
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	9d01      	ldr	r5, [sp, #4]
 8006e3e:	f7fd f8e3 	bl	8004008 <d_template_args>
 8006e42:	462a      	mov	r2, r5
 8006e44:	4603      	mov	r3, r0
 8006e46:	e7a0      	b.n	8006d8a <d_type+0x3ca>
 8006e48:	6963      	ldr	r3, [r4, #20]
 8006e4a:	69a2      	ldr	r2, [r4, #24]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	f280 80f9 	bge.w	8007044 <d_type+0x684>
 8006e52:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006e56:	6922      	ldr	r2, [r4, #16]
 8006e58:	0089      	lsls	r1, r1, #2
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	1855      	adds	r5, r2, r1
 8006e5e:	6163      	str	r3, [r4, #20]
 8006e60:	f000 80f0 	beq.w	8007044 <d_type+0x684>
 8006e64:	4b8e      	ldr	r3, [pc, #568]	; (80070a0 <d_type+0x6e0>)
 8006e66:	2027      	movs	r0, #39	; 0x27
 8006e68:	5450      	strb	r0, [r2, r1]
 8006e6a:	606b      	str	r3, [r5, #4]
 8006e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e6e:	3308      	adds	r3, #8
 8006e70:	6323      	str	r3, [r4, #48]	; 0x30
 8006e72:	e641      	b.n	8006af8 <d_type+0x138>
 8006e74:	6963      	ldr	r3, [r4, #20]
 8006e76:	69a2      	ldr	r2, [r4, #24]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	f280 80e3 	bge.w	8007044 <d_type+0x684>
 8006e7e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006e82:	6922      	ldr	r2, [r4, #16]
 8006e84:	0089      	lsls	r1, r1, #2
 8006e86:	3301      	adds	r3, #1
 8006e88:	1855      	adds	r5, r2, r1
 8006e8a:	6163      	str	r3, [r4, #20]
 8006e8c:	f000 80da 	beq.w	8007044 <d_type+0x684>
 8006e90:	4b84      	ldr	r3, [pc, #528]	; (80070a4 <d_type+0x6e4>)
 8006e92:	2027      	movs	r0, #39	; 0x27
 8006e94:	5450      	strb	r0, [r2, r1]
 8006e96:	606b      	str	r3, [r5, #4]
 8006e98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	6323      	str	r3, [r4, #48]	; 0x30
 8006e9e:	e62b      	b.n	8006af8 <d_type+0x138>
 8006ea0:	6963      	ldr	r3, [r4, #20]
 8006ea2:	69a2      	ldr	r2, [r4, #24]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	f280 80cd 	bge.w	8007044 <d_type+0x684>
 8006eaa:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	0089      	lsls	r1, r1, #2
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	1855      	adds	r5, r2, r1
 8006eb6:	6163      	str	r3, [r4, #20]
 8006eb8:	f000 80c4 	beq.w	8007044 <d_type+0x684>
 8006ebc:	4b7a      	ldr	r3, [pc, #488]	; (80070a8 <d_type+0x6e8>)
 8006ebe:	2027      	movs	r0, #39	; 0x27
 8006ec0:	5450      	strb	r0, [r2, r1]
 8006ec2:	606b      	str	r3, [r5, #4]
 8006ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ec6:	3309      	adds	r3, #9
 8006ec8:	6323      	str	r3, [r4, #48]	; 0x30
 8006eca:	e615      	b.n	8006af8 <d_type+0x138>
 8006ecc:	6963      	ldr	r3, [r4, #20]
 8006ece:	69a2      	ldr	r2, [r4, #24]
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	f280 80b7 	bge.w	8007044 <d_type+0x684>
 8006ed6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006eda:	6922      	ldr	r2, [r4, #16]
 8006edc:	0089      	lsls	r1, r1, #2
 8006ede:	3301      	adds	r3, #1
 8006ee0:	1855      	adds	r5, r2, r1
 8006ee2:	6163      	str	r3, [r4, #20]
 8006ee4:	f000 80ae 	beq.w	8007044 <d_type+0x684>
 8006ee8:	4b70      	ldr	r3, [pc, #448]	; (80070ac <d_type+0x6ec>)
 8006eea:	2027      	movs	r0, #39	; 0x27
 8006eec:	5450      	strb	r0, [r2, r1]
 8006eee:	606b      	str	r3, [r5, #4]
 8006ef0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ef2:	330a      	adds	r3, #10
 8006ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8006ef6:	e5ff      	b.n	8006af8 <d_type+0x138>
 8006ef8:	788b      	ldrb	r3, [r1, #2]
 8006efa:	2b5f      	cmp	r3, #95	; 0x5f
 8006efc:	f000 80ff 	beq.w	80070fe <d_type+0x73e>
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7f9 faf5 	bl	80004f0 <d_number_component>
 8006f06:	4605      	mov	r5, r0
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	f43f aef7 	beq.w	8006cfc <d_type+0x33c>
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	2a5f      	cmp	r2, #95	; 0x5f
 8006f14:	f47f ae46 	bne.w	8006ba4 <d_type+0x1e4>
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60e3      	str	r3, [r4, #12]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff fd4f 	bl	80069c0 <d_type>
 8006f22:	462a      	mov	r2, r5
 8006f24:	4603      	mov	r3, r0
 8006f26:	212d      	movs	r1, #45	; 0x2d
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7f9 f971 	bl	8000210 <d_make_comp>
 8006f2e:	4605      	mov	r5, r0
 8006f30:	e6e4      	b.n	8006cfc <d_type+0x33c>
 8006f32:	6963      	ldr	r3, [r4, #20]
 8006f34:	69a2      	ldr	r2, [r4, #24]
 8006f36:	4293      	cmp	r3, r2
 8006f38:	f280 8084 	bge.w	8007044 <d_type+0x684>
 8006f3c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	0089      	lsls	r1, r1, #2
 8006f44:	3301      	adds	r3, #1
 8006f46:	1855      	adds	r5, r2, r1
 8006f48:	6163      	str	r3, [r4, #20]
 8006f4a:	d07b      	beq.n	8007044 <d_type+0x684>
 8006f4c:	2027      	movs	r0, #39	; 0x27
 8006f4e:	4b58      	ldr	r3, [pc, #352]	; (80070b0 <d_type+0x6f0>)
 8006f50:	e78a      	b.n	8006e68 <d_type+0x4a8>
 8006f52:	4620      	mov	r0, r4
 8006f54:	f7ff fd34 	bl	80069c0 <d_type>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	2149      	movs	r1, #73	; 0x49
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f7f9 f956 	bl	8000210 <d_make_comp>
 8006f64:	4605      	mov	r5, r0
 8006f66:	9001      	str	r0, [sp, #4]
 8006f68:	e5e2      	b.n	8006b30 <d_type+0x170>
 8006f6a:	6963      	ldr	r3, [r4, #20]
 8006f6c:	69a2      	ldr	r2, [r4, #24]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	da68      	bge.n	8007044 <d_type+0x684>
 8006f72:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006f76:	6922      	ldr	r2, [r4, #16]
 8006f78:	0089      	lsls	r1, r1, #2
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	1855      	adds	r5, r2, r1
 8006f7e:	6163      	str	r3, [r4, #20]
 8006f80:	d060      	beq.n	8007044 <d_type+0x684>
 8006f82:	4b4c      	ldr	r3, [pc, #304]	; (80070b4 <d_type+0x6f4>)
 8006f84:	2027      	movs	r0, #39	; 0x27
 8006f86:	5450      	strb	r0, [r2, r1]
 8006f88:	606b      	str	r3, [r5, #4]
 8006f8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f8c:	3311      	adds	r3, #17
 8006f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f90:	e5b2      	b.n	8006af8 <d_type+0x138>
 8006f92:	6963      	ldr	r3, [r4, #20]
 8006f94:	69a2      	ldr	r2, [r4, #24]
 8006f96:	4293      	cmp	r3, r2
 8006f98:	da54      	bge.n	8007044 <d_type+0x684>
 8006f9a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006f9e:	6922      	ldr	r2, [r4, #16]
 8006fa0:	0089      	lsls	r1, r1, #2
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	1855      	adds	r5, r2, r1
 8006fa6:	6163      	str	r3, [r4, #20]
 8006fa8:	d04c      	beq.n	8007044 <d_type+0x684>
 8006faa:	2027      	movs	r0, #39	; 0x27
 8006fac:	4b42      	ldr	r3, [pc, #264]	; (80070b8 <d_type+0x6f8>)
 8006fae:	e787      	b.n	8006ec0 <d_type+0x500>
 8006fb0:	6963      	ldr	r3, [r4, #20]
 8006fb2:	69a2      	ldr	r2, [r4, #24]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	f6bf ad9e 	bge.w	8006af6 <d_type+0x136>
 8006fba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006fbe:	6921      	ldr	r1, [r4, #16]
 8006fc0:	0092      	lsls	r2, r2, #2
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	188d      	adds	r5, r1, r2
 8006fc6:	6163      	str	r3, [r4, #20]
 8006fc8:	f43f ad95 	beq.w	8006af6 <d_type+0x136>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	548b      	strb	r3, [r1, r2]
 8006fd0:	483a      	ldr	r0, [pc, #232]	; (80070bc <d_type+0x6fc>)
 8006fd2:	6068      	str	r0, [r5, #4]
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	60ab      	str	r3, [r5, #8]
 8006fd8:	e58e      	b.n	8006af8 <d_type+0x138>
 8006fda:	6963      	ldr	r3, [r4, #20]
 8006fdc:	69a2      	ldr	r2, [r4, #24]
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	f280 8084 	bge.w	80070ec <d_type+0x72c>
 8006fe4:	6925      	ldr	r5, [r4, #16]
 8006fe6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8006fea:	0080      	lsls	r0, r0, #2
 8006fec:	3301      	adds	r3, #1
 8006fee:	182a      	adds	r2, r5, r0
 8006ff0:	262c      	movs	r6, #44	; 0x2c
 8006ff2:	6163      	str	r3, [r4, #20]
 8006ff4:	9201      	str	r2, [sp, #4]
 8006ff6:	542e      	strb	r6, [r5, r0]
 8006ff8:	788b      	ldrb	r3, [r1, #2]
 8006ffa:	3b30      	subs	r3, #48	; 0x30
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	bf94      	ite	ls
 8007002:	2301      	movls	r3, #1
 8007004:	2300      	movhi	r3, #0
 8007006:	8113      	strh	r3, [r2, #8]
 8007008:	d973      	bls.n	80070f2 <d_type+0x732>
 800700a:	4615      	mov	r5, r2
 800700c:	4620      	mov	r0, r4
 800700e:	f7ff fcd7 	bl	80069c0 <d_type>
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	6068      	str	r0, [r5, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f43f ad6c 	beq.w	8006af6 <d_type+0x136>
 800701e:	f104 000c 	add.w	r0, r4, #12
 8007022:	f7f9 fa3b 	bl	800049c <d_number.isra.0>
 8007026:	68e2      	ldr	r2, [r4, #12]
 8007028:	7813      	ldrb	r3, [r2, #0]
 800702a:	b143      	cbz	r3, 800703e <d_type+0x67e>
 800702c:	1c53      	adds	r3, r2, #1
 800702e:	60e3      	str	r3, [r4, #12]
 8007030:	7813      	ldrb	r3, [r2, #0]
 8007032:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8007036:	fab3 f383 	clz	r3, r3
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	b21b      	sxth	r3, r3
 800703e:	9d01      	ldr	r5, [sp, #4]
 8007040:	816b      	strh	r3, [r5, #10]
 8007042:	e559      	b.n	8006af8 <d_type+0x138>
 8007044:	2300      	movs	r3, #0
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	deff      	udf	#255	; 0xff
 800704c:	2500      	movs	r5, #0
 800704e:	3001      	adds	r0, #1
 8007050:	60e0      	str	r0, [r4, #12]
 8007052:	4620      	mov	r0, r4
 8007054:	f7ff fcb4 	bl	80069c0 <d_type>
 8007058:	462a      	mov	r2, r5
 800705a:	4603      	mov	r3, r0
 800705c:	212a      	movs	r1, #42	; 0x2a
 800705e:	4620      	mov	r0, r4
 8007060:	f7f9 f8d6 	bl	8000210 <d_make_comp>
 8007064:	4605      	mov	r5, r0
 8007066:	e649      	b.n	8006cfc <d_type+0x33c>
 8007068:	2301      	movs	r3, #1
 800706a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800706c:	6363      	str	r3, [r4, #52]	; 0x34
 800706e:	4620      	mov	r0, r4
 8007070:	f7ff fad4 	bl	800661c <d_expression_1>
 8007074:	6365      	str	r5, [r4, #52]	; 0x34
 8007076:	4605      	mov	r5, r0
 8007078:	2800      	cmp	r0, #0
 800707a:	f43f ad93 	beq.w	8006ba4 <d_type+0x1e4>
 800707e:	68e3      	ldr	r3, [r4, #12]
 8007080:	e58c      	b.n	8006b9c <d_type+0x1dc>
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fa90 	bl	80075a8 <d_name>
 8007088:	4605      	mov	r5, r0
 800708a:	9001      	str	r0, [sp, #4]
 800708c:	2800      	cmp	r0, #0
 800708e:	f43f ad32 	beq.w	8006af6 <d_type+0x136>
 8007092:	7803      	ldrb	r3, [r0, #0]
 8007094:	2b18      	cmp	r3, #24
 8007096:	f47f ad4d 	bne.w	8006b34 <d_type+0x174>
 800709a:	e52d      	b.n	8006af8 <d_type+0x138>
 800709c:	0801a4fc 	.word	0x0801a4fc
 80070a0:	0801a82c 	.word	0x0801a82c
 80070a4:	0801a804 	.word	0x0801a804
 80070a8:	0801a7c8 	.word	0x0801a7c8
 80070ac:	0801a7f0 	.word	0x0801a7f0
 80070b0:	0801a818 	.word	0x0801a818
 80070b4:	0801a840 	.word	0x0801a840
 80070b8:	0801a7dc 	.word	0x0801a7dc
 80070bc:	0801befc 	.word	0x0801befc
 80070c0:	4620      	mov	r0, r4
 80070c2:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80070c6:	f8d4 8020 	ldr.w	r8, [r4, #32]
 80070ca:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80070cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80070ce:	f7fc ff9b 	bl	8004008 <d_template_args>
 80070d2:	68e2      	ldr	r2, [r4, #12]
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	2a49      	cmp	r2, #73	; 0x49
 80070d8:	d01c      	beq.n	8007114 <d_type+0x754>
 80070da:	6325      	str	r5, [r4, #48]	; 0x30
 80070dc:	60e6      	str	r6, [r4, #12]
 80070de:	f8c4 9014 	str.w	r9, [r4, #20]
 80070e2:	f8c4 8020 	str.w	r8, [r4, #32]
 80070e6:	62a7      	str	r7, [r4, #40]	; 0x28
 80070e8:	9d01      	ldr	r5, [sp, #4]
 80070ea:	e521      	b.n	8006b30 <d_type+0x170>
 80070ec:	2300      	movs	r3, #0
 80070ee:	701b      	strb	r3, [r3, #0]
 80070f0:	deff      	udf	#255	; 0xff
 80070f2:	f104 000c 	add.w	r0, r4, #12
 80070f6:	f7f9 f9d1 	bl	800049c <d_number.isra.0>
 80070fa:	9d01      	ldr	r5, [sp, #4]
 80070fc:	e786      	b.n	800700c <d_type+0x64c>
 80070fe:	3103      	adds	r1, #3
 8007100:	2301      	movs	r3, #1
 8007102:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8007104:	60e1      	str	r1, [r4, #12]
 8007106:	6363      	str	r3, [r4, #52]	; 0x34
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff fa87 	bl	800661c <d_expression_1>
 800710e:	6366      	str	r6, [r4, #52]	; 0x34
 8007110:	4605      	mov	r5, r0
 8007112:	e6f9      	b.n	8006f08 <d_type+0x548>
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f43f aced 	beq.w	8006af6 <d_type+0x136>
 800711c:	6a22      	ldr	r2, [r4, #32]
 800711e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007120:	428a      	cmp	r2, r1
 8007122:	f6bf ace8 	bge.w	8006af6 <d_type+0x136>
 8007126:	69e5      	ldr	r5, [r4, #28]
 8007128:	1c51      	adds	r1, r2, #1
 800712a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800712e:	9a01      	ldr	r2, [sp, #4]
 8007130:	6221      	str	r1, [r4, #32]
 8007132:	4603      	mov	r3, r0
 8007134:	e629      	b.n	8006d8a <d_type+0x3ca>
 8007136:	4618      	mov	r0, r3
 8007138:	e789      	b.n	800704e <d_type+0x68e>
 800713a:	bf00      	nop

0800713c <d_operator_name>:
 800713c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007140:	68c3      	ldr	r3, [r0, #12]
 8007142:	781e      	ldrb	r6, [r3, #0]
 8007144:	4684      	mov	ip, r0
 8007146:	b316      	cbz	r6, 800718e <d_operator_name+0x52>
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	60c2      	str	r2, [r0, #12]
 800714c:	785a      	ldrb	r2, [r3, #1]
 800714e:	781e      	ldrb	r6, [r3, #0]
 8007150:	2a00      	cmp	r2, #0
 8007152:	d059      	beq.n	8007208 <d_operator_name+0xcc>
 8007154:	1c9a      	adds	r2, r3, #2
 8007156:	60c2      	str	r2, [r0, #12]
 8007158:	2e76      	cmp	r6, #118	; 0x76
 800715a:	4604      	mov	r4, r0
 800715c:	f893 e001 	ldrb.w	lr, [r3, #1]
 8007160:	d043      	beq.n	80071ea <d_operator_name+0xae>
 8007162:	2e63      	cmp	r6, #99	; 0x63
 8007164:	d114      	bne.n	8007190 <d_operator_name+0x54>
 8007166:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 800716a:	d111      	bne.n	8007190 <d_operator_name+0x54>
 800716c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800716e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8007170:	fab3 f383 	clz	r3, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	6383      	str	r3, [r0, #56]	; 0x38
 8007178:	f7ff fc22 	bl	80069c0 <d_type>
 800717c:	63a5      	str	r5, [r4, #56]	; 0x38
 800717e:	4602      	mov	r2, r0
 8007180:	2300      	movs	r3, #0
 8007182:	4620      	mov	r0, r4
 8007184:	2133      	movs	r1, #51	; 0x33
 8007186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800718a:	f7f9 b841 	b.w	8000210 <d_make_comp>
 800718e:	46b6      	mov	lr, r6
 8007190:	4c28      	ldr	r4, [pc, #160]	; (8007234 <d_operator_name+0xf8>)
 8007192:	203d      	movs	r0, #61	; 0x3d
 8007194:	2200      	movs	r2, #0
 8007196:	e004      	b.n	80071a2 <d_operator_name+0x66>
 8007198:	bf94      	ite	ls
 800719a:	1c5a      	addls	r2, r3, #1
 800719c:	4618      	movhi	r0, r3
 800719e:	4282      	cmp	r2, r0
 80071a0:	d02f      	beq.n	8007202 <d_operator_name+0xc6>
 80071a2:	1a83      	subs	r3, r0, r2
 80071a4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80071a8:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80071ac:	0119      	lsls	r1, r3, #4
 80071ae:	1867      	adds	r7, r4, r1
 80071b0:	5861      	ldr	r1, [r4, r1]
 80071b2:	780d      	ldrb	r5, [r1, #0]
 80071b4:	42b5      	cmp	r5, r6
 80071b6:	d1ef      	bne.n	8007198 <d_operator_name+0x5c>
 80071b8:	7849      	ldrb	r1, [r1, #1]
 80071ba:	4571      	cmp	r1, lr
 80071bc:	d1ec      	bne.n	8007198 <d_operator_name+0x5c>
 80071be:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80071c2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80071c6:	4293      	cmp	r3, r2
 80071c8:	da1b      	bge.n	8007202 <d_operator_name+0xc6>
 80071ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80071ce:	f8dc 1010 	ldr.w	r1, [ip, #16]
 80071d2:	3301      	adds	r3, #1
 80071d4:	0092      	lsls	r2, r2, #2
 80071d6:	f8cc 3014 	str.w	r3, [ip, #20]
 80071da:	188b      	adds	r3, r1, r2
 80071dc:	d027      	beq.n	800722e <d_operator_name+0xf2>
 80071de:	2031      	movs	r0, #49	; 0x31
 80071e0:	5488      	strb	r0, [r1, r2]
 80071e2:	605f      	str	r7, [r3, #4]
 80071e4:	4618      	mov	r0, r3
 80071e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ea:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 80071ee:	b2eb      	uxtb	r3, r5
 80071f0:	2b09      	cmp	r3, #9
 80071f2:	d8cd      	bhi.n	8007190 <d_operator_name+0x54>
 80071f4:	f7f9 f9d2 	bl	800059c <d_source_name>
 80071f8:	6963      	ldr	r3, [r4, #20]
 80071fa:	69a2      	ldr	r2, [r4, #24]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	4601      	mov	r1, r0
 8007200:	db04      	blt.n	800720c <d_operator_name+0xd0>
 8007202:	2000      	movs	r0, #0
 8007204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007208:	4696      	mov	lr, r2
 800720a:	e7c1      	b.n	8007190 <d_operator_name+0x54>
 800720c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007210:	6920      	ldr	r0, [r4, #16]
 8007212:	3301      	adds	r3, #1
 8007214:	0092      	lsls	r2, r2, #2
 8007216:	6163      	str	r3, [r4, #20]
 8007218:	1883      	adds	r3, r0, r2
 800721a:	d0f2      	beq.n	8007202 <d_operator_name+0xc6>
 800721c:	2900      	cmp	r1, #0
 800721e:	d0f0      	beq.n	8007202 <d_operator_name+0xc6>
 8007220:	2432      	movs	r4, #50	; 0x32
 8007222:	5484      	strb	r4, [r0, r2]
 8007224:	605d      	str	r5, [r3, #4]
 8007226:	6099      	str	r1, [r3, #8]
 8007228:	4618      	mov	r0, r3
 800722a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800722e:	4618      	mov	r0, r3
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	0801a854 	.word	0x0801a854

08007238 <d_parmlist>:
 8007238:	b530      	push	{r4, r5, lr}
 800723a:	68c2      	ldr	r2, [r0, #12]
 800723c:	b083      	sub	sp, #12
 800723e:	2300      	movs	r3, #0
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	7813      	ldrb	r3, [r2, #0]
 8007244:	b343      	cbz	r3, 8007298 <d_parmlist+0x60>
 8007246:	2b45      	cmp	r3, #69	; 0x45
 8007248:	d026      	beq.n	8007298 <d_parmlist+0x60>
 800724a:	2b2e      	cmp	r3, #46	; 0x2e
 800724c:	d024      	beq.n	8007298 <d_parmlist+0x60>
 800724e:	4604      	mov	r4, r0
 8007250:	ad01      	add	r5, sp, #4
 8007252:	e015      	b.n	8007280 <d_parmlist+0x48>
 8007254:	2b4f      	cmp	r3, #79	; 0x4f
 8007256:	d016      	beq.n	8007286 <d_parmlist+0x4e>
 8007258:	f7ff fbb2 	bl	80069c0 <d_type>
 800725c:	2300      	movs	r3, #0
 800725e:	4602      	mov	r2, r0
 8007260:	212e      	movs	r1, #46	; 0x2e
 8007262:	b1c8      	cbz	r0, 8007298 <d_parmlist+0x60>
 8007264:	4620      	mov	r0, r4
 8007266:	f7f8 ffd3 	bl	8000210 <d_make_comp>
 800726a:	6028      	str	r0, [r5, #0]
 800726c:	b1a0      	cbz	r0, 8007298 <d_parmlist+0x60>
 800726e:	68e2      	ldr	r2, [r4, #12]
 8007270:	7813      	ldrb	r3, [r2, #0]
 8007272:	f100 0508 	add.w	r5, r0, #8
 8007276:	b14b      	cbz	r3, 800728c <d_parmlist+0x54>
 8007278:	2b45      	cmp	r3, #69	; 0x45
 800727a:	d007      	beq.n	800728c <d_parmlist+0x54>
 800727c:	2b2e      	cmp	r3, #46	; 0x2e
 800727e:	d005      	beq.n	800728c <d_parmlist+0x54>
 8007280:	2b52      	cmp	r3, #82	; 0x52
 8007282:	4620      	mov	r0, r4
 8007284:	d1e6      	bne.n	8007254 <d_parmlist+0x1c>
 8007286:	7853      	ldrb	r3, [r2, #1]
 8007288:	2b45      	cmp	r3, #69	; 0x45
 800728a:	d1e5      	bne.n	8007258 <d_parmlist+0x20>
 800728c:	9801      	ldr	r0, [sp, #4]
 800728e:	b118      	cbz	r0, 8007298 <d_parmlist+0x60>
 8007290:	6883      	ldr	r3, [r0, #8]
 8007292:	b123      	cbz	r3, 800729e <d_parmlist+0x66>
 8007294:	b003      	add	sp, #12
 8007296:	bd30      	pop	{r4, r5, pc}
 8007298:	2000      	movs	r0, #0
 800729a:	b003      	add	sp, #12
 800729c:	bd30      	pop	{r4, r5, pc}
 800729e:	6842      	ldr	r2, [r0, #4]
 80072a0:	7811      	ldrb	r1, [r2, #0]
 80072a2:	2927      	cmp	r1, #39	; 0x27
 80072a4:	d1f6      	bne.n	8007294 <d_parmlist+0x5c>
 80072a6:	6852      	ldr	r2, [r2, #4]
 80072a8:	7c11      	ldrb	r1, [r2, #16]
 80072aa:	2909      	cmp	r1, #9
 80072ac:	d1f2      	bne.n	8007294 <d_parmlist+0x5c>
 80072ae:	6851      	ldr	r1, [r2, #4]
 80072b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80072b2:	1a52      	subs	r2, r2, r1
 80072b4:	6322      	str	r2, [r4, #48]	; 0x30
 80072b6:	6043      	str	r3, [r0, #4]
 80072b8:	e7ec      	b.n	8007294 <d_parmlist+0x5c>
 80072ba:	bf00      	nop

080072bc <d_unqualified_name>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	68c2      	ldr	r2, [r0, #12]
 80072c0:	7813      	ldrb	r3, [r2, #0]
 80072c2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80072c6:	2909      	cmp	r1, #9
 80072c8:	4604      	mov	r4, r0
 80072ca:	d920      	bls.n	800730e <d_unqualified_name+0x52>
 80072cc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80072d0:	2919      	cmp	r1, #25
 80072d2:	d925      	bls.n	8007320 <d_unqualified_name+0x64>
 80072d4:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 80072d8:	2901      	cmp	r1, #1
 80072da:	d92c      	bls.n	8007336 <d_unqualified_name+0x7a>
 80072dc:	2b4c      	cmp	r3, #76	; 0x4c
 80072de:	f000 8089 	beq.w	80073f4 <d_unqualified_name+0x138>
 80072e2:	2b55      	cmp	r3, #85	; 0x55
 80072e4:	d133      	bne.n	800734e <d_unqualified_name+0x92>
 80072e6:	7853      	ldrb	r3, [r2, #1]
 80072e8:	2b6c      	cmp	r3, #108	; 0x6c
 80072ea:	d032      	beq.n	8007352 <d_unqualified_name+0x96>
 80072ec:	2b74      	cmp	r3, #116	; 0x74
 80072ee:	d12e      	bne.n	800734e <d_unqualified_name+0x92>
 80072f0:	1c53      	adds	r3, r2, #1
 80072f2:	60c3      	str	r3, [r0, #12]
 80072f4:	7853      	ldrb	r3, [r2, #1]
 80072f6:	2b74      	cmp	r3, #116	; 0x74
 80072f8:	d05b      	beq.n	80073b2 <d_unqualified_name+0xf6>
 80072fa:	2b42      	cmp	r3, #66	; 0x42
 80072fc:	f04f 0500 	mov.w	r5, #0
 8007300:	d10c      	bne.n	800731c <d_unqualified_name+0x60>
 8007302:	4629      	mov	r1, r5
 8007304:	4620      	mov	r0, r4
 8007306:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800730a:	f7f9 b9a3 	b.w	8000654 <d_abi_tags>
 800730e:	f7f9 f945 	bl	800059c <d_source_name>
 8007312:	68e3      	ldr	r3, [r4, #12]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	4605      	mov	r5, r0
 8007318:	2b42      	cmp	r3, #66	; 0x42
 800731a:	d0f2      	beq.n	8007302 <d_unqualified_name+0x46>
 800731c:	4628      	mov	r0, r5
 800731e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007320:	f7ff ff0c 	bl	800713c <d_operator_name>
 8007324:	4605      	mov	r5, r0
 8007326:	b118      	cbz	r0, 8007330 <d_unqualified_name+0x74>
 8007328:	7803      	ldrb	r3, [r0, #0]
 800732a:	2b31      	cmp	r3, #49	; 0x31
 800732c:	f000 80b2 	beq.w	8007494 <d_unqualified_name+0x1d8>
 8007330:	68e3      	ldr	r3, [r4, #12]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	e7f0      	b.n	8007318 <d_unqualified_name+0x5c>
 8007336:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007338:	b121      	cbz	r1, 8007344 <d_unqualified_name+0x88>
 800733a:	7808      	ldrb	r0, [r1, #0]
 800733c:	2800      	cmp	r0, #0
 800733e:	d06d      	beq.n	800741c <d_unqualified_name+0x160>
 8007340:	2818      	cmp	r0, #24
 8007342:	d06b      	beq.n	800741c <d_unqualified_name+0x160>
 8007344:	2b43      	cmp	r3, #67	; 0x43
 8007346:	f000 80c2 	beq.w	80074ce <d_unqualified_name+0x212>
 800734a:	2b44      	cmp	r3, #68	; 0x44
 800734c:	d070      	beq.n	8007430 <d_unqualified_name+0x174>
 800734e:	2000      	movs	r0, #0
 8007350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007352:	1c53      	adds	r3, r2, #1
 8007354:	60c3      	str	r3, [r0, #12]
 8007356:	7853      	ldrb	r3, [r2, #1]
 8007358:	2b6c      	cmp	r3, #108	; 0x6c
 800735a:	d1ce      	bne.n	80072fa <d_unqualified_name+0x3e>
 800735c:	3202      	adds	r2, #2
 800735e:	60c2      	str	r2, [r0, #12]
 8007360:	f7ff ff6a 	bl	8007238 <d_parmlist>
 8007364:	4606      	mov	r6, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	f000 80da 	beq.w	8007520 <d_unqualified_name+0x264>
 800736c:	68e2      	ldr	r2, [r4, #12]
 800736e:	7813      	ldrb	r3, [r2, #0]
 8007370:	2b45      	cmp	r3, #69	; 0x45
 8007372:	d1c2      	bne.n	80072fa <d_unqualified_name+0x3e>
 8007374:	3201      	adds	r2, #1
 8007376:	60e2      	str	r2, [r4, #12]
 8007378:	4620      	mov	r0, r4
 800737a:	f7f9 f8d5 	bl	8000528 <d_compact_number>
 800737e:	2800      	cmp	r0, #0
 8007380:	db13      	blt.n	80073aa <d_unqualified_name+0xee>
 8007382:	6963      	ldr	r3, [r4, #20]
 8007384:	69a2      	ldr	r2, [r4, #24]
 8007386:	4293      	cmp	r3, r2
 8007388:	da0f      	bge.n	80073aa <d_unqualified_name+0xee>
 800738a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	0092      	lsls	r2, r2, #2
 8007392:	3301      	adds	r3, #1
 8007394:	188d      	adds	r5, r1, r2
 8007396:	6163      	str	r3, [r4, #20]
 8007398:	d007      	beq.n	80073aa <d_unqualified_name+0xee>
 800739a:	2344      	movs	r3, #68	; 0x44
 800739c:	548b      	strb	r3, [r1, r2]
 800739e:	606e      	str	r6, [r5, #4]
 80073a0:	60a8      	str	r0, [r5, #8]
 80073a2:	6a23      	ldr	r3, [r4, #32]
 80073a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80073a6:	4293      	cmp	r3, r2
 80073a8:	db1c      	blt.n	80073e4 <d_unqualified_name+0x128>
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	2500      	movs	r5, #0
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	e7b2      	b.n	8007318 <d_unqualified_name+0x5c>
 80073b2:	3202      	adds	r2, #2
 80073b4:	60c2      	str	r2, [r0, #12]
 80073b6:	f7f9 f8b7 	bl	8000528 <d_compact_number>
 80073ba:	2800      	cmp	r0, #0
 80073bc:	dbf5      	blt.n	80073aa <d_unqualified_name+0xee>
 80073be:	6963      	ldr	r3, [r4, #20]
 80073c0:	69a2      	ldr	r2, [r4, #24]
 80073c2:	4293      	cmp	r3, r2
 80073c4:	daf1      	bge.n	80073aa <d_unqualified_name+0xee>
 80073c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80073ca:	6921      	ldr	r1, [r4, #16]
 80073cc:	0092      	lsls	r2, r2, #2
 80073ce:	3301      	adds	r3, #1
 80073d0:	188d      	adds	r5, r1, r2
 80073d2:	6163      	str	r3, [r4, #20]
 80073d4:	d0e9      	beq.n	80073aa <d_unqualified_name+0xee>
 80073d6:	2346      	movs	r3, #70	; 0x46
 80073d8:	548b      	strb	r3, [r1, r2]
 80073da:	6068      	str	r0, [r5, #4]
 80073dc:	6a23      	ldr	r3, [r4, #32]
 80073de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80073e0:	4293      	cmp	r3, r2
 80073e2:	dae2      	bge.n	80073aa <d_unqualified_name+0xee>
 80073e4:	69e2      	ldr	r2, [r4, #28]
 80073e6:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80073ea:	3301      	adds	r3, #1
 80073ec:	68e2      	ldr	r2, [r4, #12]
 80073ee:	6223      	str	r3, [r4, #32]
 80073f0:	7813      	ldrb	r3, [r2, #0]
 80073f2:	e791      	b.n	8007318 <d_unqualified_name+0x5c>
 80073f4:	3201      	adds	r2, #1
 80073f6:	60c2      	str	r2, [r0, #12]
 80073f8:	f7f9 f8d0 	bl	800059c <d_source_name>
 80073fc:	4605      	mov	r5, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	d0a5      	beq.n	800734e <d_unqualified_name+0x92>
 8007402:	68e2      	ldr	r2, [r4, #12]
 8007404:	7813      	ldrb	r3, [r2, #0]
 8007406:	2b5f      	cmp	r3, #95	; 0x5f
 8007408:	d186      	bne.n	8007318 <d_unqualified_name+0x5c>
 800740a:	4620      	mov	r0, r4
 800740c:	3201      	adds	r2, #1
 800740e:	f840 2f0c 	str.w	r2, [r0, #12]!
 8007412:	f7f9 f843 	bl	800049c <d_number.isra.0>
 8007416:	2800      	cmp	r0, #0
 8007418:	da8a      	bge.n	8007330 <d_unqualified_name+0x74>
 800741a:	e798      	b.n	800734e <d_unqualified_name+0x92>
 800741c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800741e:	688b      	ldr	r3, [r1, #8]
 8007420:	4403      	add	r3, r0
 8007422:	6323      	str	r3, [r4, #48]	; 0x30
 8007424:	7813      	ldrb	r3, [r2, #0]
 8007426:	2b43      	cmp	r3, #67	; 0x43
 8007428:	d051      	beq.n	80074ce <d_unqualified_name+0x212>
 800742a:	2b44      	cmp	r3, #68	; 0x44
 800742c:	f47f af65 	bne.w	80072fa <d_unqualified_name+0x3e>
 8007430:	7853      	ldrb	r3, [r2, #1]
 8007432:	3b30      	subs	r3, #48	; 0x30
 8007434:	2b05      	cmp	r3, #5
 8007436:	d88a      	bhi.n	800734e <d_unqualified_name+0x92>
 8007438:	a001      	add	r0, pc, #4	; (adr r0, 8007440 <d_unqualified_name+0x184>)
 800743a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007489 	.word	0x08007489
 8007444:	08007459 	.word	0x08007459
 8007448:	08007485 	.word	0x08007485
 800744c:	0800734f 	.word	0x0800734f
 8007450:	08007491 	.word	0x08007491
 8007454:	0800748d 	.word	0x0800748d
 8007458:	2702      	movs	r7, #2
 800745a:	6963      	ldr	r3, [r4, #20]
 800745c:	69a0      	ldr	r0, [r4, #24]
 800745e:	1c95      	adds	r5, r2, #2
 8007460:	4283      	cmp	r3, r0
 8007462:	60e5      	str	r5, [r4, #12]
 8007464:	da30      	bge.n	80074c8 <d_unqualified_name+0x20c>
 8007466:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800746a:	6926      	ldr	r6, [r4, #16]
 800746c:	0080      	lsls	r0, r0, #2
 800746e:	3301      	adds	r3, #1
 8007470:	1835      	adds	r5, r6, r0
 8007472:	6163      	str	r3, [r4, #20]
 8007474:	d028      	beq.n	80074c8 <d_unqualified_name+0x20c>
 8007476:	b339      	cbz	r1, 80074c8 <d_unqualified_name+0x20c>
 8007478:	2308      	movs	r3, #8
 800747a:	5433      	strb	r3, [r6, r0]
 800747c:	712f      	strb	r7, [r5, #4]
 800747e:	60a9      	str	r1, [r5, #8]
 8007480:	7893      	ldrb	r3, [r2, #2]
 8007482:	e749      	b.n	8007318 <d_unqualified_name+0x5c>
 8007484:	2703      	movs	r7, #3
 8007486:	e7e8      	b.n	800745a <d_unqualified_name+0x19e>
 8007488:	2701      	movs	r7, #1
 800748a:	e7e6      	b.n	800745a <d_unqualified_name+0x19e>
 800748c:	2705      	movs	r7, #5
 800748e:	e7e4      	b.n	800745a <d_unqualified_name+0x19e>
 8007490:	2704      	movs	r7, #4
 8007492:	e7e2      	b.n	800745a <d_unqualified_name+0x19e>
 8007494:	6842      	ldr	r2, [r0, #4]
 8007496:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8007498:	6893      	ldr	r3, [r2, #8]
 800749a:	6810      	ldr	r0, [r2, #0]
 800749c:	4922      	ldr	r1, [pc, #136]	; (8007528 <d_unqualified_name+0x26c>)
 800749e:	4433      	add	r3, r6
 80074a0:	3307      	adds	r3, #7
 80074a2:	6323      	str	r3, [r4, #48]	; 0x30
 80074a4:	f001 f83c 	bl	8008520 <strcmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f47f af41 	bne.w	8007330 <d_unqualified_name+0x74>
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7f9 f874 	bl	800059c <d_source_name>
 80074b4:	462a      	mov	r2, r5
 80074b6:	4603      	mov	r3, r0
 80074b8:	2135      	movs	r1, #53	; 0x35
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7f8 fea8 	bl	8000210 <d_make_comp>
 80074c0:	68e3      	ldr	r3, [r4, #12]
 80074c2:	4605      	mov	r5, r0
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	e727      	b.n	8007318 <d_unqualified_name+0x5c>
 80074c8:	7893      	ldrb	r3, [r2, #2]
 80074ca:	2500      	movs	r5, #0
 80074cc:	e724      	b.n	8007318 <d_unqualified_name+0x5c>
 80074ce:	7853      	ldrb	r3, [r2, #1]
 80074d0:	3b31      	subs	r3, #49	; 0x31
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	f63f af3b 	bhi.w	800734e <d_unqualified_name+0x92>
 80074d8:	e8df f003 	tbb	[pc, r3]
 80074dc:	1e20031a 	.word	0x1e20031a
 80074e0:	1c          	.byte	0x1c
 80074e1:	00          	.byte	0x00
 80074e2:	2702      	movs	r7, #2
 80074e4:	6963      	ldr	r3, [r4, #20]
 80074e6:	69a0      	ldr	r0, [r4, #24]
 80074e8:	1c95      	adds	r5, r2, #2
 80074ea:	4283      	cmp	r3, r0
 80074ec:	60e5      	str	r5, [r4, #12]
 80074ee:	daeb      	bge.n	80074c8 <d_unqualified_name+0x20c>
 80074f0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80074f4:	6926      	ldr	r6, [r4, #16]
 80074f6:	0080      	lsls	r0, r0, #2
 80074f8:	3301      	adds	r3, #1
 80074fa:	1835      	adds	r5, r6, r0
 80074fc:	6163      	str	r3, [r4, #20]
 80074fe:	d0e3      	beq.n	80074c8 <d_unqualified_name+0x20c>
 8007500:	2900      	cmp	r1, #0
 8007502:	d0e1      	beq.n	80074c8 <d_unqualified_name+0x20c>
 8007504:	2307      	movs	r3, #7
 8007506:	5433      	strb	r3, [r6, r0]
 8007508:	712f      	strb	r7, [r5, #4]
 800750a:	60a9      	str	r1, [r5, #8]
 800750c:	7893      	ldrb	r3, [r2, #2]
 800750e:	e703      	b.n	8007318 <d_unqualified_name+0x5c>
 8007510:	2701      	movs	r7, #1
 8007512:	e7e7      	b.n	80074e4 <d_unqualified_name+0x228>
 8007514:	2705      	movs	r7, #5
 8007516:	e7e5      	b.n	80074e4 <d_unqualified_name+0x228>
 8007518:	2704      	movs	r7, #4
 800751a:	e7e3      	b.n	80074e4 <d_unqualified_name+0x228>
 800751c:	2703      	movs	r7, #3
 800751e:	e7e1      	b.n	80074e4 <d_unqualified_name+0x228>
 8007520:	68e3      	ldr	r3, [r4, #12]
 8007522:	4605      	mov	r5, r0
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	e6f7      	b.n	8007318 <d_unqualified_name+0x5c>
 8007528:	0801bf04 	.word	0x0801bf04

0800752c <d_bare_function_type>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	68c3      	ldr	r3, [r0, #12]
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	2a4a      	cmp	r2, #74	; 0x4a
 8007534:	4604      	mov	r4, r0
 8007536:	d00d      	beq.n	8007554 <d_bare_function_type+0x28>
 8007538:	b971      	cbnz	r1, 8007558 <d_bare_function_type+0x2c>
 800753a:	460d      	mov	r5, r1
 800753c:	4620      	mov	r0, r4
 800753e:	f7ff fe7b 	bl	8007238 <d_parmlist>
 8007542:	b178      	cbz	r0, 8007564 <d_bare_function_type+0x38>
 8007544:	4603      	mov	r3, r0
 8007546:	462a      	mov	r2, r5
 8007548:	4620      	mov	r0, r4
 800754a:	2129      	movs	r1, #41	; 0x29
 800754c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007550:	f7f8 be5e 	b.w	8000210 <d_make_comp>
 8007554:	3301      	adds	r3, #1
 8007556:	60c3      	str	r3, [r0, #12]
 8007558:	4620      	mov	r0, r4
 800755a:	f7ff fa31 	bl	80069c0 <d_type>
 800755e:	4605      	mov	r5, r0
 8007560:	2800      	cmp	r0, #0
 8007562:	d1eb      	bne.n	800753c <d_bare_function_type+0x10>
 8007564:	2000      	movs	r0, #0
 8007566:	bd70      	pop	{r4, r5, r6, pc}

08007568 <d_function_type>:
 8007568:	68c3      	ldr	r3, [r0, #12]
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	2a46      	cmp	r2, #70	; 0x46
 800756e:	d001      	beq.n	8007574 <d_function_type+0xc>
 8007570:	2000      	movs	r0, #0
 8007572:	4770      	bx	lr
 8007574:	b510      	push	{r4, lr}
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	60c2      	str	r2, [r0, #12]
 800757a:	785a      	ldrb	r2, [r3, #1]
 800757c:	2a59      	cmp	r2, #89	; 0x59
 800757e:	bf04      	itt	eq
 8007580:	3302      	addeq	r3, #2
 8007582:	60c3      	streq	r3, [r0, #12]
 8007584:	2101      	movs	r1, #1
 8007586:	4604      	mov	r4, r0
 8007588:	f7ff ffd0 	bl	800752c <d_bare_function_type>
 800758c:	4601      	mov	r1, r0
 800758e:	4620      	mov	r0, r4
 8007590:	f7f8 fee6 	bl	8000360 <d_ref_qualifier>
 8007594:	68e3      	ldr	r3, [r4, #12]
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	2a45      	cmp	r2, #69	; 0x45
 800759a:	d001      	beq.n	80075a0 <d_function_type+0x38>
 800759c:	2000      	movs	r0, #0
 800759e:	bd10      	pop	{r4, pc}
 80075a0:	3301      	adds	r3, #1
 80075a2:	60e3      	str	r3, [r4, #12]
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	bf00      	nop

080075a8 <d_name>:
 80075a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075ac:	68c2      	ldr	r2, [r0, #12]
 80075ae:	7813      	ldrb	r3, [r2, #0]
 80075b0:	3b4e      	subs	r3, #78	; 0x4e
 80075b2:	b083      	sub	sp, #12
 80075b4:	4605      	mov	r5, r0
 80075b6:	2b0c      	cmp	r3, #12
 80075b8:	d869      	bhi.n	800768e <d_name+0xe6>
 80075ba:	e8df f003 	tbb	[pc, r3]
 80075be:	681b      	.short	0x681b
 80075c0:	59686868 	.word	0x59686868
 80075c4:	68681668 	.word	0x68681668
 80075c8:	6868      	.short	0x6868
 80075ca:	07          	.byte	0x07
 80075cb:	00          	.byte	0x00
 80075cc:	3201      	adds	r2, #1
 80075ce:	2100      	movs	r1, #0
 80075d0:	60c2      	str	r2, [r0, #12]
 80075d2:	f000 f9a3 	bl	800791c <d_encoding>
 80075d6:	68eb      	ldr	r3, [r5, #12]
 80075d8:	7819      	ldrb	r1, [r3, #0]
 80075da:	2945      	cmp	r1, #69	; 0x45
 80075dc:	4606      	mov	r6, r0
 80075de:	f000 809c 	beq.w	800771a <d_name+0x172>
 80075e2:	2000      	movs	r0, #0
 80075e4:	b003      	add	sp, #12
 80075e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075ea:	f7ff fe67 	bl	80072bc <d_unqualified_name>
 80075ee:	b003      	add	sp, #12
 80075f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075f4:	3201      	adds	r2, #1
 80075f6:	60c2      	str	r2, [r0, #12]
 80075f8:	a901      	add	r1, sp, #4
 80075fa:	2201      	movs	r2, #1
 80075fc:	f7f8 fe54 	bl	80002a8 <d_cv_qualifiers>
 8007600:	4681      	mov	r9, r0
 8007602:	2800      	cmp	r0, #0
 8007604:	d0ed      	beq.n	80075e2 <d_name+0x3a>
 8007606:	2100      	movs	r1, #0
 8007608:	4628      	mov	r0, r5
 800760a:	f7f8 fea9 	bl	8000360 <d_ref_qualifier>
 800760e:	68ea      	ldr	r2, [r5, #12]
 8007610:	4eb4      	ldr	r6, [pc, #720]	; (80078e4 <d_name+0x33c>)
 8007612:	7814      	ldrb	r4, [r2, #0]
 8007614:	4680      	mov	r8, r0
 8007616:	2700      	movs	r7, #0
 8007618:	2c00      	cmp	r4, #0
 800761a:	f000 80ee 	beq.w	80077fa <d_name+0x252>
 800761e:	2c44      	cmp	r4, #68	; 0x44
 8007620:	f000 80d7 	beq.w	80077d2 <d_name+0x22a>
 8007624:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b1c      	cmp	r3, #28
 800762c:	f240 80ad 	bls.w	800778a <d_name+0x1e2>
 8007630:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b19      	cmp	r3, #25
 8007638:	f240 80ac 	bls.w	8007794 <d_name+0x1ec>
 800763c:	2c55      	cmp	r4, #85	; 0x55
 800763e:	f000 80e2 	beq.w	8007806 <d_name+0x25e>
 8007642:	2c53      	cmp	r4, #83	; 0x53
 8007644:	f000 80e8 	beq.w	8007818 <d_name+0x270>
 8007648:	2c49      	cmp	r4, #73	; 0x49
 800764a:	f000 80de 	beq.w	800780a <d_name+0x262>
 800764e:	2c54      	cmp	r4, #84	; 0x54
 8007650:	f000 8119 	beq.w	8007886 <d_name+0x2de>
 8007654:	2c45      	cmp	r4, #69	; 0x45
 8007656:	f000 814b 	beq.w	80078f0 <d_name+0x348>
 800765a:	2c4d      	cmp	r4, #77	; 0x4d
 800765c:	f040 80cd 	bne.w	80077fa <d_name+0x252>
 8007660:	2f00      	cmp	r7, #0
 8007662:	f000 80ca 	beq.w	80077fa <d_name+0x252>
 8007666:	1c53      	adds	r3, r2, #1
 8007668:	60eb      	str	r3, [r5, #12]
 800766a:	7854      	ldrb	r4, [r2, #1]
 800766c:	461a      	mov	r2, r3
 800766e:	e7d3      	b.n	8007618 <d_name+0x70>
 8007670:	7853      	ldrb	r3, [r2, #1]
 8007672:	2b74      	cmp	r3, #116	; 0x74
 8007674:	d029      	beq.n	80076ca <d_name+0x122>
 8007676:	2100      	movs	r1, #0
 8007678:	f7f9 f806 	bl	8000688 <d_substitution>
 800767c:	68eb      	ldr	r3, [r5, #12]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b49      	cmp	r3, #73	; 0x49
 8007682:	4604      	mov	r4, r0
 8007684:	d047      	beq.n	8007716 <d_name+0x16e>
 8007686:	4620      	mov	r0, r4
 8007688:	b003      	add	sp, #12
 800768a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800768e:	f7ff fe15 	bl	80072bc <d_unqualified_name>
 8007692:	68eb      	ldr	r3, [r5, #12]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b49      	cmp	r3, #73	; 0x49
 8007698:	4604      	mov	r4, r0
 800769a:	d1f4      	bne.n	8007686 <d_name+0xde>
 800769c:	2800      	cmp	r0, #0
 800769e:	d0a0      	beq.n	80075e2 <d_name+0x3a>
 80076a0:	6a2b      	ldr	r3, [r5, #32]
 80076a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80076a4:	4293      	cmp	r3, r2
 80076a6:	da9c      	bge.n	80075e2 <d_name+0x3a>
 80076a8:	69e9      	ldr	r1, [r5, #28]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80076b0:	4628      	mov	r0, r5
 80076b2:	622a      	str	r2, [r5, #32]
 80076b4:	f7fc fca8 	bl	8004008 <d_template_args>
 80076b8:	4622      	mov	r2, r4
 80076ba:	4603      	mov	r3, r0
 80076bc:	2104      	movs	r1, #4
 80076be:	4628      	mov	r0, r5
 80076c0:	f7f8 fda6 	bl	8000210 <d_make_comp>
 80076c4:	b003      	add	sp, #12
 80076c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076ca:	6943      	ldr	r3, [r0, #20]
 80076cc:	6981      	ldr	r1, [r0, #24]
 80076ce:	3202      	adds	r2, #2
 80076d0:	428b      	cmp	r3, r1
 80076d2:	60c2      	str	r2, [r0, #12]
 80076d4:	f2c0 80aa 	blt.w	800782c <d_name+0x284>
 80076d8:	2400      	movs	r4, #0
 80076da:	4628      	mov	r0, r5
 80076dc:	f7ff fdee 	bl	80072bc <d_unqualified_name>
 80076e0:	4622      	mov	r2, r4
 80076e2:	4603      	mov	r3, r0
 80076e4:	2101      	movs	r1, #1
 80076e6:	4628      	mov	r0, r5
 80076e8:	f7f8 fd92 	bl	8000210 <d_make_comp>
 80076ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80076ee:	68ea      	ldr	r2, [r5, #12]
 80076f0:	3303      	adds	r3, #3
 80076f2:	632b      	str	r3, [r5, #48]	; 0x30
 80076f4:	7813      	ldrb	r3, [r2, #0]
 80076f6:	2b49      	cmp	r3, #73	; 0x49
 80076f8:	4604      	mov	r4, r0
 80076fa:	d1c4      	bne.n	8007686 <d_name+0xde>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f43f af70 	beq.w	80075e2 <d_name+0x3a>
 8007702:	6a2b      	ldr	r3, [r5, #32]
 8007704:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8007706:	4293      	cmp	r3, r2
 8007708:	f6bf af6b 	bge.w	80075e2 <d_name+0x3a>
 800770c:	69e9      	ldr	r1, [r5, #28]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007714:	622a      	str	r2, [r5, #32]
 8007716:	4628      	mov	r0, r5
 8007718:	e7cc      	b.n	80076b4 <d_name+0x10c>
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	60ea      	str	r2, [r5, #12]
 800771e:	7859      	ldrb	r1, [r3, #1]
 8007720:	2973      	cmp	r1, #115	; 0x73
 8007722:	f000 8098 	beq.w	8007856 <d_name+0x2ae>
 8007726:	2964      	cmp	r1, #100	; 0x64
 8007728:	f000 80b1 	beq.w	800788e <d_name+0x2e6>
 800772c:	4628      	mov	r0, r5
 800772e:	f7ff ff3b 	bl	80075a8 <d_name>
 8007732:	4604      	mov	r4, r0
 8007734:	2800      	cmp	r0, #0
 8007736:	f000 808a 	beq.w	800784e <d_name+0x2a6>
 800773a:	7803      	ldrb	r3, [r0, #0]
 800773c:	2b44      	cmp	r3, #68	; 0x44
 800773e:	f000 8086 	beq.w	800784e <d_name+0x2a6>
 8007742:	2b46      	cmp	r3, #70	; 0x46
 8007744:	f000 8083 	beq.w	800784e <d_name+0x2a6>
 8007748:	f04f 37ff 	mov.w	r7, #4294967295
 800774c:	68eb      	ldr	r3, [r5, #12]
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	2a5f      	cmp	r2, #95	; 0x5f
 8007752:	f000 80b3 	beq.w	80078bc <d_name+0x314>
 8007756:	1c7b      	adds	r3, r7, #1
 8007758:	d079      	beq.n	800784e <d_name+0x2a6>
 800775a:	696b      	ldr	r3, [r5, #20]
 800775c:	69aa      	ldr	r2, [r5, #24]
 800775e:	4293      	cmp	r3, r2
 8007760:	da77      	bge.n	8007852 <d_name+0x2aa>
 8007762:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007766:	6929      	ldr	r1, [r5, #16]
 8007768:	3301      	adds	r3, #1
 800776a:	0092      	lsls	r2, r2, #2
 800776c:	616b      	str	r3, [r5, #20]
 800776e:	188b      	adds	r3, r1, r2
 8007770:	d003      	beq.n	800777a <d_name+0x1d2>
 8007772:	2045      	movs	r0, #69	; 0x45
 8007774:	5488      	strb	r0, [r1, r2]
 8007776:	609f      	str	r7, [r3, #8]
 8007778:	605c      	str	r4, [r3, #4]
 800777a:	4632      	mov	r2, r6
 800777c:	4628      	mov	r0, r5
 800777e:	2102      	movs	r1, #2
 8007780:	f7f8 fd46 	bl	8000210 <d_make_comp>
 8007784:	b003      	add	sp, #12
 8007786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800778a:	fa26 f303 	lsr.w	r3, r6, r3
 800778e:	07d9      	lsls	r1, r3, #31
 8007790:	f57f af4e 	bpl.w	8007630 <d_name+0x88>
 8007794:	4628      	mov	r0, r5
 8007796:	f7ff fd91 	bl	80072bc <d_unqualified_name>
 800779a:	b34f      	cbz	r7, 80077f0 <d_name+0x248>
 800779c:	2101      	movs	r1, #1
 800779e:	4603      	mov	r3, r0
 80077a0:	463a      	mov	r2, r7
 80077a2:	4628      	mov	r0, r5
 80077a4:	f7f8 fd34 	bl	8000210 <d_make_comp>
 80077a8:	4607      	mov	r7, r0
 80077aa:	2c53      	cmp	r4, #83	; 0x53
 80077ac:	d01d      	beq.n	80077ea <d_name+0x242>
 80077ae:	68ea      	ldr	r2, [r5, #12]
 80077b0:	7814      	ldrb	r4, [r2, #0]
 80077b2:	2c45      	cmp	r4, #69	; 0x45
 80077b4:	f43f af36 	beq.w	8007624 <d_name+0x7c>
 80077b8:	b1ff      	cbz	r7, 80077fa <d_name+0x252>
 80077ba:	6a2b      	ldr	r3, [r5, #32]
 80077bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80077be:	4293      	cmp	r3, r2
 80077c0:	da1b      	bge.n	80077fa <d_name+0x252>
 80077c2:	69ea      	ldr	r2, [r5, #28]
 80077c4:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 80077c8:	3301      	adds	r3, #1
 80077ca:	68ea      	ldr	r2, [r5, #12]
 80077cc:	622b      	str	r3, [r5, #32]
 80077ce:	7814      	ldrb	r4, [r2, #0]
 80077d0:	e722      	b.n	8007618 <d_name+0x70>
 80077d2:	7853      	ldrb	r3, [r2, #1]
 80077d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80077d8:	2b54      	cmp	r3, #84	; 0x54
 80077da:	4628      	mov	r0, r5
 80077dc:	d00a      	beq.n	80077f4 <d_name+0x24c>
 80077de:	f7ff fd6d 	bl	80072bc <d_unqualified_name>
 80077e2:	2f00      	cmp	r7, #0
 80077e4:	d1da      	bne.n	800779c <d_name+0x1f4>
 80077e6:	4607      	mov	r7, r0
 80077e8:	e7e1      	b.n	80077ae <d_name+0x206>
 80077ea:	68ea      	ldr	r2, [r5, #12]
 80077ec:	7814      	ldrb	r4, [r2, #0]
 80077ee:	e713      	b.n	8007618 <d_name+0x70>
 80077f0:	4607      	mov	r7, r0
 80077f2:	e7da      	b.n	80077aa <d_name+0x202>
 80077f4:	f7ff f8e4 	bl	80069c0 <d_type>
 80077f8:	e7f3      	b.n	80077e2 <d_name+0x23a>
 80077fa:	2000      	movs	r0, #0
 80077fc:	f8c9 0000 	str.w	r0, [r9]
 8007800:	b003      	add	sp, #12
 8007802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007806:	4628      	mov	r0, r5
 8007808:	e7e9      	b.n	80077de <d_name+0x236>
 800780a:	2f00      	cmp	r7, #0
 800780c:	d0f5      	beq.n	80077fa <d_name+0x252>
 800780e:	4628      	mov	r0, r5
 8007810:	f7fc fbfa 	bl	8004008 <d_template_args>
 8007814:	2104      	movs	r1, #4
 8007816:	e7c2      	b.n	800779e <d_name+0x1f6>
 8007818:	2101      	movs	r1, #1
 800781a:	4628      	mov	r0, r5
 800781c:	f7f8 ff34 	bl	8000688 <d_substitution>
 8007820:	2f00      	cmp	r7, #0
 8007822:	d1bb      	bne.n	800779c <d_name+0x1f4>
 8007824:	68ea      	ldr	r2, [r5, #12]
 8007826:	4607      	mov	r7, r0
 8007828:	7814      	ldrb	r4, [r2, #0]
 800782a:	e6f5      	b.n	8007618 <d_name+0x70>
 800782c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007830:	6900      	ldr	r0, [r0, #16]
 8007832:	0089      	lsls	r1, r1, #2
 8007834:	3301      	adds	r3, #1
 8007836:	1842      	adds	r2, r0, r1
 8007838:	616b      	str	r3, [r5, #20]
 800783a:	f43f af4d 	beq.w	80076d8 <d_name+0x130>
 800783e:	2300      	movs	r3, #0
 8007840:	5443      	strb	r3, [r0, r1]
 8007842:	4c29      	ldr	r4, [pc, #164]	; (80078e8 <d_name+0x340>)
 8007844:	6054      	str	r4, [r2, #4]
 8007846:	2303      	movs	r3, #3
 8007848:	6093      	str	r3, [r2, #8]
 800784a:	4614      	mov	r4, r2
 800784c:	e745      	b.n	80076da <d_name+0x132>
 800784e:	4623      	mov	r3, r4
 8007850:	e793      	b.n	800777a <d_name+0x1d2>
 8007852:	2300      	movs	r3, #0
 8007854:	e791      	b.n	800777a <d_name+0x1d2>
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	60ea      	str	r2, [r5, #12]
 800785a:	789a      	ldrb	r2, [r3, #2]
 800785c:	2a5f      	cmp	r2, #95	; 0x5f
 800785e:	d037      	beq.n	80078d0 <d_name+0x328>
 8007860:	696b      	ldr	r3, [r5, #20]
 8007862:	69aa      	ldr	r2, [r5, #24]
 8007864:	4293      	cmp	r3, r2
 8007866:	daf4      	bge.n	8007852 <d_name+0x2aa>
 8007868:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800786c:	6929      	ldr	r1, [r5, #16]
 800786e:	3301      	adds	r3, #1
 8007870:	0092      	lsls	r2, r2, #2
 8007872:	616b      	str	r3, [r5, #20]
 8007874:	188b      	adds	r3, r1, r2
 8007876:	d0ec      	beq.n	8007852 <d_name+0x2aa>
 8007878:	2400      	movs	r4, #0
 800787a:	548c      	strb	r4, [r1, r2]
 800787c:	481b      	ldr	r0, [pc, #108]	; (80078ec <d_name+0x344>)
 800787e:	6058      	str	r0, [r3, #4]
 8007880:	220e      	movs	r2, #14
 8007882:	609a      	str	r2, [r3, #8]
 8007884:	e779      	b.n	800777a <d_name+0x1d2>
 8007886:	4628      	mov	r0, r5
 8007888:	f7f8 fe66 	bl	8000558 <d_template_param>
 800788c:	e7a9      	b.n	80077e2 <d_name+0x23a>
 800788e:	3302      	adds	r3, #2
 8007890:	60eb      	str	r3, [r5, #12]
 8007892:	4628      	mov	r0, r5
 8007894:	f7f8 fe48 	bl	8000528 <d_compact_number>
 8007898:	1e07      	subs	r7, r0, #0
 800789a:	f6ff aea2 	blt.w	80075e2 <d_name+0x3a>
 800789e:	4628      	mov	r0, r5
 80078a0:	f7ff fe82 	bl	80075a8 <d_name>
 80078a4:	4604      	mov	r4, r0
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f43f af57 	beq.w	800775a <d_name+0x1b2>
 80078ac:	7803      	ldrb	r3, [r0, #0]
 80078ae:	2b44      	cmp	r3, #68	; 0x44
 80078b0:	f43f af53 	beq.w	800775a <d_name+0x1b2>
 80078b4:	2b46      	cmp	r3, #70	; 0x46
 80078b6:	f43f af50 	beq.w	800775a <d_name+0x1b2>
 80078ba:	e747      	b.n	800774c <d_name+0x1a4>
 80078bc:	4628      	mov	r0, r5
 80078be:	3301      	adds	r3, #1
 80078c0:	f840 3f0c 	str.w	r3, [r0, #12]!
 80078c4:	f7f8 fdea 	bl	800049c <d_number.isra.0>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	f6bf af44 	bge.w	8007756 <d_name+0x1ae>
 80078ce:	e688      	b.n	80075e2 <d_name+0x3a>
 80078d0:	4628      	mov	r0, r5
 80078d2:	3303      	adds	r3, #3
 80078d4:	f840 3f0c 	str.w	r3, [r0, #12]!
 80078d8:	f7f8 fde0 	bl	800049c <d_number.isra.0>
 80078dc:	2800      	cmp	r0, #0
 80078de:	dabf      	bge.n	8007860 <d_name+0x2b8>
 80078e0:	e67f      	b.n	80075e2 <d_name+0x3a>
 80078e2:	bf00      	nop
 80078e4:	100803ff 	.word	0x100803ff
 80078e8:	0801bf18 	.word	0x0801bf18
 80078ec:	0801bf08 	.word	0x0801bf08
 80078f0:	f8c9 7000 	str.w	r7, [r9]
 80078f4:	2f00      	cmp	r7, #0
 80078f6:	f43f ae74 	beq.w	80075e2 <d_name+0x3a>
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	d004      	beq.n	800790a <d_name+0x362>
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	f8c8 3004 	str.w	r3, [r8, #4]
 8007906:	f8cd 8004 	str.w	r8, [sp, #4]
 800790a:	68eb      	ldr	r3, [r5, #12]
 800790c:	781a      	ldrb	r2, [r3, #0]
 800790e:	2a45      	cmp	r2, #69	; 0x45
 8007910:	f47f ae67 	bne.w	80075e2 <d_name+0x3a>
 8007914:	3301      	adds	r3, #1
 8007916:	60eb      	str	r3, [r5, #12]
 8007918:	9801      	ldr	r0, [sp, #4]
 800791a:	e668      	b.n	80075ee <d_name+0x46>

0800791c <d_encoding>:
 800791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	68c3      	ldr	r3, [r0, #12]
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	2a47      	cmp	r2, #71	; 0x47
 8007926:	4605      	mov	r5, r0
 8007928:	d03b      	beq.n	80079a2 <d_encoding+0x86>
 800792a:	2a54      	cmp	r2, #84	; 0x54
 800792c:	d039      	beq.n	80079a2 <d_encoding+0x86>
 800792e:	460e      	mov	r6, r1
 8007930:	f7ff fe3a 	bl	80075a8 <d_name>
 8007934:	4604      	mov	r4, r0
 8007936:	b328      	cbz	r0, 8007984 <d_encoding+0x68>
 8007938:	b116      	cbz	r6, 8007940 <d_encoding+0x24>
 800793a:	68ab      	ldr	r3, [r5, #8]
 800793c:	07db      	lsls	r3, r3, #31
 800793e:	d525      	bpl.n	800798c <d_encoding+0x70>
 8007940:	68eb      	ldr	r3, [r5, #12]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b353      	cbz	r3, 800799c <d_encoding+0x80>
 8007946:	2b45      	cmp	r3, #69	; 0x45
 8007948:	d028      	beq.n	800799c <d_encoding+0x80>
 800794a:	4621      	mov	r1, r4
 800794c:	780b      	ldrb	r3, [r1, #0]
 800794e:	2b04      	cmp	r3, #4
 8007950:	f1a3 021c 	sub.w	r2, r3, #28
 8007954:	f000 811a 	beq.w	8007b8c <d_encoding+0x270>
 8007958:	f0c0 8116 	bcc.w	8007b88 <d_encoding+0x26c>
 800795c:	2a04      	cmp	r2, #4
 800795e:	f200 8113 	bhi.w	8007b88 <d_encoding+0x26c>
 8007962:	6849      	ldr	r1, [r1, #4]
 8007964:	2900      	cmp	r1, #0
 8007966:	d1f1      	bne.n	800794c <d_encoding+0x30>
 8007968:	4628      	mov	r0, r5
 800796a:	f7ff fddf 	bl	800752c <d_bare_function_type>
 800796e:	4622      	mov	r2, r4
 8007970:	4603      	mov	r3, r0
 8007972:	2103      	movs	r1, #3
 8007974:	4628      	mov	r0, r5
 8007976:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797a:	f7f8 bc49 	b.w	8000210 <d_make_comp>
 800797e:	68eb      	ldr	r3, [r5, #12]
 8007980:	4419      	add	r1, r3
 8007982:	60e9      	str	r1, [r5, #12]
 8007984:	2000      	movs	r0, #0
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	6864      	ldr	r4, [r4, #4]
 800798c:	7823      	ldrb	r3, [r4, #0]
 800798e:	f1a3 021c 	sub.w	r2, r3, #28
 8007992:	2a04      	cmp	r2, #4
 8007994:	d9f9      	bls.n	800798a <d_encoding+0x6e>
 8007996:	2b02      	cmp	r3, #2
 8007998:	f000 8168 	beq.w	8007c6c <d_encoding+0x350>
 800799c:	4620      	mov	r0, r4
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80079a4:	f101 0214 	add.w	r2, r1, #20
 80079a8:	632a      	str	r2, [r5, #48]	; 0x30
 80079aa:	781a      	ldrb	r2, [r3, #0]
 80079ac:	2a54      	cmp	r2, #84	; 0x54
 80079ae:	d073      	beq.n	8007a98 <d_encoding+0x17c>
 80079b0:	2a47      	cmp	r2, #71	; 0x47
 80079b2:	d1e7      	bne.n	8007984 <d_encoding+0x68>
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	60ea      	str	r2, [r5, #12]
 80079b8:	785a      	ldrb	r2, [r3, #1]
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d0e2      	beq.n	8007984 <d_encoding+0x68>
 80079be:	1c9a      	adds	r2, r3, #2
 80079c0:	60ea      	str	r2, [r5, #12]
 80079c2:	785a      	ldrb	r2, [r3, #1]
 80079c4:	3a41      	subs	r2, #65	; 0x41
 80079c6:	2a31      	cmp	r2, #49	; 0x31
 80079c8:	d8dc      	bhi.n	8007984 <d_encoding+0x68>
 80079ca:	a101      	add	r1, pc, #4	; (adr r1, 80079d0 <d_encoding+0xb4>)
 80079cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079d0:	08007d71 	.word	0x08007d71
 80079d4:	08007985 	.word	0x08007985
 80079d8:	08007985 	.word	0x08007985
 80079dc:	08007985 	.word	0x08007985
 80079e0:	08007985 	.word	0x08007985
 80079e4:	08007985 	.word	0x08007985
 80079e8:	08007985 	.word	0x08007985
 80079ec:	08007985 	.word	0x08007985
 80079f0:	08007985 	.word	0x08007985
 80079f4:	08007985 	.word	0x08007985
 80079f8:	08007985 	.word	0x08007985
 80079fc:	08007985 	.word	0x08007985
 8007a00:	08007985 	.word	0x08007985
 8007a04:	08007985 	.word	0x08007985
 8007a08:	08007985 	.word	0x08007985
 8007a0c:	08007985 	.word	0x08007985
 8007a10:	08007985 	.word	0x08007985
 8007a14:	08007d53 	.word	0x08007d53
 8007a18:	08007985 	.word	0x08007985
 8007a1c:	08007d89 	.word	0x08007d89
 8007a20:	08007985 	.word	0x08007985
 8007a24:	08007d3d 	.word	0x08007d3d
 8007a28:	08007985 	.word	0x08007985
 8007a2c:	08007985 	.word	0x08007985
 8007a30:	08007985 	.word	0x08007985
 8007a34:	08007985 	.word	0x08007985
 8007a38:	08007985 	.word	0x08007985
 8007a3c:	08007985 	.word	0x08007985
 8007a40:	08007985 	.word	0x08007985
 8007a44:	08007985 	.word	0x08007985
 8007a48:	08007985 	.word	0x08007985
 8007a4c:	08007985 	.word	0x08007985
 8007a50:	08007985 	.word	0x08007985
 8007a54:	08007985 	.word	0x08007985
 8007a58:	08007985 	.word	0x08007985
 8007a5c:	08007985 	.word	0x08007985
 8007a60:	08007985 	.word	0x08007985
 8007a64:	08007985 	.word	0x08007985
 8007a68:	08007985 	.word	0x08007985
 8007a6c:	08007985 	.word	0x08007985
 8007a70:	08007985 	.word	0x08007985
 8007a74:	08007985 	.word	0x08007985
 8007a78:	08007985 	.word	0x08007985
 8007a7c:	08007985 	.word	0x08007985
 8007a80:	08007985 	.word	0x08007985
 8007a84:	08007985 	.word	0x08007985
 8007a88:	08007985 	.word	0x08007985
 8007a8c:	08007985 	.word	0x08007985
 8007a90:	08007985 	.word	0x08007985
 8007a94:	08007c93 	.word	0x08007c93
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	60ea      	str	r2, [r5, #12]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	f43f af70 	beq.w	8007984 <d_encoding+0x68>
 8007aa4:	1c9a      	adds	r2, r3, #2
 8007aa6:	60ea      	str	r2, [r5, #12]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	3b43      	subs	r3, #67	; 0x43
 8007aac:	2b33      	cmp	r3, #51	; 0x33
 8007aae:	f63f af69 	bhi.w	8007984 <d_encoding+0x68>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <d_encoding+0x19c>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007eed 	.word	0x08007eed
 8007abc:	08007985 	.word	0x08007985
 8007ac0:	08007985 	.word	0x08007985
 8007ac4:	08007ed7 	.word	0x08007ed7
 8007ac8:	08007985 	.word	0x08007985
 8007acc:	08007ec1 	.word	0x08007ec1
 8007ad0:	08007eab 	.word	0x08007eab
 8007ad4:	08007e95 	.word	0x08007e95
 8007ad8:	08007985 	.word	0x08007985
 8007adc:	08007985 	.word	0x08007985
 8007ae0:	08007985 	.word	0x08007985
 8007ae4:	08007985 	.word	0x08007985
 8007ae8:	08007985 	.word	0x08007985
 8007aec:	08007985 	.word	0x08007985
 8007af0:	08007985 	.word	0x08007985
 8007af4:	08007985 	.word	0x08007985
 8007af8:	08007e7f 	.word	0x08007e7f
 8007afc:	08007e65 	.word	0x08007e65
 8007b00:	08007985 	.word	0x08007985
 8007b04:	08007e4b 	.word	0x08007e4b
 8007b08:	08007e0f 	.word	0x08007e0f
 8007b0c:	08007985 	.word	0x08007985
 8007b10:	08007985 	.word	0x08007985
 8007b14:	08007985 	.word	0x08007985
 8007b18:	08007985 	.word	0x08007985
 8007b1c:	08007985 	.word	0x08007985
 8007b20:	08007985 	.word	0x08007985
 8007b24:	08007985 	.word	0x08007985
 8007b28:	08007985 	.word	0x08007985
 8007b2c:	08007985 	.word	0x08007985
 8007b30:	08007985 	.word	0x08007985
 8007b34:	08007985 	.word	0x08007985
 8007b38:	08007ddb 	.word	0x08007ddb
 8007b3c:	08007985 	.word	0x08007985
 8007b40:	08007985 	.word	0x08007985
 8007b44:	08007985 	.word	0x08007985
 8007b48:	08007985 	.word	0x08007985
 8007b4c:	08007e25 	.word	0x08007e25
 8007b50:	08007985 	.word	0x08007985
 8007b54:	08007985 	.word	0x08007985
 8007b58:	08007985 	.word	0x08007985
 8007b5c:	08007985 	.word	0x08007985
 8007b60:	08007985 	.word	0x08007985
 8007b64:	08007985 	.word	0x08007985
 8007b68:	08007985 	.word	0x08007985
 8007b6c:	08007985 	.word	0x08007985
 8007b70:	08007985 	.word	0x08007985
 8007b74:	08007985 	.word	0x08007985
 8007b78:	08007985 	.word	0x08007985
 8007b7c:	08007985 	.word	0x08007985
 8007b80:	08007985 	.word	0x08007985
 8007b84:	08007db5 	.word	0x08007db5
 8007b88:	2100      	movs	r1, #0
 8007b8a:	e6ed      	b.n	8007968 <d_encoding+0x4c>
 8007b8c:	684a      	ldr	r2, [r1, #4]
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	d07d      	beq.n	8007c8e <d_encoding+0x372>
 8007b92:	7813      	ldrb	r3, [r2, #0]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	2b32      	cmp	r3, #50	; 0x32
 8007b98:	d879      	bhi.n	8007c8e <d_encoding+0x372>
 8007b9a:	a101      	add	r1, pc, #4	; (adr r1, 8007ba0 <d_encoding+0x284>)
 8007b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba0:	08007c89 	.word	0x08007c89
 8007ba4:	08007c89 	.word	0x08007c89
 8007ba8:	08007c8f 	.word	0x08007c8f
 8007bac:	08007c8f 	.word	0x08007c8f
 8007bb0:	08007c8f 	.word	0x08007c8f
 8007bb4:	08007c8f 	.word	0x08007c8f
 8007bb8:	08007b89 	.word	0x08007b89
 8007bbc:	08007b89 	.word	0x08007b89
 8007bc0:	08007c8f 	.word	0x08007c8f
 8007bc4:	08007c8f 	.word	0x08007c8f
 8007bc8:	08007c8f 	.word	0x08007c8f
 8007bcc:	08007c8f 	.word	0x08007c8f
 8007bd0:	08007c8f 	.word	0x08007c8f
 8007bd4:	08007c8f 	.word	0x08007c8f
 8007bd8:	08007c8f 	.word	0x08007c8f
 8007bdc:	08007c8f 	.word	0x08007c8f
 8007be0:	08007c8f 	.word	0x08007c8f
 8007be4:	08007c8f 	.word	0x08007c8f
 8007be8:	08007c8f 	.word	0x08007c8f
 8007bec:	08007c8f 	.word	0x08007c8f
 8007bf0:	08007c8f 	.word	0x08007c8f
 8007bf4:	08007c8f 	.word	0x08007c8f
 8007bf8:	08007c8f 	.word	0x08007c8f
 8007bfc:	08007c8f 	.word	0x08007c8f
 8007c00:	08007c8f 	.word	0x08007c8f
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007c8f 	.word	0x08007c8f
 8007c0c:	08007c8f 	.word	0x08007c8f
 8007c10:	08007c8f 	.word	0x08007c8f
 8007c14:	08007c8f 	.word	0x08007c8f
 8007c18:	08007c8f 	.word	0x08007c8f
 8007c1c:	08007c8f 	.word	0x08007c8f
 8007c20:	08007c8f 	.word	0x08007c8f
 8007c24:	08007c8f 	.word	0x08007c8f
 8007c28:	08007c8f 	.word	0x08007c8f
 8007c2c:	08007c8f 	.word	0x08007c8f
 8007c30:	08007c8f 	.word	0x08007c8f
 8007c34:	08007c8f 	.word	0x08007c8f
 8007c38:	08007c8f 	.word	0x08007c8f
 8007c3c:	08007c8f 	.word	0x08007c8f
 8007c40:	08007c8f 	.word	0x08007c8f
 8007c44:	08007c8f 	.word	0x08007c8f
 8007c48:	08007c8f 	.word	0x08007c8f
 8007c4c:	08007c8f 	.word	0x08007c8f
 8007c50:	08007c8f 	.word	0x08007c8f
 8007c54:	08007c8f 	.word	0x08007c8f
 8007c58:	08007c8f 	.word	0x08007c8f
 8007c5c:	08007c8f 	.word	0x08007c8f
 8007c60:	08007c8f 	.word	0x08007c8f
 8007c64:	08007c8f 	.word	0x08007c8f
 8007c68:	08007b89 	.word	0x08007b89
 8007c6c:	68a2      	ldr	r2, [r4, #8]
 8007c6e:	7813      	ldrb	r3, [r2, #0]
 8007c70:	3b1c      	subs	r3, #28
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d804      	bhi.n	8007c80 <d_encoding+0x364>
 8007c76:	6852      	ldr	r2, [r2, #4]
 8007c78:	7813      	ldrb	r3, [r2, #0]
 8007c7a:	3b1c      	subs	r3, #28
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d9fa      	bls.n	8007c76 <d_encoding+0x35a>
 8007c80:	60a2      	str	r2, [r4, #8]
 8007c82:	4620      	mov	r0, r4
 8007c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c88:	6892      	ldr	r2, [r2, #8]
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d181      	bne.n	8007b92 <d_encoding+0x276>
 8007c8e:	2101      	movs	r1, #1
 8007c90:	e66a      	b.n	8007968 <d_encoding+0x4c>
 8007c92:	f105 000c 	add.w	r0, r5, #12
 8007c96:	f7f8 fc01 	bl	800049c <d_number.isra.0>
 8007c9a:	2801      	cmp	r0, #1
 8007c9c:	f77f ae72 	ble.w	8007984 <d_encoding+0x68>
 8007ca0:	68eb      	ldr	r3, [r5, #12]
 8007ca2:	781a      	ldrb	r2, [r3, #0]
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	f43f ae6d 	beq.w	8007984 <d_encoding+0x68>
 8007caa:	1c5f      	adds	r7, r3, #1
 8007cac:	60ef      	str	r7, [r5, #12]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b5f      	cmp	r3, #95	; 0x5f
 8007cb2:	f47f ae67 	bne.w	8007984 <d_encoding+0x68>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	1e46      	subs	r6, r0, #1
 8007cba:	4690      	mov	r8, r2
 8007cbc:	f04f 093f 	mov.w	r9, #63	; 0x3f
 8007cc0:	783b      	ldrb	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f43f ae5e 	beq.w	8007984 <d_encoding+0x68>
 8007cc8:	2b24      	cmp	r3, #36	; 0x24
 8007cca:	f000 812f 	beq.w	8007f2c <d_encoding+0x610>
 8007cce:	463c      	mov	r4, r7
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	e004      	b.n	8007cde <d_encoding+0x3c2>
 8007cd4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007cd8:	b123      	cbz	r3, 8007ce4 <d_encoding+0x3c8>
 8007cda:	2b24      	cmp	r3, #36	; 0x24
 8007cdc:	d002      	beq.n	8007ce4 <d_encoding+0x3c8>
 8007cde:	3101      	adds	r1, #1
 8007ce0:	42b1      	cmp	r1, r6
 8007ce2:	dbf7      	blt.n	8007cd4 <d_encoding+0x3b8>
 8007ce4:	696b      	ldr	r3, [r5, #20]
 8007ce6:	69a8      	ldr	r0, [r5, #24]
 8007ce8:	4283      	cmp	r3, r0
 8007cea:	f6bf ae48 	bge.w	800797e <d_encoding+0x62>
 8007cee:	6928      	ldr	r0, [r5, #16]
 8007cf0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8007cf4:	f103 0e01 	add.w	lr, r3, #1
 8007cf8:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 8007cfc:	f8c5 e014 	str.w	lr, [r5, #20]
 8007d00:	f43f ae3d 	beq.w	800797e <d_encoding+0x62>
 8007d04:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 8007d08:	605f      	str	r7, [r3, #4]
 8007d0a:	6099      	str	r1, [r3, #8]
 8007d0c:	68ef      	ldr	r7, [r5, #12]
 8007d0e:	440f      	add	r7, r1
 8007d10:	1a76      	subs	r6, r6, r1
 8007d12:	60ef      	str	r7, [r5, #12]
 8007d14:	2a00      	cmp	r2, #0
 8007d16:	f000 8126 	beq.w	8007f66 <d_encoding+0x64a>
 8007d1a:	213e      	movs	r1, #62	; 0x3e
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f7f8 fa77 	bl	8000210 <d_make_comp>
 8007d22:	4602      	mov	r2, r0
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f43f ae2d 	beq.w	8007984 <d_encoding+0x68>
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	dcc8      	bgt.n	8007cc0 <d_encoding+0x3a4>
 8007d2e:	4628      	mov	r0, r5
 8007d30:	2300      	movs	r3, #0
 8007d32:	213d      	movs	r1, #61	; 0x3d
 8007d34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d38:	f7f8 ba6a 	b.w	8000210 <d_make_comp>
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f7ff fc33 	bl	80075a8 <d_name>
 8007d42:	2300      	movs	r3, #0
 8007d44:	4602      	mov	r2, r0
 8007d46:	2113      	movs	r1, #19
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d4e:	f7f8 ba5f 	b.w	8000210 <d_make_comp>
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7ff fc28 	bl	80075a8 <d_name>
 8007d58:	4604      	mov	r4, r0
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f7f8 fbc8 	bl	80004f0 <d_number_component>
 8007d60:	4622      	mov	r2, r4
 8007d62:	4603      	mov	r3, r0
 8007d64:	2116      	movs	r1, #22
 8007d66:	4628      	mov	r0, r5
 8007d68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	f7f8 ba50 	b.w	8000210 <d_make_comp>
 8007d70:	2100      	movs	r1, #0
 8007d72:	4628      	mov	r0, r5
 8007d74:	f7ff fdd2 	bl	800791c <d_encoding>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	2117      	movs	r1, #23
 8007d7e:	4628      	mov	r0, r5
 8007d80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	f7f8 ba44 	b.w	8000210 <d_make_comp>
 8007d88:	789a      	ldrb	r2, [r3, #2]
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	f000 80eb 	beq.w	8007f6a <d_encoding+0x64e>
 8007d94:	1cda      	adds	r2, r3, #3
 8007d96:	60ea      	str	r2, [r5, #12]
 8007d98:	789b      	ldrb	r3, [r3, #2]
 8007d9a:	2b6e      	cmp	r3, #110	; 0x6e
 8007d9c:	f040 80e5 	bne.w	8007f6a <d_encoding+0x64e>
 8007da0:	f7ff fdbc 	bl	800791c <d_encoding>
 8007da4:	2300      	movs	r3, #0
 8007da6:	4602      	mov	r2, r0
 8007da8:	2148      	movs	r1, #72	; 0x48
 8007daa:	4628      	mov	r0, r5
 8007dac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	f7f8 ba2e 	b.w	8000210 <d_make_comp>
 8007db4:	2176      	movs	r1, #118	; 0x76
 8007db6:	4628      	mov	r0, r5
 8007db8:	f7f8 fd2c 	bl	8000814 <d_call_offset>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f43f ade1 	beq.w	8007984 <d_encoding+0x68>
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f7ff fda9 	bl	800791c <d_encoding>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4602      	mov	r2, r0
 8007dce:	2110      	movs	r1, #16
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd6:	f7f8 ba1b 	b.w	8000210 <d_make_comp>
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f7f8 fd19 	bl	8000814 <d_call_offset>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	f43f adce 	beq.w	8007984 <d_encoding+0x68>
 8007de8:	2100      	movs	r1, #0
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7f8 fd12 	bl	8000814 <d_call_offset>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f43f adc7 	beq.w	8007984 <d_encoding+0x68>
 8007df6:	2100      	movs	r1, #0
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f7ff fd8f 	bl	800791c <d_encoding>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4602      	mov	r2, r0
 8007e02:	2111      	movs	r1, #17
 8007e04:	4628      	mov	r0, r5
 8007e06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e0a:	f7f8 ba01 	b.w	8000210 <d_make_comp>
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7ff fbca 	bl	80075a8 <d_name>
 8007e14:	2300      	movs	r3, #0
 8007e16:	4602      	mov	r2, r0
 8007e18:	2115      	movs	r1, #21
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	f7f8 b9f6 	b.w	8000210 <d_make_comp>
 8007e24:	2168      	movs	r1, #104	; 0x68
 8007e26:	4628      	mov	r0, r5
 8007e28:	f7f8 fcf4 	bl	8000814 <d_call_offset>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f43f ada9 	beq.w	8007984 <d_encoding+0x68>
 8007e32:	2100      	movs	r1, #0
 8007e34:	4628      	mov	r0, r5
 8007e36:	f7ff fd71 	bl	800791c <d_encoding>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	210f      	movs	r1, #15
 8007e40:	4628      	mov	r0, r5
 8007e42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e46:	f7f8 b9e3 	b.w	8000210 <d_make_comp>
 8007e4a:	310f      	adds	r1, #15
 8007e4c:	6329      	str	r1, [r5, #48]	; 0x30
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f7fe fdb6 	bl	80069c0 <d_type>
 8007e54:	2300      	movs	r3, #0
 8007e56:	4602      	mov	r2, r0
 8007e58:	2109      	movs	r1, #9
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	f7f8 b9d6 	b.w	8000210 <d_make_comp>
 8007e64:	310a      	adds	r1, #10
 8007e66:	6329      	str	r1, [r5, #48]	; 0x30
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f7fe fda9 	bl	80069c0 <d_type>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4602      	mov	r2, r0
 8007e72:	210a      	movs	r1, #10
 8007e74:	4628      	mov	r0, r5
 8007e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7a:	f7f8 b9c9 	b.w	8000210 <d_make_comp>
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f7fe fd9e 	bl	80069c0 <d_type>
 8007e84:	2300      	movs	r3, #0
 8007e86:	4602      	mov	r2, r0
 8007e88:	210d      	movs	r1, #13
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	f7f8 b9be 	b.w	8000210 <d_make_comp>
 8007e94:	4628      	mov	r0, r5
 8007e96:	f7fe fd93 	bl	80069c0 <d_type>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	2112      	movs	r1, #18
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea6:	f7f8 b9b3 	b.w	8000210 <d_make_comp>
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f7fe fd88 	bl	80069c0 <d_type>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	210c      	movs	r1, #12
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	f7f8 b9a8 	b.w	8000210 <d_make_comp>
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f7ff fb71 	bl	80075a8 <d_name>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4602      	mov	r2, r0
 8007eca:	2114      	movs	r1, #20
 8007ecc:	4628      	mov	r0, r5
 8007ece:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed2:	f7f8 b99d 	b.w	8000210 <d_make_comp>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7fe fd72 	bl	80069c0 <d_type>
 8007edc:	2300      	movs	r3, #0
 8007ede:	4602      	mov	r2, r0
 8007ee0:	210e      	movs	r1, #14
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	f7f8 b992 	b.w	8000210 <d_make_comp>
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7fe fd67 	bl	80069c0 <d_type>
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	f105 000c 	add.w	r0, r5, #12
 8007ef8:	f7f8 fad0 	bl	800049c <d_number.isra.0>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f6ff ad41 	blt.w	8007984 <d_encoding+0x68>
 8007f02:	68eb      	ldr	r3, [r5, #12]
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	2a5f      	cmp	r2, #95	; 0x5f
 8007f08:	f47f ad3c 	bne.w	8007984 <d_encoding+0x68>
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	60eb      	str	r3, [r5, #12]
 8007f10:	4628      	mov	r0, r5
 8007f12:	f7fe fd55 	bl	80069c0 <d_type>
 8007f16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007f18:	1d59      	adds	r1, r3, #5
 8007f1a:	6329      	str	r1, [r5, #48]	; 0x30
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	4623      	mov	r3, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	210b      	movs	r1, #11
 8007f24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	f7f8 b972 	b.w	8000210 <d_make_comp>
 8007f2c:	787b      	ldrb	r3, [r7, #1]
 8007f2e:	2b53      	cmp	r3, #83	; 0x53
 8007f30:	d027      	beq.n	8007f82 <d_encoding+0x666>
 8007f32:	2b5f      	cmp	r3, #95	; 0x5f
 8007f34:	d023      	beq.n	8007f7e <d_encoding+0x662>
 8007f36:	2b24      	cmp	r3, #36	; 0x24
 8007f38:	f47f ad24 	bne.w	8007984 <d_encoding+0x68>
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	696b      	ldr	r3, [r5, #20]
 8007f40:	69a9      	ldr	r1, [r5, #24]
 8007f42:	428b      	cmp	r3, r1
 8007f44:	da1f      	bge.n	8007f86 <d_encoding+0x66a>
 8007f46:	692c      	ldr	r4, [r5, #16]
 8007f48:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007f4c:	1c5f      	adds	r7, r3, #1
 8007f4e:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 8007f52:	616f      	str	r7, [r5, #20]
 8007f54:	d017      	beq.n	8007f86 <d_encoding+0x66a>
 8007f56:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 8007f5a:	6058      	str	r0, [r3, #4]
 8007f5c:	68ef      	ldr	r7, [r5, #12]
 8007f5e:	3702      	adds	r7, #2
 8007f60:	3e02      	subs	r6, #2
 8007f62:	60ef      	str	r7, [r5, #12]
 8007f64:	e6d6      	b.n	8007d14 <d_encoding+0x3f8>
 8007f66:	461a      	mov	r2, r3
 8007f68:	e6df      	b.n	8007d2a <d_encoding+0x40e>
 8007f6a:	f7ff fcd7 	bl	800791c <d_encoding>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	4602      	mov	r2, r0
 8007f72:	2147      	movs	r1, #71	; 0x47
 8007f74:	4628      	mov	r0, r5
 8007f76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f7a:	f7f8 b949 	b.w	8000210 <d_make_comp>
 8007f7e:	202e      	movs	r0, #46	; 0x2e
 8007f80:	e7dd      	b.n	8007f3e <d_encoding+0x622>
 8007f82:	202f      	movs	r0, #47	; 0x2f
 8007f84:	e7db      	b.n	8007f3e <d_encoding+0x622>
 8007f86:	68eb      	ldr	r3, [r5, #12]
 8007f88:	3302      	adds	r3, #2
 8007f8a:	60eb      	str	r3, [r5, #12]
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f92:	bf00      	nop

08007f94 <d_expr_primary>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	68c2      	ldr	r2, [r0, #12]
 8007f98:	7813      	ldrb	r3, [r2, #0]
 8007f9a:	2b4c      	cmp	r3, #76	; 0x4c
 8007f9c:	d001      	beq.n	8007fa2 <d_expr_primary+0xe>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa2:	1c53      	adds	r3, r2, #1
 8007fa4:	60c3      	str	r3, [r0, #12]
 8007fa6:	7851      	ldrb	r1, [r2, #1]
 8007fa8:	295f      	cmp	r1, #95	; 0x5f
 8007faa:	4605      	mov	r5, r0
 8007fac:	d03c      	beq.n	8008028 <d_expr_primary+0x94>
 8007fae:	295a      	cmp	r1, #90	; 0x5a
 8007fb0:	d041      	beq.n	8008036 <d_expr_primary+0xa2>
 8007fb2:	f7fe fd05 	bl	80069c0 <d_type>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d0f1      	beq.n	8007f9e <d_expr_primary+0xa>
 8007fba:	7803      	ldrb	r3, [r0, #0]
 8007fbc:	2b27      	cmp	r3, #39	; 0x27
 8007fbe:	d048      	beq.n	8008052 <d_expr_primary+0xbe>
 8007fc0:	68ee      	ldr	r6, [r5, #12]
 8007fc2:	7833      	ldrb	r3, [r6, #0]
 8007fc4:	2b6e      	cmp	r3, #110	; 0x6e
 8007fc6:	d04d      	beq.n	8008064 <d_expr_primary+0xd0>
 8007fc8:	213b      	movs	r1, #59	; 0x3b
 8007fca:	2b45      	cmp	r3, #69	; 0x45
 8007fcc:	d050      	beq.n	8008070 <d_expr_primary+0xdc>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0e5      	beq.n	8007f9e <d_expr_primary+0xa>
 8007fd2:	4633      	mov	r3, r6
 8007fd4:	e001      	b.n	8007fda <d_expr_primary+0x46>
 8007fd6:	2c00      	cmp	r4, #0
 8007fd8:	d0e1      	beq.n	8007f9e <d_expr_primary+0xa>
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60eb      	str	r3, [r5, #12]
 8007fde:	781c      	ldrb	r4, [r3, #0]
 8007fe0:	2c45      	cmp	r4, #69	; 0x45
 8007fe2:	d1f8      	bne.n	8007fd6 <d_expr_primary+0x42>
 8007fe4:	1b9c      	subs	r4, r3, r6
 8007fe6:	696b      	ldr	r3, [r5, #20]
 8007fe8:	69aa      	ldr	r2, [r5, #24]
 8007fea:	4293      	cmp	r3, r2
 8007fec:	da2f      	bge.n	800804e <d_expr_primary+0xba>
 8007fee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007ff2:	692f      	ldr	r7, [r5, #16]
 8007ff4:	0092      	lsls	r2, r2, #2
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	eb17 0e02 	adds.w	lr, r7, r2
 8007ffc:	616b      	str	r3, [r5, #20]
 8007ffe:	d026      	beq.n	800804e <d_expr_primary+0xba>
 8008000:	b32e      	cbz	r6, 800804e <d_expr_primary+0xba>
 8008002:	b324      	cbz	r4, 800804e <d_expr_primary+0xba>
 8008004:	2300      	movs	r3, #0
 8008006:	54bb      	strb	r3, [r7, r2]
 8008008:	4673      	mov	r3, lr
 800800a:	f8ce 6004 	str.w	r6, [lr, #4]
 800800e:	f8ce 4008 	str.w	r4, [lr, #8]
 8008012:	4602      	mov	r2, r0
 8008014:	4628      	mov	r0, r5
 8008016:	f7f8 f8fb 	bl	8000210 <d_make_comp>
 800801a:	68eb      	ldr	r3, [r5, #12]
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	2a45      	cmp	r2, #69	; 0x45
 8008020:	d1bd      	bne.n	8007f9e <d_expr_primary+0xa>
 8008022:	3301      	adds	r3, #1
 8008024:	60eb      	str	r3, [r5, #12]
 8008026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008028:	1c93      	adds	r3, r2, #2
 800802a:	60c3      	str	r3, [r0, #12]
 800802c:	7892      	ldrb	r2, [r2, #2]
 800802e:	2a5a      	cmp	r2, #90	; 0x5a
 8008030:	bf18      	it	ne
 8008032:	2000      	movne	r0, #0
 8008034:	d107      	bne.n	8008046 <d_expr_primary+0xb2>
 8008036:	3301      	adds	r3, #1
 8008038:	60eb      	str	r3, [r5, #12]
 800803a:	2100      	movs	r1, #0
 800803c:	4628      	mov	r0, r5
 800803e:	f7ff fc6d 	bl	800791c <d_encoding>
 8008042:	68eb      	ldr	r3, [r5, #12]
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	2a45      	cmp	r2, #69	; 0x45
 8008048:	d0eb      	beq.n	8008022 <d_expr_primary+0x8e>
 800804a:	2000      	movs	r0, #0
 800804c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804e:	2300      	movs	r3, #0
 8008050:	e7df      	b.n	8008012 <d_expr_primary+0x7e>
 8008052:	6843      	ldr	r3, [r0, #4]
 8008054:	7c1a      	ldrb	r2, [r3, #16]
 8008056:	2a00      	cmp	r2, #0
 8008058:	d0b2      	beq.n	8007fc0 <d_expr_primary+0x2c>
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	632b      	str	r3, [r5, #48]	; 0x30
 8008062:	e7ad      	b.n	8007fc0 <d_expr_primary+0x2c>
 8008064:	1c72      	adds	r2, r6, #1
 8008066:	60ea      	str	r2, [r5, #12]
 8008068:	7873      	ldrb	r3, [r6, #1]
 800806a:	213c      	movs	r1, #60	; 0x3c
 800806c:	4616      	mov	r6, r2
 800806e:	e7ac      	b.n	8007fca <d_expr_primary+0x36>
 8008070:	2400      	movs	r4, #0
 8008072:	e7b8      	b.n	8007fe6 <d_expr_primary+0x52>

08008074 <d_demangle_callback.constprop.15>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	b0e5      	sub	sp, #404	; 0x194
 800807a:	f890 9000 	ldrb.w	r9, [r0]
 800807e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8008082:	af00      	add	r7, sp, #0
 8008084:	4605      	mov	r5, r0
 8008086:	460e      	mov	r6, r1
 8008088:	4690      	mov	r8, r2
 800808a:	f000 80e6 	beq.w	800825a <d_demangle_callback.constprop.15+0x1e6>
 800808e:	2208      	movs	r2, #8
 8008090:	49c0      	ldr	r1, [pc, #768]	; (8008394 <d_demangle_callback.constprop.15+0x320>)
 8008092:	4628      	mov	r0, r5
 8008094:	f00f fbc6 	bl	8017824 <strncmp>
 8008098:	b978      	cbnz	r0, 80080ba <d_demangle_callback.constprop.15+0x46>
 800809a:	7a2b      	ldrb	r3, [r5, #8]
 800809c:	2b2e      	cmp	r3, #46	; 0x2e
 800809e:	d005      	beq.n	80080ac <d_demangle_callback.constprop.15+0x38>
 80080a0:	2b5f      	cmp	r3, #95	; 0x5f
 80080a2:	d003      	beq.n	80080ac <d_demangle_callback.constprop.15+0x38>
 80080a4:	2b24      	cmp	r3, #36	; 0x24
 80080a6:	d001      	beq.n	80080ac <d_demangle_callback.constprop.15+0x38>
 80080a8:	4682      	mov	sl, r0
 80080aa:	e008      	b.n	80080be <d_demangle_callback.constprop.15+0x4a>
 80080ac:	7a6b      	ldrb	r3, [r5, #9]
 80080ae:	2b44      	cmp	r3, #68	; 0x44
 80080b0:	f000 80e3 	beq.w	800827a <d_demangle_callback.constprop.15+0x206>
 80080b4:	2b49      	cmp	r3, #73	; 0x49
 80080b6:	f000 80e0 	beq.w	800827a <d_demangle_callback.constprop.15+0x206>
 80080ba:	f04f 0a00 	mov.w	sl, #0
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 fa38 	bl	8008534 <strlen>
 80080c4:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80080c8:	0083      	lsls	r3, r0, #2
 80080ca:	eb03 020b 	add.w	r2, r3, fp
 80080ce:	0092      	lsls	r2, r2, #2
 80080d0:	3208      	adds	r2, #8
 80080d2:	330a      	adds	r3, #10
 80080d4:	ebad 0d02 	sub.w	sp, sp, r2
 80080d8:	f023 0307 	bic.w	r3, r3, #7
 80080dc:	2400      	movs	r4, #0
 80080de:	466a      	mov	r2, sp
 80080e0:	1829      	adds	r1, r5, r0
 80080e2:	ebad 0d03 	sub.w	sp, sp, r3
 80080e6:	f1ba 0f01 	cmp.w	sl, #1
 80080ea:	f04f 0311 	mov.w	r3, #17
 80080ee:	623a      	str	r2, [r7, #32]
 80080f0:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
 80080f4:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 80080f8:	613d      	str	r5, [r7, #16]
 80080fa:	61fd      	str	r5, [r7, #28]
 80080fc:	6378      	str	r0, [r7, #52]	; 0x34
 80080fe:	6179      	str	r1, [r7, #20]
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	627c      	str	r4, [r7, #36]	; 0x24
 8008104:	633c      	str	r4, [r7, #48]	; 0x30
 8008106:	63bc      	str	r4, [r7, #56]	; 0x38
 8008108:	63fc      	str	r4, [r7, #60]	; 0x3c
 800810a:	643c      	str	r4, [r7, #64]	; 0x40
 800810c:	647c      	str	r4, [r7, #68]	; 0x44
 800810e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008110:	f000 80aa 	beq.w	8008268 <d_demangle_callback.constprop.15+0x1f4>
 8008114:	f0c0 80c9 	bcc.w	80082aa <d_demangle_callback.constprop.15+0x236>
 8008118:	f1ba 0f03 	cmp.w	sl, #3
 800811c:	f200 80c5 	bhi.w	80082aa <d_demangle_callback.constprop.15+0x236>
 8008120:	7aeb      	ldrb	r3, [r5, #11]
 8008122:	f1ba 0f02 	cmp.w	sl, #2
 8008126:	bf18      	it	ne
 8008128:	f04f 0943 	movne.w	r9, #67	; 0x43
 800812c:	f105 0a0b 	add.w	sl, r5, #11
 8008130:	bf08      	it	eq
 8008132:	f04f 0942 	moveq.w	r9, #66	; 0x42
 8008136:	2b5f      	cmp	r3, #95	; 0x5f
 8008138:	f8c7 a01c 	str.w	sl, [r7, #28]
 800813c:	f000 80a8 	beq.w	8008290 <d_demangle_callback.constprop.15+0x21c>
 8008140:	4650      	mov	r0, sl
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	f000 f9f6 	bl	8008534 <strlen>
 8008148:	f1bb 0f00 	cmp.w	fp, #0
 800814c:	f340 80b6 	ble.w	80082bc <d_demangle_callback.constprop.15+0x248>
 8008150:	2301      	movs	r3, #1
 8008152:	627b      	str	r3, [r7, #36]	; 0x24
 8008154:	2800      	cmp	r0, #0
 8008156:	f000 80b1 	beq.w	80082bc <d_demangle_callback.constprop.15+0x248>
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	2300      	movs	r3, #0
 800815e:	f8c2 a004 	str.w	sl, [r2, #4]
 8008162:	6090      	str	r0, [r2, #8]
 8008164:	7013      	strb	r3, [r2, #0]
 8008166:	4649      	mov	r1, r9
 8008168:	2300      	movs	r3, #0
 800816a:	f107 0010 	add.w	r0, r7, #16
 800816e:	f7f8 f84f 	bl	8000210 <d_make_comp>
 8008172:	69fc      	ldr	r4, [r7, #28]
 8008174:	4605      	mov	r5, r0
 8008176:	4620      	mov	r0, r4
 8008178:	f000 f9dc 	bl	8008534 <strlen>
 800817c:	1823      	adds	r3, r4, r0
 800817e:	61fb      	str	r3, [r7, #28]
 8008180:	f814 9000 	ldrb.w	r9, [r4, r0]
 8008184:	f1b9 0f00 	cmp.w	r9, #0
 8008188:	d171      	bne.n	800826e <d_demangle_callback.constprop.15+0x1fa>
 800818a:	2d00      	cmp	r5, #0
 800818c:	d06f      	beq.n	800826e <d_demangle_callback.constprop.15+0x1fa>
 800818e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008192:	462a      	mov	r2, r5
 8008194:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8008198:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 800819c:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 80081a0:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80081a4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80081a8:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80081ac:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80081b0:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 80081b4:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80081b8:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
 80081bc:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 80081c0:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80081c4:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80081c8:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 80081cc:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 80081d0:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 80081d4:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 80081d8:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 80081dc:	f7f8 f8dc 	bl	8000398 <d_count_templates_scopes>
 80081e0:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 80081e4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 80081e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	00c8      	lsls	r0, r1, #3
 80081f0:	3008      	adds	r0, #8
 80081f2:	fb02 f101 	mul.w	r1, r2, r1
 80081f6:	466e      	mov	r6, sp
 80081f8:	00ca      	lsls	r2, r1, #3
 80081fa:	ebad 0d00 	sub.w	sp, sp, r0
 80081fe:	4668      	mov	r0, sp
 8008200:	3208      	adds	r2, #8
 8008202:	ebad 0d02 	sub.w	sp, sp, r2
 8008206:	f107 0308 	add.w	r3, r7, #8
 800820a:	462a      	mov	r2, r5
 800820c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008210:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 8008214:	4620      	mov	r0, r4
 8008216:	2111      	movs	r1, #17
 8008218:	f8c4 d134 	str.w	sp, [r4, #308]	; 0x134
 800821c:	60bd      	str	r5, [r7, #8]
 800821e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8008222:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 8008226:	f7f8 fbc5 	bl	80009b4 <d_print_comp_inner>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8008230:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008234:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008238:	f804 9001 	strb.w	r9, [r4, r1]
 800823c:	4620      	mov	r0, r4
 800823e:	46b5      	mov	sp, r6
 8008240:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008244:	4798      	blx	r3
 8008246:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800824a:	fab0 f080 	clz	r0, r0
 800824e:	0940      	lsrs	r0, r0, #5
 8008250:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8008254:	46bd      	mov	sp, r7
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	7843      	ldrb	r3, [r0, #1]
 800825c:	2b5a      	cmp	r3, #90	; 0x5a
 800825e:	f47f af16 	bne.w	800808e <d_demangle_callback.constprop.15+0x1a>
 8008262:	f04f 0a01 	mov.w	sl, #1
 8008266:	e72a      	b.n	80080be <d_demangle_callback.constprop.15+0x4a>
 8008268:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800826c:	d028      	beq.n	80082c0 <d_demangle_callback.constprop.15+0x24c>
 800826e:	2000      	movs	r0, #0
 8008270:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8008274:	46bd      	mov	sp, r7
 8008276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827a:	7aaa      	ldrb	r2, [r5, #10]
 800827c:	2a5f      	cmp	r2, #95	; 0x5f
 800827e:	f47f af1c 	bne.w	80080ba <d_demangle_callback.constprop.15+0x46>
 8008282:	2b49      	cmp	r3, #73	; 0x49
 8008284:	bf14      	ite	ne
 8008286:	f04f 0a03 	movne.w	sl, #3
 800828a:	f04f 0a02 	moveq.w	sl, #2
 800828e:	e716      	b.n	80080be <d_demangle_callback.constprop.15+0x4a>
 8008290:	7b2b      	ldrb	r3, [r5, #12]
 8008292:	2b5a      	cmp	r3, #90	; 0x5a
 8008294:	f47f af54 	bne.w	8008140 <d_demangle_callback.constprop.15+0xcc>
 8008298:	350d      	adds	r5, #13
 800829a:	4621      	mov	r1, r4
 800829c:	f107 0010 	add.w	r0, r7, #16
 80082a0:	61fd      	str	r5, [r7, #28]
 80082a2:	f7ff fb3b 	bl	800791c <d_encoding>
 80082a6:	4602      	mov	r2, r0
 80082a8:	e75d      	b.n	8008166 <d_demangle_callback.constprop.15+0xf2>
 80082aa:	f107 0010 	add.w	r0, r7, #16
 80082ae:	f7fe fb87 	bl	80069c0 <d_type>
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	4605      	mov	r5, r0
 80082b6:	f893 9000 	ldrb.w	r9, [r3]
 80082ba:	e763      	b.n	8008184 <d_demangle_callback.constprop.15+0x110>
 80082bc:	2200      	movs	r2, #0
 80082be:	e752      	b.n	8008166 <d_demangle_callback.constprop.15+0xf2>
 80082c0:	786b      	ldrb	r3, [r5, #1]
 80082c2:	2b5a      	cmp	r3, #90	; 0x5a
 80082c4:	d1d3      	bne.n	800826e <d_demangle_callback.constprop.15+0x1fa>
 80082c6:	3502      	adds	r5, #2
 80082c8:	4651      	mov	r1, sl
 80082ca:	f107 0010 	add.w	r0, r7, #16
 80082ce:	61fd      	str	r5, [r7, #28]
 80082d0:	f7ff fb24 	bl	800791c <d_encoding>
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	4605      	mov	r5, r0
 80082da:	d557      	bpl.n	800838c <d_demangle_callback.constprop.15+0x318>
 80082dc:	69f8      	ldr	r0, [r7, #28]
 80082de:	f890 9000 	ldrb.w	r9, [r0]
 80082e2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80082e6:	f47f af4d 	bne.w	8008184 <d_demangle_callback.constprop.15+0x110>
 80082ea:	7843      	ldrb	r3, [r0, #1]
 80082ec:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80082f0:	2a19      	cmp	r2, #25
 80082f2:	d93e      	bls.n	8008372 <d_demangle_callback.constprop.15+0x2fe>
 80082f4:	2b5f      	cmp	r3, #95	; 0x5f
 80082f6:	d03c      	beq.n	8008372 <d_demangle_callback.constprop.15+0x2fe>
 80082f8:	3b30      	subs	r3, #48	; 0x30
 80082fa:	2b09      	cmp	r3, #9
 80082fc:	d846      	bhi.n	800838c <d_demangle_callback.constprop.15+0x318>
 80082fe:	7802      	ldrb	r2, [r0, #0]
 8008300:	4603      	mov	r3, r0
 8008302:	2a2e      	cmp	r2, #46	; 0x2e
 8008304:	d112      	bne.n	800832c <d_demangle_callback.constprop.15+0x2b8>
 8008306:	785a      	ldrb	r2, [r3, #1]
 8008308:	3a30      	subs	r2, #48	; 0x30
 800830a:	2a09      	cmp	r2, #9
 800830c:	d80e      	bhi.n	800832c <d_demangle_callback.constprop.15+0x2b8>
 800830e:	789a      	ldrb	r2, [r3, #2]
 8008310:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008314:	2909      	cmp	r1, #9
 8008316:	f103 0302 	add.w	r3, r3, #2
 800831a:	d8f2      	bhi.n	8008302 <d_demangle_callback.constprop.15+0x28e>
 800831c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008320:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008324:	2909      	cmp	r1, #9
 8008326:	d9f9      	bls.n	800831c <d_demangle_callback.constprop.15+0x2a8>
 8008328:	2a2e      	cmp	r2, #46	; 0x2e
 800832a:	d0ec      	beq.n	8008306 <d_demangle_callback.constprop.15+0x292>
 800832c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	428a      	cmp	r2, r1
 8008334:	da1b      	bge.n	800836e <d_demangle_callback.constprop.15+0x2fa>
 8008336:	6a39      	ldr	r1, [r7, #32]
 8008338:	f102 0e01 	add.w	lr, r2, #1
 800833c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008340:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 8008344:	eb11 0e82 	adds.w	lr, r1, r2, lsl #2
 8008348:	d011      	beq.n	800836e <d_demangle_callback.constprop.15+0x2fa>
 800834a:	ebb3 0c00 	subs.w	ip, r3, r0
 800834e:	d00e      	beq.n	800836e <d_demangle_callback.constprop.15+0x2fa>
 8008350:	f801 4022 	strb.w	r4, [r1, r2, lsl #2]
 8008354:	4673      	mov	r3, lr
 8008356:	f8ce 0004 	str.w	r0, [lr, #4]
 800835a:	f8ce c008 	str.w	ip, [lr, #8]
 800835e:	462a      	mov	r2, r5
 8008360:	214b      	movs	r1, #75	; 0x4b
 8008362:	f107 0010 	add.w	r0, r7, #16
 8008366:	f7f7 ff53 	bl	8000210 <d_make_comp>
 800836a:	4605      	mov	r5, r0
 800836c:	e7b6      	b.n	80082dc <d_demangle_callback.constprop.15+0x268>
 800836e:	2300      	movs	r3, #0
 8008370:	e7f5      	b.n	800835e <d_demangle_callback.constprop.15+0x2ea>
 8008372:	1c81      	adds	r1, r0, #2
 8008374:	780a      	ldrb	r2, [r1, #0]
 8008376:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800837a:	f1be 0f19 	cmp.w	lr, #25
 800837e:	460b      	mov	r3, r1
 8008380:	f101 0101 	add.w	r1, r1, #1
 8008384:	d9f6      	bls.n	8008374 <d_demangle_callback.constprop.15+0x300>
 8008386:	2a5f      	cmp	r2, #95	; 0x5f
 8008388:	d0f4      	beq.n	8008374 <d_demangle_callback.constprop.15+0x300>
 800838a:	e7ba      	b.n	8008302 <d_demangle_callback.constprop.15+0x28e>
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f893 9000 	ldrb.w	r9, [r3]
 8008392:	e6f7      	b.n	8008184 <d_demangle_callback.constprop.15+0x110>
 8008394:	0801bbfc 	.word	0x0801bbfc

08008398 <__cxa_demangle>:
 8008398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	b370      	cbz	r0, 80083fe <__cxa_demangle+0x66>
 80083a0:	b101      	cbz	r1, 80083a4 <__cxa_demangle+0xc>
 80083a2:	b362      	cbz	r2, 80083fe <__cxa_demangle+0x66>
 80083a4:	2400      	movs	r4, #0
 80083a6:	4617      	mov	r7, r2
 80083a8:	460d      	mov	r5, r1
 80083aa:	466a      	mov	r2, sp
 80083ac:	4928      	ldr	r1, [pc, #160]	; (8008450 <__cxa_demangle+0xb8>)
 80083ae:	9400      	str	r4, [sp, #0]
 80083b0:	461e      	mov	r6, r3
 80083b2:	9401      	str	r4, [sp, #4]
 80083b4:	9402      	str	r4, [sp, #8]
 80083b6:	9403      	str	r4, [sp, #12]
 80083b8:	f7ff fe5c 	bl	8008074 <d_demangle_callback.constprop.15>
 80083bc:	b368      	cbz	r0, 800841a <__cxa_demangle+0x82>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	b1d3      	cbz	r3, 80083f8 <__cxa_demangle+0x60>
 80083c2:	f04f 0801 	mov.w	r8, #1
 80083c6:	9c00      	ldr	r4, [sp, #0]
 80083c8:	b3ac      	cbz	r4, 8008436 <__cxa_demangle+0x9e>
 80083ca:	b38d      	cbz	r5, 8008430 <__cxa_demangle+0x98>
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 f8b1 	bl	8008534 <strlen>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	4298      	cmp	r0, r3
 80083d6:	d21a      	bcs.n	800840e <__cxa_demangle+0x76>
 80083d8:	1c42      	adds	r2, r0, #1
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f00e fd5c 	bl	8016e9a <memcpy>
 80083e2:	4620      	mov	r0, r4
 80083e4:	f00e fb22 	bl	8016a2c <free>
 80083e8:	462c      	mov	r4, r5
 80083ea:	b376      	cbz	r6, 800844a <__cxa_demangle+0xb2>
 80083ec:	2300      	movs	r3, #0
 80083ee:	4620      	mov	r0, r4
 80083f0:	6033      	str	r3, [r6, #0]
 80083f2:	b004      	add	sp, #16
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80083fc:	e7e3      	b.n	80083c6 <__cxa_demangle+0x2e>
 80083fe:	b19b      	cbz	r3, 8008428 <__cxa_demangle+0x90>
 8008400:	f06f 0202 	mvn.w	r2, #2
 8008404:	2000      	movs	r0, #0
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	b004      	add	sp, #16
 800840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840e:	4628      	mov	r0, r5
 8008410:	f00e fb0c 	bl	8016a2c <free>
 8008414:	f8c7 8000 	str.w	r8, [r7]
 8008418:	e7e7      	b.n	80083ea <__cxa_demangle+0x52>
 800841a:	9800      	ldr	r0, [sp, #0]
 800841c:	f00e fb06 	bl	8016a2c <free>
 8008420:	b116      	cbz	r6, 8008428 <__cxa_demangle+0x90>
 8008422:	f06f 0301 	mvn.w	r3, #1
 8008426:	6033      	str	r3, [r6, #0]
 8008428:	2000      	movs	r0, #0
 800842a:	b004      	add	sp, #16
 800842c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008430:	2f00      	cmp	r7, #0
 8008432:	d1ef      	bne.n	8008414 <__cxa_demangle+0x7c>
 8008434:	e7d9      	b.n	80083ea <__cxa_demangle+0x52>
 8008436:	2e00      	cmp	r6, #0
 8008438:	d0f6      	beq.n	8008428 <__cxa_demangle+0x90>
 800843a:	f1b8 0f01 	cmp.w	r8, #1
 800843e:	d1f0      	bne.n	8008422 <__cxa_demangle+0x8a>
 8008440:	f04f 33ff 	mov.w	r3, #4294967295
 8008444:	4620      	mov	r0, r4
 8008446:	6033      	str	r3, [r6, #0]
 8008448:	e7d3      	b.n	80083f2 <__cxa_demangle+0x5a>
 800844a:	4620      	mov	r0, r4
 800844c:	e7d1      	b.n	80083f2 <__cxa_demangle+0x5a>
 800844e:	bf00      	nop
 8008450:	08000939 	.word	0x08000939

08008454 <__gcclibcxx_demangle_callback>:
 8008454:	b160      	cbz	r0, 8008470 <__gcclibcxx_demangle_callback+0x1c>
 8008456:	b508      	push	{r3, lr}
 8008458:	b139      	cbz	r1, 800846a <__gcclibcxx_demangle_callback+0x16>
 800845a:	f7ff fe0b 	bl	8008074 <d_demangle_callback.constprop.15>
 800845e:	2800      	cmp	r0, #0
 8008460:	bf0c      	ite	eq
 8008462:	f06f 0001 	mvneq.w	r0, #1
 8008466:	2000      	movne	r0, #0
 8008468:	bd08      	pop	{r3, pc}
 800846a:	f06f 0002 	mvn.w	r0, #2
 800846e:	bd08      	pop	{r3, pc}
 8008470:	f06f 0002 	mvn.w	r0, #2
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
	...

08008480 <memchr>:
 8008480:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008484:	2a10      	cmp	r2, #16
 8008486:	db2b      	blt.n	80084e0 <memchr+0x60>
 8008488:	f010 0f07 	tst.w	r0, #7
 800848c:	d008      	beq.n	80084a0 <memchr+0x20>
 800848e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008492:	3a01      	subs	r2, #1
 8008494:	428b      	cmp	r3, r1
 8008496:	d02d      	beq.n	80084f4 <memchr+0x74>
 8008498:	f010 0f07 	tst.w	r0, #7
 800849c:	b342      	cbz	r2, 80084f0 <memchr+0x70>
 800849e:	d1f6      	bne.n	800848e <memchr+0xe>
 80084a0:	b4f0      	push	{r4, r5, r6, r7}
 80084a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80084a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80084aa:	f022 0407 	bic.w	r4, r2, #7
 80084ae:	f07f 0700 	mvns.w	r7, #0
 80084b2:	2300      	movs	r3, #0
 80084b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80084b8:	3c08      	subs	r4, #8
 80084ba:	ea85 0501 	eor.w	r5, r5, r1
 80084be:	ea86 0601 	eor.w	r6, r6, r1
 80084c2:	fa85 f547 	uadd8	r5, r5, r7
 80084c6:	faa3 f587 	sel	r5, r3, r7
 80084ca:	fa86 f647 	uadd8	r6, r6, r7
 80084ce:	faa5 f687 	sel	r6, r5, r7
 80084d2:	b98e      	cbnz	r6, 80084f8 <memchr+0x78>
 80084d4:	d1ee      	bne.n	80084b4 <memchr+0x34>
 80084d6:	bcf0      	pop	{r4, r5, r6, r7}
 80084d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80084dc:	f002 0207 	and.w	r2, r2, #7
 80084e0:	b132      	cbz	r2, 80084f0 <memchr+0x70>
 80084e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80084e6:	3a01      	subs	r2, #1
 80084e8:	ea83 0301 	eor.w	r3, r3, r1
 80084ec:	b113      	cbz	r3, 80084f4 <memchr+0x74>
 80084ee:	d1f8      	bne.n	80084e2 <memchr+0x62>
 80084f0:	2000      	movs	r0, #0
 80084f2:	4770      	bx	lr
 80084f4:	3801      	subs	r0, #1
 80084f6:	4770      	bx	lr
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	bf06      	itte	eq
 80084fc:	4635      	moveq	r5, r6
 80084fe:	3803      	subeq	r0, #3
 8008500:	3807      	subne	r0, #7
 8008502:	f015 0f01 	tst.w	r5, #1
 8008506:	d107      	bne.n	8008518 <memchr+0x98>
 8008508:	3001      	adds	r0, #1
 800850a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800850e:	bf02      	ittt	eq
 8008510:	3001      	addeq	r0, #1
 8008512:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008516:	3001      	addeq	r0, #1
 8008518:	bcf0      	pop	{r4, r5, r6, r7}
 800851a:	3801      	subs	r0, #1
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop

08008520 <strcmp>:
 8008520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008528:	2a01      	cmp	r2, #1
 800852a:	bf28      	it	cs
 800852c:	429a      	cmpcs	r2, r3
 800852e:	d0f7      	beq.n	8008520 <strcmp>
 8008530:	1ad0      	subs	r0, r2, r3
 8008532:	4770      	bx	lr

08008534 <strlen>:
 8008534:	4603      	mov	r3, r0
 8008536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853a:	2a00      	cmp	r2, #0
 800853c:	d1fb      	bne.n	8008536 <strlen+0x2>
 800853e:	1a18      	subs	r0, r3, r0
 8008540:	3801      	subs	r0, #1
 8008542:	4770      	bx	lr

08008544 <__aeabi_drsub>:
 8008544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008548:	e002      	b.n	8008550 <__adddf3>
 800854a:	bf00      	nop

0800854c <__aeabi_dsub>:
 800854c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008550 <__adddf3>:
 8008550:	b530      	push	{r4, r5, lr}
 8008552:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008556:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800855a:	ea94 0f05 	teq	r4, r5
 800855e:	bf08      	it	eq
 8008560:	ea90 0f02 	teqeq	r0, r2
 8008564:	bf1f      	itttt	ne
 8008566:	ea54 0c00 	orrsne.w	ip, r4, r0
 800856a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800856e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008576:	f000 80e2 	beq.w	800873e <__adddf3+0x1ee>
 800857a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800857e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008582:	bfb8      	it	lt
 8008584:	426d      	neglt	r5, r5
 8008586:	dd0c      	ble.n	80085a2 <__adddf3+0x52>
 8008588:	442c      	add	r4, r5
 800858a:	ea80 0202 	eor.w	r2, r0, r2
 800858e:	ea81 0303 	eor.w	r3, r1, r3
 8008592:	ea82 0000 	eor.w	r0, r2, r0
 8008596:	ea83 0101 	eor.w	r1, r3, r1
 800859a:	ea80 0202 	eor.w	r2, r0, r2
 800859e:	ea81 0303 	eor.w	r3, r1, r3
 80085a2:	2d36      	cmp	r5, #54	; 0x36
 80085a4:	bf88      	it	hi
 80085a6:	bd30      	pophi	{r4, r5, pc}
 80085a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80085ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80085b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80085b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80085b8:	d002      	beq.n	80085c0 <__adddf3+0x70>
 80085ba:	4240      	negs	r0, r0
 80085bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80085c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80085c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80085c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80085cc:	d002      	beq.n	80085d4 <__adddf3+0x84>
 80085ce:	4252      	negs	r2, r2
 80085d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80085d4:	ea94 0f05 	teq	r4, r5
 80085d8:	f000 80a7 	beq.w	800872a <__adddf3+0x1da>
 80085dc:	f1a4 0401 	sub.w	r4, r4, #1
 80085e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80085e4:	db0d      	blt.n	8008602 <__adddf3+0xb2>
 80085e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80085ea:	fa22 f205 	lsr.w	r2, r2, r5
 80085ee:	1880      	adds	r0, r0, r2
 80085f0:	f141 0100 	adc.w	r1, r1, #0
 80085f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80085f8:	1880      	adds	r0, r0, r2
 80085fa:	fa43 f305 	asr.w	r3, r3, r5
 80085fe:	4159      	adcs	r1, r3
 8008600:	e00e      	b.n	8008620 <__adddf3+0xd0>
 8008602:	f1a5 0520 	sub.w	r5, r5, #32
 8008606:	f10e 0e20 	add.w	lr, lr, #32
 800860a:	2a01      	cmp	r2, #1
 800860c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008610:	bf28      	it	cs
 8008612:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008616:	fa43 f305 	asr.w	r3, r3, r5
 800861a:	18c0      	adds	r0, r0, r3
 800861c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008624:	d507      	bpl.n	8008636 <__adddf3+0xe6>
 8008626:	f04f 0e00 	mov.w	lr, #0
 800862a:	f1dc 0c00 	rsbs	ip, ip, #0
 800862e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008632:	eb6e 0101 	sbc.w	r1, lr, r1
 8008636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800863a:	d31b      	bcc.n	8008674 <__adddf3+0x124>
 800863c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008640:	d30c      	bcc.n	800865c <__adddf3+0x10c>
 8008642:	0849      	lsrs	r1, r1, #1
 8008644:	ea5f 0030 	movs.w	r0, r0, rrx
 8008648:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800864c:	f104 0401 	add.w	r4, r4, #1
 8008650:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008658:	f080 809a 	bcs.w	8008790 <__adddf3+0x240>
 800865c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008660:	bf08      	it	eq
 8008662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008666:	f150 0000 	adcs.w	r0, r0, #0
 800866a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800866e:	ea41 0105 	orr.w	r1, r1, r5
 8008672:	bd30      	pop	{r4, r5, pc}
 8008674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008678:	4140      	adcs	r0, r0
 800867a:	eb41 0101 	adc.w	r1, r1, r1
 800867e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008682:	f1a4 0401 	sub.w	r4, r4, #1
 8008686:	d1e9      	bne.n	800865c <__adddf3+0x10c>
 8008688:	f091 0f00 	teq	r1, #0
 800868c:	bf04      	itt	eq
 800868e:	4601      	moveq	r1, r0
 8008690:	2000      	moveq	r0, #0
 8008692:	fab1 f381 	clz	r3, r1
 8008696:	bf08      	it	eq
 8008698:	3320      	addeq	r3, #32
 800869a:	f1a3 030b 	sub.w	r3, r3, #11
 800869e:	f1b3 0220 	subs.w	r2, r3, #32
 80086a2:	da0c      	bge.n	80086be <__adddf3+0x16e>
 80086a4:	320c      	adds	r2, #12
 80086a6:	dd08      	ble.n	80086ba <__adddf3+0x16a>
 80086a8:	f102 0c14 	add.w	ip, r2, #20
 80086ac:	f1c2 020c 	rsb	r2, r2, #12
 80086b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80086b4:	fa21 f102 	lsr.w	r1, r1, r2
 80086b8:	e00c      	b.n	80086d4 <__adddf3+0x184>
 80086ba:	f102 0214 	add.w	r2, r2, #20
 80086be:	bfd8      	it	le
 80086c0:	f1c2 0c20 	rsble	ip, r2, #32
 80086c4:	fa01 f102 	lsl.w	r1, r1, r2
 80086c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80086cc:	bfdc      	itt	le
 80086ce:	ea41 010c 	orrle.w	r1, r1, ip
 80086d2:	4090      	lslle	r0, r2
 80086d4:	1ae4      	subs	r4, r4, r3
 80086d6:	bfa2      	ittt	ge
 80086d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80086dc:	4329      	orrge	r1, r5
 80086de:	bd30      	popge	{r4, r5, pc}
 80086e0:	ea6f 0404 	mvn.w	r4, r4
 80086e4:	3c1f      	subs	r4, #31
 80086e6:	da1c      	bge.n	8008722 <__adddf3+0x1d2>
 80086e8:	340c      	adds	r4, #12
 80086ea:	dc0e      	bgt.n	800870a <__adddf3+0x1ba>
 80086ec:	f104 0414 	add.w	r4, r4, #20
 80086f0:	f1c4 0220 	rsb	r2, r4, #32
 80086f4:	fa20 f004 	lsr.w	r0, r0, r4
 80086f8:	fa01 f302 	lsl.w	r3, r1, r2
 80086fc:	ea40 0003 	orr.w	r0, r0, r3
 8008700:	fa21 f304 	lsr.w	r3, r1, r4
 8008704:	ea45 0103 	orr.w	r1, r5, r3
 8008708:	bd30      	pop	{r4, r5, pc}
 800870a:	f1c4 040c 	rsb	r4, r4, #12
 800870e:	f1c4 0220 	rsb	r2, r4, #32
 8008712:	fa20 f002 	lsr.w	r0, r0, r2
 8008716:	fa01 f304 	lsl.w	r3, r1, r4
 800871a:	ea40 0003 	orr.w	r0, r0, r3
 800871e:	4629      	mov	r1, r5
 8008720:	bd30      	pop	{r4, r5, pc}
 8008722:	fa21 f004 	lsr.w	r0, r1, r4
 8008726:	4629      	mov	r1, r5
 8008728:	bd30      	pop	{r4, r5, pc}
 800872a:	f094 0f00 	teq	r4, #0
 800872e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008732:	bf06      	itte	eq
 8008734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008738:	3401      	addeq	r4, #1
 800873a:	3d01      	subne	r5, #1
 800873c:	e74e      	b.n	80085dc <__adddf3+0x8c>
 800873e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008742:	bf18      	it	ne
 8008744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008748:	d029      	beq.n	800879e <__adddf3+0x24e>
 800874a:	ea94 0f05 	teq	r4, r5
 800874e:	bf08      	it	eq
 8008750:	ea90 0f02 	teqeq	r0, r2
 8008754:	d005      	beq.n	8008762 <__adddf3+0x212>
 8008756:	ea54 0c00 	orrs.w	ip, r4, r0
 800875a:	bf04      	itt	eq
 800875c:	4619      	moveq	r1, r3
 800875e:	4610      	moveq	r0, r2
 8008760:	bd30      	pop	{r4, r5, pc}
 8008762:	ea91 0f03 	teq	r1, r3
 8008766:	bf1e      	ittt	ne
 8008768:	2100      	movne	r1, #0
 800876a:	2000      	movne	r0, #0
 800876c:	bd30      	popne	{r4, r5, pc}
 800876e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008772:	d105      	bne.n	8008780 <__adddf3+0x230>
 8008774:	0040      	lsls	r0, r0, #1
 8008776:	4149      	adcs	r1, r1
 8008778:	bf28      	it	cs
 800877a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800877e:	bd30      	pop	{r4, r5, pc}
 8008780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008784:	bf3c      	itt	cc
 8008786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800878a:	bd30      	popcc	{r4, r5, pc}
 800878c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008798:	f04f 0000 	mov.w	r0, #0
 800879c:	bd30      	pop	{r4, r5, pc}
 800879e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80087a2:	bf1a      	itte	ne
 80087a4:	4619      	movne	r1, r3
 80087a6:	4610      	movne	r0, r2
 80087a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80087ac:	bf1c      	itt	ne
 80087ae:	460b      	movne	r3, r1
 80087b0:	4602      	movne	r2, r0
 80087b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80087b6:	bf06      	itte	eq
 80087b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80087bc:	ea91 0f03 	teqeq	r1, r3
 80087c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80087c4:	bd30      	pop	{r4, r5, pc}
 80087c6:	bf00      	nop

080087c8 <__aeabi_ui2d>:
 80087c8:	f090 0f00 	teq	r0, #0
 80087cc:	bf04      	itt	eq
 80087ce:	2100      	moveq	r1, #0
 80087d0:	4770      	bxeq	lr
 80087d2:	b530      	push	{r4, r5, lr}
 80087d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80087d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80087dc:	f04f 0500 	mov.w	r5, #0
 80087e0:	f04f 0100 	mov.w	r1, #0
 80087e4:	e750      	b.n	8008688 <__adddf3+0x138>
 80087e6:	bf00      	nop

080087e8 <__aeabi_i2d>:
 80087e8:	f090 0f00 	teq	r0, #0
 80087ec:	bf04      	itt	eq
 80087ee:	2100      	moveq	r1, #0
 80087f0:	4770      	bxeq	lr
 80087f2:	b530      	push	{r4, r5, lr}
 80087f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80087f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80087fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008800:	bf48      	it	mi
 8008802:	4240      	negmi	r0, r0
 8008804:	f04f 0100 	mov.w	r1, #0
 8008808:	e73e      	b.n	8008688 <__adddf3+0x138>
 800880a:	bf00      	nop

0800880c <__aeabi_f2d>:
 800880c:	0042      	lsls	r2, r0, #1
 800880e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008812:	ea4f 0131 	mov.w	r1, r1, rrx
 8008816:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800881a:	bf1f      	itttt	ne
 800881c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008828:	4770      	bxne	lr
 800882a:	f092 0f00 	teq	r2, #0
 800882e:	bf14      	ite	ne
 8008830:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008834:	4770      	bxeq	lr
 8008836:	b530      	push	{r4, r5, lr}
 8008838:	f44f 7460 	mov.w	r4, #896	; 0x380
 800883c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008844:	e720      	b.n	8008688 <__adddf3+0x138>
 8008846:	bf00      	nop

08008848 <__aeabi_ul2d>:
 8008848:	ea50 0201 	orrs.w	r2, r0, r1
 800884c:	bf08      	it	eq
 800884e:	4770      	bxeq	lr
 8008850:	b530      	push	{r4, r5, lr}
 8008852:	f04f 0500 	mov.w	r5, #0
 8008856:	e00a      	b.n	800886e <__aeabi_l2d+0x16>

08008858 <__aeabi_l2d>:
 8008858:	ea50 0201 	orrs.w	r2, r0, r1
 800885c:	bf08      	it	eq
 800885e:	4770      	bxeq	lr
 8008860:	b530      	push	{r4, r5, lr}
 8008862:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008866:	d502      	bpl.n	800886e <__aeabi_l2d+0x16>
 8008868:	4240      	negs	r0, r0
 800886a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800886e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008872:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008876:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800887a:	f43f aedc 	beq.w	8008636 <__adddf3+0xe6>
 800887e:	f04f 0203 	mov.w	r2, #3
 8008882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008886:	bf18      	it	ne
 8008888:	3203      	addne	r2, #3
 800888a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800888e:	bf18      	it	ne
 8008890:	3203      	addne	r2, #3
 8008892:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008896:	f1c2 0320 	rsb	r3, r2, #32
 800889a:	fa00 fc03 	lsl.w	ip, r0, r3
 800889e:	fa20 f002 	lsr.w	r0, r0, r2
 80088a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80088a6:	ea40 000e 	orr.w	r0, r0, lr
 80088aa:	fa21 f102 	lsr.w	r1, r1, r2
 80088ae:	4414      	add	r4, r2
 80088b0:	e6c1      	b.n	8008636 <__adddf3+0xe6>
 80088b2:	bf00      	nop

080088b4 <__aeabi_dmul>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80088ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80088be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80088c2:	bf1d      	ittte	ne
 80088c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80088c8:	ea94 0f0c 	teqne	r4, ip
 80088cc:	ea95 0f0c 	teqne	r5, ip
 80088d0:	f000 f8de 	bleq	8008a90 <__aeabi_dmul+0x1dc>
 80088d4:	442c      	add	r4, r5
 80088d6:	ea81 0603 	eor.w	r6, r1, r3
 80088da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80088de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80088e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80088e6:	bf18      	it	ne
 80088e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80088ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80088f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088f4:	d038      	beq.n	8008968 <__aeabi_dmul+0xb4>
 80088f6:	fba0 ce02 	umull	ip, lr, r0, r2
 80088fa:	f04f 0500 	mov.w	r5, #0
 80088fe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008902:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008906:	fbe0 e503 	umlal	lr, r5, r0, r3
 800890a:	f04f 0600 	mov.w	r6, #0
 800890e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008912:	f09c 0f00 	teq	ip, #0
 8008916:	bf18      	it	ne
 8008918:	f04e 0e01 	orrne.w	lr, lr, #1
 800891c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008920:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008924:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008928:	d204      	bcs.n	8008934 <__aeabi_dmul+0x80>
 800892a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800892e:	416d      	adcs	r5, r5
 8008930:	eb46 0606 	adc.w	r6, r6, r6
 8008934:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008938:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800893c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008940:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008944:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008948:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800894c:	bf88      	it	hi
 800894e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008952:	d81e      	bhi.n	8008992 <__aeabi_dmul+0xde>
 8008954:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008958:	bf08      	it	eq
 800895a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800895e:	f150 0000 	adcs.w	r0, r0, #0
 8008962:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800896c:	ea46 0101 	orr.w	r1, r6, r1
 8008970:	ea40 0002 	orr.w	r0, r0, r2
 8008974:	ea81 0103 	eor.w	r1, r1, r3
 8008978:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800897c:	bfc2      	ittt	gt
 800897e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008986:	bd70      	popgt	{r4, r5, r6, pc}
 8008988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800898c:	f04f 0e00 	mov.w	lr, #0
 8008990:	3c01      	subs	r4, #1
 8008992:	f300 80ab 	bgt.w	8008aec <__aeabi_dmul+0x238>
 8008996:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800899a:	bfde      	ittt	le
 800899c:	2000      	movle	r0, #0
 800899e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80089a2:	bd70      	pople	{r4, r5, r6, pc}
 80089a4:	f1c4 0400 	rsb	r4, r4, #0
 80089a8:	3c20      	subs	r4, #32
 80089aa:	da35      	bge.n	8008a18 <__aeabi_dmul+0x164>
 80089ac:	340c      	adds	r4, #12
 80089ae:	dc1b      	bgt.n	80089e8 <__aeabi_dmul+0x134>
 80089b0:	f104 0414 	add.w	r4, r4, #20
 80089b4:	f1c4 0520 	rsb	r5, r4, #32
 80089b8:	fa00 f305 	lsl.w	r3, r0, r5
 80089bc:	fa20 f004 	lsr.w	r0, r0, r4
 80089c0:	fa01 f205 	lsl.w	r2, r1, r5
 80089c4:	ea40 0002 	orr.w	r0, r0, r2
 80089c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80089cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80089d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80089d4:	fa21 f604 	lsr.w	r6, r1, r4
 80089d8:	eb42 0106 	adc.w	r1, r2, r6
 80089dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80089e0:	bf08      	it	eq
 80089e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	f1c4 040c 	rsb	r4, r4, #12
 80089ec:	f1c4 0520 	rsb	r5, r4, #32
 80089f0:	fa00 f304 	lsl.w	r3, r0, r4
 80089f4:	fa20 f005 	lsr.w	r0, r0, r5
 80089f8:	fa01 f204 	lsl.w	r2, r1, r4
 80089fc:	ea40 0002 	orr.w	r0, r0, r2
 8008a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008a04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008a08:	f141 0100 	adc.w	r1, r1, #0
 8008a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008a10:	bf08      	it	eq
 8008a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	f1c4 0520 	rsb	r5, r4, #32
 8008a1c:	fa00 f205 	lsl.w	r2, r0, r5
 8008a20:	ea4e 0e02 	orr.w	lr, lr, r2
 8008a24:	fa20 f304 	lsr.w	r3, r0, r4
 8008a28:	fa01 f205 	lsl.w	r2, r1, r5
 8008a2c:	ea43 0302 	orr.w	r3, r3, r2
 8008a30:	fa21 f004 	lsr.w	r0, r1, r4
 8008a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008a38:	fa21 f204 	lsr.w	r2, r1, r4
 8008a3c:	ea20 0002 	bic.w	r0, r0, r2
 8008a40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008a44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008a48:	bf08      	it	eq
 8008a4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	f094 0f00 	teq	r4, #0
 8008a54:	d10f      	bne.n	8008a76 <__aeabi_dmul+0x1c2>
 8008a56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008a5a:	0040      	lsls	r0, r0, #1
 8008a5c:	eb41 0101 	adc.w	r1, r1, r1
 8008a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a64:	bf08      	it	eq
 8008a66:	3c01      	subeq	r4, #1
 8008a68:	d0f7      	beq.n	8008a5a <__aeabi_dmul+0x1a6>
 8008a6a:	ea41 0106 	orr.w	r1, r1, r6
 8008a6e:	f095 0f00 	teq	r5, #0
 8008a72:	bf18      	it	ne
 8008a74:	4770      	bxne	lr
 8008a76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008a7a:	0052      	lsls	r2, r2, #1
 8008a7c:	eb43 0303 	adc.w	r3, r3, r3
 8008a80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008a84:	bf08      	it	eq
 8008a86:	3d01      	subeq	r5, #1
 8008a88:	d0f7      	beq.n	8008a7a <__aeabi_dmul+0x1c6>
 8008a8a:	ea43 0306 	orr.w	r3, r3, r6
 8008a8e:	4770      	bx	lr
 8008a90:	ea94 0f0c 	teq	r4, ip
 8008a94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a98:	bf18      	it	ne
 8008a9a:	ea95 0f0c 	teqne	r5, ip
 8008a9e:	d00c      	beq.n	8008aba <__aeabi_dmul+0x206>
 8008aa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008aa4:	bf18      	it	ne
 8008aa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008aaa:	d1d1      	bne.n	8008a50 <__aeabi_dmul+0x19c>
 8008aac:	ea81 0103 	eor.w	r1, r1, r3
 8008ab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ab4:	f04f 0000 	mov.w	r0, #0
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008abe:	bf06      	itte	eq
 8008ac0:	4610      	moveq	r0, r2
 8008ac2:	4619      	moveq	r1, r3
 8008ac4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008ac8:	d019      	beq.n	8008afe <__aeabi_dmul+0x24a>
 8008aca:	ea94 0f0c 	teq	r4, ip
 8008ace:	d102      	bne.n	8008ad6 <__aeabi_dmul+0x222>
 8008ad0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008ad4:	d113      	bne.n	8008afe <__aeabi_dmul+0x24a>
 8008ad6:	ea95 0f0c 	teq	r5, ip
 8008ada:	d105      	bne.n	8008ae8 <__aeabi_dmul+0x234>
 8008adc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008ae0:	bf1c      	itt	ne
 8008ae2:	4610      	movne	r0, r2
 8008ae4:	4619      	movne	r1, r3
 8008ae6:	d10a      	bne.n	8008afe <__aeabi_dmul+0x24a>
 8008ae8:	ea81 0103 	eor.w	r1, r1, r3
 8008aec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008af0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008af4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008af8:	f04f 0000 	mov.w	r0, #0
 8008afc:	bd70      	pop	{r4, r5, r6, pc}
 8008afe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008b02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008b06:	bd70      	pop	{r4, r5, r6, pc}

08008b08 <__aeabi_ddiv>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008b0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008b12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008b16:	bf1d      	ittte	ne
 8008b18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008b1c:	ea94 0f0c 	teqne	r4, ip
 8008b20:	ea95 0f0c 	teqne	r5, ip
 8008b24:	f000 f8a7 	bleq	8008c76 <__aeabi_ddiv+0x16e>
 8008b28:	eba4 0405 	sub.w	r4, r4, r5
 8008b2c:	ea81 0e03 	eor.w	lr, r1, r3
 8008b30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008b34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008b38:	f000 8088 	beq.w	8008c4c <__aeabi_ddiv+0x144>
 8008b3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008b40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008b44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008b48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008b4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008b50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008b54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008b58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008b5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008b60:	429d      	cmp	r5, r3
 8008b62:	bf08      	it	eq
 8008b64:	4296      	cmpeq	r6, r2
 8008b66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008b6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008b6e:	d202      	bcs.n	8008b76 <__aeabi_ddiv+0x6e>
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8008b76:	1ab6      	subs	r6, r6, r2
 8008b78:	eb65 0503 	sbc.w	r5, r5, r3
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008b82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008b8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8008b8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008b92:	bf22      	ittt	cs
 8008b94:	1ab6      	subcs	r6, r6, r2
 8008b96:	4675      	movcs	r5, lr
 8008b98:	ea40 000c 	orrcs.w	r0, r0, ip
 8008b9c:	085b      	lsrs	r3, r3, #1
 8008b9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008ba2:	ebb6 0e02 	subs.w	lr, r6, r2
 8008ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008baa:	bf22      	ittt	cs
 8008bac:	1ab6      	subcs	r6, r6, r2
 8008bae:	4675      	movcs	r5, lr
 8008bb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8008bba:	ebb6 0e02 	subs.w	lr, r6, r2
 8008bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008bc2:	bf22      	ittt	cs
 8008bc4:	1ab6      	subcs	r6, r6, r2
 8008bc6:	4675      	movcs	r5, lr
 8008bc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008bcc:	085b      	lsrs	r3, r3, #1
 8008bce:	ea4f 0232 	mov.w	r2, r2, rrx
 8008bd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8008bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008bda:	bf22      	ittt	cs
 8008bdc:	1ab6      	subcs	r6, r6, r2
 8008bde:	4675      	movcs	r5, lr
 8008be0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008be4:	ea55 0e06 	orrs.w	lr, r5, r6
 8008be8:	d018      	beq.n	8008c1c <__aeabi_ddiv+0x114>
 8008bea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008bee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008bf2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008bf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008bfa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008bfe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008c02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008c06:	d1c0      	bne.n	8008b8a <__aeabi_ddiv+0x82>
 8008c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008c0c:	d10b      	bne.n	8008c26 <__aeabi_ddiv+0x11e>
 8008c0e:	ea41 0100 	orr.w	r1, r1, r0
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008c1a:	e7b6      	b.n	8008b8a <__aeabi_ddiv+0x82>
 8008c1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008c20:	bf04      	itt	eq
 8008c22:	4301      	orreq	r1, r0
 8008c24:	2000      	moveq	r0, #0
 8008c26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008c2a:	bf88      	it	hi
 8008c2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008c30:	f63f aeaf 	bhi.w	8008992 <__aeabi_dmul+0xde>
 8008c34:	ebb5 0c03 	subs.w	ip, r5, r3
 8008c38:	bf04      	itt	eq
 8008c3a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008c3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008c42:	f150 0000 	adcs.w	r0, r0, #0
 8008c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}
 8008c4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008c50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008c54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008c58:	bfc2      	ittt	gt
 8008c5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008c5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008c62:	bd70      	popgt	{r4, r5, r6, pc}
 8008c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c68:	f04f 0e00 	mov.w	lr, #0
 8008c6c:	3c01      	subs	r4, #1
 8008c6e:	e690      	b.n	8008992 <__aeabi_dmul+0xde>
 8008c70:	ea45 0e06 	orr.w	lr, r5, r6
 8008c74:	e68d      	b.n	8008992 <__aeabi_dmul+0xde>
 8008c76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008c7a:	ea94 0f0c 	teq	r4, ip
 8008c7e:	bf08      	it	eq
 8008c80:	ea95 0f0c 	teqeq	r5, ip
 8008c84:	f43f af3b 	beq.w	8008afe <__aeabi_dmul+0x24a>
 8008c88:	ea94 0f0c 	teq	r4, ip
 8008c8c:	d10a      	bne.n	8008ca4 <__aeabi_ddiv+0x19c>
 8008c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008c92:	f47f af34 	bne.w	8008afe <__aeabi_dmul+0x24a>
 8008c96:	ea95 0f0c 	teq	r5, ip
 8008c9a:	f47f af25 	bne.w	8008ae8 <__aeabi_dmul+0x234>
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	e72c      	b.n	8008afe <__aeabi_dmul+0x24a>
 8008ca4:	ea95 0f0c 	teq	r5, ip
 8008ca8:	d106      	bne.n	8008cb8 <__aeabi_ddiv+0x1b0>
 8008caa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008cae:	f43f aefd 	beq.w	8008aac <__aeabi_dmul+0x1f8>
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	e722      	b.n	8008afe <__aeabi_dmul+0x24a>
 8008cb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008cbc:	bf18      	it	ne
 8008cbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008cc2:	f47f aec5 	bne.w	8008a50 <__aeabi_dmul+0x19c>
 8008cc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008cca:	f47f af0d 	bne.w	8008ae8 <__aeabi_dmul+0x234>
 8008cce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008cd2:	f47f aeeb 	bne.w	8008aac <__aeabi_dmul+0x1f8>
 8008cd6:	e712      	b.n	8008afe <__aeabi_dmul+0x24a>

08008cd8 <__gedf2>:
 8008cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8008cdc:	e006      	b.n	8008cec <__cmpdf2+0x4>
 8008cde:	bf00      	nop

08008ce0 <__ledf2>:
 8008ce0:	f04f 0c01 	mov.w	ip, #1
 8008ce4:	e002      	b.n	8008cec <__cmpdf2+0x4>
 8008ce6:	bf00      	nop

08008ce8 <__cmpdf2>:
 8008ce8:	f04f 0c01 	mov.w	ip, #1
 8008cec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008cf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008cf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008cf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008cfc:	bf18      	it	ne
 8008cfe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008d02:	d01b      	beq.n	8008d3c <__cmpdf2+0x54>
 8008d04:	b001      	add	sp, #4
 8008d06:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008d0a:	bf0c      	ite	eq
 8008d0c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008d10:	ea91 0f03 	teqne	r1, r3
 8008d14:	bf02      	ittt	eq
 8008d16:	ea90 0f02 	teqeq	r0, r2
 8008d1a:	2000      	moveq	r0, #0
 8008d1c:	4770      	bxeq	lr
 8008d1e:	f110 0f00 	cmn.w	r0, #0
 8008d22:	ea91 0f03 	teq	r1, r3
 8008d26:	bf58      	it	pl
 8008d28:	4299      	cmppl	r1, r3
 8008d2a:	bf08      	it	eq
 8008d2c:	4290      	cmpeq	r0, r2
 8008d2e:	bf2c      	ite	cs
 8008d30:	17d8      	asrcs	r0, r3, #31
 8008d32:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008d36:	f040 0001 	orr.w	r0, r0, #1
 8008d3a:	4770      	bx	lr
 8008d3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008d40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008d44:	d102      	bne.n	8008d4c <__cmpdf2+0x64>
 8008d46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008d4a:	d107      	bne.n	8008d5c <__cmpdf2+0x74>
 8008d4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008d50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008d54:	d1d6      	bne.n	8008d04 <__cmpdf2+0x1c>
 8008d56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008d5a:	d0d3      	beq.n	8008d04 <__cmpdf2+0x1c>
 8008d5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop

08008d64 <__aeabi_cdrcmple>:
 8008d64:	4684      	mov	ip, r0
 8008d66:	4610      	mov	r0, r2
 8008d68:	4662      	mov	r2, ip
 8008d6a:	468c      	mov	ip, r1
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4663      	mov	r3, ip
 8008d70:	e000      	b.n	8008d74 <__aeabi_cdcmpeq>
 8008d72:	bf00      	nop

08008d74 <__aeabi_cdcmpeq>:
 8008d74:	b501      	push	{r0, lr}
 8008d76:	f7ff ffb7 	bl	8008ce8 <__cmpdf2>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	bf48      	it	mi
 8008d7e:	f110 0f00 	cmnmi.w	r0, #0
 8008d82:	bd01      	pop	{r0, pc}

08008d84 <__aeabi_dcmpeq>:
 8008d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008d88:	f7ff fff4 	bl	8008d74 <__aeabi_cdcmpeq>
 8008d8c:	bf0c      	ite	eq
 8008d8e:	2001      	moveq	r0, #1
 8008d90:	2000      	movne	r0, #0
 8008d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8008d96:	bf00      	nop

08008d98 <__aeabi_dcmplt>:
 8008d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008d9c:	f7ff ffea 	bl	8008d74 <__aeabi_cdcmpeq>
 8008da0:	bf34      	ite	cc
 8008da2:	2001      	movcc	r0, #1
 8008da4:	2000      	movcs	r0, #0
 8008da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008daa:	bf00      	nop

08008dac <__aeabi_dcmple>:
 8008dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008db0:	f7ff ffe0 	bl	8008d74 <__aeabi_cdcmpeq>
 8008db4:	bf94      	ite	ls
 8008db6:	2001      	movls	r0, #1
 8008db8:	2000      	movhi	r0, #0
 8008dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8008dbe:	bf00      	nop

08008dc0 <__aeabi_dcmpge>:
 8008dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008dc4:	f7ff ffce 	bl	8008d64 <__aeabi_cdrcmple>
 8008dc8:	bf94      	ite	ls
 8008dca:	2001      	movls	r0, #1
 8008dcc:	2000      	movhi	r0, #0
 8008dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8008dd2:	bf00      	nop

08008dd4 <__aeabi_dcmpgt>:
 8008dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008dd8:	f7ff ffc4 	bl	8008d64 <__aeabi_cdrcmple>
 8008ddc:	bf34      	ite	cc
 8008dde:	2001      	movcc	r0, #1
 8008de0:	2000      	movcs	r0, #0
 8008de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008de6:	bf00      	nop

08008de8 <__aeabi_dcmpun>:
 8008de8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008df0:	d102      	bne.n	8008df8 <__aeabi_dcmpun+0x10>
 8008df2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008df6:	d10a      	bne.n	8008e0e <__aeabi_dcmpun+0x26>
 8008df8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008dfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e00:	d102      	bne.n	8008e08 <__aeabi_dcmpun+0x20>
 8008e02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008e06:	d102      	bne.n	8008e0e <__aeabi_dcmpun+0x26>
 8008e08:	f04f 0000 	mov.w	r0, #0
 8008e0c:	4770      	bx	lr
 8008e0e:	f04f 0001 	mov.w	r0, #1
 8008e12:	4770      	bx	lr

08008e14 <__aeabi_d2iz>:
 8008e14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008e18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008e1c:	d215      	bcs.n	8008e4a <__aeabi_d2iz+0x36>
 8008e1e:	d511      	bpl.n	8008e44 <__aeabi_d2iz+0x30>
 8008e20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008e24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008e28:	d912      	bls.n	8008e50 <__aeabi_d2iz+0x3c>
 8008e2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008e36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008e3a:	fa23 f002 	lsr.w	r0, r3, r2
 8008e3e:	bf18      	it	ne
 8008e40:	4240      	negne	r0, r0
 8008e42:	4770      	bx	lr
 8008e44:	f04f 0000 	mov.w	r0, #0
 8008e48:	4770      	bx	lr
 8008e4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008e4e:	d105      	bne.n	8008e5c <__aeabi_d2iz+0x48>
 8008e50:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008e54:	bf08      	it	eq
 8008e56:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008e5a:	4770      	bx	lr
 8008e5c:	f04f 0000 	mov.w	r0, #0
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop

08008e64 <__aeabi_d2f>:
 8008e64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008e68:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008e6c:	bf24      	itt	cs
 8008e6e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008e72:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008e76:	d90d      	bls.n	8008e94 <__aeabi_d2f+0x30>
 8008e78:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008e7c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008e80:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008e84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008e88:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008e8c:	bf08      	it	eq
 8008e8e:	f020 0001 	biceq.w	r0, r0, #1
 8008e92:	4770      	bx	lr
 8008e94:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008e98:	d121      	bne.n	8008ede <__aeabi_d2f+0x7a>
 8008e9a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008e9e:	bfbc      	itt	lt
 8008ea0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008ea4:	4770      	bxlt	lr
 8008ea6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008eaa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008eae:	f1c2 0218 	rsb	r2, r2, #24
 8008eb2:	f1c2 0c20 	rsb	ip, r2, #32
 8008eb6:	fa10 f30c 	lsls.w	r3, r0, ip
 8008eba:	fa20 f002 	lsr.w	r0, r0, r2
 8008ebe:	bf18      	it	ne
 8008ec0:	f040 0001 	orrne.w	r0, r0, #1
 8008ec4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008ec8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ecc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ed0:	ea40 000c 	orr.w	r0, r0, ip
 8008ed4:	fa23 f302 	lsr.w	r3, r3, r2
 8008ed8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008edc:	e7cc      	b.n	8008e78 <__aeabi_d2f+0x14>
 8008ede:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ee2:	d107      	bne.n	8008ef4 <__aeabi_d2f+0x90>
 8008ee4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008ee8:	bf1e      	ittt	ne
 8008eea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008eee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ef2:	4770      	bxne	lr
 8008ef4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <__aeabi_uldivmod>:
 8008f04:	b953      	cbnz	r3, 8008f1c <__aeabi_uldivmod+0x18>
 8008f06:	b94a      	cbnz	r2, 8008f1c <__aeabi_uldivmod+0x18>
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	bf08      	it	eq
 8008f0c:	2800      	cmpeq	r0, #0
 8008f0e:	bf1c      	itt	ne
 8008f10:	f04f 31ff 	movne.w	r1, #4294967295
 8008f14:	f04f 30ff 	movne.w	r0, #4294967295
 8008f18:	f001 b8ec 	b.w	800a0f4 <__aeabi_idiv0>
 8008f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8008f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008f24:	f000 f806 	bl	8008f34 <__udivmoddi4>
 8008f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f30:	b004      	add	sp, #16
 8008f32:	4770      	bx	lr

08008f34 <__udivmoddi4>:
 8008f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f38:	468c      	mov	ip, r1
 8008f3a:	460e      	mov	r6, r1
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	9d08      	ldr	r5, [sp, #32]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d150      	bne.n	8008fe6 <__udivmoddi4+0xb2>
 8008f44:	428a      	cmp	r2, r1
 8008f46:	4617      	mov	r7, r2
 8008f48:	d96c      	bls.n	8009024 <__udivmoddi4+0xf0>
 8008f4a:	fab2 fe82 	clz	lr, r2
 8008f4e:	f1be 0f00 	cmp.w	lr, #0
 8008f52:	d00b      	beq.n	8008f6c <__udivmoddi4+0x38>
 8008f54:	f1ce 0420 	rsb	r4, lr, #32
 8008f58:	fa20 f404 	lsr.w	r4, r0, r4
 8008f5c:	fa01 f60e 	lsl.w	r6, r1, lr
 8008f60:	ea44 0c06 	orr.w	ip, r4, r6
 8008f64:	fa02 f70e 	lsl.w	r7, r2, lr
 8008f68:	fa00 f40e 	lsl.w	r4, r0, lr
 8008f6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008f70:	0c22      	lsrs	r2, r4, #16
 8008f72:	fbbc f0f9 	udiv	r0, ip, r9
 8008f76:	fa1f f887 	uxth.w	r8, r7
 8008f7a:	fb09 c610 	mls	r6, r9, r0, ip
 8008f7e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008f82:	fb00 f308 	mul.w	r3, r0, r8
 8008f86:	42b3      	cmp	r3, r6
 8008f88:	d909      	bls.n	8008f9e <__udivmoddi4+0x6a>
 8008f8a:	19f6      	adds	r6, r6, r7
 8008f8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8008f90:	f080 8122 	bcs.w	80091d8 <__udivmoddi4+0x2a4>
 8008f94:	42b3      	cmp	r3, r6
 8008f96:	f240 811f 	bls.w	80091d8 <__udivmoddi4+0x2a4>
 8008f9a:	3802      	subs	r0, #2
 8008f9c:	443e      	add	r6, r7
 8008f9e:	1af6      	subs	r6, r6, r3
 8008fa0:	b2a2      	uxth	r2, r4
 8008fa2:	fbb6 f3f9 	udiv	r3, r6, r9
 8008fa6:	fb09 6613 	mls	r6, r9, r3, r6
 8008faa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8008fae:	fb03 f808 	mul.w	r8, r3, r8
 8008fb2:	45a0      	cmp	r8, r4
 8008fb4:	d909      	bls.n	8008fca <__udivmoddi4+0x96>
 8008fb6:	19e4      	adds	r4, r4, r7
 8008fb8:	f103 32ff 	add.w	r2, r3, #4294967295
 8008fbc:	f080 810a 	bcs.w	80091d4 <__udivmoddi4+0x2a0>
 8008fc0:	45a0      	cmp	r8, r4
 8008fc2:	f240 8107 	bls.w	80091d4 <__udivmoddi4+0x2a0>
 8008fc6:	3b02      	subs	r3, #2
 8008fc8:	443c      	add	r4, r7
 8008fca:	ebc8 0404 	rsb	r4, r8, r4
 8008fce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	d062      	beq.n	800909e <__udivmoddi4+0x16a>
 8008fd8:	fa24 f40e 	lsr.w	r4, r4, lr
 8008fdc:	2300      	movs	r3, #0
 8008fde:	602c      	str	r4, [r5, #0]
 8008fe0:	606b      	str	r3, [r5, #4]
 8008fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe6:	428b      	cmp	r3, r1
 8008fe8:	d907      	bls.n	8008ffa <__udivmoddi4+0xc6>
 8008fea:	2d00      	cmp	r5, #0
 8008fec:	d055      	beq.n	800909a <__udivmoddi4+0x166>
 8008fee:	2100      	movs	r1, #0
 8008ff0:	e885 0041 	stmia.w	r5, {r0, r6}
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffa:	fab3 f183 	clz	r1, r3
 8008ffe:	2900      	cmp	r1, #0
 8009000:	f040 8090 	bne.w	8009124 <__udivmoddi4+0x1f0>
 8009004:	42b3      	cmp	r3, r6
 8009006:	d302      	bcc.n	800900e <__udivmoddi4+0xda>
 8009008:	4282      	cmp	r2, r0
 800900a:	f200 80f8 	bhi.w	80091fe <__udivmoddi4+0x2ca>
 800900e:	1a84      	subs	r4, r0, r2
 8009010:	eb66 0603 	sbc.w	r6, r6, r3
 8009014:	2001      	movs	r0, #1
 8009016:	46b4      	mov	ip, r6
 8009018:	2d00      	cmp	r5, #0
 800901a:	d040      	beq.n	800909e <__udivmoddi4+0x16a>
 800901c:	e885 1010 	stmia.w	r5, {r4, ip}
 8009020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009024:	b912      	cbnz	r2, 800902c <__udivmoddi4+0xf8>
 8009026:	2701      	movs	r7, #1
 8009028:	fbb7 f7f2 	udiv	r7, r7, r2
 800902c:	fab7 fe87 	clz	lr, r7
 8009030:	f1be 0f00 	cmp.w	lr, #0
 8009034:	d135      	bne.n	80090a2 <__udivmoddi4+0x16e>
 8009036:	1bf3      	subs	r3, r6, r7
 8009038:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800903c:	fa1f fc87 	uxth.w	ip, r7
 8009040:	2101      	movs	r1, #1
 8009042:	fbb3 f0f8 	udiv	r0, r3, r8
 8009046:	0c22      	lsrs	r2, r4, #16
 8009048:	fb08 3610 	mls	r6, r8, r0, r3
 800904c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009050:	fb0c f300 	mul.w	r3, ip, r0
 8009054:	42b3      	cmp	r3, r6
 8009056:	d907      	bls.n	8009068 <__udivmoddi4+0x134>
 8009058:	19f6      	adds	r6, r6, r7
 800905a:	f100 32ff 	add.w	r2, r0, #4294967295
 800905e:	d202      	bcs.n	8009066 <__udivmoddi4+0x132>
 8009060:	42b3      	cmp	r3, r6
 8009062:	f200 80ce 	bhi.w	8009202 <__udivmoddi4+0x2ce>
 8009066:	4610      	mov	r0, r2
 8009068:	1af6      	subs	r6, r6, r3
 800906a:	b2a2      	uxth	r2, r4
 800906c:	fbb6 f3f8 	udiv	r3, r6, r8
 8009070:	fb08 6613 	mls	r6, r8, r3, r6
 8009074:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8009078:	fb0c fc03 	mul.w	ip, ip, r3
 800907c:	45a4      	cmp	ip, r4
 800907e:	d907      	bls.n	8009090 <__udivmoddi4+0x15c>
 8009080:	19e4      	adds	r4, r4, r7
 8009082:	f103 32ff 	add.w	r2, r3, #4294967295
 8009086:	d202      	bcs.n	800908e <__udivmoddi4+0x15a>
 8009088:	45a4      	cmp	ip, r4
 800908a:	f200 80b5 	bhi.w	80091f8 <__udivmoddi4+0x2c4>
 800908e:	4613      	mov	r3, r2
 8009090:	ebcc 0404 	rsb	r4, ip, r4
 8009094:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009098:	e79c      	b.n	8008fd4 <__udivmoddi4+0xa0>
 800909a:	4629      	mov	r1, r5
 800909c:	4628      	mov	r0, r5
 800909e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a2:	f1ce 0120 	rsb	r1, lr, #32
 80090a6:	fa06 f30e 	lsl.w	r3, r6, lr
 80090aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80090ae:	fa20 f901 	lsr.w	r9, r0, r1
 80090b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80090b6:	40ce      	lsrs	r6, r1
 80090b8:	ea49 0903 	orr.w	r9, r9, r3
 80090bc:	fbb6 faf8 	udiv	sl, r6, r8
 80090c0:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80090c4:	fb08 661a 	mls	r6, r8, sl, r6
 80090c8:	fa1f fc87 	uxth.w	ip, r7
 80090cc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80090d0:	fb0a f20c 	mul.w	r2, sl, ip
 80090d4:	429a      	cmp	r2, r3
 80090d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80090da:	d90a      	bls.n	80090f2 <__udivmoddi4+0x1be>
 80090dc:	19db      	adds	r3, r3, r7
 80090de:	f10a 31ff 	add.w	r1, sl, #4294967295
 80090e2:	f080 8087 	bcs.w	80091f4 <__udivmoddi4+0x2c0>
 80090e6:	429a      	cmp	r2, r3
 80090e8:	f240 8084 	bls.w	80091f4 <__udivmoddi4+0x2c0>
 80090ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80090f0:	443b      	add	r3, r7
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	fa1f f989 	uxth.w	r9, r9
 80090f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80090fc:	fb08 3311 	mls	r3, r8, r1, r3
 8009100:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8009104:	fb01 f60c 	mul.w	r6, r1, ip
 8009108:	429e      	cmp	r6, r3
 800910a:	d907      	bls.n	800911c <__udivmoddi4+0x1e8>
 800910c:	19db      	adds	r3, r3, r7
 800910e:	f101 32ff 	add.w	r2, r1, #4294967295
 8009112:	d26b      	bcs.n	80091ec <__udivmoddi4+0x2b8>
 8009114:	429e      	cmp	r6, r3
 8009116:	d969      	bls.n	80091ec <__udivmoddi4+0x2b8>
 8009118:	3902      	subs	r1, #2
 800911a:	443b      	add	r3, r7
 800911c:	1b9b      	subs	r3, r3, r6
 800911e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009122:	e78e      	b.n	8009042 <__udivmoddi4+0x10e>
 8009124:	f1c1 0e20 	rsb	lr, r1, #32
 8009128:	fa22 f40e 	lsr.w	r4, r2, lr
 800912c:	408b      	lsls	r3, r1
 800912e:	4323      	orrs	r3, r4
 8009130:	fa20 f70e 	lsr.w	r7, r0, lr
 8009134:	fa06 f401 	lsl.w	r4, r6, r1
 8009138:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800913c:	fa26 f60e 	lsr.w	r6, r6, lr
 8009140:	433c      	orrs	r4, r7
 8009142:	fbb6 f9fc 	udiv	r9, r6, ip
 8009146:	0c27      	lsrs	r7, r4, #16
 8009148:	fb0c 6619 	mls	r6, ip, r9, r6
 800914c:	fa1f f883 	uxth.w	r8, r3
 8009150:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8009154:	fb09 f708 	mul.w	r7, r9, r8
 8009158:	42b7      	cmp	r7, r6
 800915a:	fa02 f201 	lsl.w	r2, r2, r1
 800915e:	fa00 fa01 	lsl.w	sl, r0, r1
 8009162:	d908      	bls.n	8009176 <__udivmoddi4+0x242>
 8009164:	18f6      	adds	r6, r6, r3
 8009166:	f109 30ff 	add.w	r0, r9, #4294967295
 800916a:	d241      	bcs.n	80091f0 <__udivmoddi4+0x2bc>
 800916c:	42b7      	cmp	r7, r6
 800916e:	d93f      	bls.n	80091f0 <__udivmoddi4+0x2bc>
 8009170:	f1a9 0902 	sub.w	r9, r9, #2
 8009174:	441e      	add	r6, r3
 8009176:	1bf6      	subs	r6, r6, r7
 8009178:	b2a0      	uxth	r0, r4
 800917a:	fbb6 f4fc 	udiv	r4, r6, ip
 800917e:	fb0c 6614 	mls	r6, ip, r4, r6
 8009182:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8009186:	fb04 f808 	mul.w	r8, r4, r8
 800918a:	45b8      	cmp	r8, r7
 800918c:	d907      	bls.n	800919e <__udivmoddi4+0x26a>
 800918e:	18ff      	adds	r7, r7, r3
 8009190:	f104 30ff 	add.w	r0, r4, #4294967295
 8009194:	d228      	bcs.n	80091e8 <__udivmoddi4+0x2b4>
 8009196:	45b8      	cmp	r8, r7
 8009198:	d926      	bls.n	80091e8 <__udivmoddi4+0x2b4>
 800919a:	3c02      	subs	r4, #2
 800919c:	441f      	add	r7, r3
 800919e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80091a2:	ebc8 0707 	rsb	r7, r8, r7
 80091a6:	fba0 8902 	umull	r8, r9, r0, r2
 80091aa:	454f      	cmp	r7, r9
 80091ac:	4644      	mov	r4, r8
 80091ae:	464e      	mov	r6, r9
 80091b0:	d314      	bcc.n	80091dc <__udivmoddi4+0x2a8>
 80091b2:	d029      	beq.n	8009208 <__udivmoddi4+0x2d4>
 80091b4:	b365      	cbz	r5, 8009210 <__udivmoddi4+0x2dc>
 80091b6:	ebba 0304 	subs.w	r3, sl, r4
 80091ba:	eb67 0706 	sbc.w	r7, r7, r6
 80091be:	fa07 fe0e 	lsl.w	lr, r7, lr
 80091c2:	40cb      	lsrs	r3, r1
 80091c4:	40cf      	lsrs	r7, r1
 80091c6:	ea4e 0303 	orr.w	r3, lr, r3
 80091ca:	e885 0088 	stmia.w	r5, {r3, r7}
 80091ce:	2100      	movs	r1, #0
 80091d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d4:	4613      	mov	r3, r2
 80091d6:	e6f8      	b.n	8008fca <__udivmoddi4+0x96>
 80091d8:	4610      	mov	r0, r2
 80091da:	e6e0      	b.n	8008f9e <__udivmoddi4+0x6a>
 80091dc:	ebb8 0402 	subs.w	r4, r8, r2
 80091e0:	eb69 0603 	sbc.w	r6, r9, r3
 80091e4:	3801      	subs	r0, #1
 80091e6:	e7e5      	b.n	80091b4 <__udivmoddi4+0x280>
 80091e8:	4604      	mov	r4, r0
 80091ea:	e7d8      	b.n	800919e <__udivmoddi4+0x26a>
 80091ec:	4611      	mov	r1, r2
 80091ee:	e795      	b.n	800911c <__udivmoddi4+0x1e8>
 80091f0:	4681      	mov	r9, r0
 80091f2:	e7c0      	b.n	8009176 <__udivmoddi4+0x242>
 80091f4:	468a      	mov	sl, r1
 80091f6:	e77c      	b.n	80090f2 <__udivmoddi4+0x1be>
 80091f8:	3b02      	subs	r3, #2
 80091fa:	443c      	add	r4, r7
 80091fc:	e748      	b.n	8009090 <__udivmoddi4+0x15c>
 80091fe:	4608      	mov	r0, r1
 8009200:	e70a      	b.n	8009018 <__udivmoddi4+0xe4>
 8009202:	3802      	subs	r0, #2
 8009204:	443e      	add	r6, r7
 8009206:	e72f      	b.n	8009068 <__udivmoddi4+0x134>
 8009208:	45c2      	cmp	sl, r8
 800920a:	d3e7      	bcc.n	80091dc <__udivmoddi4+0x2a8>
 800920c:	463e      	mov	r6, r7
 800920e:	e7d1      	b.n	80091b4 <__udivmoddi4+0x280>
 8009210:	4629      	mov	r1, r5
 8009212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009216:	bf00      	nop

08009218 <selfrel_offset31>:
 8009218:	6803      	ldr	r3, [r0, #0]
 800921a:	005a      	lsls	r2, r3, #1
 800921c:	bf4c      	ite	mi
 800921e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009222:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8009226:	4418      	add	r0, r3
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop

0800922c <search_EIT_table>:
 800922c:	b361      	cbz	r1, 8009288 <search_EIT_table+0x5c>
 800922e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009232:	f101 3aff 	add.w	sl, r1, #4294967295
 8009236:	4690      	mov	r8, r2
 8009238:	4606      	mov	r6, r0
 800923a:	46d1      	mov	r9, sl
 800923c:	2700      	movs	r7, #0
 800923e:	eb07 0409 	add.w	r4, r7, r9
 8009242:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8009246:	1064      	asrs	r4, r4, #1
 8009248:	00e5      	lsls	r5, r4, #3
 800924a:	1971      	adds	r1, r6, r5
 800924c:	4608      	mov	r0, r1
 800924e:	f7ff ffe3 	bl	8009218 <selfrel_offset31>
 8009252:	45a2      	cmp	sl, r4
 8009254:	4683      	mov	fp, r0
 8009256:	f105 0008 	add.w	r0, r5, #8
 800925a:	4430      	add	r0, r6
 800925c:	d009      	beq.n	8009272 <search_EIT_table+0x46>
 800925e:	f7ff ffdb 	bl	8009218 <selfrel_offset31>
 8009262:	45c3      	cmp	fp, r8
 8009264:	f100 30ff 	add.w	r0, r0, #4294967295
 8009268:	d805      	bhi.n	8009276 <search_EIT_table+0x4a>
 800926a:	4540      	cmp	r0, r8
 800926c:	d209      	bcs.n	8009282 <search_EIT_table+0x56>
 800926e:	1c67      	adds	r7, r4, #1
 8009270:	e7e5      	b.n	800923e <search_EIT_table+0x12>
 8009272:	45c3      	cmp	fp, r8
 8009274:	d905      	bls.n	8009282 <search_EIT_table+0x56>
 8009276:	42a7      	cmp	r7, r4
 8009278:	d002      	beq.n	8009280 <search_EIT_table+0x54>
 800927a:	f104 39ff 	add.w	r9, r4, #4294967295
 800927e:	e7de      	b.n	800923e <search_EIT_table+0x12>
 8009280:	2100      	movs	r1, #0
 8009282:	4608      	mov	r0, r1
 8009284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009288:	4608      	mov	r0, r1
 800928a:	4770      	bx	lr

0800928c <__gnu_unwind_get_pr_addr>:
 800928c:	2801      	cmp	r0, #1
 800928e:	d007      	beq.n	80092a0 <__gnu_unwind_get_pr_addr+0x14>
 8009290:	2802      	cmp	r0, #2
 8009292:	d007      	beq.n	80092a4 <__gnu_unwind_get_pr_addr+0x18>
 8009294:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <__gnu_unwind_get_pr_addr+0x1c>)
 8009296:	2800      	cmp	r0, #0
 8009298:	bf0c      	ite	eq
 800929a:	4618      	moveq	r0, r3
 800929c:	2000      	movne	r0, #0
 800929e:	4770      	bx	lr
 80092a0:	4802      	ldr	r0, [pc, #8]	; (80092ac <__gnu_unwind_get_pr_addr+0x20>)
 80092a2:	4770      	bx	lr
 80092a4:	4802      	ldr	r0, [pc, #8]	; (80092b0 <__gnu_unwind_get_pr_addr+0x24>)
 80092a6:	4770      	bx	lr
 80092a8:	08009999 	.word	0x08009999
 80092ac:	0800999d 	.word	0x0800999d
 80092b0:	080099a1 	.word	0x080099a1

080092b4 <get_eit_entry>:
 80092b4:	b530      	push	{r4, r5, lr}
 80092b6:	4b24      	ldr	r3, [pc, #144]	; (8009348 <get_eit_entry+0x94>)
 80092b8:	b083      	sub	sp, #12
 80092ba:	4604      	mov	r4, r0
 80092bc:	1e8d      	subs	r5, r1, #2
 80092be:	b37b      	cbz	r3, 8009320 <get_eit_entry+0x6c>
 80092c0:	a901      	add	r1, sp, #4
 80092c2:	4628      	mov	r0, r5
 80092c4:	f3af 8000 	nop.w
 80092c8:	b320      	cbz	r0, 8009314 <get_eit_entry+0x60>
 80092ca:	9901      	ldr	r1, [sp, #4]
 80092cc:	462a      	mov	r2, r5
 80092ce:	f7ff ffad 	bl	800922c <search_EIT_table>
 80092d2:	4601      	mov	r1, r0
 80092d4:	b1f0      	cbz	r0, 8009314 <get_eit_entry+0x60>
 80092d6:	f7ff ff9f 	bl	8009218 <selfrel_offset31>
 80092da:	684b      	ldr	r3, [r1, #4]
 80092dc:	64a0      	str	r0, [r4, #72]	; 0x48
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d012      	beq.n	8009308 <get_eit_entry+0x54>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f101 0004 	add.w	r0, r1, #4
 80092e8:	db20      	blt.n	800932c <get_eit_entry+0x78>
 80092ea:	f7ff ff95 	bl	8009218 <selfrel_offset31>
 80092ee:	2300      	movs	r3, #0
 80092f0:	64e0      	str	r0, [r4, #76]	; 0x4c
 80092f2:	6523      	str	r3, [r4, #80]	; 0x50
 80092f4:	6803      	ldr	r3, [r0, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	db1c      	blt.n	8009334 <get_eit_entry+0x80>
 80092fa:	f7ff ff8d 	bl	8009218 <selfrel_offset31>
 80092fe:	2300      	movs	r3, #0
 8009300:	6120      	str	r0, [r4, #16]
 8009302:	4618      	mov	r0, r3
 8009304:	b003      	add	sp, #12
 8009306:	bd30      	pop	{r4, r5, pc}
 8009308:	2300      	movs	r3, #0
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	2305      	movs	r3, #5
 800930e:	4618      	mov	r0, r3
 8009310:	b003      	add	sp, #12
 8009312:	bd30      	pop	{r4, r5, pc}
 8009314:	2300      	movs	r3, #0
 8009316:	6123      	str	r3, [r4, #16]
 8009318:	2309      	movs	r3, #9
 800931a:	4618      	mov	r0, r3
 800931c:	b003      	add	sp, #12
 800931e:	bd30      	pop	{r4, r5, pc}
 8009320:	490a      	ldr	r1, [pc, #40]	; (800934c <get_eit_entry+0x98>)
 8009322:	480b      	ldr	r0, [pc, #44]	; (8009350 <get_eit_entry+0x9c>)
 8009324:	1a09      	subs	r1, r1, r0
 8009326:	10c9      	asrs	r1, r1, #3
 8009328:	9101      	str	r1, [sp, #4]
 800932a:	e7cf      	b.n	80092cc <get_eit_entry+0x18>
 800932c:	2301      	movs	r3, #1
 800932e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8009330:	6523      	str	r3, [r4, #80]	; 0x50
 8009332:	e7df      	b.n	80092f4 <get_eit_entry+0x40>
 8009334:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8009338:	f7ff ffa8 	bl	800928c <__gnu_unwind_get_pr_addr>
 800933c:	2800      	cmp	r0, #0
 800933e:	6120      	str	r0, [r4, #16]
 8009340:	bf14      	ite	ne
 8009342:	2300      	movne	r3, #0
 8009344:	2309      	moveq	r3, #9
 8009346:	e7dc      	b.n	8009302 <get_eit_entry+0x4e>
 8009348:	00000000 	.word	0x00000000
 800934c:	0801d9e8 	.word	0x0801d9e8
 8009350:	0801d3c8 	.word	0x0801d3c8

08009354 <restore_non_core_regs>:
 8009354:	6803      	ldr	r3, [r0, #0]
 8009356:	07da      	lsls	r2, r3, #31
 8009358:	b510      	push	{r4, lr}
 800935a:	4604      	mov	r4, r0
 800935c:	d406      	bmi.n	800936c <restore_non_core_regs+0x18>
 800935e:	079b      	lsls	r3, r3, #30
 8009360:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8009364:	d509      	bpl.n	800937a <restore_non_core_regs+0x26>
 8009366:	f000 fc59 	bl	8009c1c <__gnu_Unwind_Restore_VFP_D>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	0759      	lsls	r1, r3, #29
 800936e:	d509      	bpl.n	8009384 <restore_non_core_regs+0x30>
 8009370:	071a      	lsls	r2, r3, #28
 8009372:	d50e      	bpl.n	8009392 <restore_non_core_regs+0x3e>
 8009374:	06db      	lsls	r3, r3, #27
 8009376:	d513      	bpl.n	80093a0 <restore_non_core_regs+0x4c>
 8009378:	bd10      	pop	{r4, pc}
 800937a:	f000 fc47 	bl	8009c0c <__gnu_Unwind_Restore_VFP>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	0759      	lsls	r1, r3, #29
 8009382:	d4f5      	bmi.n	8009370 <restore_non_core_regs+0x1c>
 8009384:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009388:	f000 fc50 	bl	8009c2c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	071a      	lsls	r2, r3, #28
 8009390:	d4f0      	bmi.n	8009374 <restore_non_core_regs+0x20>
 8009392:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8009396:	f000 fc51 	bl	8009c3c <__gnu_Unwind_Restore_WMMXD>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	06db      	lsls	r3, r3, #27
 800939e:	d4eb      	bmi.n	8009378 <restore_non_core_regs+0x24>
 80093a0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80093a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a8:	f000 bc8c 	b.w	8009cc4 <__gnu_Unwind_Restore_WMMXC>

080093ac <_Unwind_decode_typeinfo_ptr.isra.0>:
 80093ac:	6803      	ldr	r3, [r0, #0]
 80093ae:	b10b      	cbz	r3, 80093b4 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80093b0:	4418      	add	r0, r3
 80093b2:	4770      	bx	lr
 80093b4:	4618      	mov	r0, r3
 80093b6:	4770      	bx	lr

080093b8 <__gnu_unwind_24bit.isra.1>:
 80093b8:	2009      	movs	r0, #9
 80093ba:	4770      	bx	lr

080093bc <_Unwind_DebugHook>:
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop

080093c0 <unwind_phase2>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	4604      	mov	r4, r0
 80093c4:	460d      	mov	r5, r1
 80093c6:	e008      	b.n	80093da <unwind_phase2+0x1a>
 80093c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	462a      	mov	r2, r5
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	4621      	mov	r1, r4
 80093d2:	2001      	movs	r0, #1
 80093d4:	4798      	blx	r3
 80093d6:	2808      	cmp	r0, #8
 80093d8:	d108      	bne.n	80093ec <unwind_phase2+0x2c>
 80093da:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80093dc:	4620      	mov	r0, r4
 80093de:	f7ff ff69 	bl	80092b4 <get_eit_entry>
 80093e2:	4606      	mov	r6, r0
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0ef      	beq.n	80093c8 <unwind_phase2+0x8>
 80093e8:	f00d f85c 	bl	80164a4 <abort>
 80093ec:	2807      	cmp	r0, #7
 80093ee:	d1fb      	bne.n	80093e8 <unwind_phase2+0x28>
 80093f0:	4630      	mov	r0, r6
 80093f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80093f4:	f7ff ffe2 	bl	80093bc <_Unwind_DebugHook>
 80093f8:	1d28      	adds	r0, r5, #4
 80093fa:	f000 fbfb 	bl	8009bf4 <__restore_core_regs>
 80093fe:	bf00      	nop

08009400 <unwind_phase2_forced>:
 8009400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009404:	1d0c      	adds	r4, r1, #4
 8009406:	4606      	mov	r6, r0
 8009408:	4617      	mov	r7, r2
 800940a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800940c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8009410:	ad03      	add	r5, sp, #12
 8009412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800941a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800941c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009420:	ac02      	add	r4, sp, #8
 8009422:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009426:	f8d6 9018 	ldr.w	r9, [r6, #24]
 800942a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800942e:	2300      	movs	r3, #0
 8009430:	4630      	mov	r0, r6
 8009432:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	f7ff ff3d 	bl	80092b4 <get_eit_entry>
 800943a:	2f00      	cmp	r7, #0
 800943c:	4605      	mov	r5, r0
 800943e:	bf14      	ite	ne
 8009440:	270a      	movne	r7, #10
 8009442:	2709      	moveq	r7, #9
 8009444:	b17d      	cbz	r5, 8009466 <unwind_phase2_forced+0x66>
 8009446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009448:	f047 0110 	orr.w	r1, r7, #16
 800944c:	e88d 0210 	stmia.w	sp, {r4, r9}
 8009450:	4632      	mov	r2, r6
 8009452:	6463      	str	r3, [r4, #68]	; 0x44
 8009454:	2001      	movs	r0, #1
 8009456:	4633      	mov	r3, r6
 8009458:	47c0      	blx	r8
 800945a:	bb78      	cbnz	r0, 80094bc <unwind_phase2_forced+0xbc>
 800945c:	4628      	mov	r0, r5
 800945e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8009462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009468:	6173      	str	r3, [r6, #20]
 800946a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800946e:	4621      	mov	r1, r4
 8009470:	a87a      	add	r0, sp, #488	; 0x1e8
 8009472:	f00d fd12 	bl	8016e9a <memcpy>
 8009476:	6933      	ldr	r3, [r6, #16]
 8009478:	aa7a      	add	r2, sp, #488	; 0x1e8
 800947a:	4631      	mov	r1, r6
 800947c:	4638      	mov	r0, r7
 800947e:	4798      	blx	r3
 8009480:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8009482:	4682      	mov	sl, r0
 8009484:	e88d 0210 	stmia.w	sp, {r4, r9}
 8009488:	4639      	mov	r1, r7
 800948a:	6463      	str	r3, [r4, #68]	; 0x44
 800948c:	4632      	mov	r2, r6
 800948e:	4633      	mov	r3, r6
 8009490:	2001      	movs	r0, #1
 8009492:	47c0      	blx	r8
 8009494:	b990      	cbnz	r0, 80094bc <unwind_phase2_forced+0xbc>
 8009496:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800949a:	a97a      	add	r1, sp, #488	; 0x1e8
 800949c:	4620      	mov	r0, r4
 800949e:	f00d fcfc 	bl	8016e9a <memcpy>
 80094a2:	f1ba 0f08 	cmp.w	sl, #8
 80094a6:	d106      	bne.n	80094b6 <unwind_phase2_forced+0xb6>
 80094a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff ff02 	bl	80092b4 <get_eit_entry>
 80094b0:	2709      	movs	r7, #9
 80094b2:	4605      	mov	r5, r0
 80094b4:	e7c6      	b.n	8009444 <unwind_phase2_forced+0x44>
 80094b6:	f1ba 0f07 	cmp.w	sl, #7
 80094ba:	d004      	beq.n	80094c6 <unwind_phase2_forced+0xc6>
 80094bc:	2009      	movs	r0, #9
 80094be:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80094c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c6:	4628      	mov	r0, r5
 80094c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80094ca:	f7ff ff77 	bl	80093bc <_Unwind_DebugHook>
 80094ce:	a803      	add	r0, sp, #12
 80094d0:	f000 fb90 	bl	8009bf4 <__restore_core_regs>

080094d4 <_Unwind_GetCFA>:
 80094d4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80094d6:	4770      	bx	lr

080094d8 <__gnu_Unwind_RaiseException>:
 80094d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094da:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80094dc:	640b      	str	r3, [r1, #64]	; 0x40
 80094de:	1d0e      	adds	r6, r1, #4
 80094e0:	460f      	mov	r7, r1
 80094e2:	4604      	mov	r4, r0
 80094e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80094e6:	b0f9      	sub	sp, #484	; 0x1e4
 80094e8:	ad01      	add	r5, sp, #4
 80094ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80094ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80094f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80094f8:	f04f 36ff 	mov.w	r6, #4294967295
 80094fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8009500:	9600      	str	r6, [sp, #0]
 8009502:	e006      	b.n	8009512 <__gnu_Unwind_RaiseException+0x3a>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	466a      	mov	r2, sp
 8009508:	4621      	mov	r1, r4
 800950a:	4798      	blx	r3
 800950c:	2808      	cmp	r0, #8
 800950e:	4605      	mov	r5, r0
 8009510:	d108      	bne.n	8009524 <__gnu_Unwind_RaiseException+0x4c>
 8009512:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009514:	4620      	mov	r0, r4
 8009516:	f7ff fecd 	bl	80092b4 <get_eit_entry>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0f2      	beq.n	8009504 <__gnu_Unwind_RaiseException+0x2c>
 800951e:	2009      	movs	r0, #9
 8009520:	b079      	add	sp, #484	; 0x1e4
 8009522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009524:	4668      	mov	r0, sp
 8009526:	f7ff ff15 	bl	8009354 <restore_non_core_regs>
 800952a:	2d06      	cmp	r5, #6
 800952c:	d1f7      	bne.n	800951e <__gnu_Unwind_RaiseException+0x46>
 800952e:	4639      	mov	r1, r7
 8009530:	4620      	mov	r0, r4
 8009532:	f7ff ff45 	bl	80093c0 <unwind_phase2>
 8009536:	bf00      	nop

08009538 <__gnu_Unwind_ForcedUnwind>:
 8009538:	b430      	push	{r4, r5}
 800953a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800953c:	60c1      	str	r1, [r0, #12]
 800953e:	6182      	str	r2, [r0, #24]
 8009540:	4619      	mov	r1, r3
 8009542:	641d      	str	r5, [r3, #64]	; 0x40
 8009544:	2200      	movs	r2, #0
 8009546:	bc30      	pop	{r4, r5}
 8009548:	e75a      	b.n	8009400 <unwind_phase2_forced>
 800954a:	bf00      	nop

0800954c <__gnu_Unwind_Resume>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	68c6      	ldr	r6, [r0, #12]
 8009550:	6943      	ldr	r3, [r0, #20]
 8009552:	640b      	str	r3, [r1, #64]	; 0x40
 8009554:	b126      	cbz	r6, 8009560 <__gnu_Unwind_Resume+0x14>
 8009556:	2201      	movs	r2, #1
 8009558:	f7ff ff52 	bl	8009400 <unwind_phase2_forced>
 800955c:	f00c ffa2 	bl	80164a4 <abort>
 8009560:	6903      	ldr	r3, [r0, #16]
 8009562:	460a      	mov	r2, r1
 8009564:	4604      	mov	r4, r0
 8009566:	460d      	mov	r5, r1
 8009568:	4601      	mov	r1, r0
 800956a:	2002      	movs	r0, #2
 800956c:	4798      	blx	r3
 800956e:	2807      	cmp	r0, #7
 8009570:	d007      	beq.n	8009582 <__gnu_Unwind_Resume+0x36>
 8009572:	2808      	cmp	r0, #8
 8009574:	d103      	bne.n	800957e <__gnu_Unwind_Resume+0x32>
 8009576:	4629      	mov	r1, r5
 8009578:	4620      	mov	r0, r4
 800957a:	f7ff ff21 	bl	80093c0 <unwind_phase2>
 800957e:	f00c ff91 	bl	80164a4 <abort>
 8009582:	4630      	mov	r0, r6
 8009584:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8009586:	f7ff ff19 	bl	80093bc <_Unwind_DebugHook>
 800958a:	1d28      	adds	r0, r5, #4
 800958c:	f000 fb32 	bl	8009bf4 <__restore_core_regs>

08009590 <__gnu_Unwind_Resume_or_Rethrow>:
 8009590:	68c2      	ldr	r2, [r0, #12]
 8009592:	b11a      	cbz	r2, 800959c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8009594:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8009596:	640a      	str	r2, [r1, #64]	; 0x40
 8009598:	2200      	movs	r2, #0
 800959a:	e731      	b.n	8009400 <unwind_phase2_forced>
 800959c:	e79c      	b.n	80094d8 <__gnu_Unwind_RaiseException>
 800959e:	bf00      	nop

080095a0 <_Unwind_Complete>:
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop

080095a4 <_Unwind_DeleteException>:
 80095a4:	6883      	ldr	r3, [r0, #8]
 80095a6:	b113      	cbz	r3, 80095ae <_Unwind_DeleteException+0xa>
 80095a8:	4601      	mov	r1, r0
 80095aa:	2001      	movs	r0, #1
 80095ac:	4718      	bx	r3
 80095ae:	4770      	bx	lr

080095b0 <_Unwind_VRS_Get>:
 80095b0:	b500      	push	{lr}
 80095b2:	2904      	cmp	r1, #4
 80095b4:	d807      	bhi.n	80095c6 <_Unwind_VRS_Get+0x16>
 80095b6:	e8df f001 	tbb	[pc, r1]
 80095ba:	0903      	.short	0x0903
 80095bc:	0906      	.short	0x0906
 80095be:	09          	.byte	0x09
 80095bf:	00          	.byte	0x00
 80095c0:	b90b      	cbnz	r3, 80095c6 <_Unwind_VRS_Get+0x16>
 80095c2:	2a0f      	cmp	r2, #15
 80095c4:	d905      	bls.n	80095d2 <_Unwind_VRS_Get+0x22>
 80095c6:	2002      	movs	r0, #2
 80095c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80095cc:	2001      	movs	r0, #1
 80095ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80095d2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	6853      	ldr	r3, [r2, #4]
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	f85d fb04 	ldr.w	pc, [sp], #4
 80095e2:	bf00      	nop

080095e4 <_Unwind_GetGR>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	2300      	movs	r3, #0
 80095ea:	ac03      	add	r4, sp, #12
 80095ec:	460a      	mov	r2, r1
 80095ee:	9400      	str	r4, [sp, #0]
 80095f0:	4619      	mov	r1, r3
 80095f2:	f7ff ffdd 	bl	80095b0 <_Unwind_VRS_Get>
 80095f6:	9803      	ldr	r0, [sp, #12]
 80095f8:	b004      	add	sp, #16
 80095fa:	bd10      	pop	{r4, pc}

080095fc <_Unwind_VRS_Set>:
 80095fc:	b500      	push	{lr}
 80095fe:	2904      	cmp	r1, #4
 8009600:	d807      	bhi.n	8009612 <_Unwind_VRS_Set+0x16>
 8009602:	e8df f001 	tbb	[pc, r1]
 8009606:	0903      	.short	0x0903
 8009608:	0906      	.short	0x0906
 800960a:	09          	.byte	0x09
 800960b:	00          	.byte	0x00
 800960c:	b90b      	cbnz	r3, 8009612 <_Unwind_VRS_Set+0x16>
 800960e:	2a0f      	cmp	r2, #15
 8009610:	d905      	bls.n	800961e <_Unwind_VRS_Set+0x22>
 8009612:	2002      	movs	r0, #2
 8009614:	f85d fb04 	ldr.w	pc, [sp], #4
 8009618:	2001      	movs	r0, #1
 800961a:	f85d fb04 	ldr.w	pc, [sp], #4
 800961e:	9901      	ldr	r1, [sp, #4]
 8009620:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009624:	6809      	ldr	r1, [r1, #0]
 8009626:	6051      	str	r1, [r2, #4]
 8009628:	4618      	mov	r0, r3
 800962a:	f85d fb04 	ldr.w	pc, [sp], #4
 800962e:	bf00      	nop

08009630 <_Unwind_SetGR>:
 8009630:	b510      	push	{r4, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	ac04      	add	r4, sp, #16
 8009636:	2300      	movs	r3, #0
 8009638:	f844 2d04 	str.w	r2, [r4, #-4]!
 800963c:	460a      	mov	r2, r1
 800963e:	9400      	str	r4, [sp, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	f7ff ffdb 	bl	80095fc <_Unwind_VRS_Set>
 8009646:	b004      	add	sp, #16
 8009648:	bd10      	pop	{r4, pc}
 800964a:	bf00      	nop

0800964c <__gnu_Unwind_Backtrace>:
 800964c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800964e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009650:	6413      	str	r3, [r2, #64]	; 0x40
 8009652:	1d15      	adds	r5, r2, #4
 8009654:	4607      	mov	r7, r0
 8009656:	460e      	mov	r6, r1
 8009658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800965a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800965e:	ac17      	add	r4, sp, #92	; 0x5c
 8009660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800966a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800966e:	f04f 35ff 	mov.w	r5, #4294967295
 8009672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009676:	9516      	str	r5, [sp, #88]	; 0x58
 8009678:	e010      	b.n	800969c <__gnu_Unwind_Backtrace+0x50>
 800967a:	a816      	add	r0, sp, #88	; 0x58
 800967c:	f7ff ffd8 	bl	8009630 <_Unwind_SetGR>
 8009680:	4631      	mov	r1, r6
 8009682:	a816      	add	r0, sp, #88	; 0x58
 8009684:	47b8      	blx	r7
 8009686:	aa16      	add	r2, sp, #88	; 0x58
 8009688:	4669      	mov	r1, sp
 800968a:	b978      	cbnz	r0, 80096ac <__gnu_Unwind_Backtrace+0x60>
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	2008      	movs	r0, #8
 8009690:	4798      	blx	r3
 8009692:	2805      	cmp	r0, #5
 8009694:	4604      	mov	r4, r0
 8009696:	d00a      	beq.n	80096ae <__gnu_Unwind_Backtrace+0x62>
 8009698:	2809      	cmp	r0, #9
 800969a:	d007      	beq.n	80096ac <__gnu_Unwind_Backtrace+0x60>
 800969c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800969e:	4668      	mov	r0, sp
 80096a0:	f7ff fe08 	bl	80092b4 <get_eit_entry>
 80096a4:	466a      	mov	r2, sp
 80096a6:	210c      	movs	r1, #12
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0e6      	beq.n	800967a <__gnu_Unwind_Backtrace+0x2e>
 80096ac:	2409      	movs	r4, #9
 80096ae:	a816      	add	r0, sp, #88	; 0x58
 80096b0:	f7ff fe50 	bl	8009354 <restore_non_core_regs>
 80096b4:	4620      	mov	r0, r4
 80096b6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096bc <__gnu_unwind_pr_common>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	460d      	mov	r5, r1
 80096c2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80096c4:	b08b      	sub	sp, #44	; 0x2c
 80096c6:	1d0c      	adds	r4, r1, #4
 80096c8:	6809      	ldr	r1, [r1, #0]
 80096ca:	9107      	str	r1, [sp, #28]
 80096cc:	4691      	mov	r9, r2
 80096ce:	9408      	str	r4, [sp, #32]
 80096d0:	f000 0b03 	and.w	fp, r0, #3
 80096d4:	461e      	mov	r6, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d164      	bne.n	80097a4 <__gnu_unwind_pr_common+0xe8>
 80096da:	0209      	lsls	r1, r1, #8
 80096dc:	2303      	movs	r3, #3
 80096de:	9107      	str	r1, [sp, #28]
 80096e0:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80096e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80096e8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80096ea:	f1bb 0f02 	cmp.w	fp, #2
 80096ee:	bf08      	it	eq
 80096f0:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80096f2:	f013 0301 	ands.w	r3, r3, #1
 80096f6:	d143      	bne.n	8009780 <__gnu_unwind_pr_common+0xc4>
 80096f8:	f000 0008 	and.w	r0, r0, #8
 80096fc:	b2c2      	uxtb	r2, r0
 80096fe:	9203      	str	r2, [sp, #12]
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	6827      	ldr	r7, [r4, #0]
 8009704:	2f00      	cmp	r7, #0
 8009706:	d03d      	beq.n	8009784 <__gnu_unwind_pr_common+0xc8>
 8009708:	2e02      	cmp	r6, #2
 800970a:	d047      	beq.n	800979c <__gnu_unwind_pr_common+0xe0>
 800970c:	8827      	ldrh	r7, [r4, #0]
 800970e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8009712:	3404      	adds	r4, #4
 8009714:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009716:	f028 0a01 	bic.w	sl, r8, #1
 800971a:	210f      	movs	r1, #15
 800971c:	4648      	mov	r0, r9
 800971e:	449a      	add	sl, r3
 8009720:	f7ff ff60 	bl	80095e4 <_Unwind_GetGR>
 8009724:	4582      	cmp	sl, r0
 8009726:	d837      	bhi.n	8009798 <__gnu_unwind_pr_common+0xdc>
 8009728:	f027 0301 	bic.w	r3, r7, #1
 800972c:	449a      	add	sl, r3
 800972e:	4550      	cmp	r0, sl
 8009730:	bf2c      	ite	cs
 8009732:	2000      	movcs	r0, #0
 8009734:	2001      	movcc	r0, #1
 8009736:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800973a:	f008 0802 	and.w	r8, r8, #2
 800973e:	f007 0701 	and.w	r7, r7, #1
 8009742:	ea48 0807 	orr.w	r8, r8, r7
 8009746:	f1b8 0f01 	cmp.w	r8, #1
 800974a:	d041      	beq.n	80097d0 <__gnu_unwind_pr_common+0x114>
 800974c:	d338      	bcc.n	80097c0 <__gnu_unwind_pr_common+0x104>
 800974e:	f1b8 0f02 	cmp.w	r8, #2
 8009752:	d11d      	bne.n	8009790 <__gnu_unwind_pr_common+0xd4>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800975a:	9202      	str	r2, [sp, #8]
 800975c:	f1bb 0f00 	cmp.w	fp, #0
 8009760:	d179      	bne.n	8009856 <__gnu_unwind_pr_common+0x19a>
 8009762:	b130      	cbz	r0, 8009772 <__gnu_unwind_pr_common+0xb6>
 8009764:	9903      	ldr	r1, [sp, #12]
 8009766:	2900      	cmp	r1, #0
 8009768:	f000 8081 	beq.w	800986e <__gnu_unwind_pr_common+0x1b2>
 800976c:	2a00      	cmp	r2, #0
 800976e:	f000 80a8 	beq.w	80098c2 <__gnu_unwind_pr_common+0x206>
 8009772:	2b00      	cmp	r3, #0
 8009774:	db79      	blt.n	800986a <__gnu_unwind_pr_common+0x1ae>
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	3301      	adds	r3, #1
 800977a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800977e:	e7c0      	b.n	8009702 <__gnu_unwind_pr_common+0x46>
 8009780:	2300      	movs	r3, #0
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	2e02      	cmp	r6, #2
 8009786:	dd40      	ble.n	800980a <__gnu_unwind_pr_common+0x14e>
 8009788:	f7ff fe16 	bl	80093b8 <__gnu_unwind_24bit.isra.1>
 800978c:	2800      	cmp	r0, #0
 800978e:	d042      	beq.n	8009816 <__gnu_unwind_pr_common+0x15a>
 8009790:	2009      	movs	r0, #9
 8009792:	b00b      	add	sp, #44	; 0x2c
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	2000      	movs	r0, #0
 800979a:	e7cc      	b.n	8009736 <__gnu_unwind_pr_common+0x7a>
 800979c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80097a0:	3408      	adds	r4, #8
 80097a2:	e7b7      	b.n	8009714 <__gnu_unwind_pr_common+0x58>
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	dc9f      	bgt.n	80096e8 <__gnu_unwind_pr_common+0x2c>
 80097a8:	0c0b      	lsrs	r3, r1, #16
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	0409      	lsls	r1, r1, #16
 80097ae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80097b2:	2302      	movs	r3, #2
 80097b4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80097b8:	9107      	str	r1, [sp, #28]
 80097ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80097be:	e793      	b.n	80096e8 <__gnu_unwind_pr_common+0x2c>
 80097c0:	f1bb 0f00 	cmp.w	fp, #0
 80097c4:	d002      	beq.n	80097cc <__gnu_unwind_pr_common+0x110>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f040 80b0 	bne.w	800992c <__gnu_unwind_pr_common+0x270>
 80097cc:	3404      	adds	r4, #4
 80097ce:	e798      	b.n	8009702 <__gnu_unwind_pr_common+0x46>
 80097d0:	f1bb 0f00 	cmp.w	fp, #0
 80097d4:	d126      	bne.n	8009824 <__gnu_unwind_pr_common+0x168>
 80097d6:	b1b0      	cbz	r0, 8009806 <__gnu_unwind_pr_common+0x14a>
 80097d8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80097dc:	1c99      	adds	r1, r3, #2
 80097de:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80097e2:	d0d5      	beq.n	8009790 <__gnu_unwind_pr_common+0xd4>
 80097e4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80097e8:	3301      	adds	r3, #1
 80097ea:	9106      	str	r1, [sp, #24]
 80097ec:	f000 8094 	beq.w	8009918 <__gnu_unwind_pr_common+0x25c>
 80097f0:	1d20      	adds	r0, r4, #4
 80097f2:	f7ff fddb 	bl	80093ac <_Unwind_decode_typeinfo_ptr.isra.0>
 80097f6:	ab06      	add	r3, sp, #24
 80097f8:	4601      	mov	r1, r0
 80097fa:	4628      	mov	r0, r5
 80097fc:	f00a fa0a 	bl	8013c14 <__cxa_type_match>
 8009800:	2800      	cmp	r0, #0
 8009802:	f040 80b8 	bne.w	8009976 <__gnu_unwind_pr_common+0x2ba>
 8009806:	3408      	adds	r4, #8
 8009808:	e77b      	b.n	8009702 <__gnu_unwind_pr_common+0x46>
 800980a:	a907      	add	r1, sp, #28
 800980c:	4648      	mov	r0, r9
 800980e:	f000 faf3 	bl	8009df8 <__gnu_unwind_execute>
 8009812:	2800      	cmp	r0, #0
 8009814:	d1bc      	bne.n	8009790 <__gnu_unwind_pr_common+0xd4>
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d15c      	bne.n	80098d6 <__gnu_unwind_pr_common+0x21a>
 800981c:	2008      	movs	r0, #8
 800981e:	b00b      	add	sp, #44	; 0x2c
 8009820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009824:	210d      	movs	r1, #13
 8009826:	4648      	mov	r0, r9
 8009828:	6a2f      	ldr	r7, [r5, #32]
 800982a:	f7ff fedb 	bl	80095e4 <_Unwind_GetGR>
 800982e:	4287      	cmp	r7, r0
 8009830:	d1e9      	bne.n	8009806 <__gnu_unwind_pr_common+0x14a>
 8009832:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009834:	429c      	cmp	r4, r3
 8009836:	d1e6      	bne.n	8009806 <__gnu_unwind_pr_common+0x14a>
 8009838:	4620      	mov	r0, r4
 800983a:	f7ff fced 	bl	8009218 <selfrel_offset31>
 800983e:	210f      	movs	r1, #15
 8009840:	4602      	mov	r2, r0
 8009842:	4648      	mov	r0, r9
 8009844:	f7ff fef4 	bl	8009630 <_Unwind_SetGR>
 8009848:	4648      	mov	r0, r9
 800984a:	462a      	mov	r2, r5
 800984c:	2100      	movs	r1, #0
 800984e:	f7ff feef 	bl	8009630 <_Unwind_SetGR>
 8009852:	2007      	movs	r0, #7
 8009854:	e79d      	b.n	8009792 <__gnu_unwind_pr_common+0xd6>
 8009856:	210d      	movs	r1, #13
 8009858:	4648      	mov	r0, r9
 800985a:	6a2f      	ldr	r7, [r5, #32]
 800985c:	f7ff fec2 	bl	80095e4 <_Unwind_GetGR>
 8009860:	4287      	cmp	r7, r0
 8009862:	d048      	beq.n	80098f6 <__gnu_unwind_pr_common+0x23a>
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	da85      	bge.n	8009776 <__gnu_unwind_pr_common+0xba>
 800986a:	3404      	adds	r4, #4
 800986c:	e783      	b.n	8009776 <__gnu_unwind_pr_common+0xba>
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	b33b      	cbz	r3, 80098c2 <__gnu_unwind_pr_common+0x206>
 8009872:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8009876:	1d27      	adds	r7, r4, #4
 8009878:	f8cd b010 	str.w	fp, [sp, #16]
 800987c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009880:	f8dd a008 	ldr.w	sl, [sp, #8]
 8009884:	9605      	str	r6, [sp, #20]
 8009886:	46a3      	mov	fp, r4
 8009888:	461c      	mov	r4, r3
 800988a:	e002      	b.n	8009892 <__gnu_unwind_pr_common+0x1d6>
 800988c:	45b2      	cmp	sl, r6
 800988e:	46b0      	mov	r8, r6
 8009890:	d016      	beq.n	80098c0 <__gnu_unwind_pr_common+0x204>
 8009892:	4638      	mov	r0, r7
 8009894:	9406      	str	r4, [sp, #24]
 8009896:	f7ff fd89 	bl	80093ac <_Unwind_decode_typeinfo_ptr.isra.0>
 800989a:	ab06      	add	r3, sp, #24
 800989c:	4601      	mov	r1, r0
 800989e:	2200      	movs	r2, #0
 80098a0:	4628      	mov	r0, r5
 80098a2:	f00a f9b7 	bl	8013c14 <__cxa_type_match>
 80098a6:	f108 0601 	add.w	r6, r8, #1
 80098aa:	3704      	adds	r7, #4
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d0ed      	beq.n	800988c <__gnu_unwind_pr_common+0x1d0>
 80098b0:	9b02      	ldr	r3, [sp, #8]
 80098b2:	9e05      	ldr	r6, [sp, #20]
 80098b4:	4543      	cmp	r3, r8
 80098b6:	465c      	mov	r4, fp
 80098b8:	f8dd b010 	ldr.w	fp, [sp, #16]
 80098bc:	d1d2      	bne.n	8009864 <__gnu_unwind_pr_common+0x1a8>
 80098be:	e000      	b.n	80098c2 <__gnu_unwind_pr_common+0x206>
 80098c0:	465c      	mov	r4, fp
 80098c2:	4648      	mov	r0, r9
 80098c4:	210d      	movs	r1, #13
 80098c6:	f7ff fe8d 	bl	80095e4 <_Unwind_GetGR>
 80098ca:	9b06      	ldr	r3, [sp, #24]
 80098cc:	6228      	str	r0, [r5, #32]
 80098ce:	62ac      	str	r4, [r5, #40]	; 0x28
 80098d0:	626b      	str	r3, [r5, #36]	; 0x24
 80098d2:	2006      	movs	r0, #6
 80098d4:	e75d      	b.n	8009792 <__gnu_unwind_pr_common+0xd6>
 80098d6:	210f      	movs	r1, #15
 80098d8:	4648      	mov	r0, r9
 80098da:	f7ff fe83 	bl	80095e4 <_Unwind_GetGR>
 80098de:	210e      	movs	r1, #14
 80098e0:	4602      	mov	r2, r0
 80098e2:	4648      	mov	r0, r9
 80098e4:	f7ff fea4 	bl	8009630 <_Unwind_SetGR>
 80098e8:	4648      	mov	r0, r9
 80098ea:	4a2a      	ldr	r2, [pc, #168]	; (8009994 <__gnu_unwind_pr_common+0x2d8>)
 80098ec:	210f      	movs	r1, #15
 80098ee:	f7ff fe9f 	bl	8009630 <_Unwind_SetGR>
 80098f2:	2007      	movs	r0, #7
 80098f4:	e74d      	b.n	8009792 <__gnu_unwind_pr_common+0xd6>
 80098f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80098f8:	429c      	cmp	r4, r3
 80098fa:	d1b3      	bne.n	8009864 <__gnu_unwind_pr_common+0x1a8>
 80098fc:	2204      	movs	r2, #4
 80098fe:	2700      	movs	r7, #0
 8009900:	18a3      	adds	r3, r4, r2
 8009902:	9902      	ldr	r1, [sp, #8]
 8009904:	62a9      	str	r1, [r5, #40]	; 0x28
 8009906:	62ef      	str	r7, [r5, #44]	; 0x2c
 8009908:	632a      	str	r2, [r5, #48]	; 0x30
 800990a:	636b      	str	r3, [r5, #52]	; 0x34
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	42bb      	cmp	r3, r7
 8009910:	db1f      	blt.n	8009952 <__gnu_unwind_pr_common+0x296>
 8009912:	2301      	movs	r3, #1
 8009914:	9301      	str	r3, [sp, #4]
 8009916:	e72e      	b.n	8009776 <__gnu_unwind_pr_common+0xba>
 8009918:	4648      	mov	r0, r9
 800991a:	210d      	movs	r1, #13
 800991c:	f7ff fe62 	bl	80095e4 <_Unwind_GetGR>
 8009920:	6228      	str	r0, [r5, #32]
 8009922:	9b06      	ldr	r3, [sp, #24]
 8009924:	626b      	str	r3, [r5, #36]	; 0x24
 8009926:	62ac      	str	r4, [r5, #40]	; 0x28
 8009928:	2006      	movs	r0, #6
 800992a:	e732      	b.n	8009792 <__gnu_unwind_pr_common+0xd6>
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff fc73 	bl	8009218 <selfrel_offset31>
 8009932:	3404      	adds	r4, #4
 8009934:	4606      	mov	r6, r0
 8009936:	63ac      	str	r4, [r5, #56]	; 0x38
 8009938:	4628      	mov	r0, r5
 800993a:	f00a f9c3 	bl	8013cc4 <__cxa_begin_cleanup>
 800993e:	2800      	cmp	r0, #0
 8009940:	f43f af26 	beq.w	8009790 <__gnu_unwind_pr_common+0xd4>
 8009944:	4648      	mov	r0, r9
 8009946:	4632      	mov	r2, r6
 8009948:	210f      	movs	r1, #15
 800994a:	f7ff fe71 	bl	8009630 <_Unwind_SetGR>
 800994e:	2007      	movs	r0, #7
 8009950:	e71f      	b.n	8009792 <__gnu_unwind_pr_common+0xd6>
 8009952:	4608      	mov	r0, r1
 8009954:	3001      	adds	r0, #1
 8009956:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800995a:	f7ff fc5d 	bl	8009218 <selfrel_offset31>
 800995e:	210f      	movs	r1, #15
 8009960:	4602      	mov	r2, r0
 8009962:	4648      	mov	r0, r9
 8009964:	f7ff fe64 	bl	8009630 <_Unwind_SetGR>
 8009968:	4648      	mov	r0, r9
 800996a:	462a      	mov	r2, r5
 800996c:	4639      	mov	r1, r7
 800996e:	f7ff fe5f 	bl	8009630 <_Unwind_SetGR>
 8009972:	2007      	movs	r0, #7
 8009974:	e70d      	b.n	8009792 <__gnu_unwind_pr_common+0xd6>
 8009976:	4607      	mov	r7, r0
 8009978:	210d      	movs	r1, #13
 800997a:	4648      	mov	r0, r9
 800997c:	f7ff fe32 	bl	80095e4 <_Unwind_GetGR>
 8009980:	2f02      	cmp	r7, #2
 8009982:	6228      	str	r0, [r5, #32]
 8009984:	d1cd      	bne.n	8009922 <__gnu_unwind_pr_common+0x266>
 8009986:	462b      	mov	r3, r5
 8009988:	9a06      	ldr	r2, [sp, #24]
 800998a:	f843 2f2c 	str.w	r2, [r3, #44]!
 800998e:	626b      	str	r3, [r5, #36]	; 0x24
 8009990:	e7c9      	b.n	8009926 <__gnu_unwind_pr_common+0x26a>
 8009992:	bf00      	nop
 8009994:	08014a31 	.word	0x08014a31

08009998 <__aeabi_unwind_cpp_pr0>:
 8009998:	2300      	movs	r3, #0
 800999a:	e68f      	b.n	80096bc <__gnu_unwind_pr_common>

0800999c <__aeabi_unwind_cpp_pr1>:
 800999c:	2301      	movs	r3, #1
 800999e:	e68d      	b.n	80096bc <__gnu_unwind_pr_common>

080099a0 <__aeabi_unwind_cpp_pr2>:
 80099a0:	2302      	movs	r3, #2
 80099a2:	e68b      	b.n	80096bc <__gnu_unwind_pr_common>

080099a4 <_Unwind_VRS_Pop>:
 80099a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a6:	4604      	mov	r4, r0
 80099a8:	b0c5      	sub	sp, #276	; 0x114
 80099aa:	2904      	cmp	r1, #4
 80099ac:	d80d      	bhi.n	80099ca <_Unwind_VRS_Pop+0x26>
 80099ae:	e8df f001 	tbb	[pc, r1]
 80099b2:	0357      	.short	0x0357
 80099b4:	310c      	.short	0x310c
 80099b6:	0f          	.byte	0x0f
 80099b7:	00          	.byte	0x00
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80099be:	b295      	uxth	r5, r2
 80099c0:	d166      	bne.n	8009a90 <_Unwind_VRS_Pop+0xec>
 80099c2:	1972      	adds	r2, r6, r5
 80099c4:	2a10      	cmp	r2, #16
 80099c6:	f240 809f 	bls.w	8009b08 <_Unwind_VRS_Pop+0x164>
 80099ca:	2002      	movs	r0, #2
 80099cc:	b045      	add	sp, #276	; 0x114
 80099ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1fa      	bne.n	80099ca <_Unwind_VRS_Pop+0x26>
 80099d4:	2a10      	cmp	r2, #16
 80099d6:	d8f8      	bhi.n	80099ca <_Unwind_VRS_Pop+0x26>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	06d8      	lsls	r0, r3, #27
 80099dc:	f100 80c9 	bmi.w	8009b72 <_Unwind_VRS_Pop+0x1ce>
 80099e0:	ae22      	add	r6, sp, #136	; 0x88
 80099e2:	4630      	mov	r0, r6
 80099e4:	9201      	str	r2, [sp, #4]
 80099e6:	f000 f977 	bl	8009cd8 <__gnu_Unwind_Save_WMMXC>
 80099ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80099ec:	9a01      	ldr	r2, [sp, #4]
 80099ee:	2300      	movs	r3, #0
 80099f0:	2501      	movs	r5, #1
 80099f2:	fa05 f103 	lsl.w	r1, r5, r3
 80099f6:	4211      	tst	r1, r2
 80099f8:	d003      	beq.n	8009a02 <_Unwind_VRS_Pop+0x5e>
 80099fa:	6801      	ldr	r1, [r0, #0]
 80099fc:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8009a00:	3004      	adds	r0, #4
 8009a02:	3301      	adds	r3, #1
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	d1f4      	bne.n	80099f2 <_Unwind_VRS_Pop+0x4e>
 8009a08:	63a0      	str	r0, [r4, #56]	; 0x38
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f95a 	bl	8009cc4 <__gnu_Unwind_Restore_WMMXC>
 8009a10:	2000      	movs	r0, #0
 8009a12:	e7db      	b.n	80099cc <_Unwind_VRS_Pop+0x28>
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d1d8      	bne.n	80099ca <_Unwind_VRS_Pop+0x26>
 8009a18:	0c15      	lsrs	r5, r2, #16
 8009a1a:	b297      	uxth	r7, r2
 8009a1c:	19eb      	adds	r3, r5, r7
 8009a1e:	2b10      	cmp	r3, #16
 8009a20:	d8d3      	bhi.n	80099ca <_Unwind_VRS_Pop+0x26>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	071e      	lsls	r6, r3, #28
 8009a26:	f100 80b8 	bmi.w	8009b9a <_Unwind_VRS_Pop+0x1f6>
 8009a2a:	ae22      	add	r6, sp, #136	; 0x88
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	007f      	lsls	r7, r7, #1
 8009a30:	f000 f926 	bl	8009c80 <__gnu_Unwind_Save_WMMXD>
 8009a34:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8009a38:	1e7b      	subs	r3, r7, #1
 8009a3a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009a3c:	b157      	cbz	r7, 8009a54 <_Unwind_VRS_Pop+0xb0>
 8009a3e:	3a04      	subs	r2, #4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f851 0b04 	ldr.w	r0, [r1], #4
 8009a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	1c58      	adds	r0, r3, #1
 8009a4e:	d1f8      	bne.n	8009a42 <_Unwind_VRS_Pop+0x9e>
 8009a50:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8009a54:	4630      	mov	r0, r6
 8009a56:	63a5      	str	r5, [r4, #56]	; 0x38
 8009a58:	f000 f8f0 	bl	8009c3c <__gnu_Unwind_Restore_WMMXD>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7b5      	b.n	80099cc <_Unwind_VRS_Pop+0x28>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1b2      	bne.n	80099ca <_Unwind_VRS_Pop+0x26>
 8009a64:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009a66:	b297      	uxth	r7, r2
 8009a68:	1d20      	adds	r0, r4, #4
 8009a6a:	2601      	movs	r6, #1
 8009a6c:	fa06 f103 	lsl.w	r1, r6, r3
 8009a70:	4239      	tst	r1, r7
 8009a72:	f103 0301 	add.w	r3, r3, #1
 8009a76:	d002      	beq.n	8009a7e <_Unwind_VRS_Pop+0xda>
 8009a78:	6829      	ldr	r1, [r5, #0]
 8009a7a:	6001      	str	r1, [r0, #0]
 8009a7c:	3504      	adds	r5, #4
 8009a7e:	2b10      	cmp	r3, #16
 8009a80:	f100 0004 	add.w	r0, r0, #4
 8009a84:	d1f2      	bne.n	8009a6c <_Unwind_VRS_Pop+0xc8>
 8009a86:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8009a8a:	d13b      	bne.n	8009b04 <_Unwind_VRS_Pop+0x160>
 8009a8c:	63a5      	str	r5, [r4, #56]	; 0x38
 8009a8e:	e79d      	b.n	80099cc <_Unwind_VRS_Pop+0x28>
 8009a90:	2b05      	cmp	r3, #5
 8009a92:	d19a      	bne.n	80099ca <_Unwind_VRS_Pop+0x26>
 8009a94:	1977      	adds	r7, r6, r5
 8009a96:	2f20      	cmp	r7, #32
 8009a98:	d897      	bhi.n	80099ca <_Unwind_VRS_Pop+0x26>
 8009a9a:	2e0f      	cmp	r6, #15
 8009a9c:	d965      	bls.n	8009b6a <_Unwind_VRS_Pop+0x1c6>
 8009a9e:	462f      	mov	r7, r5
 8009aa0:	2d00      	cmp	r5, #0
 8009aa2:	d148      	bne.n	8009b36 <_Unwind_VRS_Pop+0x192>
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	2700      	movs	r7, #0
 8009aa8:	2a00      	cmp	r2, #0
 8009aaa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009aac:	dd71      	ble.n	8009b92 <_Unwind_VRS_Pop+0x1ee>
 8009aae:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	a844      	add	r0, sp, #272	; 0x110
 8009ab6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8009aba:	388c      	subs	r0, #140	; 0x8c
 8009abc:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ac0:	f840 5f04 	str.w	r5, [r0, #4]!
 8009ac4:	4291      	cmp	r1, r2
 8009ac6:	d1f9      	bne.n	8009abc <_Unwind_VRS_Pop+0x118>
 8009ac8:	4608      	mov	r0, r1
 8009aca:	b197      	cbz	r7, 8009af2 <_Unwind_VRS_Pop+0x14e>
 8009acc:	2e10      	cmp	r6, #16
 8009ace:	4632      	mov	r2, r6
 8009ad0:	a944      	add	r1, sp, #272	; 0x110
 8009ad2:	bf38      	it	cc
 8009ad4:	2210      	movcc	r2, #16
 8009ad6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009ada:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8009ade:	0079      	lsls	r1, r7, #1
 8009ae0:	3a04      	subs	r2, #4
 8009ae2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ae6:	f850 5b04 	ldr.w	r5, [r0], #4
 8009aea:	f842 5f04 	str.w	r5, [r2, #4]!
 8009aee:	4281      	cmp	r1, r0
 8009af0:	d1f9      	bne.n	8009ae6 <_Unwind_VRS_Pop+0x142>
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d047      	beq.n	8009b86 <_Unwind_VRS_Pop+0x1e2>
 8009af6:	2e0f      	cmp	r6, #15
 8009af8:	63a1      	str	r1, [r4, #56]	; 0x38
 8009afa:	d932      	bls.n	8009b62 <_Unwind_VRS_Pop+0x1be>
 8009afc:	b117      	cbz	r7, 8009b04 <_Unwind_VRS_Pop+0x160>
 8009afe:	a802      	add	r0, sp, #8
 8009b00:	f000 f894 	bl	8009c2c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8009b04:	2000      	movs	r0, #0
 8009b06:	e761      	b.n	80099cc <_Unwind_VRS_Pop+0x28>
 8009b08:	2e0f      	cmp	r6, #15
 8009b0a:	f63f af5e 	bhi.w	80099ca <_Unwind_VRS_Pop+0x26>
 8009b0e:	2700      	movs	r7, #0
 8009b10:	6822      	ldr	r2, [r4, #0]
 8009b12:	07d1      	lsls	r1, r2, #31
 8009b14:	d50d      	bpl.n	8009b32 <_Unwind_VRS_Pop+0x18e>
 8009b16:	f022 0101 	bic.w	r1, r2, #1
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	6021      	str	r1, [r4, #0]
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	4620      	mov	r0, r4
 8009b22:	d052      	beq.n	8009bca <_Unwind_VRS_Pop+0x226>
 8009b24:	f022 0203 	bic.w	r2, r2, #3
 8009b28:	f840 2b48 	str.w	r2, [r0], #72
 8009b2c:	f000 f872 	bl	8009c14 <__gnu_Unwind_Save_VFP>
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	2f00      	cmp	r7, #0
 8009b34:	d051      	beq.n	8009bda <_Unwind_VRS_Pop+0x236>
 8009b36:	6822      	ldr	r2, [r4, #0]
 8009b38:	0751      	lsls	r1, r2, #29
 8009b3a:	d436      	bmi.n	8009baa <_Unwind_VRS_Pop+0x206>
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d03e      	beq.n	8009bbe <_Unwind_VRS_Pop+0x21a>
 8009b40:	2e0f      	cmp	r6, #15
 8009b42:	d806      	bhi.n	8009b52 <_Unwind_VRS_Pop+0x1ae>
 8009b44:	a822      	add	r0, sp, #136	; 0x88
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	f000 f86c 	bl	8009c24 <__gnu_Unwind_Save_VFP_D>
 8009b4c:	9b01      	ldr	r3, [sp, #4]
 8009b4e:	2f00      	cmp	r7, #0
 8009b50:	d0a8      	beq.n	8009aa4 <_Unwind_VRS_Pop+0x100>
 8009b52:	a802      	add	r0, sp, #8
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	f000 f86d 	bl	8009c34 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8009b5a:	9b01      	ldr	r3, [sp, #4]
 8009b5c:	f1c6 0210 	rsb	r2, r6, #16
 8009b60:	e7a2      	b.n	8009aa8 <_Unwind_VRS_Pop+0x104>
 8009b62:	a822      	add	r0, sp, #136	; 0x88
 8009b64:	f000 f85a 	bl	8009c1c <__gnu_Unwind_Restore_VFP_D>
 8009b68:	e7c8      	b.n	8009afc <_Unwind_VRS_Pop+0x158>
 8009b6a:	2f10      	cmp	r7, #16
 8009b6c:	d9cf      	bls.n	8009b0e <_Unwind_VRS_Pop+0x16a>
 8009b6e:	3f10      	subs	r7, #16
 8009b70:	e7ce      	b.n	8009b10 <_Unwind_VRS_Pop+0x16c>
 8009b72:	f023 0310 	bic.w	r3, r3, #16
 8009b76:	6023      	str	r3, [r4, #0]
 8009b78:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8009b7c:	9201      	str	r2, [sp, #4]
 8009b7e:	f000 f8ab 	bl	8009cd8 <__gnu_Unwind_Save_WMMXC>
 8009b82:	9a01      	ldr	r2, [sp, #4]
 8009b84:	e72c      	b.n	80099e0 <_Unwind_VRS_Pop+0x3c>
 8009b86:	3104      	adds	r1, #4
 8009b88:	63a1      	str	r1, [r4, #56]	; 0x38
 8009b8a:	a822      	add	r0, sp, #136	; 0x88
 8009b8c:	f000 f83e 	bl	8009c0c <__gnu_Unwind_Restore_VFP>
 8009b90:	e7b8      	b.n	8009b04 <_Unwind_VRS_Pop+0x160>
 8009b92:	2f00      	cmp	r7, #0
 8009b94:	d19a      	bne.n	8009acc <_Unwind_VRS_Pop+0x128>
 8009b96:	4601      	mov	r1, r0
 8009b98:	e7ab      	b.n	8009af2 <_Unwind_VRS_Pop+0x14e>
 8009b9a:	f023 0308 	bic.w	r3, r3, #8
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8009ba4:	f000 f86c 	bl	8009c80 <__gnu_Unwind_Save_WMMXD>
 8009ba8:	e73f      	b.n	8009a2a <_Unwind_VRS_Pop+0x86>
 8009baa:	4620      	mov	r0, r4
 8009bac:	f022 0204 	bic.w	r2, r2, #4
 8009bb0:	f840 2bd0 	str.w	r2, [r0], #208
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	f000 f83d 	bl	8009c34 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8009bba:	9b01      	ldr	r3, [sp, #4]
 8009bbc:	e7be      	b.n	8009b3c <_Unwind_VRS_Pop+0x198>
 8009bbe:	a822      	add	r0, sp, #136	; 0x88
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	f000 f827 	bl	8009c14 <__gnu_Unwind_Save_VFP>
 8009bc6:	9b01      	ldr	r3, [sp, #4]
 8009bc8:	e7c8      	b.n	8009b5c <_Unwind_VRS_Pop+0x1b8>
 8009bca:	f041 0102 	orr.w	r1, r1, #2
 8009bce:	f840 1b48 	str.w	r1, [r0], #72
 8009bd2:	f000 f827 	bl	8009c24 <__gnu_Unwind_Save_VFP_D>
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	e7ab      	b.n	8009b32 <_Unwind_VRS_Pop+0x18e>
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d003      	beq.n	8009be6 <_Unwind_VRS_Pop+0x242>
 8009bde:	2e0f      	cmp	r6, #15
 8009be0:	f63f af60 	bhi.w	8009aa4 <_Unwind_VRS_Pop+0x100>
 8009be4:	e7ae      	b.n	8009b44 <_Unwind_VRS_Pop+0x1a0>
 8009be6:	a822      	add	r0, sp, #136	; 0x88
 8009be8:	9301      	str	r3, [sp, #4]
 8009bea:	f000 f813 	bl	8009c14 <__gnu_Unwind_Save_VFP>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	e758      	b.n	8009aa4 <_Unwind_VRS_Pop+0x100>
 8009bf2:	bf00      	nop

08009bf4 <__restore_core_regs>:
 8009bf4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8009bf8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8009bfc:	469c      	mov	ip, r3
 8009bfe:	46a6      	mov	lr, r4
 8009c00:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8009c04:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8009c08:	46e5      	mov	sp, ip
 8009c0a:	bd00      	pop	{pc}

08009c0c <__gnu_Unwind_Restore_VFP>:
 8009c0c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop

08009c14 <__gnu_Unwind_Save_VFP>:
 8009c14:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop

08009c1c <__gnu_Unwind_Restore_VFP_D>:
 8009c1c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop

08009c24 <__gnu_Unwind_Save_VFP_D>:
 8009c24:	ec80 0b20 	vstmia	r0, {d0-d15}
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop

08009c2c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8009c2c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop

08009c34 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8009c34:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop

08009c3c <__gnu_Unwind_Restore_WMMXD>:
 8009c3c:	ecf0 0102 	ldfe	f0, [r0], #8
 8009c40:	ecf0 1102 	ldfe	f1, [r0], #8
 8009c44:	ecf0 2102 	ldfe	f2, [r0], #8
 8009c48:	ecf0 3102 	ldfe	f3, [r0], #8
 8009c4c:	ecf0 4102 	ldfe	f4, [r0], #8
 8009c50:	ecf0 5102 	ldfe	f5, [r0], #8
 8009c54:	ecf0 6102 	ldfe	f6, [r0], #8
 8009c58:	ecf0 7102 	ldfe	f7, [r0], #8
 8009c5c:	ecf0 8102 	ldfp	f0, [r0], #8
 8009c60:	ecf0 9102 	ldfp	f1, [r0], #8
 8009c64:	ecf0 a102 	ldfp	f2, [r0], #8
 8009c68:	ecf0 b102 	ldfp	f3, [r0], #8
 8009c6c:	ecf0 c102 	ldfp	f4, [r0], #8
 8009c70:	ecf0 d102 	ldfp	f5, [r0], #8
 8009c74:	ecf0 e102 	ldfp	f6, [r0], #8
 8009c78:	ecf0 f102 	ldfp	f7, [r0], #8
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop

08009c80 <__gnu_Unwind_Save_WMMXD>:
 8009c80:	ece0 0102 	stfe	f0, [r0], #8
 8009c84:	ece0 1102 	stfe	f1, [r0], #8
 8009c88:	ece0 2102 	stfe	f2, [r0], #8
 8009c8c:	ece0 3102 	stfe	f3, [r0], #8
 8009c90:	ece0 4102 	stfe	f4, [r0], #8
 8009c94:	ece0 5102 	stfe	f5, [r0], #8
 8009c98:	ece0 6102 	stfe	f6, [r0], #8
 8009c9c:	ece0 7102 	stfe	f7, [r0], #8
 8009ca0:	ece0 8102 	stfp	f0, [r0], #8
 8009ca4:	ece0 9102 	stfp	f1, [r0], #8
 8009ca8:	ece0 a102 	stfp	f2, [r0], #8
 8009cac:	ece0 b102 	stfp	f3, [r0], #8
 8009cb0:	ece0 c102 	stfp	f4, [r0], #8
 8009cb4:	ece0 d102 	stfp	f5, [r0], #8
 8009cb8:	ece0 e102 	stfp	f6, [r0], #8
 8009cbc:	ece0 f102 	stfp	f7, [r0], #8
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop

08009cc4 <__gnu_Unwind_Restore_WMMXC>:
 8009cc4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8009cc8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8009ccc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8009cd0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop

08009cd8 <__gnu_Unwind_Save_WMMXC>:
 8009cd8:	fca0 8101 	stc2	1, cr8, [r0], #4
 8009cdc:	fca0 9101 	stc2	1, cr9, [r0], #4
 8009ce0:	fca0 a101 	stc2	1, cr10, [r0], #4
 8009ce4:	fca0 b101 	stc2	1, cr11, [r0], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop

08009cec <_Unwind_RaiseException>:
 8009cec:	46ec      	mov	ip, sp
 8009cee:	b500      	push	{lr}
 8009cf0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009cf4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009cf8:	f04f 0300 	mov.w	r3, #0
 8009cfc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009d00:	a901      	add	r1, sp, #4
 8009d02:	f7ff fbe9 	bl	80094d8 <__gnu_Unwind_RaiseException>
 8009d06:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009d0a:	b012      	add	sp, #72	; 0x48
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop

08009d10 <_Unwind_Resume>:
 8009d10:	46ec      	mov	ip, sp
 8009d12:	b500      	push	{lr}
 8009d14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009d18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009d1c:	f04f 0300 	mov.w	r3, #0
 8009d20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009d24:	a901      	add	r1, sp, #4
 8009d26:	f7ff fc11 	bl	800954c <__gnu_Unwind_Resume>
 8009d2a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009d2e:	b012      	add	sp, #72	; 0x48
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop

08009d34 <_Unwind_Resume_or_Rethrow>:
 8009d34:	46ec      	mov	ip, sp
 8009d36:	b500      	push	{lr}
 8009d38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009d3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009d40:	f04f 0300 	mov.w	r3, #0
 8009d44:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009d48:	a901      	add	r1, sp, #4
 8009d4a:	f7ff fc21 	bl	8009590 <__gnu_Unwind_Resume_or_Rethrow>
 8009d4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009d52:	b012      	add	sp, #72	; 0x48
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop

08009d58 <_Unwind_ForcedUnwind>:
 8009d58:	46ec      	mov	ip, sp
 8009d5a:	b500      	push	{lr}
 8009d5c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009d60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009d64:	f04f 0300 	mov.w	r3, #0
 8009d68:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009d6c:	ab01      	add	r3, sp, #4
 8009d6e:	f7ff fbe3 	bl	8009538 <__gnu_Unwind_ForcedUnwind>
 8009d72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009d76:	b012      	add	sp, #72	; 0x48
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop

08009d7c <_Unwind_Backtrace>:
 8009d7c:	46ec      	mov	ip, sp
 8009d7e:	b500      	push	{lr}
 8009d80:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009d84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009d90:	aa01      	add	r2, sp, #4
 8009d92:	f7ff fc5b 	bl	800964c <__gnu_Unwind_Backtrace>
 8009d96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009d9a:	b012      	add	sp, #72	; 0x48
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop

08009da0 <next_unwind_byte>:
 8009da0:	7a03      	ldrb	r3, [r0, #8]
 8009da2:	b91b      	cbnz	r3, 8009dac <next_unwind_byte+0xc>
 8009da4:	7a43      	ldrb	r3, [r0, #9]
 8009da6:	b943      	cbnz	r3, 8009dba <next_unwind_byte+0x1a>
 8009da8:	20b0      	movs	r0, #176	; 0xb0
 8009daa:	4770      	bx	lr
 8009dac:	1e5a      	subs	r2, r3, #1
 8009dae:	6803      	ldr	r3, [r0, #0]
 8009db0:	7202      	strb	r2, [r0, #8]
 8009db2:	021a      	lsls	r2, r3, #8
 8009db4:	6002      	str	r2, [r0, #0]
 8009db6:	0e18      	lsrs	r0, r3, #24
 8009db8:	4770      	bx	lr
 8009dba:	6842      	ldr	r2, [r0, #4]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	b410      	push	{r4}
 8009dc0:	7243      	strb	r3, [r0, #9]
 8009dc2:	6813      	ldr	r3, [r2, #0]
 8009dc4:	2103      	movs	r1, #3
 8009dc6:	1d14      	adds	r4, r2, #4
 8009dc8:	7201      	strb	r1, [r0, #8]
 8009dca:	021a      	lsls	r2, r3, #8
 8009dcc:	6044      	str	r4, [r0, #4]
 8009dce:	6002      	str	r2, [r0, #0]
 8009dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd4:	0e18      	lsrs	r0, r3, #24
 8009dd6:	4770      	bx	lr

08009dd8 <_Unwind_GetGR.constprop.0>:
 8009dd8:	b500      	push	{lr}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	aa03      	add	r2, sp, #12
 8009dde:	2300      	movs	r3, #0
 8009de0:	9200      	str	r2, [sp, #0]
 8009de2:	4619      	mov	r1, r3
 8009de4:	220c      	movs	r2, #12
 8009de6:	f7ff fbe3 	bl	80095b0 <_Unwind_VRS_Get>
 8009dea:	9803      	ldr	r0, [sp, #12]
 8009dec:	b005      	add	sp, #20
 8009dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8009df2:	bf00      	nop

08009df4 <unwind_UCB_from_context>:
 8009df4:	e7f0      	b.n	8009dd8 <_Unwind_GetGR.constprop.0>
 8009df6:	bf00      	nop

08009df8 <__gnu_unwind_execute>:
 8009df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	b085      	sub	sp, #20
 8009e00:	460d      	mov	r5, r1
 8009e02:	f04f 0800 	mov.w	r8, #0
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7ff ffca 	bl	8009da0 <next_unwind_byte>
 8009e0c:	28b0      	cmp	r0, #176	; 0xb0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	f000 80b4 	beq.w	8009f7c <__gnu_unwind_execute+0x184>
 8009e14:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8009e18:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8009e1c:	d020      	beq.n	8009e60 <__gnu_unwind_execute+0x68>
 8009e1e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d07a      	beq.n	8009f1c <__gnu_unwind_execute+0x124>
 8009e26:	2b90      	cmp	r3, #144	; 0x90
 8009e28:	d035      	beq.n	8009e96 <__gnu_unwind_execute+0x9e>
 8009e2a:	2ba0      	cmp	r3, #160	; 0xa0
 8009e2c:	d048      	beq.n	8009ec0 <__gnu_unwind_execute+0xc8>
 8009e2e:	2bb0      	cmp	r3, #176	; 0xb0
 8009e30:	d05c      	beq.n	8009eec <__gnu_unwind_execute+0xf4>
 8009e32:	2bc0      	cmp	r3, #192	; 0xc0
 8009e34:	f000 8089 	beq.w	8009f4a <__gnu_unwind_execute+0x152>
 8009e38:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009e3c:	2bd0      	cmp	r3, #208	; 0xd0
 8009e3e:	d10b      	bne.n	8009e58 <__gnu_unwind_execute+0x60>
 8009e40:	f000 0207 	and.w	r2, r0, #7
 8009e44:	3201      	adds	r2, #1
 8009e46:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009e4a:	2305      	movs	r3, #5
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff fda8 	bl	80099a4 <_Unwind_VRS_Pop>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d0d6      	beq.n	8009e06 <__gnu_unwind_execute+0xe>
 8009e58:	2009      	movs	r0, #9
 8009e5a:	b005      	add	sp, #20
 8009e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e60:	f10d 090c 	add.w	r9, sp, #12
 8009e64:	4619      	mov	r1, r3
 8009e66:	0087      	lsls	r7, r0, #2
 8009e68:	f8cd 9000 	str.w	r9, [sp]
 8009e6c:	220d      	movs	r2, #13
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7ff fb9e 	bl	80095b0 <_Unwind_VRS_Get>
 8009e74:	b2ff      	uxtb	r7, r7
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	f8cd 9000 	str.w	r9, [sp]
 8009e7c:	3704      	adds	r7, #4
 8009e7e:	0660      	lsls	r0, r4, #25
 8009e80:	bf4c      	ite	mi
 8009e82:	1bdf      	submi	r7, r3, r7
 8009e84:	18ff      	addpl	r7, r7, r3
 8009e86:	2300      	movs	r3, #0
 8009e88:	4619      	mov	r1, r3
 8009e8a:	220d      	movs	r2, #13
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	9703      	str	r7, [sp, #12]
 8009e90:	f7ff fbb4 	bl	80095fc <_Unwind_VRS_Set>
 8009e94:	e7b7      	b.n	8009e06 <__gnu_unwind_execute+0xe>
 8009e96:	f000 030d 	and.w	r3, r0, #13
 8009e9a:	2b0d      	cmp	r3, #13
 8009e9c:	d0dc      	beq.n	8009e58 <__gnu_unwind_execute+0x60>
 8009e9e:	af03      	add	r7, sp, #12
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f000 020f 	and.w	r2, r0, #15
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	9700      	str	r7, [sp, #0]
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff fb80 	bl	80095b0 <_Unwind_VRS_Get>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9700      	str	r7, [sp, #0]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	220d      	movs	r2, #13
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7ff fb9f 	bl	80095fc <_Unwind_VRS_Set>
 8009ebe:	e7a2      	b.n	8009e06 <__gnu_unwind_execute+0xe>
 8009ec0:	43c2      	mvns	r2, r0
 8009ec2:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8009ec6:	f002 0207 	and.w	r2, r2, #7
 8009eca:	fa43 f202 	asr.w	r2, r3, r2
 8009ece:	0701      	lsls	r1, r0, #28
 8009ed0:	ea02 0203 	and.w	r2, r2, r3
 8009ed4:	f04f 0300 	mov.w	r3, #0
 8009ed8:	bf48      	it	mi
 8009eda:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff fd5f 	bl	80099a4 <_Unwind_VRS_Pop>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d1b6      	bne.n	8009e58 <__gnu_unwind_execute+0x60>
 8009eea:	e78c      	b.n	8009e06 <__gnu_unwind_execute+0xe>
 8009eec:	28b1      	cmp	r0, #177	; 0xb1
 8009eee:	d04a      	beq.n	8009f86 <__gnu_unwind_execute+0x18e>
 8009ef0:	28b2      	cmp	r0, #178	; 0xb2
 8009ef2:	d053      	beq.n	8009f9c <__gnu_unwind_execute+0x1a4>
 8009ef4:	28b3      	cmp	r0, #179	; 0xb3
 8009ef6:	f000 8081 	beq.w	8009ffc <__gnu_unwind_execute+0x204>
 8009efa:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8009efe:	2bb4      	cmp	r3, #180	; 0xb4
 8009f00:	d0aa      	beq.n	8009e58 <__gnu_unwind_execute+0x60>
 8009f02:	f000 0207 	and.w	r2, r0, #7
 8009f06:	3201      	adds	r2, #1
 8009f08:	2301      	movs	r3, #1
 8009f0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009f0e:	4619      	mov	r1, r3
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fd47 	bl	80099a4 <_Unwind_VRS_Pop>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d19e      	bne.n	8009e58 <__gnu_unwind_execute+0x60>
 8009f1a:	e774      	b.n	8009e06 <__gnu_unwind_execute+0xe>
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f7ff ff3f 	bl	8009da0 <next_unwind_byte>
 8009f22:	0224      	lsls	r4, r4, #8
 8009f24:	4320      	orrs	r0, r4
 8009f26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009f2a:	d095      	beq.n	8009e58 <__gnu_unwind_execute+0x60>
 8009f2c:	0104      	lsls	r4, r0, #4
 8009f2e:	2300      	movs	r3, #0
 8009f30:	b2a2      	uxth	r2, r4
 8009f32:	4619      	mov	r1, r3
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff fd35 	bl	80099a4 <_Unwind_VRS_Pop>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d18c      	bne.n	8009e58 <__gnu_unwind_execute+0x60>
 8009f3e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8009f42:	bf18      	it	ne
 8009f44:	f04f 0801 	movne.w	r8, #1
 8009f48:	e75d      	b.n	8009e06 <__gnu_unwind_execute+0xe>
 8009f4a:	28c6      	cmp	r0, #198	; 0xc6
 8009f4c:	d062      	beq.n	800a014 <__gnu_unwind_execute+0x21c>
 8009f4e:	28c7      	cmp	r0, #199	; 0xc7
 8009f50:	d06c      	beq.n	800a02c <__gnu_unwind_execute+0x234>
 8009f52:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009f56:	2bc0      	cmp	r3, #192	; 0xc0
 8009f58:	d07b      	beq.n	800a052 <__gnu_unwind_execute+0x25a>
 8009f5a:	28c8      	cmp	r0, #200	; 0xc8
 8009f5c:	f000 8091 	beq.w	800a082 <__gnu_unwind_execute+0x28a>
 8009f60:	28c9      	cmp	r0, #201	; 0xc9
 8009f62:	f47f af79 	bne.w	8009e58 <__gnu_unwind_execute+0x60>
 8009f66:	4628      	mov	r0, r5
 8009f68:	f7ff ff1a 	bl	8009da0 <next_unwind_byte>
 8009f6c:	0302      	lsls	r2, r0, #12
 8009f6e:	f000 000f 	and.w	r0, r0, #15
 8009f72:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8009f76:	3001      	adds	r0, #1
 8009f78:	4302      	orrs	r2, r0
 8009f7a:	e766      	b.n	8009e4a <__gnu_unwind_execute+0x52>
 8009f7c:	f1b8 0f00 	cmp.w	r8, #0
 8009f80:	d06e      	beq.n	800a060 <__gnu_unwind_execute+0x268>
 8009f82:	2000      	movs	r0, #0
 8009f84:	e769      	b.n	8009e5a <__gnu_unwind_execute+0x62>
 8009f86:	4628      	mov	r0, r5
 8009f88:	f7ff ff0a 	bl	8009da0 <next_unwind_byte>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f43f af62 	beq.w	8009e58 <__gnu_unwind_execute+0x60>
 8009f94:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009f98:	d0b9      	beq.n	8009f0e <__gnu_unwind_execute+0x116>
 8009f9a:	e75d      	b.n	8009e58 <__gnu_unwind_execute+0x60>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f10d 090c 	add.w	r9, sp, #12
 8009fa2:	220d      	movs	r2, #13
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f8cd 9000 	str.w	r9, [sp]
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff fb00 	bl	80095b0 <_Unwind_VRS_Get>
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f7ff fef5 	bl	8009da0 <next_unwind_byte>
 8009fb6:	0602      	lsls	r2, r0, #24
 8009fb8:	f04f 0402 	mov.w	r4, #2
 8009fbc:	d50c      	bpl.n	8009fd8 <__gnu_unwind_execute+0x1e0>
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009fc4:	40a0      	lsls	r0, r4
 8009fc6:	4403      	add	r3, r0
 8009fc8:	4628      	mov	r0, r5
 8009fca:	9303      	str	r3, [sp, #12]
 8009fcc:	f7ff fee8 	bl	8009da0 <next_unwind_byte>
 8009fd0:	0603      	lsls	r3, r0, #24
 8009fd2:	f104 0407 	add.w	r4, r4, #7
 8009fd6:	d4f2      	bmi.n	8009fbe <__gnu_unwind_execute+0x1c6>
 8009fd8:	9b03      	ldr	r3, [sp, #12]
 8009fda:	f8cd 9000 	str.w	r9, [sp]
 8009fde:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009fe2:	fa00 f204 	lsl.w	r2, r0, r4
 8009fe6:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8009fea:	2300      	movs	r3, #0
 8009fec:	4414      	add	r4, r2
 8009fee:	4619      	mov	r1, r3
 8009ff0:	220d      	movs	r2, #13
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	9403      	str	r4, [sp, #12]
 8009ff6:	f7ff fb01 	bl	80095fc <_Unwind_VRS_Set>
 8009ffa:	e704      	b.n	8009e06 <__gnu_unwind_execute+0xe>
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f7ff fecf 	bl	8009da0 <next_unwind_byte>
 800a002:	0301      	lsls	r1, r0, #12
 800a004:	f000 000f 	and.w	r0, r0, #15
 800a008:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800a00c:	1c42      	adds	r2, r0, #1
 800a00e:	2301      	movs	r3, #1
 800a010:	430a      	orrs	r2, r1
 800a012:	e77c      	b.n	8009f0e <__gnu_unwind_execute+0x116>
 800a014:	4628      	mov	r0, r5
 800a016:	f7ff fec3 	bl	8009da0 <next_unwind_byte>
 800a01a:	0301      	lsls	r1, r0, #12
 800a01c:	f000 000f 	and.w	r0, r0, #15
 800a020:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800a024:	1c42      	adds	r2, r0, #1
 800a026:	2303      	movs	r3, #3
 800a028:	430a      	orrs	r2, r1
 800a02a:	e770      	b.n	8009f0e <__gnu_unwind_execute+0x116>
 800a02c:	4628      	mov	r0, r5
 800a02e:	f7ff feb7 	bl	8009da0 <next_unwind_byte>
 800a032:	4602      	mov	r2, r0
 800a034:	2800      	cmp	r0, #0
 800a036:	f43f af0f 	beq.w	8009e58 <__gnu_unwind_execute+0x60>
 800a03a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800a03e:	f47f af0b 	bne.w	8009e58 <__gnu_unwind_execute+0x60>
 800a042:	2104      	movs	r1, #4
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff fcad 	bl	80099a4 <_Unwind_VRS_Pop>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f47f af04 	bne.w	8009e58 <__gnu_unwind_execute+0x60>
 800a050:	e6d9      	b.n	8009e06 <__gnu_unwind_execute+0xe>
 800a052:	f000 020f 	and.w	r2, r0, #15
 800a056:	3201      	adds	r2, #1
 800a058:	2303      	movs	r3, #3
 800a05a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800a05e:	e756      	b.n	8009f0e <__gnu_unwind_execute+0x116>
 800a060:	ac03      	add	r4, sp, #12
 800a062:	4643      	mov	r3, r8
 800a064:	220e      	movs	r2, #14
 800a066:	4641      	mov	r1, r8
 800a068:	9400      	str	r4, [sp, #0]
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7ff faa0 	bl	80095b0 <_Unwind_VRS_Get>
 800a070:	9400      	str	r4, [sp, #0]
 800a072:	4630      	mov	r0, r6
 800a074:	4643      	mov	r3, r8
 800a076:	220f      	movs	r2, #15
 800a078:	4641      	mov	r1, r8
 800a07a:	f7ff fabf 	bl	80095fc <_Unwind_VRS_Set>
 800a07e:	4640      	mov	r0, r8
 800a080:	e6eb      	b.n	8009e5a <__gnu_unwind_execute+0x62>
 800a082:	4628      	mov	r0, r5
 800a084:	f7ff fe8c 	bl	8009da0 <next_unwind_byte>
 800a088:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a08c:	f000 030f 	and.w	r3, r0, #15
 800a090:	3210      	adds	r2, #16
 800a092:	3301      	adds	r3, #1
 800a094:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800a098:	e6d7      	b.n	8009e4a <__gnu_unwind_execute+0x52>
 800a09a:	bf00      	nop

0800a09c <__gnu_unwind_frame>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	2003      	movs	r0, #3
 800a0a6:	f88d 000c 	strb.w	r0, [sp, #12]
 800a0aa:	79dc      	ldrb	r4, [r3, #7]
 800a0ac:	f88d 400d 	strb.w	r4, [sp, #13]
 800a0b0:	0212      	lsls	r2, r2, #8
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	4608      	mov	r0, r1
 800a0b6:	a901      	add	r1, sp, #4
 800a0b8:	9201      	str	r2, [sp, #4]
 800a0ba:	9302      	str	r3, [sp, #8]
 800a0bc:	f7ff fe9c 	bl	8009df8 <__gnu_unwind_execute>
 800a0c0:	b004      	add	sp, #16
 800a0c2:	bd10      	pop	{r4, pc}

0800a0c4 <_Unwind_GetRegionStart>:
 800a0c4:	b508      	push	{r3, lr}
 800a0c6:	f7ff fe95 	bl	8009df4 <unwind_UCB_from_context>
 800a0ca:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800a0cc:	bd08      	pop	{r3, pc}
 800a0ce:	bf00      	nop

0800a0d0 <_Unwind_GetLanguageSpecificData>:
 800a0d0:	b508      	push	{r3, lr}
 800a0d2:	f7ff fe8f 	bl	8009df4 <unwind_UCB_from_context>
 800a0d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a0d8:	79d8      	ldrb	r0, [r3, #7]
 800a0da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0de:	3008      	adds	r0, #8
 800a0e0:	bd08      	pop	{r3, pc}
 800a0e2:	bf00      	nop

0800a0e4 <_Unwind_GetTextRelBase>:
 800a0e4:	b508      	push	{r3, lr}
 800a0e6:	f00c f9dd 	bl	80164a4 <abort>
 800a0ea:	bf00      	nop

0800a0ec <_Unwind_GetDataRelBase>:
 800a0ec:	b508      	push	{r3, lr}
 800a0ee:	f7ff fff9 	bl	800a0e4 <_Unwind_GetTextRelBase>
 800a0f2:	bf00      	nop

0800a0f4 <__aeabi_idiv0>:
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop

0800a0f8 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer
  * @param Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0f8:	b510      	push	{r4, lr}
  uint32_t *tmp;
  
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 800a0fa:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 800a0fe:	b2e4      	uxtb	r4, r4
 800a100:	2c01      	cmp	r4, #1
 800a102:	d006      	beq.n	800a112 <HAL_UART_Transmit_DMA+0x1a>
 800a104:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 800a108:	b2e4      	uxtb	r4, r4
 800a10a:	2c22      	cmp	r4, #34	; 0x22
 800a10c:	d103      	bne.n	800a116 <HAL_UART_Transmit_DMA+0x1e>
 800a10e:	2401      	movs	r4, #1
 800a110:	e002      	b.n	800a118 <HAL_UART_Transmit_DMA+0x20>
 800a112:	2401      	movs	r4, #1
 800a114:	e000      	b.n	800a118 <HAL_UART_Transmit_DMA+0x20>
 800a116:	2400      	movs	r4, #0
 800a118:	2c00      	cmp	r4, #0
 800a11a:	d039      	beq.n	800a190 <HAL_UART_Transmit_DMA+0x98>
  {
    if((pData == NULL ) || (Size == 0)) 
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	bf18      	it	ne
 800a120:	2900      	cmpne	r1, #0
 800a122:	d037      	beq.n	800a194 <HAL_UART_Transmit_DMA+0x9c>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800a124:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d035      	beq.n	800a198 <HAL_UART_Transmit_DMA+0xa0>
 800a12c:	2301      	movs	r3, #1
 800a12e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    
    huart->pTxBuffPtr = pData;
 800a132:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 800a134:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size; 
 800a138:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800a140:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b22      	cmp	r3, #34	; 0x22
 800a148:	d103      	bne.n	800a152 <HAL_UART_Transmit_DMA+0x5a>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800a14a:	2332      	movs	r3, #50	; 0x32
 800a14c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a150:	e002      	b.n	800a158 <HAL_UART_Transmit_DMA+0x60>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800a152:	2312      	movs	r3, #18
 800a154:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a158:	4613      	mov	r3, r2
 800a15a:	4604      	mov	r4, r0
    }
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a15c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a15e:	480f      	ldr	r0, [pc, #60]	; (800a19c <HAL_UART_Transmit_DMA+0xa4>)
 800a160:	63d0      	str	r0, [r2, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a162:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a164:	480e      	ldr	r0, [pc, #56]	; (800a1a0 <HAL_UART_Transmit_DMA+0xa8>)
 800a166:	6410      	str	r0, [r2, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a168:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a16a:	480e      	ldr	r0, [pc, #56]	; (800a1a4 <HAL_UART_Transmit_DMA+0xac>)
 800a16c:	6490      	str	r0, [r2, #72]	; 0x48

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 800a16e:	6822      	ldr	r2, [r4, #0]
 800a170:	3228      	adds	r2, #40	; 0x28
 800a172:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a174:	f003 f8fa 	bl	800d36c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_IT(huart, UART_FLAG_TC);
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	2240      	movs	r2, #64	; 0x40
 800a17c:	621a      	str	r2, [r3, #32]

    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 800a17e:	6822      	ldr	r2, [r4, #0]
 800a180:	6893      	ldr	r3, [r2, #8]
 800a182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a186:	6093      	str	r3, [r2, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a188:	2000      	movs	r0, #0
 800a18a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    
    return HAL_OK;
 800a18e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;   
 800a190:	2002      	movs	r0, #2
 800a192:	bd10      	pop	{r4, pc}
  
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 800a194:	2001      	movs	r0, #1
 800a196:	bd10      	pop	{r4, pc}
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800a198:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;   
  }
}
 800a19a:	bd10      	pop	{r4, pc}
 800a19c:	0800a345 	.word	0x0800a345
 800a1a0:	0800a37d 	.word	0x0800a37d
 800a1a4:	0800a3e1 	.word	0x0800a3e1

0800a1a8 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain 
  *         the parity bit (MSB position)     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1a8:	b510      	push	{r4, lr}
  uint32_t *tmp;
  
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 800a1aa:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 800a1ae:	b2e4      	uxtb	r4, r4
 800a1b0:	2c01      	cmp	r4, #1
 800a1b2:	d006      	beq.n	800a1c2 <HAL_UART_Receive_DMA+0x1a>
 800a1b4:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 800a1b8:	b2e4      	uxtb	r4, r4
 800a1ba:	2c12      	cmp	r4, #18
 800a1bc:	d103      	bne.n	800a1c6 <HAL_UART_Receive_DMA+0x1e>
 800a1be:	2401      	movs	r4, #1
 800a1c0:	e002      	b.n	800a1c8 <HAL_UART_Receive_DMA+0x20>
 800a1c2:	2401      	movs	r4, #1
 800a1c4:	e000      	b.n	800a1c8 <HAL_UART_Receive_DMA+0x20>
 800a1c6:	2400      	movs	r4, #0
 800a1c8:	2c00      	cmp	r4, #0
 800a1ca:	d035      	beq.n	800a238 <HAL_UART_Receive_DMA+0x90>
  {
    if((pData == NULL ) || (Size == 0)) 
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	bf18      	it	ne
 800a1d0:	2900      	cmpne	r1, #0
 800a1d2:	d033      	beq.n	800a23c <HAL_UART_Receive_DMA+0x94>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800a1d4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d031      	beq.n	800a240 <HAL_UART_Receive_DMA+0x98>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    
    huart->pRxBuffPtr = pData;
 800a1e2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800a1e4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
 800a1ec:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b12      	cmp	r3, #18
 800a1f4:	d103      	bne.n	800a1fe <HAL_UART_Receive_DMA+0x56>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800a1f6:	2332      	movs	r3, #50	; 0x32
 800a1f8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a1fc:	e002      	b.n	800a204 <HAL_UART_Receive_DMA+0x5c>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800a1fe:	2322      	movs	r3, #34	; 0x22
 800a200:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a204:	4613      	mov	r3, r2
 800a206:	460a      	mov	r2, r1
 800a208:	4604      	mov	r4, r0
    }
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a20a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a20c:	480d      	ldr	r0, [pc, #52]	; (800a244 <HAL_UART_Receive_DMA+0x9c>)
 800a20e:	63c8      	str	r0, [r1, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a210:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a212:	480d      	ldr	r0, [pc, #52]	; (800a248 <HAL_UART_Receive_DMA+0xa0>)
 800a214:	6408      	str	r0, [r1, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a216:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a218:	480c      	ldr	r0, [pc, #48]	; (800a24c <HAL_UART_Receive_DMA+0xa4>)
 800a21a:	6488      	str	r0, [r1, #72]	; 0x48

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 800a21c:	6821      	ldr	r1, [r4, #0]
 800a21e:	3124      	adds	r1, #36	; 0x24
 800a220:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a222:	f003 f8a3 	bl	800d36c <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	6893      	ldr	r3, [r2, #8]
 800a22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22e:	6093      	str	r3, [r2, #8]
    
     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 800a230:	2000      	movs	r0, #0
 800a232:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
     
    return HAL_OK;
 800a236:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY; 
 800a238:	2002      	movs	r0, #2
 800a23a:	bd10      	pop	{r4, pc}
  
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 800a23c:	2001      	movs	r0, #1
 800a23e:	bd10      	pop	{r4, pc}
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800a240:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY; 
  }
}
 800a242:	bd10      	pop	{r4, pc}
 800a244:	0800a38d 	.word	0x0800a38d
 800a248:	0800a3d1 	.word	0x0800a3d1
 800a24c:	0800a3e1 	.word	0x0800a3e1

0800a250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 800a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	460e      	mov	r6, r1
 800a258:	4617      	mov	r7, r2
 800a25a:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a25c:	f003 fbf8 	bl	800da50 <HAL_GetTick>
 800a260:	4680      	mov	r8, r0
  
  /* Wait until flag is set */
  if(Status == RESET)
 800a262:	2f00      	cmp	r7, #0
 800a264:	d132      	bne.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x7c>
  {    
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	ea36 0303 	bics.w	r3, r6, r3
 800a26e:	d060      	beq.n	800a332 <UART_WaitOnFlagUntilTimeout+0xe2>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800a270:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a274:	d0f7      	beq.n	800a266 <UART_WaitOnFlagUntilTimeout+0x16>
      {
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
 800a276:	b13d      	cbz	r5, 800a288 <UART_WaitOnFlagUntilTimeout+0x38>
 800a278:	f003 fbea 	bl	800da50 <HAL_GetTick>
 800a27c:	ebc8 0000 	rsb	r0, r8, r0
 800a280:	4285      	cmp	r5, r0
 800a282:	d903      	bls.n	800a28c <UART_WaitOnFlagUntilTimeout+0x3c>
 800a284:	2300      	movs	r3, #0
 800a286:	e002      	b.n	800a28e <UART_WaitOnFlagUntilTimeout+0x3e>
 800a288:	2301      	movs	r3, #1
 800a28a:	e000      	b.n	800a28e <UART_WaitOnFlagUntilTimeout+0x3e>
 800a28c:	2301      	movs	r3, #1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0e9      	beq.n	800a266 <UART_WaitOnFlagUntilTimeout+0x16>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	6813      	ldr	r3, [r2, #0]
 800a296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a29a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a29c:	6822      	ldr	r2, [r4, #0]
 800a29e:	6813      	ldr	r3, [r2, #0]
 800a2a0:	f023 0320 	bic.w	r3, r3, #32
 800a2a4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2a6:	6822      	ldr	r2, [r4, #0]
 800a2a8:	6813      	ldr	r3, [r2, #0]
 800a2aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2ae:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2b0:	6822      	ldr	r2, [r4, #0]
 800a2b2:	6893      	ldr	r3, [r2, #8]
 800a2b4:	f023 0301 	bic.w	r3, r3, #1
 800a2b8:	6093      	str	r3, [r2, #8]
          
          huart->State= HAL_UART_STATE_READY;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
          
          return HAL_TIMEOUT;
 800a2c6:	2003      	movs	r0, #3
 800a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	ea36 0303 	bics.w	r3, r6, r3
 800a2d4:	d101      	bne.n	800a2da <UART_WaitOnFlagUntilTimeout+0x8a>
 800a2d6:	2701      	movs	r7, #1
 800a2d8:	e000      	b.n	800a2dc <UART_WaitOnFlagUntilTimeout+0x8c>
 800a2da:	2700      	movs	r7, #0
 800a2dc:	b367      	cbz	r7, 800a338 <UART_WaitOnFlagUntilTimeout+0xe8>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800a2de:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a2e2:	d0f3      	beq.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x7c>
      {
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
 800a2e4:	b135      	cbz	r5, 800a2f4 <UART_WaitOnFlagUntilTimeout+0xa4>
 800a2e6:	f003 fbb3 	bl	800da50 <HAL_GetTick>
 800a2ea:	ebc8 0000 	rsb	r0, r8, r0
 800a2ee:	4285      	cmp	r5, r0
 800a2f0:	d900      	bls.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xa4>
 800a2f2:	2700      	movs	r7, #0
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	d0e9      	beq.n	800a2cc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a2f8:	6822      	ldr	r2, [r4, #0]
 800a2fa:	6813      	ldr	r3, [r2, #0]
 800a2fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a300:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a302:	6822      	ldr	r2, [r4, #0]
 800a304:	6813      	ldr	r3, [r2, #0]
 800a306:	f023 0320 	bic.w	r3, r3, #32
 800a30a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a30c:	6822      	ldr	r2, [r4, #0]
 800a30e:	6813      	ldr	r3, [r2, #0]
 800a310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a314:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	6893      	ldr	r3, [r2, #8]
 800a31a:	f023 0301 	bic.w	r3, r3, #1
 800a31e:	6093      	str	r3, [r2, #8]
          
          huart->State= HAL_UART_STATE_READY;
 800a320:	2301      	movs	r3, #1
 800a322:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a326:	2300      	movs	r3, #0
 800a328:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
          
          return HAL_TIMEOUT;
 800a32c:	2003      	movs	r0, #3
 800a32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
  }
  return HAL_OK;      
 800a332:	2000      	movs	r0, #0
 800a334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a338:	2000      	movs	r0, #0
}
 800a33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33e:	bf00      	nop

0800a340 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop

0800a344 <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef>:
  * @brief DMA UART transmit process complete callback 
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800a344:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a346:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800a348:	6802      	ldr	r2, [r0, #0]
 800a34a:	6812      	ldr	r2, [r2, #0]
 800a34c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a350:	d10d      	bne.n	800a36e <_ZL20UART_DMATransmitCpltP19__DMA_HandleTypeDef+0x2a>
  {
    huart->TxXferCount = 0;
 800a352:	2200      	movs	r2, #0
 800a354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 800a358:	6819      	ldr	r1, [r3, #0]
 800a35a:	688a      	ldr	r2, [r1, #8]
 800a35c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a360:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	6813      	ldr	r3, [r2, #0]
 800a366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff ffe6 	bl	800a340 <HAL_UART_TxCpltCallback>
 800a374:	bd08      	pop	{r3, pc}
 800a376:	bf00      	nop

0800a378 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  huart: UART handle
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop

0800a37c <_ZL18UART_DMATxHalfCpltP19__DMA_HandleTypeDef>:
  * @brief DMA UART transmit process half complete callback 
  * @param hdma : DMA handle
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a37c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 800a37e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a380:	f7ff fffa 	bl	800a378 <HAL_UART_TxHalfCpltCallback>
 800a384:	bd08      	pop	{r3, pc}
 800a386:	bf00      	nop

0800a388 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop

0800a38c <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef>:
  * @brief DMA UART receive process complete callback 
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800a38c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a38e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* DMA Normal mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800a390:	6802      	ldr	r2, [r0, #0]
 800a392:	6812      	ldr	r2, [r2, #0]
 800a394:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a398:	d113      	bne.n	800a3c2 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x36>
  { 
    huart->RxXferCount = 0;
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 800a3a0:	6819      	ldr	r1, [r3, #0]
 800a3a2:	688a      	ldr	r2, [r1, #8]
 800a3a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3a8:	608a      	str	r2, [r1, #8]
    
    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800a3aa:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800a3ae:	b2d2      	uxtb	r2, r2
 800a3b0:	2a32      	cmp	r2, #50	; 0x32
 800a3b2:	d103      	bne.n	800a3bc <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x30>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 800a3b4:	2212      	movs	r2, #18
 800a3b6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800a3ba:	e002      	b.n	800a3c2 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x36>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    }
  }
  HAL_UART_RxCpltCallback(huart);
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff ffe0 	bl	800a388 <HAL_UART_RxCpltCallback>
 800a3c8:	bd08      	pop	{r3, pc}
 800a3ca:	bf00      	nop

0800a3cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  huart: UART handle
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop

0800a3d0 <_ZL18UART_DMARxHalfCpltP19__DMA_HandleTypeDef>:
  * @brief DMA UART receive process half complete callback 
  * @param hdma : DMA handle
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart); 
 800a3d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a3d4:	f7ff fffa 	bl	800a3cc <HAL_UART_RxHalfCpltCallback>
 800a3d8:	bd08      	pop	{r3, pc}
 800a3da:	bf00      	nop

0800a3dc <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart: uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop

0800a3e0 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef>:
  * @brief DMA UART communication error callback 
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a3e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a3e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0;
 800a3ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->State= HAL_UART_STATE_READY;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a3f6:	f043 0310 	orr.w	r3, r3, #16
 800a3fa:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800a3fc:	f7ff ffee 	bl	800a3dc <HAL_UART_ErrorCallback>
 800a400:	bd08      	pop	{r3, pc}
 800a402:	bf00      	nop

0800a404 <UART_SetConfig>:
  * @brief Configure the UART peripheral 
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling: 
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a408:	6882      	ldr	r2, [r0, #8]
 800a40a:	6903      	ldr	r3, [r0, #16]
 800a40c:	431a      	orrs	r2, r3
 800a40e:	6943      	ldr	r3, [r0, #20]
 800a410:	431a      	orrs	r2, r3
 800a412:	69c3      	ldr	r3, [r0, #28]
 800a414:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800a416:	6801      	ldr	r1, [r0, #0]
 800a418:	6808      	ldr	r0, [r1, #0]
 800a41a:	4b9f      	ldr	r3, [pc, #636]	; (800a698 <UART_SetConfig+0x294>)
 800a41c:	4003      	ands	r3, r0
 800a41e:	4313      	orrs	r3, r2
 800a420:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a422:	6821      	ldr	r1, [r4, #0]
 800a424:	684b      	ldr	r3, [r1, #4]
 800a426:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a42a:	68e3      	ldr	r3, [r4, #12]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	604b      	str	r3, [r1, #4]
  /* Configure 
   * - UART HardWare Flow Control: set CTSE and RTSE bits according 
   *   to huart->Init.HwFlowCtl value 
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800a430:	69a2      	ldr	r2, [r4, #24]
 800a432:	6a23      	ldr	r3, [r4, #32]
 800a434:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800a436:	6821      	ldr	r1, [r4, #0]
 800a438:	688b      	ldr	r3, [r1, #8]
 800a43a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a43e:	4313      	orrs	r3, r2
 800a440:	608b      	str	r3, [r1, #8]
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a442:	6825      	ldr	r5, [r4, #0]
 800a444:	4b95      	ldr	r3, [pc, #596]	; (800a69c <UART_SetConfig+0x298>)
 800a446:	429d      	cmp	r5, r3
 800a448:	d113      	bne.n	800a472 <UART_SetConfig+0x6e>
 800a44a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800a44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	2b03      	cmp	r3, #3
 800a458:	d803      	bhi.n	800a462 <UART_SetConfig+0x5e>
 800a45a:	e8df f003 	tbb	[pc, r3]
 800a45e:	06d4      	.short	0x06d4
 800a460:	0804      	.short	0x0804
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a462:	2310      	movs	r3, #16
 800a464:	e0e0      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a466:	2302      	movs	r3, #2
 800a468:	e0de      	b.n	800a628 <UART_SetConfig+0x224>
 800a46a:	2304      	movs	r3, #4
 800a46c:	e0dc      	b.n	800a628 <UART_SetConfig+0x224>
 800a46e:	2308      	movs	r3, #8
 800a470:	e0da      	b.n	800a628 <UART_SetConfig+0x224>
 800a472:	4b8b      	ldr	r3, [pc, #556]	; (800a6a0 <UART_SetConfig+0x29c>)
 800a474:	429d      	cmp	r5, r3
 800a476:	d118      	bne.n	800a4aa <UART_SetConfig+0xa6>
 800a478:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800a47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a480:	f003 030c 	and.w	r3, r3, #12
 800a484:	2b0c      	cmp	r3, #12
 800a486:	d808      	bhi.n	800a49a <UART_SetConfig+0x96>
 800a488:	e8df f003 	tbb	[pc, r3]
 800a48c:	070707bf 	.word	0x070707bf
 800a490:	0707070b 	.word	0x0707070b
 800a494:	07070709 	.word	0x07070709
 800a498:	0d          	.byte	0x0d
 800a499:	00          	.byte	0x00
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a49a:	2310      	movs	r3, #16
 800a49c:	e0c4      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e0c2      	b.n	800a628 <UART_SetConfig+0x224>
 800a4a2:	2304      	movs	r3, #4
 800a4a4:	e0c0      	b.n	800a628 <UART_SetConfig+0x224>
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	e0be      	b.n	800a628 <UART_SetConfig+0x224>
 800a4aa:	4b7e      	ldr	r3, [pc, #504]	; (800a6a4 <UART_SetConfig+0x2a0>)
 800a4ac:	429d      	cmp	r5, r3
 800a4ae:	d118      	bne.n	800a4e2 <UART_SetConfig+0xde>
 800a4b0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800a4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4bc:	2b10      	cmp	r3, #16
 800a4be:	d00c      	beq.n	800a4da <UART_SetConfig+0xd6>
 800a4c0:	d803      	bhi.n	800a4ca <UART_SetConfig+0xc6>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80a3 	beq.w	800a60e <UART_SetConfig+0x20a>
 800a4c8:	e003      	b.n	800a4d2 <UART_SetConfig+0xce>
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d003      	beq.n	800a4d6 <UART_SetConfig+0xd2>
 800a4ce:	2b30      	cmp	r3, #48	; 0x30
 800a4d0:	d005      	beq.n	800a4de <UART_SetConfig+0xda>
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a4d2:	2310      	movs	r3, #16
 800a4d4:	e0a8      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	e0a6      	b.n	800a628 <UART_SetConfig+0x224>
 800a4da:	2304      	movs	r3, #4
 800a4dc:	e0a4      	b.n	800a628 <UART_SetConfig+0x224>
 800a4de:	2308      	movs	r3, #8
 800a4e0:	e0a2      	b.n	800a628 <UART_SetConfig+0x224>
 800a4e2:	4b71      	ldr	r3, [pc, #452]	; (800a6a8 <UART_SetConfig+0x2a4>)
 800a4e4:	429d      	cmp	r5, r3
 800a4e6:	d118      	bne.n	800a51a <UART_SetConfig+0x116>
 800a4e8:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800a4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d00c      	beq.n	800a512 <UART_SetConfig+0x10e>
 800a4f8:	d803      	bhi.n	800a502 <UART_SetConfig+0xfe>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 8089 	beq.w	800a612 <UART_SetConfig+0x20e>
 800a500:	e003      	b.n	800a50a <UART_SetConfig+0x106>
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d003      	beq.n	800a50e <UART_SetConfig+0x10a>
 800a506:	2bc0      	cmp	r3, #192	; 0xc0
 800a508:	d005      	beq.n	800a516 <UART_SetConfig+0x112>
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a50a:	2310      	movs	r3, #16
 800a50c:	e08c      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a50e:	2302      	movs	r3, #2
 800a510:	e08a      	b.n	800a628 <UART_SetConfig+0x224>
 800a512:	2304      	movs	r3, #4
 800a514:	e088      	b.n	800a628 <UART_SetConfig+0x224>
 800a516:	2308      	movs	r3, #8
 800a518:	e086      	b.n	800a628 <UART_SetConfig+0x224>
 800a51a:	4b64      	ldr	r3, [pc, #400]	; (800a6ac <UART_SetConfig+0x2a8>)
 800a51c:	429d      	cmp	r5, r3
 800a51e:	d11a      	bne.n	800a556 <UART_SetConfig+0x152>
 800a520:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800a524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a530:	d00d      	beq.n	800a54e <UART_SetConfig+0x14a>
 800a532:	d802      	bhi.n	800a53a <UART_SetConfig+0x136>
 800a534:	2b00      	cmp	r3, #0
 800a536:	d06e      	beq.n	800a616 <UART_SetConfig+0x212>
 800a538:	e005      	b.n	800a546 <UART_SetConfig+0x142>
 800a53a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a53e:	d004      	beq.n	800a54a <UART_SetConfig+0x146>
 800a540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a544:	d005      	beq.n	800a552 <UART_SetConfig+0x14e>
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a546:	2310      	movs	r3, #16
 800a548:	e06e      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a54a:	2302      	movs	r3, #2
 800a54c:	e06c      	b.n	800a628 <UART_SetConfig+0x224>
 800a54e:	2304      	movs	r3, #4
 800a550:	e06a      	b.n	800a628 <UART_SetConfig+0x224>
 800a552:	2308      	movs	r3, #8
 800a554:	e068      	b.n	800a628 <UART_SetConfig+0x224>
 800a556:	4b56      	ldr	r3, [pc, #344]	; (800a6b0 <UART_SetConfig+0x2ac>)
 800a558:	429d      	cmp	r5, r3
 800a55a:	d11a      	bne.n	800a592 <UART_SetConfig+0x18e>
 800a55c:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800a560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a56c:	d00d      	beq.n	800a58a <UART_SetConfig+0x186>
 800a56e:	d802      	bhi.n	800a576 <UART_SetConfig+0x172>
 800a570:	2b00      	cmp	r3, #0
 800a572:	d052      	beq.n	800a61a <UART_SetConfig+0x216>
 800a574:	e005      	b.n	800a582 <UART_SetConfig+0x17e>
 800a576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a57a:	d004      	beq.n	800a586 <UART_SetConfig+0x182>
 800a57c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a580:	d005      	beq.n	800a58e <UART_SetConfig+0x18a>
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a582:	2310      	movs	r3, #16
 800a584:	e050      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a586:	2302      	movs	r3, #2
 800a588:	e04e      	b.n	800a628 <UART_SetConfig+0x224>
 800a58a:	2304      	movs	r3, #4
 800a58c:	e04c      	b.n	800a628 <UART_SetConfig+0x224>
 800a58e:	2308      	movs	r3, #8
 800a590:	e04a      	b.n	800a628 <UART_SetConfig+0x224>
 800a592:	4b48      	ldr	r3, [pc, #288]	; (800a6b4 <UART_SetConfig+0x2b0>)
 800a594:	429d      	cmp	r5, r3
 800a596:	d119      	bne.n	800a5cc <UART_SetConfig+0x1c8>
 800a598:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800a59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a8:	d00c      	beq.n	800a5c4 <UART_SetConfig+0x1c0>
 800a5aa:	d801      	bhi.n	800a5b0 <UART_SetConfig+0x1ac>
 800a5ac:	b3bb      	cbz	r3, 800a61e <UART_SetConfig+0x21a>
 800a5ae:	e005      	b.n	800a5bc <UART_SetConfig+0x1b8>
 800a5b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b4:	d004      	beq.n	800a5c0 <UART_SetConfig+0x1bc>
 800a5b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5ba:	d005      	beq.n	800a5c8 <UART_SetConfig+0x1c4>
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a5bc:	2310      	movs	r3, #16
 800a5be:	e033      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e031      	b.n	800a628 <UART_SetConfig+0x224>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	e02f      	b.n	800a628 <UART_SetConfig+0x224>
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	e02d      	b.n	800a628 <UART_SetConfig+0x224>
 800a5cc:	4b3a      	ldr	r3, [pc, #232]	; (800a6b8 <UART_SetConfig+0x2b4>)
 800a5ce:	429d      	cmp	r5, r3
 800a5d0:	d127      	bne.n	800a622 <UART_SetConfig+0x21e>
 800a5d2:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 800a5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5e2:	d00c      	beq.n	800a5fe <UART_SetConfig+0x1fa>
 800a5e4:	d801      	bhi.n	800a5ea <UART_SetConfig+0x1e6>
 800a5e6:	b1f3      	cbz	r3, 800a626 <UART_SetConfig+0x222>
 800a5e8:	e005      	b.n	800a5f6 <UART_SetConfig+0x1f2>
 800a5ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ee:	d004      	beq.n	800a5fa <UART_SetConfig+0x1f6>
 800a5f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5f4:	d005      	beq.n	800a602 <UART_SetConfig+0x1fe>
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a5f6:	2310      	movs	r3, #16
 800a5f8:	e016      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e014      	b.n	800a628 <UART_SetConfig+0x224>
 800a5fe:	2304      	movs	r3, #4
 800a600:	e012      	b.n	800a628 <UART_SetConfig+0x224>
 800a602:	2308      	movs	r3, #8
 800a604:	e010      	b.n	800a628 <UART_SetConfig+0x224>
 800a606:	2301      	movs	r3, #1
 800a608:	e00e      	b.n	800a628 <UART_SetConfig+0x224>
 800a60a:	2300      	movs	r3, #0
 800a60c:	e00c      	b.n	800a628 <UART_SetConfig+0x224>
 800a60e:	2300      	movs	r3, #0
 800a610:	e00a      	b.n	800a628 <UART_SetConfig+0x224>
 800a612:	2300      	movs	r3, #0
 800a614:	e008      	b.n	800a628 <UART_SetConfig+0x224>
 800a616:	2300      	movs	r3, #0
 800a618:	e006      	b.n	800a628 <UART_SetConfig+0x224>
 800a61a:	2301      	movs	r3, #1
 800a61c:	e004      	b.n	800a628 <UART_SetConfig+0x224>
 800a61e:	2300      	movs	r3, #0
 800a620:	e002      	b.n	800a628 <UART_SetConfig+0x224>
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800a622:	2310      	movs	r3, #16
 800a624:	e000      	b.n	800a628 <UART_SetConfig+0x224>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a626:	2300      	movs	r3, #0

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a628:	69e2      	ldr	r2, [r4, #28]
 800a62a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a62e:	d151      	bne.n	800a6d4 <UART_SetConfig+0x2d0>
  { 
    switch (clocksource)
 800a630:	2b08      	cmp	r3, #8
 800a632:	d845      	bhi.n	800a6c0 <UART_SetConfig+0x2bc>
 800a634:	e8df f003 	tbb	[pc, r3]
 800a638:	44170e05 	.word	0x44170e05
 800a63c:	4444441e 	.word	0x4444441e
 800a640:	27          	.byte	0x27
 800a641:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a642:	f002 fa57 	bl	800caf4 <HAL_RCC_GetPCLK1Freq>
 800a646:	0040      	lsls	r0, r0, #1
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a64e:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a650:	2000      	movs	r0, #0
  { 
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
 800a652:	e037      	b.n	800a6c4 <UART_SetConfig+0x2c0>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a654:	f002 fa66 	bl	800cb24 <HAL_RCC_GetPCLK2Freq>
 800a658:	0040      	lsls	r0, r0, #1
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a660:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a662:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
 800a664:	e02e      	b.n	800a6c4 <UART_SetConfig+0x2c0>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 800a666:	6862      	ldr	r2, [r4, #4]
 800a668:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <UART_SetConfig+0x2b8>)
 800a66a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a66e:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a670:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      break;
 800a672:	e027      	b.n	800a6c4 <UART_SetConfig+0x2c0>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a674:	f002 f9d2 	bl	800ca1c <HAL_RCC_GetSysClockFreq>
 800a678:	0040      	lsls	r0, r0, #1
 800a67a:	6863      	ldr	r3, [r4, #4]
 800a67c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a680:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a682:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
 800a684:	e01e      	b.n	800a6c4 <UART_SetConfig+0x2c0>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate)); 
 800a686:	6862      	ldr	r2, [r4, #4]
 800a688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a68c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a690:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a692:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate)); 
      break;
 800a694:	e016      	b.n	800a6c4 <UART_SetConfig+0x2c0>
 800a696:	bf00      	nop
 800a698:	efff69f3 	.word	0xefff69f3
 800a69c:	40011000 	.word	0x40011000
 800a6a0:	40004400 	.word	0x40004400
 800a6a4:	40004800 	.word	0x40004800
 800a6a8:	40004c00 	.word	0x40004c00
 800a6ac:	40005000 	.word	0x40005000
 800a6b0:	40011400 	.word	0x40011400
 800a6b4:	40007800 	.word	0x40007800
 800a6b8:	40007c00 	.word	0x40007c00
 800a6bc:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_UNDEFINED:                
    default:
        ret = HAL_ERROR; 
 800a6c0:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 800a6c2:	2300      	movs	r3, #0
    default:
        ret = HAL_ERROR; 
      break;
    }
    
    brrtemp = usartdiv & 0xFFF0;
 800a6c4:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800a6c8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a6cc:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	60d3      	str	r3, [r2, #12]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 800a6d4:	2b08      	cmp	r3, #8
 800a6d6:	d831      	bhi.n	800a73c <UART_SetConfig+0x338>
 800a6d8:	e8df f003 	tbb	[pc, r3]
 800a6dc:	30170e05 	.word	0x30170e05
 800a6e0:	3030301f 	.word	0x3030301f
 800a6e4:	28          	.byte	0x28
 800a6e5:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a6e6:	f002 fa05 	bl	800caf4 <HAL_RCC_GetPCLK1Freq>
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	fbb0 f0f3 	udiv	r0, r0, r3
 800a6f0:	b280      	uxth	r0, r0
 800a6f2:	60e8      	str	r0, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a6f4:	2000      	movs	r0, #0
  {
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
 800a6f6:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a6f8:	f002 fa14 	bl	800cb24 <HAL_RCC_GetPCLK2Freq>
 800a6fc:	6863      	ldr	r3, [r4, #4]
 800a6fe:	fbb0 f0f3 	udiv	r0, r0, r3
 800a702:	b280      	uxth	r0, r0
 800a704:	60e8      	str	r0, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a706:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_PCLK1: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
 800a708:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 800a70a:	6862      	ldr	r2, [r4, #4]
 800a70c:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <UART_SetConfig+0x33c>)
 800a70e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a712:	b29b      	uxth	r3, r3
 800a714:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a716:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_PCLK2: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
      break; 
 800a718:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:  
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a71a:	f002 f97f 	bl	800ca1c <HAL_RCC_GetSysClockFreq>
 800a71e:	6863      	ldr	r3, [r4, #4]
 800a720:	fbb0 f0f3 	udiv	r0, r0, r3
 800a724:	b280      	uxth	r0, r0
 800a726:	60e8      	str	r0, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a728:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_HSI: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
      break; 
    case UART_CLOCKSOURCE_SYSCLK:  
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;  
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 800a72c:	6862      	ldr	r2, [r4, #4]
 800a72e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a732:	fbb3 f3f2 	udiv	r3, r3, r2
 800a736:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 800a738:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:  
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;  
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
      break;
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:                
    default:
        ret = HAL_ERROR; 
 800a73c:	2001      	movs	r0, #1
    }
  }

  return ret;   

}
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	00f42400 	.word	0x00f42400

0800a744 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */ 
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a744:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a746:	f013 0f01 	tst.w	r3, #1
 800a74a:	d006      	beq.n	800a75a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a74c:	6801      	ldr	r1, [r0, #0]
 800a74e:	684b      	ldr	r3, [r1, #4]
 800a750:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a754:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a756:	4313      	orrs	r3, r2
 800a758:	604b      	str	r3, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a75a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a75c:	f013 0f02 	tst.w	r3, #2
 800a760:	d006      	beq.n	800a770 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a762:	6801      	ldr	r1, [r0, #0]
 800a764:	684b      	ldr	r3, [r1, #4]
 800a766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a76a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a76c:	4313      	orrs	r3, r2
 800a76e:	604b      	str	r3, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a770:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a772:	f013 0f04 	tst.w	r3, #4
 800a776:	d006      	beq.n	800a786 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a778:	6801      	ldr	r1, [r0, #0]
 800a77a:	684b      	ldr	r3, [r1, #4]
 800a77c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a780:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a782:	4313      	orrs	r3, r2
 800a784:	604b      	str	r3, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a786:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a788:	f013 0f08 	tst.w	r3, #8
 800a78c:	d006      	beq.n	800a79c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a78e:	6801      	ldr	r1, [r0, #0]
 800a790:	684b      	ldr	r3, [r1, #4]
 800a792:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a796:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a798:	4313      	orrs	r3, r2
 800a79a:	604b      	str	r3, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a79c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a79e:	f013 0f10 	tst.w	r3, #16
 800a7a2:	d006      	beq.n	800a7b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));  
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7a4:	6801      	ldr	r1, [r0, #0]
 800a7a6:	688b      	ldr	r3, [r1, #8]
 800a7a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	608b      	str	r3, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a7b4:	f013 0f20 	tst.w	r3, #32
 800a7b8:	d006      	beq.n	800a7c8 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));   
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7ba:	6801      	ldr	r1, [r0, #0]
 800a7bc:	688b      	ldr	r3, [r1, #8]
 800a7be:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a7c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	608b      	str	r3, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */              
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a7ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a7ce:	d011      	beq.n	800a7f4 <UART_AdvFeatureConfig+0xb0>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7d0:	6801      	ldr	r1, [r0, #0]
 800a7d2:	684b      	ldr	r3, [r1, #4]
 800a7d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a7d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	604b      	str	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a7e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7e4:	d106      	bne.n	800a7f4 <UART_AdvFeatureConfig+0xb0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7e6:	6801      	ldr	r1, [r0, #0]
 800a7e8:	684b      	ldr	r3, [r1, #4]
 800a7ea:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800a7ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	604b      	str	r3, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */  
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a7f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7fa:	d006      	beq.n	800a80a <UART_AdvFeatureConfig+0xc6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));   
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7fc:	6801      	ldr	r1, [r0, #0]
 800a7fe:	684b      	ldr	r3, [r1, #4]
 800a800:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a804:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a806:	4313      	orrs	r3, r2
 800a808:	604b      	str	r3, [r1, #4]
 800a80a:	4770      	bx	lr

0800a80c <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4604      	mov	r4, r0
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a810:	2300      	movs	r3, #0
 800a812:	66c3      	str	r3, [r0, #108]	; 0x6c
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a814:	6803      	ldr	r3, [r0, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f013 0f08 	tst.w	r3, #8
 800a81c:	d007      	beq.n	800a82e <UART_CheckIdleState+0x22>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
 800a81e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a822:	2200      	movs	r2, #0
 800a824:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a828:	f7ff fd12 	bl	800a250 <UART_WaitOnFlagUntilTimeout>
 800a82c:	b9a0      	cbnz	r0, 800a858 <UART_CheckIdleState+0x4c>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f013 0f04 	tst.w	r3, #4
 800a836:	d008      	beq.n	800a84a <UART_CheckIdleState+0x3e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
 800a838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a83c:	2200      	movs	r2, #0
 800a83e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a842:	4620      	mov	r0, r4
 800a844:	f7ff fd04 	bl	800a250 <UART_WaitOnFlagUntilTimeout>
 800a848:	b940      	cbnz	r0, 800a85c <UART_CheckIdleState+0x50>
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->State= HAL_UART_STATE_READY;
 800a84a:	2301      	movs	r3, #1
 800a84c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a850:	2000      	movs	r0, #0
 800a852:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  
  return HAL_OK;
 800a856:	bd10      	pop	{r4, pc}
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 800a858:	2003      	movs	r0, #3
 800a85a:	bd10      	pop	{r4, pc}
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
    { 
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 800a85c:	2003      	movs	r0, #3
    
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
  
  return HAL_OK;
}
 800a85e:	bd10      	pop	{r4, pc}

0800a860 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 800a860:	b380      	cbz	r0, 800a8c4 <HAL_UART_Init+0x64>
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a862:	b510      	push	{r4, lr}
 800a864:	4604      	mov	r4, r0
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  
  if(huart->State == HAL_UART_STATE_RESET)
 800a866:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800a86a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a86e:	d104      	bne.n	800a87a <HAL_UART_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a870:	2300      	movs	r3, #0
 800a872:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a876:	f004 fba3 	bl	800efc0 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800a87a:	2302      	movs	r3, #2
 800a87c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a880:	6822      	ldr	r2, [r4, #0]
 800a882:	6813      	ldr	r3, [r2, #0]
 800a884:	f023 0301 	bic.w	r3, r3, #1
 800a888:	6013      	str	r3, [r2, #0]
  
  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7ff fdba 	bl	800a404 <UART_SetConfig>
 800a890:	2801      	cmp	r0, #1
 800a892:	d019      	beq.n	800a8c8 <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a896:	b113      	cbz	r3, 800a89e <HAL_UART_Init+0x3e>
  {
    UART_AdvFeatureConfig(huart);
 800a898:	4620      	mov	r0, r4
 800a89a:	f7ff ff53 	bl	800a744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800a89e:	6822      	ldr	r2, [r4, #0]
 800a8a0:	6853      	ldr	r3, [r2, #4]
 800a8a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a8a6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800a8a8:	6822      	ldr	r2, [r4, #0]
 800a8aa:	6893      	ldr	r3, [r2, #8]
 800a8ac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a8b0:	6093      	str	r3, [r2, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a8b2:	6822      	ldr	r2, [r4, #0]
 800a8b4:	6813      	ldr	r3, [r2, #0]
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f7ff ffa5 	bl	800a80c <UART_CheckIdleState>
 800a8c2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800a8c4:	2001      	movs	r0, #1
 800a8c6:	4770      	bx	lr
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
}
 800a8c8:	bd10      	pop	{r4, pc}
 800a8ca:	bf00      	nop

0800a8cc <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8cc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a8ce:	6a03      	ldr	r3, [r0, #32]
 800a8d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8d4:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800a8d8:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8da:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8dc:	4d0d      	ldr	r5, [pc, #52]	; (800a914 <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x48>)
 800a8de:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8e0:	680c      	ldr	r4, [r1, #0]
 800a8e2:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800a8e8:	688d      	ldr	r5, [r1, #8]
 800a8ea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ee:	4d0a      	ldr	r5, [pc, #40]	; (800a918 <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>)
 800a8f0:	4e0a      	ldr	r6, [pc, #40]	; (800a91c <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x50>)
 800a8f2:	42a8      	cmp	r0, r5
 800a8f4:	bf18      	it	ne
 800a8f6:	42b0      	cmpne	r0, r6
 800a8f8:	d104      	bne.n	800a904 <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x38>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800a8fe:	694d      	ldr	r5, [r1, #20]
 800a900:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a904:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a906:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a908:	684a      	ldr	r2, [r1, #4]
 800a90a:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800a90c:	6203      	str	r3, [r0, #32]
}
 800a90e:	bc70      	pop	{r4, r5, r6}
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	fffeff8f 	.word	0xfffeff8f
 800a918:	40010400 	.word	0x40010400
 800a91c:	40010000 	.word	0x40010000

0800a920 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a920:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a922:	6a03      	ldr	r3, [r0, #32]
 800a924:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a928:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a92a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800a92c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a92e:	6d45      	ldr	r5, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a930:	4a0d      	ldr	r2, [pc, #52]	; (800a968 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x48>)
 800a932:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800a934:	680d      	ldr	r5, [r1, #0]
 800a936:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a93a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800a93e:	688d      	ldr	r5, [r1, #8]
 800a940:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800a944:	4d09      	ldr	r5, [pc, #36]	; (800a96c <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>)
 800a946:	4e0a      	ldr	r6, [pc, #40]	; (800a970 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x50>)
 800a948:	42a8      	cmp	r0, r5
 800a94a:	bf18      	it	ne
 800a94c:	42b0      	cmpne	r0, r6
 800a94e:	d104      	bne.n	800a95a <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x3a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a950:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800a954:	694d      	ldr	r5, [r1, #20]
 800a956:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a95c:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a95e:	684a      	ldr	r2, [r1, #4]
 800a960:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800a962:	6203      	str	r3, [r0, #32]
} 
 800a964:	bc70      	pop	{r4, r5, r6}
 800a966:	4770      	bx	lr
 800a968:	feff8fff 	.word	0xfeff8fff
 800a96c:	40010400 	.word	0x40010400
 800a970:	40010000 	.word	0x40010000

0800a974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 800a974:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800a976:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	f000 8093 	beq.w	800aaa6 <HAL_TIM_PWM_ConfigChannel+0x132>
 800a980:	460d      	mov	r5, r1
 800a982:	4604      	mov	r4, r0
 800a984:	2301      	movs	r3, #1
 800a986:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800a98a:	2302      	movs	r3, #2
 800a98c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    
  switch (Channel)
 800a990:	2a14      	cmp	r2, #20
 800a992:	f200 8081 	bhi.w	800aa98 <HAL_TIM_PWM_ConfigChannel+0x124>
 800a996:	e8df f002 	tbb	[pc, r2]
 800a99a:	7f0b      	.short	0x7f0b
 800a99c:	7f1e7f7f 	.word	0x7f1e7f7f
 800a9a0:	7f327f7f 	.word	0x7f327f7f
 800a9a4:	7f457f7f 	.word	0x7f457f7f
 800a9a8:	7f597f7f 	.word	0x7f597f7f
 800a9ac:	7f7f      	.short	0x7f7f
 800a9ae:	6c          	.byte	0x6c
 800a9af:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9b0:	6800      	ldr	r0, [r0, #0]
 800a9b2:	f000 fa11 	bl	800add8 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9b6:	6822      	ldr	r2, [r4, #0]
 800a9b8:	6993      	ldr	r3, [r2, #24]
 800a9ba:	f043 0308 	orr.w	r3, r3, #8
 800a9be:	6193      	str	r3, [r2, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9c0:	6822      	ldr	r2, [r4, #0]
 800a9c2:	6993      	ldr	r3, [r2, #24]
 800a9c4:	f023 0304 	bic.w	r3, r3, #4
 800a9c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9ca:	6822      	ldr	r2, [r4, #0]
 800a9cc:	6991      	ldr	r1, [r2, #24]
 800a9ce:	692b      	ldr	r3, [r5, #16]
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6193      	str	r3, [r2, #24]
    }
    break;
 800a9d4:	e060      	b.n	800aa98 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9d6:	6800      	ldr	r0, [r0, #0]
 800a9d8:	f000 fa2e 	bl	800ae38 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9dc:	6822      	ldr	r2, [r4, #0]
 800a9de:	6993      	ldr	r3, [r2, #24]
 800a9e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9e4:	6193      	str	r3, [r2, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9e6:	6822      	ldr	r2, [r4, #0]
 800a9e8:	6993      	ldr	r3, [r2, #24]
 800a9ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9ee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	6993      	ldr	r3, [r2, #24]
 800a9f4:	6929      	ldr	r1, [r5, #16]
 800a9f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a9fa:	6193      	str	r3, [r2, #24]
    }
    break;
 800a9fc:	e04c      	b.n	800aa98 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9fe:	6800      	ldr	r0, [r0, #0]
 800aa00:	f000 fa4e 	bl	800aea0 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	69d3      	ldr	r3, [r2, #28]
 800aa08:	f043 0308 	orr.w	r3, r3, #8
 800aa0c:	61d3      	str	r3, [r2, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	69d3      	ldr	r3, [r2, #28]
 800aa12:	f023 0304 	bic.w	r3, r3, #4
 800aa16:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800aa18:	6822      	ldr	r2, [r4, #0]
 800aa1a:	69d1      	ldr	r1, [r2, #28]
 800aa1c:	692b      	ldr	r3, [r5, #16]
 800aa1e:	430b      	orrs	r3, r1
 800aa20:	61d3      	str	r3, [r2, #28]
    }
    break;
 800aa22:	e039      	b.n	800aa98 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa24:	6800      	ldr	r0, [r0, #0]
 800aa26:	f000 fa6f 	bl	800af08 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa2a:	6822      	ldr	r2, [r4, #0]
 800aa2c:	69d3      	ldr	r3, [r2, #28]
 800aa2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa32:	61d3      	str	r3, [r2, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa34:	6822      	ldr	r2, [r4, #0]
 800aa36:	69d3      	ldr	r3, [r2, #28]
 800aa38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa3c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800aa3e:	6822      	ldr	r2, [r4, #0]
 800aa40:	69d3      	ldr	r3, [r2, #28]
 800aa42:	6929      	ldr	r1, [r5, #16]
 800aa44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800aa48:	61d3      	str	r3, [r2, #28]
    }
    break;
 800aa4a:	e025      	b.n	800aa98 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa4c:	6800      	ldr	r0, [r0, #0]
 800aa4e:	f7ff ff3d 	bl	800a8cc <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa52:	6822      	ldr	r2, [r4, #0]
 800aa54:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa56:	f043 0308 	orr.w	r3, r3, #8
 800aa5a:	6553      	str	r3, [r2, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa5c:	6822      	ldr	r2, [r4, #0]
 800aa5e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa60:	f023 0304 	bic.w	r3, r3, #4
 800aa64:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800aa66:	6822      	ldr	r2, [r4, #0]
 800aa68:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800aa6a:	692b      	ldr	r3, [r5, #16]
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	6553      	str	r3, [r2, #84]	; 0x54
    }
    break;
 800aa70:	e012      	b.n	800aa98 <HAL_TIM_PWM_ConfigChannel+0x124>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa72:	6800      	ldr	r0, [r0, #0]
 800aa74:	f7ff ff54 	bl	800a920 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa78:	6822      	ldr	r2, [r4, #0]
 800aa7a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa80:	6553      	str	r3, [r2, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa82:	6822      	ldr	r2, [r4, #0]
 800aa84:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa8a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa90:	6929      	ldr	r1, [r5, #16]
 800aa92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800aa96:	6553      	str	r3, [r2, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 800aaa4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800aaa6:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;
    
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop

0800aaac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800aaac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d023      	beq.n	800aafc <HAL_TIMEx_MasterConfigSynchronization+0x50>
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800aab4:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800aab6:	2301      	movs	r3, #1
 800aab8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aac0:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aac2:	4c10      	ldr	r4, [pc, #64]	; (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	bf14      	ite	ne
 800aac8:	2400      	movne	r4, #0
 800aaca:	2401      	moveq	r4, #1
 800aacc:	4e0e      	ldr	r6, [pc, #56]	; (800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 800aace:	42b3      	cmp	r3, r6
 800aad0:	d000      	beq.n	800aad4 <HAL_TIMEx_MasterConfigSynchronization+0x28>
 800aad2:	b11c      	cbz	r4, 800aadc <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aad4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aad8:	684c      	ldr	r4, [r1, #4]
 800aada:	4322      	orrs	r2, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aadc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aae0:	680c      	ldr	r4, [r1, #0]
 800aae2:	4322      	orrs	r2, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800aae4:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aae8:	6889      	ldr	r1, [r1, #8]
 800aaea:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaec:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aaee:	6803      	ldr	r3, [r0, #0]
 800aaf0:	6099      	str	r1, [r3, #8]

  __HAL_UNLOCK(htim);
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 800aaf8:	4618      	mov	r0, r3
 800aafa:	e001      	b.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800aafc:	2002      	movs	r0, #2
 800aafe:	4770      	bx	lr
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800ab00:	bc70      	pop	{r4, r5, r6}
 800ab02:	4770      	bx	lr
 800ab04:	40010400 	.word	0x40010400
 800ab08:	40010000 	.word	0x40010000

0800ab0c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
  assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800ab0c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d023      	beq.n	800ab5c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 800ab14:	2301      	movs	r3, #1
 800ab16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
               TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
               TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
               TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

  /* Set the BDTR bits */
  tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 800ab20:	68ca      	ldr	r2, [r1, #12]
  tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 800ab22:	688b      	ldr	r3, [r1, #8]
 800ab24:	431a      	orrs	r2, r3
  tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 800ab26:	684b      	ldr	r3, [r1, #4]
 800ab28:	431a      	orrs	r2, r3
  tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 800ab2a:	680b      	ldr	r3, [r1, #0]
 800ab2c:	431a      	orrs	r2, r3
  tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 800ab2e:	690b      	ldr	r3, [r1, #16]
 800ab30:	431a      	orrs	r2, r3
  tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 800ab32:	694b      	ldr	r3, [r1, #20]
 800ab34:	431a      	orrs	r2, r3
  tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 800ab36:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ab38:	4313      	orrs	r3, r2
  tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 800ab3a:	698a      	ldr	r2, [r1, #24]
 800ab3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 800ab40:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800ab42:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 800ab46:	69ca      	ldr	r2, [r1, #28]
 800ab48:	4313      	orrs	r3, r2
  tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 800ab4a:	6a0a      	ldr	r2, [r1, #32]
 800ab4c:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab4e:	6802      	ldr	r2, [r0, #0]
 800ab50:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800ab52:	2300      	movs	r3, #0
 800ab54:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 800ab58:	4618      	mov	r0, r3
 800ab5a:	4770      	bx	lr
  assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
  assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800ab5c:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 800ab5e:	4770      	bx	lr

0800ab60 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab60:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab62:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab64:	6a04      	ldr	r4, [r0, #32]
 800ab66:	f024 0401 	bic.w	r4, r4, #1
 800ab6a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800ab6c:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab6e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 800ab72:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab76:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800ab7a:	4319      	orrs	r1, r3
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab7c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ab7e:	6201      	str	r1, [r0, #32]
}
 800ab80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop

0800ab88 <_ZL24TIM_TI2_ConfigInputStageP11TIM_TypeDefmm>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab88:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab8a:	6a03      	ldr	r3, [r0, #32]
 800ab8c:	f023 0310 	bic.w	r3, r3, #16
 800ab90:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab92:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800ab94:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab96:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 800ab9a:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 800aba2:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aba6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aba8:	6201      	str	r1, [r0, #32]
}
 800abaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800abb0:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800abb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800abb6:	f041 0107 	orr.w	r1, r1, #7
 800abba:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800abbc:	6081      	str	r1, [r0, #8]
 800abbe:	4770      	bx	lr

0800abc0 <HAL_TIM_PWM_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop

0800abc4 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800abc4:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800abc6:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800abc8:	4a38      	ldr	r2, [pc, #224]	; (800acac <TIM_Base_SetConfig+0xe8>)
 800abca:	4290      	cmp	r0, r2
 800abcc:	bf14      	ite	ne
 800abce:	2500      	movne	r5, #0
 800abd0:	2501      	moveq	r5, #1
 800abd2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800abd6:	bf14      	ite	ne
 800abd8:	462a      	movne	r2, r5
 800abda:	f045 0201 	orreq.w	r2, r5, #1
 800abde:	b9aa      	cbnz	r2, 800ac0c <TIM_Base_SetConfig+0x48>
 800abe0:	4c33      	ldr	r4, [pc, #204]	; (800acb0 <TIM_Base_SetConfig+0xec>)
 800abe2:	42a0      	cmp	r0, r4
 800abe4:	bf14      	ite	ne
 800abe6:	2400      	movne	r4, #0
 800abe8:	2401      	moveq	r4, #1
 800abea:	4e32      	ldr	r6, [pc, #200]	; (800acb4 <TIM_Base_SetConfig+0xf0>)
 800abec:	42b0      	cmp	r0, r6
 800abee:	d00d      	beq.n	800ac0c <TIM_Base_SetConfig+0x48>
 800abf0:	b964      	cbnz	r4, 800ac0c <TIM_Base_SetConfig+0x48>
 800abf2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800abf6:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800abfa:	42a0      	cmp	r0, r4
 800abfc:	bf14      	ite	ne
 800abfe:	2400      	movne	r4, #0
 800ac00:	2401      	moveq	r4, #1
 800ac02:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800ac06:	42b0      	cmp	r0, r6
 800ac08:	d000      	beq.n	800ac0c <TIM_Base_SetConfig+0x48>
 800ac0a:	b11c      	cbz	r4, 800ac14 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ac10:	684c      	ldr	r4, [r1, #4]
 800ac12:	4323      	orrs	r3, r4
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	d133      	bne.n	800ac80 <TIM_Base_SetConfig+0xbc>
 800ac18:	4a25      	ldr	r2, [pc, #148]	; (800acb0 <TIM_Base_SetConfig+0xec>)
 800ac1a:	4290      	cmp	r0, r2
 800ac1c:	bf14      	ite	ne
 800ac1e:	2200      	movne	r2, #0
 800ac20:	2201      	moveq	r2, #1
 800ac22:	4c24      	ldr	r4, [pc, #144]	; (800acb4 <TIM_Base_SetConfig+0xf0>)
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d02b      	beq.n	800ac80 <TIM_Base_SetConfig+0xbc>
 800ac28:	bb52      	cbnz	r2, 800ac80 <TIM_Base_SetConfig+0xbc>
 800ac2a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ac2e:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800ac32:	4290      	cmp	r0, r2
 800ac34:	bf14      	ite	ne
 800ac36:	2200      	movne	r2, #0
 800ac38:	2201      	moveq	r2, #1
 800ac3a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800ac3e:	42a0      	cmp	r0, r4
 800ac40:	d01e      	beq.n	800ac80 <TIM_Base_SetConfig+0xbc>
 800ac42:	b9ea      	cbnz	r2, 800ac80 <TIM_Base_SetConfig+0xbc>
 800ac44:	4a1c      	ldr	r2, [pc, #112]	; (800acb8 <TIM_Base_SetConfig+0xf4>)
 800ac46:	4290      	cmp	r0, r2
 800ac48:	bf14      	ite	ne
 800ac4a:	2200      	movne	r2, #0
 800ac4c:	2201      	moveq	r2, #1
 800ac4e:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800ac52:	42a0      	cmp	r0, r4
 800ac54:	d014      	beq.n	800ac80 <TIM_Base_SetConfig+0xbc>
 800ac56:	b99a      	cbnz	r2, 800ac80 <TIM_Base_SetConfig+0xbc>
 800ac58:	4a18      	ldr	r2, [pc, #96]	; (800acbc <TIM_Base_SetConfig+0xf8>)
 800ac5a:	4290      	cmp	r0, r2
 800ac5c:	bf14      	ite	ne
 800ac5e:	2200      	movne	r2, #0
 800ac60:	2201      	moveq	r2, #1
 800ac62:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800ac66:	42a0      	cmp	r0, r4
 800ac68:	d00a      	beq.n	800ac80 <TIM_Base_SetConfig+0xbc>
 800ac6a:	b94a      	cbnz	r2, 800ac80 <TIM_Base_SetConfig+0xbc>
 800ac6c:	4a14      	ldr	r2, [pc, #80]	; (800acc0 <TIM_Base_SetConfig+0xfc>)
 800ac6e:	4290      	cmp	r0, r2
 800ac70:	bf14      	ite	ne
 800ac72:	2200      	movne	r2, #0
 800ac74:	2201      	moveq	r2, #1
 800ac76:	f5a4 3496 	sub.w	r4, r4, #76800	; 0x12c00
 800ac7a:	42a0      	cmp	r0, r4
 800ac7c:	d000      	beq.n	800ac80 <TIM_Base_SetConfig+0xbc>
 800ac7e:	b11a      	cbz	r2, 800ac88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac84:	68cc      	ldr	r4, [r1, #12]
 800ac86:	4323      	orrs	r3, r4
  }

  TIMx->CR1 = tmpcr1;
 800ac88:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac8a:	688a      	ldr	r2, [r1, #8]
 800ac8c:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800ac8e:	680a      	ldr	r2, [r1, #0]
 800ac90:	6282      	str	r2, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800ac92:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <TIM_Base_SetConfig+0x100>)
 800ac94:	4298      	cmp	r0, r3
 800ac96:	bf14      	ite	ne
 800ac98:	462b      	movne	r3, r5
 800ac9a:	f045 0301 	orreq.w	r3, r5, #1
 800ac9e:	b10b      	cbz	r3, 800aca4 <TIM_Base_SetConfig+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aca0:	690b      	ldr	r3, [r1, #16]
 800aca2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aca4:	2301      	movs	r3, #1
 800aca6:	6143      	str	r3, [r0, #20]
}
 800aca8:	bc70      	pop	{r4, r5, r6}
 800acaa:	4770      	bx	lr
 800acac:	40010000 	.word	0x40010000
 800acb0:	40000800 	.word	0x40000800
 800acb4:	40000400 	.word	0x40000400
 800acb8:	40014400 	.word	0x40014400
 800acbc:	40001800 	.word	0x40001800
 800acc0:	40002000 	.word	0x40002000
 800acc4:	40010400 	.word	0x40010400

0800acc8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800acc8:	b1a8      	cbz	r0, 800acf6 <HAL_TIM_Base_Init+0x2e>
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800acca:	b510      	push	{r4, lr}
 800accc:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800acce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800acd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acd6:	d101      	bne.n	800acdc <HAL_TIM_Base_Init+0x14>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acd8:	f004 fa98 	bl	800f20c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800acdc:	2302      	movs	r3, #2
 800acde:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800ace2:	4621      	mov	r1, r4
 800ace4:	f851 0b04 	ldr.w	r0, [r1], #4
 800ace8:	f7ff ff6c 	bl	800abc4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800acec:	2301      	movs	r3, #1
 800acee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800acf2:	2000      	movs	r0, #0
 800acf4:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800acf6:	2001      	movs	r0, #1
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop

0800acfc <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800acfc:	b1c0      	cbz	r0, 800ad30 <HAL_TIM_PWM_Init+0x34>
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800acfe:	b510      	push	{r4, lr}
 800ad00:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800ad02:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ad06:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad0a:	d104      	bne.n	800ad16 <HAL_TIM_PWM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad12:	f7ff ff55 	bl	800abc0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800ad16:	2302      	movs	r3, #2
 800ad18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	f851 0b04 	ldr.w	r0, [r1], #4
 800ad22:	f7ff ff4f 	bl	800abc4 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800ad26:	2301      	movs	r3, #1
 800ad28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800ad30:	2001      	movs	r0, #1
 800ad32:	4770      	bx	lr

0800ad34 <HAL_TIM_Encoder_Init>:
  uint32_t tmpsmcr = 0;
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d046      	beq.n	800adc6 <HAL_TIM_Encoder_Init+0x92>
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 800ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	460c      	mov	r4, r1
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800ad3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ad42:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad46:	d104      	bne.n	800ad52 <HAL_TIM_Encoder_Init+0x1e>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;  
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad4e:	f004 fa19 	bl	800f184 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800ad52:	2302      	movs	r3, #2
 800ad54:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ad58:	682a      	ldr	r2, [r5, #0]
 800ad5a:	6891      	ldr	r1, [r2, #8]
 800ad5c:	4b1b      	ldr	r3, [pc, #108]	; (800adcc <HAL_TIM_Encoder_Init+0x98>)
 800ad5e:	400b      	ands	r3, r1
 800ad60:	6093      	str	r3, [r2, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800ad62:	4629      	mov	r1, r5
 800ad64:	f851 0b04 	ldr.w	r0, [r1], #4
 800ad68:	f7ff ff2c 	bl	800abc4 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad6c:	6828      	ldr	r0, [r5, #0]
 800ad6e:	6886      	ldr	r6, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ad70:	6983      	ldr	r3, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ad72:	6a07      	ldr	r7, [r0, #32]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ad74:	6822      	ldr	r2, [r4, #0]
 800ad76:	4316      	orrs	r6, r2

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ad78:	4915      	ldr	r1, [pc, #84]	; (800add0 <HAL_TIM_Encoder_Init+0x9c>)
 800ad7a:	4019      	ands	r1, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
 800ad7c:	68a3      	ldr	r3, [r4, #8]
 800ad7e:	69a2      	ldr	r2, [r4, #24]
 800ad80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ad84:	ea41 0203 	orr.w	r2, r1, r3
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ad88:	4b12      	ldr	r3, [pc, #72]	; (800add4 <HAL_TIM_Encoder_Init+0xa0>)
 800ad8a:	4013      	ands	r3, r2
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
 800ad8c:	68e1      	ldr	r1, [r4, #12]
 800ad8e:	69e2      	ldr	r2, [r4, #28]
 800ad90:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800ad94:	4319      	orrs	r1, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
 800ad96:	6a23      	ldr	r3, [r4, #32]
 800ad98:	031a      	lsls	r2, r3, #12
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800ada0:	430b      	orrs	r3, r1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ada2:	f027 0eaa 	bic.w	lr, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
 800ada6:	6861      	ldr	r1, [r4, #4]
 800ada8:	6962      	ldr	r2, [r4, #20]
 800adaa:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 800adae:	ea4e 0202 	orr.w	r2, lr, r2
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800adb2:	6086      	str	r6, [r0, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800adb4:	6829      	ldr	r1, [r5, #0]
 800adb6:	618b      	str	r3, [r1, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800adbc:	2301      	movs	r3, #1
 800adbe:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 800adc2:	2000      	movs	r0, #0
 800adc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800adc6:	2001      	movs	r0, #1
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	fffefff8 	.word	0xfffefff8
 800add0:	fffffcfc 	.word	0xfffffcfc
 800add4:	ffff0303 	.word	0xffff0303

0800add8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800add8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adda:	6a03      	ldr	r3, [r0, #32]
 800addc:	f023 0301 	bic.w	r3, r3, #1
 800ade0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ade2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800ade4:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ade6:	6985      	ldr	r5, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ade8:	4c10      	ldr	r4, [pc, #64]	; (800ae2c <TIM_OC1_SetConfig+0x54>)
 800adea:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adec:	680d      	ldr	r5, [r1, #0]
 800adee:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adf0:	f023 0502 	bic.w	r5, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adf4:	688b      	ldr	r3, [r1, #8]
 800adf6:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800adf8:	4d0d      	ldr	r5, [pc, #52]	; (800ae30 <TIM_OC1_SetConfig+0x58>)
 800adfa:	4e0e      	ldr	r6, [pc, #56]	; (800ae34 <TIM_OC1_SetConfig+0x5c>)
 800adfc:	42a8      	cmp	r0, r5
 800adfe:	bf18      	it	ne
 800ae00:	42b0      	cmpne	r0, r6
 800ae02:	d10b      	bne.n	800ae1c <TIM_OC1_SetConfig+0x44>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae04:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae08:	68cd      	ldr	r5, [r1, #12]
 800ae0a:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae0c:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae14:	694d      	ldr	r5, [r1, #20]
 800ae16:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae18:	698a      	ldr	r2, [r1, #24]
 800ae1a:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae1c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae1e:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae20:	684a      	ldr	r2, [r1, #4]
 800ae22:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800ae24:	6203      	str	r3, [r0, #32]
} 
 800ae26:	bc70      	pop	{r4, r5, r6}
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	fffeff8c 	.word	0xfffeff8c
 800ae30:	40010400 	.word	0x40010400
 800ae34:	40010000 	.word	0x40010000

0800ae38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae38:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae3a:	6a03      	ldr	r3, [r0, #32]
 800ae3c:	f023 0310 	bic.w	r3, r3, #16
 800ae40:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800ae42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800ae44:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae46:	6985      	ldr	r5, [r0, #24]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae48:	4a12      	ldr	r2, [pc, #72]	; (800ae94 <TIM_OC2_SetConfig+0x5c>)
 800ae4a:	402a      	ands	r2, r5
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800ae4c:	680d      	ldr	r5, [r1, #0]
 800ae4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae52:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800ae56:	688d      	ldr	r5, [r1, #8]
 800ae58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800ae5c:	4d0e      	ldr	r5, [pc, #56]	; (800ae98 <TIM_OC2_SetConfig+0x60>)
 800ae5e:	4e0f      	ldr	r6, [pc, #60]	; (800ae9c <TIM_OC2_SetConfig+0x64>)
 800ae60:	42a8      	cmp	r0, r5
 800ae62:	bf18      	it	ne
 800ae64:	42b0      	cmpne	r0, r6
 800ae66:	d10e      	bne.n	800ae86 <TIM_OC2_SetConfig+0x4e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800ae6c:	68cd      	ldr	r5, [r1, #12]
 800ae6e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae76:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800ae7a:	694d      	ldr	r5, [r1, #20]
 800ae7c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800ae80:	698d      	ldr	r5, [r1, #24]
 800ae82:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae86:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae88:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae8a:	684a      	ldr	r2, [r1, #4]
 800ae8c:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8e:	6203      	str	r3, [r0, #32]
}
 800ae90:	bc70      	pop	{r4, r5, r6}
 800ae92:	4770      	bx	lr
 800ae94:	feff8cff 	.word	0xfeff8cff
 800ae98:	40010400 	.word	0x40010400
 800ae9c:	40010000 	.word	0x40010000

0800aea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aea0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aea2:	6a03      	ldr	r3, [r0, #32]
 800aea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeaa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800aeac:	6842      	ldr	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeae:	69c5      	ldr	r5, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800aeb0:	4c12      	ldr	r4, [pc, #72]	; (800aefc <TIM_OC3_SetConfig+0x5c>)
 800aeb2:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aeb4:	680d      	ldr	r5, [r1, #0]
 800aeb6:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aeb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800aebc:	688d      	ldr	r5, [r1, #8]
 800aebe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800aec2:	4d0f      	ldr	r5, [pc, #60]	; (800af00 <TIM_OC3_SetConfig+0x60>)
 800aec4:	4e0f      	ldr	r6, [pc, #60]	; (800af04 <TIM_OC3_SetConfig+0x64>)
 800aec6:	42a8      	cmp	r0, r5
 800aec8:	bf18      	it	ne
 800aeca:	42b0      	cmpne	r0, r6
 800aecc:	d10e      	bne.n	800aeec <TIM_OC3_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aece:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800aed2:	68cd      	ldr	r5, [r1, #12]
 800aed4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aedc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800aee0:	694d      	ldr	r5, [r1, #20]
 800aee2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800aee6:	698d      	ldr	r5, [r1, #24]
 800aee8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeec:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeee:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aef0:	684a      	ldr	r2, [r1, #4]
 800aef2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aef4:	6203      	str	r3, [r0, #32]
}
 800aef6:	bc70      	pop	{r4, r5, r6}
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	fffeff8c 	.word	0xfffeff8c
 800af00:	40010400 	.word	0x40010400
 800af04:	40010000 	.word	0x40010000

0800af08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af08:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af0a:	6a03      	ldr	r3, [r0, #32]
 800af0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af10:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800af14:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af16:	69c5      	ldr	r5, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af18:	4a0d      	ldr	r2, [pc, #52]	; (800af50 <TIM_OC4_SetConfig+0x48>)
 800af1a:	402a      	ands	r2, r5
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800af1c:	680d      	ldr	r5, [r1, #0]
 800af1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800af26:	688d      	ldr	r5, [r1, #8]
 800af28:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800af2c:	4d09      	ldr	r5, [pc, #36]	; (800af54 <TIM_OC4_SetConfig+0x4c>)
 800af2e:	4e0a      	ldr	r6, [pc, #40]	; (800af58 <TIM_OC4_SetConfig+0x50>)
 800af30:	42a8      	cmp	r0, r5
 800af32:	bf18      	it	ne
 800af34:	42b0      	cmpne	r0, r6
 800af36:	d104      	bne.n	800af42 <TIM_OC4_SetConfig+0x3a>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af38:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800af3c:	694d      	ldr	r5, [r1, #20]
 800af3e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af42:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800af44:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af46:	684a      	ldr	r2, [r1, #4]
 800af48:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af4a:	6203      	str	r3, [r0, #32]
}
 800af4c:	bc70      	pop	{r4, r5, r6}
 800af4e:	4770      	bx	lr
 800af50:	feff8cff 	.word	0xfeff8cff
 800af54:	40010400 	.word	0x40010400
 800af58:	40010000 	.word	0x40010000

0800af5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af5c:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800af5e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af60:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800af64:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800af68:	4319      	orrs	r1, r3
 800af6a:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af6e:	6083      	str	r3, [r0, #8]
} 
 800af70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop

0800af78 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800af78:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	f000 8083 	beq.w	800b088 <HAL_TIM_ConfigClockSource+0x110>
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800af82:	b510      	push	{r4, lr}
 800af84:	4604      	mov	r4, r0
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800af86:	2301      	movs	r3, #1
 800af88:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 800af8c:	2302      	movs	r3, #2
 800af8e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af92:	6802      	ldr	r2, [r0, #0]
 800af94:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af96:	4b3d      	ldr	r3, [pc, #244]	; (800b08c <HAL_TIM_ConfigClockSource+0x114>)
 800af98:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800af9a:	6093      	str	r3, [r2, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800af9c:	680b      	ldr	r3, [r1, #0]
 800af9e:	2b40      	cmp	r3, #64	; 0x40
 800afa0:	d04e      	beq.n	800b040 <HAL_TIM_ConfigClockSource+0xc8>
 800afa2:	d80a      	bhi.n	800afba <HAL_TIM_ConfigClockSource+0x42>
 800afa4:	2b10      	cmp	r3, #16
 800afa6:	d05a      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0xe6>
 800afa8:	d802      	bhi.n	800afb0 <HAL_TIM_ConfigClockSource+0x38>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d052      	beq.n	800b054 <HAL_TIM_ConfigClockSource+0xdc>
 800afae:	e064      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
 800afb0:	2b20      	cmp	r3, #32
 800afb2:	d059      	beq.n	800b068 <HAL_TIM_ConfigClockSource+0xf0>
 800afb4:	2b30      	cmp	r3, #48	; 0x30
 800afb6:	d05c      	beq.n	800b072 <HAL_TIM_ConfigClockSource+0xfa>
 800afb8:	e05f      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
 800afba:	2b70      	cmp	r3, #112	; 0x70
 800afbc:	d012      	beq.n	800afe4 <HAL_TIM_ConfigClockSource+0x6c>
 800afbe:	d804      	bhi.n	800afca <HAL_TIM_ConfigClockSource+0x52>
 800afc0:	2b50      	cmp	r3, #80	; 0x50
 800afc2:	d029      	beq.n	800b018 <HAL_TIM_ConfigClockSource+0xa0>
 800afc4:	2b60      	cmp	r3, #96	; 0x60
 800afc6:	d031      	beq.n	800b02c <HAL_TIM_ConfigClockSource+0xb4>
 800afc8:	e057      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
 800afca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afce:	d003      	beq.n	800afd8 <HAL_TIM_ConfigClockSource+0x60>
 800afd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afd4:	d014      	beq.n	800b000 <HAL_TIM_ConfigClockSource+0x88>
 800afd6:	e050      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800afd8:	6822      	ldr	r2, [r4, #0]
 800afda:	6891      	ldr	r1, [r2, #8]
 800afdc:	4b2c      	ldr	r3, [pc, #176]	; (800b090 <HAL_TIM_ConfigClockSource+0x118>)
 800afde:	400b      	ands	r3, r1
 800afe0:	6093      	str	r3, [r2, #8]
    }
    break;
 800afe2:	e04a      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
 800afe4:	68cb      	ldr	r3, [r1, #12]
 800afe6:	684a      	ldr	r2, [r1, #4]
 800afe8:	6889      	ldr	r1, [r1, #8]
 800afea:	6820      	ldr	r0, [r4, #0]
 800afec:	f7ff ffb6 	bl	800af5c <TIM_ETR_SetConfig>
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800aff0:	6822      	ldr	r2, [r4, #0]
 800aff2:	6891      	ldr	r1, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aff4:	4b27      	ldr	r3, [pc, #156]	; (800b094 <HAL_TIM_ConfigClockSource+0x11c>)
 800aff6:	400b      	ands	r3, r1
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800affc:	6093      	str	r3, [r2, #8]
    }
    break;
 800affe:	e03c      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
 800b000:	68cb      	ldr	r3, [r1, #12]
 800b002:	684a      	ldr	r2, [r1, #4]
 800b004:	6889      	ldr	r1, [r1, #8]
 800b006:	6820      	ldr	r0, [r4, #0]
 800b008:	f7ff ffa8 	bl	800af5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	6893      	ldr	r3, [r2, #8]
 800b010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b014:	6093      	str	r3, [r2, #8]
    }
    break;
 800b016:	e030      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
 800b018:	68ca      	ldr	r2, [r1, #12]
 800b01a:	6849      	ldr	r1, [r1, #4]
 800b01c:	6820      	ldr	r0, [r4, #0]
 800b01e:	f7ff fd9f 	bl	800ab60 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b022:	2150      	movs	r1, #80	; 0x50
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	f7ff fdc3 	bl	800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>
    }
    break;
 800b02a:	e026      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
 800b02c:	68ca      	ldr	r2, [r1, #12]
 800b02e:	6849      	ldr	r1, [r1, #4]
 800b030:	6820      	ldr	r0, [r4, #0]
 800b032:	f7ff fda9 	bl	800ab88 <_ZL24TIM_TI2_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b036:	2160      	movs	r1, #96	; 0x60
 800b038:	6820      	ldr	r0, [r4, #0]
 800b03a:	f7ff fdb9 	bl	800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>
    }
    break;
 800b03e:	e01c      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
  
      TIM_TI1_ConfigInputStage(htim->Instance, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
 800b040:	68ca      	ldr	r2, [r1, #12]
 800b042:	6849      	ldr	r1, [r1, #4]
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	f7ff fd8b 	bl	800ab60 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b04a:	2140      	movs	r1, #64	; 0x40
 800b04c:	6820      	ldr	r0, [r4, #0]
 800b04e:	f7ff fdaf 	bl	800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>
    }
    break;
 800b052:	e012      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
    case TIM_CLOCKSOURCE_ITR0:
    {
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800b054:	2100      	movs	r1, #0
 800b056:	6820      	ldr	r0, [r4, #0]
 800b058:	f7ff fdaa 	bl	800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>
    }
    break;
 800b05c:	e00d      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
    case TIM_CLOCKSOURCE_ITR1:
    {
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800b05e:	2110      	movs	r1, #16
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	f7ff fda5 	bl	800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>
    }
    break;
 800b066:	e008      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
    case TIM_CLOCKSOURCE_ITR2:
    {
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800b068:	2120      	movs	r1, #32
 800b06a:	6820      	ldr	r0, [r4, #0]
 800b06c:	f7ff fda0 	bl	800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>
    }
    break;
 800b070:	e003      	b.n	800b07a <HAL_TIM_ConfigClockSource+0x102>
    case TIM_CLOCKSOURCE_ITR3:
    {
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800b072:	2130      	movs	r1, #48	; 0x30
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	f7ff fd9b 	bl	800abb0 <_ZL18TIM_ITRx_SetConfigP11TIM_TypeDeft>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 800b07a:	2301      	movs	r3, #1
 800b07c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800b080:	2000      	movs	r0, #0
 800b082:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 800b086:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800b088:	2002      	movs	r0, #2
 800b08a:	4770      	bx	lr
 800b08c:	fffe0088 	.word	0xfffe0088
 800b090:	fffefff8 	.word	0xfffefff8
 800b094:	fffeff88 	.word	0xfffeff88

0800b098 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b098:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800b09a:	2301      	movs	r3, #1
 800b09c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0a0:	6a03      	ldr	r3, [r0, #32]
 800b0a2:	ea23 0304 	bic.w	r3, r3, r4
 800b0a6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800b0a8:	6a03      	ldr	r3, [r0, #32]
 800b0aa:	408a      	lsls	r2, r1
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	6202      	str	r2, [r0, #32]
}
 800b0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop

0800b0b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0bc:	2201      	movs	r2, #1
 800b0be:	6800      	ldr	r0, [r0, #0]
 800b0c0:	f7ff ffea 	bl	800b098 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	4a0a      	ldr	r2, [pc, #40]	; (800b0f0 <HAL_TIM_PWM_Start+0x38>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	bf14      	ite	ne
 800b0cc:	2200      	movne	r2, #0
 800b0ce:	2201      	moveq	r2, #1
 800b0d0:	4908      	ldr	r1, [pc, #32]	; (800b0f4 <HAL_TIM_PWM_Start+0x3c>)
 800b0d2:	428b      	cmp	r3, r1
 800b0d4:	d000      	beq.n	800b0d8 <HAL_TIM_PWM_Start+0x20>
 800b0d6:	b11a      	cbz	r2, 800b0e0 <HAL_TIM_PWM_Start+0x28>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b0d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b0de:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b0e0:	6822      	ldr	r2, [r4, #0]
 800b0e2:	6813      	ldr	r3, [r2, #0]
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	bd10      	pop	{r4, pc}
 800b0ee:	bf00      	nop
 800b0f0:	40010400 	.word	0x40010400
 800b0f4:	40010000 	.word	0x40010000

0800b0f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 800b0fc:	b111      	cbz	r1, 800b104 <HAL_TIM_Encoder_Start+0xc>
 800b0fe:	2904      	cmp	r1, #4
 800b100:	d006      	beq.n	800b110 <HAL_TIM_Encoder_Start+0x18>
 800b102:	e00b      	b.n	800b11c <HAL_TIM_Encoder_Start+0x24>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b104:	2201      	movs	r2, #1
 800b106:	2100      	movs	r1, #0
 800b108:	6800      	ldr	r0, [r0, #0]
 800b10a:	f7ff ffc5 	bl	800b098 <TIM_CCxChannelCmd>
      break; 
 800b10e:	e00f      	b.n	800b130 <HAL_TIM_Encoder_Start+0x38>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800b110:	2201      	movs	r2, #1
 800b112:	2104      	movs	r1, #4
 800b114:	6800      	ldr	r0, [r0, #0]
 800b116:	f7ff ffbf 	bl	800b098 <TIM_CCxChannelCmd>
      break;
 800b11a:	e009      	b.n	800b130 <HAL_TIM_Encoder_Start+0x38>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b11c:	2201      	movs	r2, #1
 800b11e:	2100      	movs	r1, #0
 800b120:	6800      	ldr	r0, [r0, #0]
 800b122:	f7ff ffb9 	bl	800b098 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b126:	2201      	movs	r2, #1
 800b128:	2104      	movs	r1, #4
 800b12a:	6820      	ldr	r0, [r4, #0]
 800b12c:	f7ff ffb4 	bl	800b098 <TIM_CCxChannelCmd>
     break; 
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b130:	6822      	ldr	r2, [r4, #0]
 800b132:	6813      	ldr	r3, [r2, #0]
 800b134:	f043 0301 	orr.w	r3, r3, #1
 800b138:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
}
 800b13a:	2000      	movs	r0, #0
 800b13c:	bd10      	pop	{r4, pc}
 800b13e:	bf00      	nop

0800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800b140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	4605      	mov	r5, r0
 800b146:	460f      	mov	r7, r1
 800b148:	4616      	mov	r6, r2
 800b14a:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800b14c:	f002 fc80 	bl	800da50 <HAL_GetTick>
 800b150:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 800b152:	682b      	ldr	r3, [r5, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	403b      	ands	r3, r7
 800b158:	42b3      	cmp	r3, r6
 800b15a:	d045      	beq.n	800b1e8 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0xa8>
  {
    if(Timeout != HAL_MAX_DELAY)
 800b15c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b160:	d0f7      	beq.n	800b152 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x12>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b162:	b13c      	cbz	r4, 800b174 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x34>
 800b164:	f002 fc74 	bl	800da50 <HAL_GetTick>
 800b168:	ebc8 0000 	rsb	r0, r8, r0
 800b16c:	4284      	cmp	r4, r0
 800b16e:	d903      	bls.n	800b178 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x38>
 800b170:	2300      	movs	r3, #0
 800b172:	e002      	b.n	800b17a <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x3a>
 800b174:	2301      	movs	r3, #1
 800b176:	e000      	b.n	800b17a <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x3a>
 800b178:	2301      	movs	r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0e9      	beq.n	800b152 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b17e:	682a      	ldr	r2, [r5, #0]
 800b180:	6853      	ldr	r3, [r2, #4]
 800b182:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b186:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b188:	686b      	ldr	r3, [r5, #4]
 800b18a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b18e:	d10b      	bne.n	800b1a8 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x68>
 800b190:	68ab      	ldr	r3, [r5, #8]
 800b192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b196:	bf18      	it	ne
 800b198:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b19c:	bf0c      	ite	eq
 800b19e:	2301      	moveq	r3, #1
 800b1a0:	2300      	movne	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x6a>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	e000      	b.n	800b1aa <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x6a>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	b123      	cbz	r3, 800b1b6 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x76>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b1ac:	682a      	ldr	r2, [r5, #0]
 800b1ae:	6813      	ldr	r3, [r2, #0]
 800b1b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1b4:	6013      	str	r3, [r2, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b1b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b1b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1bc:	d10b      	bne.n	800b1d6 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x96>
        {
          SPI_RESET_CRC(hspi);
 800b1be:	682a      	ldr	r2, [r5, #0]
 800b1c0:	6813      	ldr	r3, [r2, #0]
 800b1c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1c6:	041b      	lsls	r3, r3, #16
 800b1c8:	0c1b      	lsrs	r3, r3, #16
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	682a      	ldr	r2, [r5, #0]
 800b1ce:	6813      	ldr	r3, [r2, #0]
 800b1d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b1d4:	6013      	str	r3, [r2, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        
        return HAL_TIMEOUT;
 800b1e2:	2003      	movs	r0, #3
 800b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  
  return HAL_OK;      
 800b1e8:	2000      	movs	r0, #0
}
 800b1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ee:	bf00      	nop

0800b1f0 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>:
  * @param State : Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State, uint32_t Timeout)
{
 800b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
 800b1fe:	f002 fc27 	bl	800da50 <HAL_GetTick>
 800b202:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Fifo) != State)
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	6893      	ldr	r3, [r2, #8]
 800b208:	402b      	ands	r3, r5
 800b20a:	42a3      	cmp	r3, r4
 800b20c:	d04f      	beq.n	800b2ae <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0xbe>
  {
    if((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b20e:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800b212:	bf08      	it	eq
 800b214:	2c00      	cmpeq	r4, #0
 800b216:	d105      	bne.n	800b224 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x34>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800b218:	7b13      	ldrb	r3, [r2, #12]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b220:	f89d 3007 	ldrb.w	r3, [sp, #7]
    }

    if(Timeout != HAL_MAX_DELAY)
 800b224:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b228:	d0ec      	beq.n	800b204 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
 800b22a:	b13e      	cbz	r6, 800b23c <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x4c>
 800b22c:	f002 fc10 	bl	800da50 <HAL_GetTick>
 800b230:	ebc8 0000 	rsb	r0, r8, r0
 800b234:	4286      	cmp	r6, r0
 800b236:	d903      	bls.n	800b240 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x50>
 800b238:	2300      	movs	r3, #0
 800b23a:	e002      	b.n	800b242 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x52>
 800b23c:	2301      	movs	r3, #1
 800b23e:	e000      	b.n	800b242 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x52>
 800b240:	2301      	movs	r3, #1
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0de      	beq.n	800b204 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
                  on both master and slave sides in order to resynchronize the master
                 and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	6853      	ldr	r3, [r2, #4]
 800b24a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b24e:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b256:	d10b      	bne.n	800b270 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x80>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b25e:	bf18      	it	ne
 800b260:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b264:	bf0c      	ite	eq
 800b266:	2301      	moveq	r3, #1
 800b268:	2300      	movne	r3, #0
 800b26a:	d002      	beq.n	800b272 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x82>
 800b26c:	2300      	movs	r3, #0
 800b26e:	e000      	b.n	800b272 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x82>
 800b270:	2300      	movs	r3, #0
 800b272:	b123      	cbz	r3, 800b27e <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x8e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b274:	683a      	ldr	r2, [r7, #0]
 800b276:	6813      	ldr	r3, [r2, #0]
 800b278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b27c:	6013      	str	r3, [r2, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b284:	d10b      	bne.n	800b29e <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0xae>
        {
          SPI_RESET_CRC(hspi);
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	6813      	ldr	r3, [r2, #0]
 800b28a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b28e:	041b      	lsls	r3, r3, #16
 800b290:	0c1b      	lsrs	r3, r3, #16
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	6813      	ldr	r3, [r2, #0]
 800b298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b29c:	6013      	str	r3, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b2aa:	2003      	movs	r0, #3
 800b2ac:	e000      	b.n	800b2b0 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0xc0>
      }
    }
  }

  return HAL_OK;
 800b2ae:	2000      	movs	r0, #0
}
 800b2b0:	b002      	add	sp, #8
 800b2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b6:	bf00      	nop

0800b2b8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800b2be:	460b      	mov	r3, r1
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b2c6:	f7ff ff93 	bl	800b1f0 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b2ca:	b128      	cbz	r0, 800b2d8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x20>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b2cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b2ce:	f043 0320 	orr.w	r3, r3, #32
 800b2d2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e01a      	b.n	800b30e <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x56>
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800b2d8:	462b      	mov	r3, r5
 800b2da:	2200      	movs	r2, #0
 800b2dc:	2180      	movs	r1, #128	; 0x80
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7ff ff2e 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b2e4:	b128      	cbz	r0, 800b2f2 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x3a>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b2e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b2e8:	f043 0320 	orr.w	r3, r3, #32
 800b2ec:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e00d      	b.n	800b30e <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x56>
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800b2f2:	462b      	mov	r3, r5
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7ff ff78 	bl	800b1f0 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b300:	4603      	mov	r3, r0
 800b302:	b120      	cbz	r0, 800b30e <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x56>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b304:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b306:	f043 0320 	orr.w	r3, r3, #32
 800b30a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
  }
  return HAL_OK;
}
 800b30e:	4618      	mov	r0, r3
 800b310:	bd38      	pop	{r3, r4, r5, pc}
 800b312:	bf00      	nop

0800b314 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm>:
  *               the configuration information for SPI module.
  * @param Timeout : Timeout duration
  * @retval None
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout)
{
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4604      	mov	r4, r0
 800b318:	460d      	mov	r5, r1
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b31a:	6843      	ldr	r3, [r0, #4]
 800b31c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b320:	d10b      	bne.n	800b33a <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x26>
 800b322:	6883      	ldr	r3, [r0, #8]
 800b324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b328:	bf18      	it	ne
 800b32a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800b32e:	bf0c      	ite	eq
 800b330:	2301      	moveq	r3, #1
 800b332:	2300      	movne	r3, #0
 800b334:	d002      	beq.n	800b33c <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x28>
 800b336:	2300      	movs	r3, #0
 800b338:	e000      	b.n	800b33c <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x28>
 800b33a:	2300      	movs	r3, #0
 800b33c:	b123      	cbz	r3, 800b348 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x34>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b33e:	6822      	ldr	r2, [r4, #0]
 800b340:	6813      	ldr	r3, [r2, #0]
 800b342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b346:	6013      	str	r3, [r2, #0]
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800b348:	462b      	mov	r3, r5
 800b34a:	2200      	movs	r2, #0
 800b34c:	2180      	movs	r1, #128	; 0x80
 800b34e:	4620      	mov	r0, r4
 800b350:	f7ff fef6 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b354:	b128      	cbz	r0, 800b362 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x4e>
  {  
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b356:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b358:	f043 0320 	orr.w	r3, r3, #32
 800b35c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b35e:	2303      	movs	r3, #3
 800b360:	e00d      	b.n	800b37e <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x6a>
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK) 
 800b362:	462b      	mov	r3, r5
 800b364:	2200      	movs	r2, #0
 800b366:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b36a:	4620      	mov	r0, r4
 800b36c:	f7ff ff40 	bl	800b1f0 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b370:	4603      	mov	r3, r0
 800b372:	b120      	cbz	r0, 800b37e <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x6a>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800b374:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b376:	f043 0320 	orr.w	r3, r3, #32
 800b37a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
  }
  
  return HAL_OK;
}
 800b37e:	4618      	mov	r0, r3
 800b380:	bd38      	pop	{r3, r4, r5, pc}
 800b382:	bf00      	nop

0800b384 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800b384:	2800      	cmp	r0, #0
 800b386:	d05c      	beq.n	800b442 <HAL_SPI_Init+0xbe>
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b388:	b510      	push	{r4, lr}
 800b38a:	4604      	mov	r4, r0
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));

  if(hspi->State == HAL_SPI_STATE_RESET)
 800b38c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800b390:	b91b      	cbnz	r3, 800b39a <HAL_SPI_Init+0x16>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b392:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b396:	f004 f893 	bl	800f4c0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b39a:	2302      	movs	r3, #2
 800b39c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3a0:	6822      	ldr	r2, [r4, #0]
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3a8:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3aa:	68e2      	ldr	r2, [r4, #12]
 800b3ac:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b3b0:	d901      	bls.n	800b3b6 <HAL_SPI_Init+0x32>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	e001      	b.n	800b3ba <HAL_SPI_Init+0x36>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b3b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800b3ba:	f5b2 63e0 	subs.w	r3, r2, #1792	; 0x700
 800b3be:	bf18      	it	ne
 800b3c0:	2301      	movne	r3, #1
 800b3c2:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b3c6:	d002      	beq.n	800b3ce <HAL_SPI_Init+0x4a>
 800b3c8:	b10b      	cbz	r3, 800b3ce <HAL_SPI_Init+0x4a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b3ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b3d0:	b93b      	cbnz	r3, 800b3e2 <HAL_SPI_Init+0x5e>
  {
    /* CRC Length aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3d2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800b3d6:	d902      	bls.n	800b3de <HAL_SPI_Init+0x5a>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b3d8:	2302      	movs	r3, #2
 800b3da:	6323      	str	r3, [r4, #48]	; 0x30
 800b3dc:	e001      	b.n	800b3e2 <HAL_SPI_Init+0x5e>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800b3e2:	6821      	ldr	r1, [r4, #0]
 800b3e4:	6862      	ldr	r2, [r4, #4]
 800b3e6:	68a3      	ldr	r3, [r4, #8]
 800b3e8:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b3ea:	6923      	ldr	r3, [r4, #16]
  }

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
 800b3ec:	431a      	orrs	r2, r3
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b3ee:	6963      	ldr	r3, [r4, #20]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	69a2      	ldr	r2, [r4, #24]
 800b3f4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800b3f8:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b3fa:	69e3      	ldr	r3, [r4, #28]

  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800b3fc:	431a      	orrs	r2, r3
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800b3fe:	6a23      	ldr	r3, [r4, #32]
 800b400:	431a      	orrs	r2, r3
 800b402:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b404:	4313      	orrs	r3, r2
 800b406:	600b      	str	r3, [r1, #0]

  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b408:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d104      	bne.n	800b418 <HAL_SPI_Init+0x94>
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800b40e:	6822      	ldr	r2, [r4, #0]
 800b410:	6813      	ldr	r3, [r2, #0]
 800b412:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b416:	6013      	str	r3, [r2, #0]
  }

  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b418:	6821      	ldr	r1, [r4, #0]
 800b41a:	8b63      	ldrh	r3, [r4, #26]
 800b41c:	f003 0304 	and.w	r3, r3, #4
 800b420:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b422:	4313      	orrs	r3, r2
 800b424:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b426:	431a      	orrs	r2, r3
                         hspi->Init.DataSize ) | frxth;
 800b428:	68e3      	ldr	r3, [r4, #12]
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }

  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800b42a:	4313      	orrs	r3, r2
                         hspi->Init.DataSize ) | frxth;
 800b42c:	4303      	orrs	r3, r0
 800b42e:	604b      	str	r3, [r1, #4]

  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b434:	611a      	str	r2, [r3, #16]

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b436:	2000      	movs	r0, #0
 800b438:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
 800b43a:	2301      	movs	r3, #1
 800b43c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800b440:	bd10      	pop	{r4, pc}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 800b442:	2001      	movs	r0, #1
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop

0800b448 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b448:	b530      	push	{r4, r5, lr}
 800b44a:	b083      	sub	sp, #12
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b44c:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800b450:	2c01      	cmp	r4, #1
 800b452:	f000 80be 	beq.w	800b5d2 <HAL_SPI_Transmit+0x18a>
 800b456:	2401      	movs	r4, #1
 800b458:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c

  if(hspi->State != HAL_SPI_STATE_READY)
 800b45c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800b460:	2c01      	cmp	r4, #1
 800b462:	d007      	beq.n	800b474 <HAL_SPI_Transmit+0x2c>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b464:	2301      	movs	r3, #1
 800b466:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
   /* Process Unlocked */
   __HAL_UNLOCK(hspi);
 800b46a:	2300      	movs	r3, #0
 800b46c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
   return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
 800b472:	e0b3      	b.n	800b5dc <HAL_SPI_Transmit+0x194>
  }
  
  if((pData == NULL ) || (Size == 0))
 800b474:	2a00      	cmp	r2, #0
 800b476:	bf18      	it	ne
 800b478:	2900      	cmpne	r1, #0
 800b47a:	d106      	bne.n	800b48a <HAL_SPI_Transmit+0x42>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b47c:	2301      	movs	r3, #1
 800b47e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
   /* Process Unlocked */
   __HAL_UNLOCK(hspi);
 800b482:	2200      	movs	r2, #0
 800b484:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    return HAL_ERROR;
 800b488:	e0a8      	b.n	800b5dc <HAL_SPI_Transmit+0x194>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b48a:	2403      	movs	r4, #3
 800b48c:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b490:	2400      	movs	r4, #0
 800b492:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = pData;
 800b494:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b496:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b498:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b49a:	6404      	str	r4, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0;
 800b49c:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  hspi->RxXferCount = 0;
 800b4a0:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4a4:	6882      	ldr	r2, [r0, #8]
 800b4a6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b4aa:	d104      	bne.n	800b4b6 <HAL_SPI_Transmit+0x6e>
  {
    SPI_1LINE_TX(hspi);
 800b4ac:	6801      	ldr	r1, [r0, #0]
 800b4ae:	680a      	ldr	r2, [r1, #0]
 800b4b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4b4:	600a      	str	r2, [r1, #0]
  }

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b4b8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b4bc:	d10b      	bne.n	800b4d6 <HAL_SPI_Transmit+0x8e>
  {
    SPI_RESET_CRC(hspi);
 800b4be:	6801      	ldr	r1, [r0, #0]
 800b4c0:	680a      	ldr	r2, [r1, #0]
 800b4c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4c6:	0412      	lsls	r2, r2, #16
 800b4c8:	0c12      	lsrs	r2, r2, #16
 800b4ca:	600a      	str	r2, [r1, #0]
 800b4cc:	6801      	ldr	r1, [r0, #0]
 800b4ce:	680a      	ldr	r2, [r1, #0]
 800b4d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4d4:	600a      	str	r2, [r1, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4d6:	6802      	ldr	r2, [r0, #0]
 800b4d8:	6811      	ldr	r1, [r2, #0]
 800b4da:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b4de:	d103      	bne.n	800b4e8 <HAL_SPI_Transmit+0xa0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4e0:	6811      	ldr	r1, [r2, #0]
 800b4e2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b4e6:	6011      	str	r1, [r2, #0]
 800b4e8:	461d      	mov	r5, r3
 800b4ea:	4604      	mov	r4, r0
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4ec:	68c3      	ldr	r3, [r0, #12]
 800b4ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4f2:	d91c      	bls.n	800b52e <HAL_SPI_Transmit+0xe6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0)
 800b4f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d049      	beq.n	800b58e <HAL_SPI_Transmit+0x146>
    {
      /* Wait until TXE flag is set to send data */
      if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	4611      	mov	r1, r2
 800b500:	4620      	mov	r0, r4
 800b502:	f7ff fe1d 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b506:	b138      	cbz	r0, 800b518 <HAL_SPI_Transmit+0xd0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b508:	2301      	movs	r3, #1
 800b50a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        /* Process Unlocked */
       __HAL_UNLOCK(hspi);
 800b50e:	2300      	movs	r3, #0
 800b510:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e061      	b.n	800b5dc <HAL_SPI_Transmit+0x194>
      }
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b51c:	8812      	ldrh	r2, [r2, #0]
 800b51e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b522:	3302      	adds	r3, #2
 800b524:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800b526:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b528:	3b01      	subs	r3, #1
 800b52a:	87e3      	strh	r3, [r4, #62]	; 0x3e

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0)
 800b52c:	e7e2      	b.n	800b4f4 <HAL_SPI_Transmit+0xac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    while (hspi->TxXferCount > 0)
 800b52e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b530:	b36b      	cbz	r3, 800b58e <HAL_SPI_Transmit+0x146>
    {
      if(hspi->TxXferCount != 0x1)
 800b532:	2b01      	cmp	r3, #1
 800b534:	d019      	beq.n	800b56a <HAL_SPI_Transmit+0x122>
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
 800b536:	462b      	mov	r3, r5
 800b538:	2202      	movs	r2, #2
 800b53a:	4611      	mov	r1, r2
 800b53c:	4620      	mov	r0, r4
 800b53e:	f7ff fdff 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b542:	b138      	cbz	r0, 800b554 <HAL_SPI_Transmit+0x10c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b544:	2301      	movs	r3, #1
 800b546:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b54a:	2300      	movs	r3, #0
 800b54c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e043      	b.n	800b5dc <HAL_SPI_Transmit+0x194>
        }
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b558:	8812      	ldrh	r2, [r2, #0]
 800b55a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b55c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b55e:	3302      	adds	r3, #2
 800b560:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2;
 800b562:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b564:	3b02      	subs	r3, #2
 800b566:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800b568:	e7e1      	b.n	800b52e <HAL_SPI_Transmit+0xe6>
      }
      else
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)  
 800b56a:	462b      	mov	r3, r5
 800b56c:	2202      	movs	r2, #2
 800b56e:	4611      	mov	r1, r2
 800b570:	4620      	mov	r0, r4
 800b572:	f7ff fde5 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b576:	2800      	cmp	r0, #0
 800b578:	d12d      	bne.n	800b5d6 <HAL_SPI_Transmit+0x18e>
        {
          return HAL_TIMEOUT;
        }
        *((__IO uint8_t*)&hspi->Instance->DR) = (*hspi->pTxBuffPtr++);
 800b57a:	6822      	ldr	r2, [r4, #0]
 800b57c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b57e:	1c59      	adds	r1, r3, #1
 800b580:	63a1      	str	r1, [r4, #56]	; 0x38
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;    
 800b586:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b588:	3b01      	subs	r3, #1
 800b58a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800b58c:	e7cf      	b.n	800b52e <HAL_SPI_Transmit+0xe6>
      }
    }
  }

  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b58e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b594:	d104      	bne.n	800b5a0 <HAL_SPI_Transmit+0x158>
  {
     hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
 800b596:	6822      	ldr	r2, [r4, #0]
 800b598:	6813      	ldr	r3, [r2, #0]
 800b59a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b59e:	6013      	str	r3, [r2, #0]
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f7ff fe88 	bl	800b2b8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	b9b0      	cbnz	r0, 800b5da <HAL_SPI_Transmit+0x192>
  {
    return HAL_TIMEOUT;
  }
  
  /* Clear OVERUN flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b5ac:	68a2      	ldr	r2, [r4, #8]
 800b5ae:	b932      	cbnz	r2, 800b5be <HAL_SPI_Transmit+0x176>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5b0:	9201      	str	r2, [sp, #4]
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	68d1      	ldr	r1, [r2, #12]
 800b5b6:	9101      	str	r1, [sp, #4]
 800b5b8:	6892      	ldr	r2, [r2, #8]
 800b5ba:	9201      	str	r2, [sp, #4]
 800b5bc:	9a01      	ldr	r2, [sp, #4]
  }
    
  hspi->State = HAL_SPI_STATE_READY; 
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
  
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b5cc:	b132      	cbz	r2, 800b5dc <HAL_SPI_Transmit+0x194>
  {   
    return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e004      	b.n	800b5dc <HAL_SPI_Transmit+0x194>
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	e002      	b.n	800b5dc <HAL_SPI_Transmit+0x194>
      else
      {
        /* Wait until TXE flag is set to send data */
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)  
        {
          return HAL_TIMEOUT;
 800b5d6:	2303      	movs	r3, #3
 800b5d8:	e000      	b.n	800b5dc <HAL_SPI_Transmit+0x194>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_OK;
  }
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	b003      	add	sp, #12
 800b5e0:	bd30      	pop	{r4, r5, pc}
 800b5e2:	bf00      	nop

0800b5e4 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800b5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e8:	b082      	sub	sp, #8
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4688      	mov	r8, r1
 800b5ee:	4691      	mov	r9, r2
 800b5f0:	469a      	mov	sl, r3
 800b5f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __IO uint16_t tmpreg = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t tickstart = HAL_GetTick();
 800b5fa:	f002 fa29 	bl	800da50 <HAL_GetTick>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 800b5fe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b602:	2b01      	cmp	r3, #1
 800b604:	f040 8185 	bne.w	800b912 <HAL_SPI_TransmitReceive+0x32e>
 800b608:	4607      	mov	r7, r0
  {
    return HAL_BUSY;
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800b60a:	f1b9 0f00 	cmp.w	r9, #0
 800b60e:	bf18      	it	ne
 800b610:	f1b8 0f00 	cmpne.w	r8, #0
 800b614:	bf0c      	ite	eq
 800b616:	2601      	moveq	r6, #1
 800b618:	2600      	movne	r6, #0
 800b61a:	f000 817c 	beq.w	800b916 <HAL_SPI_TransmitReceive+0x332>
 800b61e:	f1ba 0f00 	cmp.w	sl, #0
 800b622:	f000 817a 	beq.w	800b91a <HAL_SPI_TransmitReceive+0x336>
    return HAL_ERROR;
  }

  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 800b626:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	f000 8177 	beq.w	800b91e <HAL_SPI_TransmitReceive+0x33a>
 800b630:	2301      	movs	r3, #1
 800b632:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b636:	2305      	movs	r3, #5
 800b638:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b63c:	2300      	movs	r3, #0
 800b63e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = pRxData;
 800b640:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b644:	f8a4 a046 	strh.w	sl, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b648:	f8a4 a044 	strh.w	sl, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800b64c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b650:	f8a4 a03e 	strh.w	sl, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b654:	f8a4 a03c 	strh.w	sl, [r4, #60]	; 0x3c

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b658:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b65e:	d10b      	bne.n	800b678 <HAL_SPI_TransmitReceive+0x94>
  {
    SPI_RESET_CRC(hspi);
 800b660:	6822      	ldr	r2, [r4, #0]
 800b662:	6813      	ldr	r3, [r2, #0]
 800b664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b668:	041b      	lsls	r3, r3, #16
 800b66a:	0c1b      	lsrs	r3, r3, #16
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	6822      	ldr	r2, [r4, #0]
 800b670:	6813      	ldr	r3, [r2, #0]
 800b672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b676:	6013      	str	r3, [r2, #0]
  }

  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b678:	68e3      	ldr	r3, [r4, #12]
 800b67a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b67e:	d803      	bhi.n	800b688 <HAL_SPI_TransmitReceive+0xa4>
 800b680:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b684:	2b01      	cmp	r3, #1
 800b686:	d905      	bls.n	800b694 <HAL_SPI_TransmitReceive+0xb0>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b688:	6822      	ldr	r2, [r4, #0]
 800b68a:	6853      	ldr	r3, [r2, #4]
 800b68c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b690:	6053      	str	r3, [r2, #4]
 800b692:	e004      	b.n	800b69e <HAL_SPI_TransmitReceive+0xba>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b694:	6822      	ldr	r2, [r4, #0]
 800b696:	6853      	ldr	r3, [r2, #4]
 800b698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b69c:	6053      	str	r3, [r2, #4]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b6a6:	d103      	bne.n	800b6b0 <HAL_SPI_TransmitReceive+0xcc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6b0:	68e3      	ldr	r3, [r4, #12]
 800b6b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6b6:	d959      	bls.n	800b76c <HAL_SPI_TransmitReceive+0x188>
  {
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b6b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b6ba:	b923      	cbnz	r3, 800b6c6 <HAL_SPI_TransmitReceive+0xe2>
 800b6bc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b6c0:	2a00      	cmp	r2, #0
 800b6c2:	f000 80ce 	beq.w	800b862 <HAL_SPI_TransmitReceive+0x27e>
    {
      /* Check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b6c6:	b133      	cbz	r3, 800b6d6 <HAL_SPI_TransmitReceive+0xf2>
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f013 0f02 	tst.w	r3, #2
 800b6d0:	d103      	bne.n	800b6da <HAL_SPI_TransmitReceive+0xf6>
 800b6d2:	4633      	mov	r3, r6
 800b6d4:	e002      	b.n	800b6dc <HAL_SPI_TransmitReceive+0xf8>
 800b6d6:	4633      	mov	r3, r6
 800b6d8:	e000      	b.n	800b6dc <HAL_SPI_TransmitReceive+0xf8>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	b1a3      	cbz	r3, 800b708 <HAL_SPI_TransmitReceive+0x124>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b6e2:	8812      	ldrh	r2, [r2, #0]
 800b6e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b6e8:	3302      	adds	r3, #2
 800b6ea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b6ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	87e3      	strh	r3, [r4, #62]	; 0x3e

        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b6f4:	b943      	cbnz	r3, 800b708 <HAL_SPI_TransmitReceive+0x124>
 800b6f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b6f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6fc:	d104      	bne.n	800b708 <HAL_SPI_TransmitReceive+0x124>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b6fe:	6822      	ldr	r2, [r4, #0]
 800b700:	6813      	ldr	r3, [r2, #0]
 800b702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b706:	6013      	str	r3, [r2, #0]
        } 
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b708:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b70c:	b133      	cbz	r3, 800b71c <HAL_SPI_TransmitReceive+0x138>
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	f013 0f01 	tst.w	r3, #1
 800b716:	d103      	bne.n	800b720 <HAL_SPI_TransmitReceive+0x13c>
 800b718:	4633      	mov	r3, r6
 800b71a:	e002      	b.n	800b722 <HAL_SPI_TransmitReceive+0x13e>
 800b71c:	4633      	mov	r3, r6
 800b71e:	e000      	b.n	800b722 <HAL_SPI_TransmitReceive+0x13e>
 800b720:	2301      	movs	r3, #1
 800b722:	b15b      	cbz	r3, 800b73c <HAL_SPI_TransmitReceive+0x158>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b726:	6822      	ldr	r2, [r4, #0]
 800b728:	68d2      	ldr	r2, [r2, #12]
 800b72a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b72c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b72e:	3302      	adds	r3, #2
 800b730:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b732:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b736:	3b01      	subs	r3, #1
 800b738:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 800b73c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b740:	d0ba      	beq.n	800b6b8 <HAL_SPI_TransmitReceive+0xd4>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b742:	b135      	cbz	r5, 800b752 <HAL_SPI_TransmitReceive+0x16e>
 800b744:	f002 f984 	bl	800da50 <HAL_GetTick>
 800b748:	1bc0      	subs	r0, r0, r7
 800b74a:	4285      	cmp	r5, r0
 800b74c:	d303      	bcc.n	800b756 <HAL_SPI_TransmitReceive+0x172>
 800b74e:	4633      	mov	r3, r6
 800b750:	e002      	b.n	800b758 <HAL_SPI_TransmitReceive+0x174>
 800b752:	2301      	movs	r3, #1
 800b754:	e000      	b.n	800b758 <HAL_SPI_TransmitReceive+0x174>
 800b756:	2301      	movs	r3, #1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0ad      	beq.n	800b6b8 <HAL_SPI_TransmitReceive+0xd4>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b75c:	2301      	movs	r3, #1
 800b75e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800b762:	2300      	movs	r3, #0
 800b764:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
 800b768:	2303      	movs	r3, #3
 800b76a:	e0db      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b76c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b76e:	b91b      	cbnz	r3, 800b778 <HAL_SPI_TransmitReceive+0x194>
 800b770:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b774:	2a00      	cmp	r2, #0
 800b776:	d074      	beq.n	800b862 <HAL_SPI_TransmitReceive+0x27e>
    {
      /* check TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b778:	b133      	cbz	r3, 800b788 <HAL_SPI_TransmitReceive+0x1a4>
 800b77a:	6822      	ldr	r2, [r4, #0]
 800b77c:	6892      	ldr	r2, [r2, #8]
 800b77e:	f012 0f02 	tst.w	r2, #2
 800b782:	d103      	bne.n	800b78c <HAL_SPI_TransmitReceive+0x1a8>
 800b784:	4632      	mov	r2, r6
 800b786:	e002      	b.n	800b78e <HAL_SPI_TransmitReceive+0x1aa>
 800b788:	4632      	mov	r2, r6
 800b78a:	e000      	b.n	800b78e <HAL_SPI_TransmitReceive+0x1aa>
 800b78c:	2201      	movs	r2, #1
 800b78e:	b302      	cbz	r2, 800b7d2 <HAL_SPI_TransmitReceive+0x1ee>
      {
        if(hspi->TxXferCount > 1)
 800b790:	2b01      	cmp	r3, #1
 800b792:	d90a      	bls.n	800b7aa <HAL_SPI_TransmitReceive+0x1c6>
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b798:	8812      	ldrh	r2, [r2, #0]
 800b79a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b79c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b79e:	3302      	adds	r3, #2
 800b7a0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800b7a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b7a4:	3b02      	subs	r3, #2
 800b7a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800b7a8:	e008      	b.n	800b7bc <HAL_SPI_TransmitReceive+0x1d8>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b7ae:	1c59      	adds	r1, r3, #1
 800b7b0:	63a1      	str	r1, [r4, #56]	; 0x38
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800b7b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }

        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b7bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b7be:	b943      	cbnz	r3, 800b7d2 <HAL_SPI_TransmitReceive+0x1ee>
 800b7c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7c6:	d104      	bne.n	800b7d2 <HAL_SPI_TransmitReceive+0x1ee>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b7c8:	6822      	ldr	r2, [r4, #0]
 800b7ca:	6813      	ldr	r3, [r2, #0]
 800b7cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b7d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b7d6:	b133      	cbz	r3, 800b7e6 <HAL_SPI_TransmitReceive+0x202>
 800b7d8:	6822      	ldr	r2, [r4, #0]
 800b7da:	6892      	ldr	r2, [r2, #8]
 800b7dc:	f012 0f01 	tst.w	r2, #1
 800b7e0:	d103      	bne.n	800b7ea <HAL_SPI_TransmitReceive+0x206>
 800b7e2:	4632      	mov	r2, r6
 800b7e4:	e002      	b.n	800b7ec <HAL_SPI_TransmitReceive+0x208>
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	e000      	b.n	800b7ec <HAL_SPI_TransmitReceive+0x208>
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	b30a      	cbz	r2, 800b832 <HAL_SPI_TransmitReceive+0x24e>
      {
        if(hspi->RxXferCount > 1)
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d914      	bls.n	800b81c <HAL_SPI_TransmitReceive+0x238>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7f4:	6822      	ldr	r2, [r4, #0]
 800b7f6:	68d2      	ldr	r2, [r2, #12]
 800b7f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b7fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7fc:	3302      	adds	r3, #2
 800b7fe:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800b800:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b804:	3b02      	subs	r3, #2
 800b806:	b29b      	uxth	r3, r3
 800b808:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d810      	bhi.n	800b832 <HAL_SPI_TransmitReceive+0x24e>
          {
            /* set fiforxthreshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	6853      	ldr	r3, [r2, #4]
 800b814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b818:	6053      	str	r3, [r2, #4]
 800b81a:	e00a      	b.n	800b832 <HAL_SPI_TransmitReceive+0x24e>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800b81c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	6422      	str	r2, [r4, #64]	; 0x40
 800b822:	6822      	ldr	r2, [r4, #0]
 800b824:	7b12      	ldrb	r2, [r2, #12]
 800b826:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800b828:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b82c:	3b01      	subs	r3, #1
 800b82e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 800b832:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b836:	d099      	beq.n	800b76c <HAL_SPI_TransmitReceive+0x188>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b838:	b135      	cbz	r5, 800b848 <HAL_SPI_TransmitReceive+0x264>
 800b83a:	f002 f909 	bl	800da50 <HAL_GetTick>
 800b83e:	1bc0      	subs	r0, r0, r7
 800b840:	4285      	cmp	r5, r0
 800b842:	d303      	bcc.n	800b84c <HAL_SPI_TransmitReceive+0x268>
 800b844:	4633      	mov	r3, r6
 800b846:	e002      	b.n	800b84e <HAL_SPI_TransmitReceive+0x26a>
 800b848:	2301      	movs	r3, #1
 800b84a:	e000      	b.n	800b84e <HAL_SPI_TransmitReceive+0x26a>
 800b84c:	2301      	movs	r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d08c      	beq.n	800b76c <HAL_SPI_TransmitReceive+0x188>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b852:	2301      	movs	r3, #1
 800b854:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800b858:	2300      	movs	r3, #0
 800b85a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e060      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b862:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b868:	d130      	bne.n	800b8cc <HAL_SPI_TransmitReceive+0x2e8>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800b86a:	462b      	mov	r3, r5
 800b86c:	2201      	movs	r2, #1
 800b86e:	4611      	mov	r1, r2
 800b870:	4620      	mov	r0, r4
 800b872:	f7ff fc65 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b876:	b118      	cbz	r0, 800b880 <HAL_SPI_TransmitReceive+0x29c>
    {
      /* Error on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b878:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b87a:	f043 0302 	orr.w	r3, r3, #2
 800b87e:	6623      	str	r3, [r4, #96]	; 0x60
    }

    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b880:	68e3      	ldr	r3, [r4, #12]
 800b882:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b886:	d107      	bne.n	800b898 <HAL_SPI_TransmitReceive+0x2b4>
    {
      tmpreg = hspi->Instance->DR;
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b892:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b896:	e019      	b.n	800b8cc <HAL_SPI_TransmitReceive+0x2e8>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	7b1b      	ldrb	r3, [r3, #12]
 800b89c:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800b8a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]

      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b8a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d110      	bne.n	800b8cc <HAL_SPI_TransmitReceive+0x2e8>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800b8aa:	462b      	mov	r3, r5
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f7ff fc45 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800b8b6:	b118      	cbz	r0, 800b8c0 <HAL_SPI_TransmitReceive+0x2dc>
        {
          /* Error on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b8b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b8ba:	f043 0302 	orr.w	r3, r3, #2
 800b8be:	6623      	str	r3, [r4, #96]	; 0x60
        }
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	7b1b      	ldrb	r3, [r3, #12]
 800b8c4:	f8ad 3006 	strh.w	r3, [sp, #6]
        UNUSED(tmpreg); /* To avoid GCC warning */
 800b8c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f7ff fcf2 	bl	800b2b8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	bb20      	cbnz	r0, 800b922 <HAL_SPI_TransmitReceive+0x33e>
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b8de:	6822      	ldr	r2, [r4, #0]
 800b8e0:	6891      	ldr	r1, [r2, #8]
 800b8e2:	f011 0f10 	tst.w	r1, #16
 800b8e6:	d000      	beq.n	800b8ea <HAL_SPI_TransmitReceive+0x306>
 800b8e8:	2601      	movs	r6, #1
 800b8ea:	b15e      	cbz	r6, 800b904 <HAL_SPI_TransmitReceive+0x320>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b8ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b8ee:	f043 0302 	orr.w	r3, r3, #2
 800b8f2:	6623      	str	r3, [r4, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b8f4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b8f8:	6093      	str	r3, [r2, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    
    return HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	e00f      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b904:	2200      	movs	r2, #0
 800b906:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
  
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b90a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b90c:	b152      	cbz	r2, 800b924 <HAL_SPI_TransmitReceive+0x340>
  {   
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e008      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 800b912:	2302      	movs	r3, #2
 800b914:	e006      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e004      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e002      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
  }

  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 800b91e:	2302      	movs	r3, #2
 800b920:	e000      	b.n	800b924 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_OK;
  }
}
 800b924:	4618      	mov	r0, r3
 800b926:	b002      	add	sp, #8
 800b928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b92c <HAL_SPI_Receive>:
  * @param  Size: amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	b084      	sub	sp, #16
  __IO uint16_t tmpreg;
  
  if(hspi->State != HAL_SPI_STATE_READY)
 800b930:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 800b934:	2c01      	cmp	r4, #1
 800b936:	f040 811c 	bne.w	800bb72 <HAL_SPI_Receive+0x246>
  {
    return HAL_BUSY;
  }
  
  if((pData == NULL ) || (Size == 0))
 800b93a:	2a00      	cmp	r2, #0
 800b93c:	bf18      	it	ne
 800b93e:	2900      	cmpne	r1, #0
 800b940:	bf0c      	ite	eq
 800b942:	2501      	moveq	r5, #1
 800b944:	2500      	movne	r5, #0
 800b946:	f000 8116 	beq.w	800bb76 <HAL_SPI_Receive+0x24a>
 800b94a:	461e      	mov	r6, r3
 800b94c:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b94e:	6843      	ldr	r3, [r0, #4]
 800b950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b954:	d108      	bne.n	800b968 <HAL_SPI_Receive+0x3c>
 800b956:	6883      	ldr	r3, [r0, #8]
 800b958:	b933      	cbnz	r3, 800b968 <HAL_SPI_Receive+0x3c>
  {
    /* the receive process is not supported in 2Lines direction master mode */
    /* in this case we call the transmitReceive process                     */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
 800b95a:	9600      	str	r6, [sp, #0]
 800b95c:	4613      	mov	r3, r2
 800b95e:	460a      	mov	r2, r1
 800b960:	f7ff fe40 	bl	800b5e4 <HAL_SPI_TransmitReceive>
 800b964:	4603      	mov	r3, r0
 800b966:	e111      	b.n	800bb8c <HAL_SPI_Receive+0x260>
  }
  
  /* Process Locked */
  __HAL_LOCK(hspi);
 800b968:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	f000 8104 	beq.w	800bb7a <HAL_SPI_Receive+0x24e>
 800b972:	2301      	movs	r3, #1
 800b974:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b978:	2304      	movs	r3, #4
 800b97a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b97e:	2300      	movs	r3, #0
 800b980:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = pData;
 800b982:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b984:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b988:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b98c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0;
 800b98e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0;
 800b990:	87e3      	strh	r3, [r4, #62]	; 0x3e

  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b998:	d110      	bne.n	800b9bc <HAL_SPI_Receive+0x90>
  {
    SPI_RESET_CRC(hspi);
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	6813      	ldr	r3, [r2, #0]
 800b99e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9a2:	041b      	lsls	r3, r3, #16
 800b9a4:	0c1b      	lsrs	r3, r3, #16
 800b9a6:	6013      	str	r3, [r2, #0]
 800b9a8:	6822      	ldr	r2, [r4, #0]
 800b9aa:	6813      	ldr	r3, [r2, #0]
 800b9ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b9b0:	6013      	str	r3, [r2, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800b9b2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  }

  /* Set the Rx Fido threshold */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9bc:	68e3      	ldr	r3, [r4, #12]
 800b9be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9c2:	d905      	bls.n	800b9d0 <HAL_SPI_Receive+0xa4>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b9c4:	6822      	ldr	r2, [r4, #0]
 800b9c6:	6853      	ldr	r3, [r2, #4]
 800b9c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9cc:	6053      	str	r3, [r2, #4]
 800b9ce:	e004      	b.n	800b9da <HAL_SPI_Receive+0xae>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b9d0:	6822      	ldr	r2, [r4, #0]
 800b9d2:	6853      	ldr	r3, [r2, #4]
 800b9d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b9d8:	6053      	str	r3, [r2, #4]
  }

  /* Configure communication direction 1Line and enabled SPI if needed */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9da:	68a3      	ldr	r3, [r4, #8]
 800b9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9e0:	d104      	bne.n	800b9ec <HAL_SPI_Receive+0xc0>
  {
    SPI_1LINE_RX(hspi);
 800b9e2:	6822      	ldr	r2, [r4, #0]
 800b9e4:	6813      	ldr	r3, [r2, #0]
 800b9e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9ea:	6013      	str	r3, [r2, #0]
  }

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800b9f4:	d103      	bne.n	800b9fe <HAL_SPI_Receive+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b9fe:	68e3      	ldr	r3, [r4, #12]
 800ba00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba04:	d818      	bhi.n	800ba38 <HAL_SPI_Receive+0x10c>
  {
    while(hspi->RxXferCount > 1)
 800ba06:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d92e      	bls.n	800ba6c <HAL_SPI_Receive+0x140>
    {
      /* Wait until the RXNE flag */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800ba0e:	4633      	mov	r3, r6
 800ba10:	2201      	movs	r2, #1
 800ba12:	4611      	mov	r1, r2
 800ba14:	4620      	mov	r0, r4
 800ba16:	f7ff fb93 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	f040 80af 	bne.w	800bb7e <HAL_SPI_Receive+0x252>
      {
        return HAL_TIMEOUT;
      }
      (*hspi->pRxBuffPtr++)= *(__IO uint8_t *)&hspi->Instance->DR;
 800ba20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	6422      	str	r2, [r4, #64]	; 0x40
 800ba26:	6822      	ldr	r2, [r4, #0]
 800ba28:	7b12      	ldrb	r2, [r2, #12]
 800ba2a:	701a      	strb	r2, [r3, #0]
      hspi->RxXferCount--;  
 800ba2c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ba30:	3b01      	subs	r3, #1
 800ba32:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  }

  /* Receive data in 8 Bit mode */
  if(hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
  {
    while(hspi->RxXferCount > 1)
 800ba36:	e7e6      	b.n	800ba06 <HAL_SPI_Receive+0xda>
      hspi->RxXferCount--;  
    }
  }
  else /* Receive data in 16 Bit mode */
  {   
    while(hspi->RxXferCount > 1 )
 800ba38:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d915      	bls.n	800ba6c <HAL_SPI_Receive+0x140>
    {
      /* Wait until RXNE flag is reset to read data */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800ba40:	4633      	mov	r3, r6
 800ba42:	2201      	movs	r2, #1
 800ba44:	4611      	mov	r1, r2
 800ba46:	4620      	mov	r0, r4
 800ba48:	f7ff fb7a 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	f040 8098 	bne.w	800bb82 <HAL_SPI_Receive+0x256>
      {
        return HAL_TIMEOUT;
      }
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ba52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba54:	6822      	ldr	r2, [r4, #0]
 800ba56:	68d2      	ldr	r2, [r2, #12]
 800ba58:	801a      	strh	r2, [r3, #0]
      hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba5c:	3302      	adds	r3, #2
 800ba5e:	6423      	str	r3, [r4, #64]	; 0x40
      hspi->RxXferCount--;
 800ba60:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800ba64:	3b01      	subs	r3, #1
 800ba66:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      hspi->RxXferCount--;  
    }
  }
  else /* Receive data in 16 Bit mode */
  {   
    while(hspi->RxXferCount > 1 )
 800ba6a:	e7e5      	b.n	800ba38 <HAL_SPI_Receive+0x10c>
      hspi->RxXferCount--;
    } 
  }
  
  /* Enable CRC Transmission */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 800ba6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba72:	d104      	bne.n	800ba7e <HAL_SPI_Receive+0x152>
  {
    hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
 800ba74:	6822      	ldr	r2, [r4, #0]
 800ba76:	6813      	ldr	r3, [r2, #0]
 800ba78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba7c:	6013      	str	r3, [r2, #0]
  }  

  /* Wait until RXNE flag is set */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800ba7e:	4633      	mov	r3, r6
 800ba80:	2201      	movs	r2, #1
 800ba82:	4611      	mov	r1, r2
 800ba84:	4620      	mov	r0, r4
 800ba86:	f7ff fb5b 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d17b      	bne.n	800bb86 <HAL_SPI_Receive+0x25a>
  {
    return HAL_TIMEOUT;
  }
  
  /* Receive last data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba8e:	68e3      	ldr	r3, [r4, #12]
 800ba90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba94:	d907      	bls.n	800baa6 <HAL_SPI_Receive+0x17a>
  {        
    *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ba96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba98:	6822      	ldr	r2, [r4, #0]
 800ba9a:	68d2      	ldr	r2, [r2, #12]
 800ba9c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800baa0:	3302      	adds	r3, #2
 800baa2:	6423      	str	r3, [r4, #64]	; 0x40
 800baa4:	e005      	b.n	800bab2 <HAL_SPI_Receive+0x186>
  }
  /* Receive last data in 8 Bit mode */
  else 
  {
    (*hspi->pRxBuffPtr++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800baa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800baa8:	1c5a      	adds	r2, r3, #1
 800baaa:	6422      	str	r2, [r4, #64]	; 0x40
 800baac:	6822      	ldr	r2, [r4, #0]
 800baae:	7b12      	ldrb	r2, [r2, #12]
 800bab0:	701a      	strb	r2, [r3, #0]
  }
  hspi->RxXferCount--;
 800bab2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800bab6:	3b01      	subs	r3, #1
 800bab8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800babc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800babe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac2:	d133      	bne.n	800bb2c <HAL_SPI_Receive+0x200>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK) 
 800bac4:	4633      	mov	r3, r6
 800bac6:	2201      	movs	r2, #1
 800bac8:	4611      	mov	r1, r2
 800baca:	4620      	mov	r0, r4
 800bacc:	f7ff fb38 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800bad0:	b118      	cbz	r0, 800bada <HAL_SPI_Receive+0x1ae>
    {
      /* Error on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800bad2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bad4:	f043 0302 	orr.w	r3, r3, #2
 800bad8:	6623      	str	r3, [r4, #96]	; 0x60
    }
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bada:	68e2      	ldr	r2, [r4, #12]
 800badc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800bae0:	d907      	bls.n	800baf2 <HAL_SPI_Receive+0x1c6>
    {        
      tmpreg = hspi->Instance->DR;
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800baec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800baf0:	e01c      	b.n	800bb2c <HAL_SPI_Receive+0x200>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	7b1b      	ldrb	r3, [r3, #12]
 800baf6:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg); /* To avoid GCC warning */
 800bafa:	f8bd 300e 	ldrh.w	r3, [sp, #14]

      if((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800bafe:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800bb02:	d113      	bne.n	800bb2c <HAL_SPI_Receive+0x200>
 800bb04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d110      	bne.n	800bb2c <HAL_SPI_Receive+0x200>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
 800bb0a:	4633      	mov	r3, r6
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4620      	mov	r0, r4
 800bb12:	f7ff fb15 	bl	800b140 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
 800bb16:	b118      	cbz	r0, 800bb20 <HAL_SPI_Receive+0x1f4>
        {
          /* Error on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_FLAG;
 800bb18:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bb1a:	f043 0320 	orr.w	r3, r3, #32
 800bb1e:	6623      	str	r3, [r4, #96]	; 0x60
        }
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	7b1b      	ldrb	r3, [r3, #12]
 800bb24:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg); /* To avoid GCC warning */
 800bb28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      }
    }
  }
  
  /* Check the end of the transaction */
  if(SPI_EndRxTransaction(hspi,Timeout) != HAL_OK)
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f7ff fbf0 	bl	800b314 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm>
 800bb34:	4603      	mov	r3, r0
 800bb36:	bb40      	cbnz	r0, 800bb8a <HAL_SPI_Receive+0x25e>
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY; 
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800bb3e:	6822      	ldr	r2, [r4, #0]
 800bb40:	6891      	ldr	r1, [r2, #8]
 800bb42:	f011 0f10 	tst.w	r1, #16
 800bb46:	d000      	beq.n	800bb4a <HAL_SPI_Receive+0x21e>
 800bb48:	2501      	movs	r5, #1
 800bb4a:	b15d      	cbz	r5, 800bb64 <HAL_SPI_Receive+0x238>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800bb4c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bb4e:	f043 0302 	orr.w	r3, r3, #2
 800bb52:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800bb54:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800bb58:	6093      	str	r3, [r2, #8]
                  
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e013      	b.n	800bb8c <HAL_SPI_Receive+0x260>
  }
    
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb64:	2200      	movs	r2, #0
 800bb66:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
  
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb6a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bb6c:	b172      	cbz	r2, 800bb8c <HAL_SPI_Receive+0x260>
  {   
    return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e00c      	b.n	800bb8c <HAL_SPI_Receive+0x260>
{
  __IO uint16_t tmpreg;
  
  if(hspi->State != HAL_SPI_STATE_READY)
  {
    return HAL_BUSY;
 800bb72:	2302      	movs	r3, #2
 800bb74:	e00a      	b.n	800bb8c <HAL_SPI_Receive+0x260>
  }
  
  if((pData == NULL ) || (Size == 0))
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e008      	b.n	800bb8c <HAL_SPI_Receive+0x260>
    /* in this case we call the transmitReceive process                     */
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
  }
  
  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	e006      	b.n	800bb8c <HAL_SPI_Receive+0x260>
    while(hspi->RxXferCount > 1)
    {
      /* Wait until the RXNE flag */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	e004      	b.n	800bb8c <HAL_SPI_Receive+0x260>
    while(hspi->RxXferCount > 1 )
    {
      /* Wait until RXNE flag is reset to read data */
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e002      	b.n	800bb8c <HAL_SPI_Receive+0x260>
  }  

  /* Wait until RXNE flag is set */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e000      	b.n	800bb8c <HAL_SPI_Receive+0x260>
  }
  
  /* Check the end of the transaction */
  if(SPI_EndRxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_OK;
  }
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	b004      	add	sp, #16
 800bb90:	bd70      	pop	{r4, r5, r6, pc}
 800bb92:	bf00      	nop

0800bb94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb96:	b083      	sub	sp, #12
 800bb98:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bb9a:	6803      	ldr	r3, [r0, #0]
 800bb9c:	f013 0f01 	tst.w	r3, #1
 800bba0:	d00c      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bba2:	4b4c      	ldr	r3, [pc, #304]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bba4:	689a      	ldr	r2, [r3, #8]
 800bba6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bbaa:	609a      	str	r2, [r3, #8]
 800bbac:	6899      	ldr	r1, [r3, #8]
 800bbae:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bbb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bbb6:	b11b      	cbz	r3, 800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 800bbb8:	2700      	movs	r7, #0
 800bbba:	e002      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 800bbbc:	2700      	movs	r7, #0
 800bbbe:	e000      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 800bbc0:	2701      	movs	r7, #1
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800bbc8:	d010      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bbca:	4942      	ldr	r1, [pc, #264]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bbcc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800bbd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bbdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bbde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbe2:	d100      	bne.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      plli2sused = 1; 
 800bbe4:	2701      	movs	r7, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bbe6:	b11b      	cbz	r3, 800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 800bbe8:	2500      	movs	r5, #0
 800bbea:	e002      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800bbec:	2500      	movs	r5, #0
 800bbee:	e000      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800bbf0:	2501      	movs	r5, #1
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bbf8:	d00f      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bbfa:	4936      	ldr	r1, [pc, #216]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bbfc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800bc00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bc04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc06:	4313      	orrs	r3, r2
 800bc08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bc0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc12:	d100      	bne.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      plli2sused = 1; 
 800bc14:	2701      	movs	r7, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bc16:	b903      	cbnz	r3, 800bc1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1; 
 800bc18:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800bc20:	d000      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {    
      plli2sused = 1; 
 800bc22:	2701      	movs	r7, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bc24:	f013 0f20 	tst.w	r3, #32
 800bc28:	d066      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	4b29      	ldr	r3, [pc, #164]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bc30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bc36:	641a      	str	r2, [r3, #64]	; 0x40
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	9b01      	ldr	r3, [sp, #4]
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bc42:	4a25      	ldr	r2, [pc, #148]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800bc44:	6813      	ldr	r3, [r2, #0]
 800bc46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc4a:	6013      	str	r3, [r2, #0]
      
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc4c:	f001 ff00 	bl	800da50 <HAL_GetTick>
 800bc50:	4606      	mov	r6, r0
      
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bc52:	4b21      	ldr	r3, [pc, #132]	; (800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bc5a:	d105      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc5c:	f001 fef8 	bl	800da50 <HAL_GetTick>
 800bc60:	1b80      	subs	r0, r0, r6
 800bc62:	2864      	cmp	r0, #100	; 0x64
 800bc64:	d9f5      	bls.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800bc66:	e366      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      {
        return HAL_TIMEOUT;
      }      
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc68:	4b1a      	ldr	r3, [pc, #104]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bc6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bc6e:	4053      	eors	r3, r2
 800bc70:	f413 7f40 	tst.w	r3, #768	; 0x300
 800bc74:	d040      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc76:	4b17      	ldr	r3, [pc, #92]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bc78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bc7a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bc7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bc84:	671a      	str	r2, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bc86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bc8c:	671a      	str	r2, [r3, #112]	; 0x70
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bc8e:	6718      	str	r0, [r3, #112]	; 0x70
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 800bc90:	f011 0f02 	tst.w	r1, #2
 800bc94:	d00f      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc96:	f001 fedb 	bl	800da50 <HAL_GetTick>
 800bc9a:	4606      	mov	r6, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc9c:	4b0d      	ldr	r3, [pc, #52]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bc9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca0:	f013 0f02 	tst.w	r3, #2
 800bca4:	d107      	bne.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bca6:	f001 fed3 	bl	800da50 <HAL_GetTick>
 800bcaa:	1b80      	subs	r0, r0, r6
 800bcac:	f241 3388 	movw	r3, #5000	; 0x1388
 800bcb0:	4298      	cmp	r0, r3
 800bcb2:	d9f3      	bls.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x108>
 800bcb4:	e341      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 800bcb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bcb8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bcbc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800bcc0:	d10e      	bne.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800bcc2:	4804      	ldr	r0, [pc, #16]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800bcc4:	6882      	ldr	r2, [r0, #8]
 800bcc6:	f422 11f8 	bic.w	r1, r2, #2031616	; 0x1f0000
 800bcca:	4a04      	ldr	r2, [pc, #16]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800bccc:	401a      	ands	r2, r3
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	6082      	str	r2, [r0, #8]
 800bcd2:	e00a      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x156>
 800bcd4:	40023800 	.word	0x40023800
 800bcd8:	40007000 	.word	0x40007000
 800bcdc:	0ffffcff 	.word	0x0ffffcff
 800bce0:	4a87      	ldr	r2, [pc, #540]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bce2:	6893      	ldr	r3, [r2, #8]
 800bce4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bce8:	6093      	str	r3, [r2, #8]
 800bcea:	4a85      	ldr	r2, [pc, #532]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bcec:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800bcee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bcf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	6713      	str	r3, [r2, #112]	; 0x70
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	f013 0f10 	tst.w	r3, #16
 800bcfe:	d00c      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bd00:	4b7f      	ldr	r3, [pc, #508]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bd02:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bd06:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800bd0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bd0e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800bd12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bd14:	430a      	orrs	r2, r1
 800bd16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800bd20:	d008      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bd22:	4977      	ldr	r1, [pc, #476]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bd24:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bd28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bd34:	6823      	ldr	r3, [r4, #0]
 800bd36:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800bd3a:	d008      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bd3c:	4970      	ldr	r1, [pc, #448]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bd3e:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bd42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bd46:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800bd54:	d008      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bd56:	496a      	ldr	r1, [pc, #424]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bd58:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bd5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bd62:	4313      	orrs	r3, r2
 800bd64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bd6e:	d008      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd70:	4963      	ldr	r1, [pc, #396]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bd72:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bd76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd7a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd88:	d008      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd8a:	495d      	ldr	r1, [pc, #372]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bd8c:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bd90:	f023 0203 	bic.w	r2, r3, #3
 800bd94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bd96:	4313      	orrs	r3, r2
 800bd98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bda2:	d008      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bda4:	4956      	ldr	r1, [pc, #344]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bda6:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bdaa:	f023 020c 	bic.w	r2, r3, #12
 800bdae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bdb6:	6823      	ldr	r3, [r4, #0]
 800bdb8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bdbc:	d008      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bdbe:	4950      	ldr	r1, [pc, #320]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bdc0:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bdc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bdc8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800bdd6:	d008      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bdd8:	4949      	ldr	r1, [pc, #292]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bdda:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bdde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bde2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bde4:	4313      	orrs	r3, r2
 800bde6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800bdf0:	d008      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdf2:	4943      	ldr	r1, [pc, #268]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bdf4:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bdf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bdfe:	4313      	orrs	r3, r2
 800be00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800be0a:	d008      	beq.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800be0c:	493c      	ldr	r1, [pc, #240]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800be0e:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800be12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be18:	4313      	orrs	r3, r2
 800be1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800be24:	d008      	beq.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800be26:	4936      	ldr	r1, [pc, #216]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800be28:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800be2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800be32:	4313      	orrs	r3, r2
 800be34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800be3e:	d008      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800be40:	492f      	ldr	r1, [pc, #188]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800be42:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800be46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800be4c:	4313      	orrs	r3, r2
 800be4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800be58:	d008      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be5a:	4929      	ldr	r1, [pc, #164]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800be5c:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800be60:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800be64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800be66:	4313      	orrs	r3, r2
 800be68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800be72:	d00d      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800be74:	4922      	ldr	r1, [pc, #136]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800be76:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800be7a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800be7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800be80:	4313      	orrs	r3, r2
 800be82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800be86:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800be88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be8c:	d100      	bne.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      pllsaiused = 1; 
 800be8e:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	f013 0f08 	tst.w	r3, #8
 800be96:	d000      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    pllsaiused = 1; 
 800be98:	2501      	movs	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be9a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800be9e:	d008      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bea0:	4917      	ldr	r1, [pc, #92]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bea2:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800beaa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800beac:	4313      	orrs	r3, r2
 800beae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800beb8:	d009      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800beba:	4911      	ldr	r1, [pc, #68]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bebc:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800bec0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bec4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bec8:	4313      	orrs	r3, r2
 800beca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bece:	b927      	cbnz	r7, 800beda <HAL_RCCEx_PeriphCLKConfig+0x346>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bed6:	f040 8125 	bne.w	800c124 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800beda:	4a09      	ldr	r2, [pc, #36]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800bedc:	6813      	ldr	r3, [r2, #0]
 800bede:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bee2:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bee4:	f001 fdb4 	bl	800da50 <HAL_GetTick>
 800bee8:	4606      	mov	r6, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800beea:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800bef2:	d007      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bef4:	f001 fdac 	bl	800da50 <HAL_GetTick>
 800bef8:	1b80      	subs	r0, r0, r6
 800befa:	2864      	cmp	r0, #100	; 0x64
 800befc:	d9f5      	bls.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x356>
 800befe:	e21e      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800bf00:	40023800 	.word	0x40023800
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	f013 0f01 	tst.w	r3, #1
 800bf0a:	d03b      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800bf0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf0e:	bbcb      	cbnz	r3, 800bf84 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800bf10:	4891      	ldr	r0, [pc, #580]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bf12:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800bf16:	f406 3640 	and.w	r6, r6, #196608	; 0x30000
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800bf1e:	fa92 f3a2 	rbit	r3, r2
 800bf22:	fab3 f383 	clz	r3, r3
 800bf26:	40de      	lsrs	r6, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800bf28:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800bf2c:	f001 6770 	and.w	r7, r1, #251658240	; 0xf000000
 800bf30:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800bf34:	fa93 f1a3 	rbit	r1, r3
 800bf38:	fab1 f181 	clz	r1, r1
 800bf3c:	fa27 f101 	lsr.w	r1, r7, r1
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bf40:	6867      	ldr	r7, [r4, #4]
 800bf42:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 800bf46:	fa9e feae 	rbit	lr, lr
 800bf4a:	fabe fe8e 	clz	lr, lr
 800bf4e:	fa07 f70e 	lsl.w	r7, r7, lr
 800bf52:	fa92 f2a2 	rbit	r2, r2
 800bf56:	fab2 f282 	clz	r2, r2
 800bf5a:	fa06 f202 	lsl.w	r2, r6, r2
 800bf5e:	433a      	orrs	r2, r7
 800bf60:	fa93 f3a3 	rbit	r3, r3
 800bf64:	fab3 f383 	clz	r3, r3
 800bf68:	fa01 f303 	lsl.w	r3, r1, r3
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800bf74:	fa91 f1a1 	rbit	r1, r1
 800bf78:	fab1 f181 	clz	r1, r1
 800bf7c:	408b      	lsls	r3, r1
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800bf8a:	d003      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800bf8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bf8e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800bf92:	d006      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bf94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bf98:	d047      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x496>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800bf9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfa0:	d143      	bne.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x496>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800bfa2:	486d      	ldr	r0, [pc, #436]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800bfa4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800bfa8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800bfac:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 800bfb0:	fa9e f3ae 	rbit	r3, lr
 800bfb4:	fab3 f383 	clz	r3, r3
 800bfb8:	fa22 f603 	lsr.w	r6, r2, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800bfbc:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800bfc0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800bfc4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bfc8:	fa93 f2a3 	rbit	r2, r3
 800bfcc:	fab2 f282 	clz	r2, r2
 800bfd0:	40d1      	lsrs	r1, r2
 800bfd2:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800bfd6:	fa97 f7a7 	rbit	r7, r7
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bfda:	fab7 f787 	clz	r7, r7
 800bfde:	6862      	ldr	r2, [r4, #4]
 800bfe0:	fa02 f707 	lsl.w	r7, r2, r7
 800bfe4:	fa9e f2ae 	rbit	r2, lr
 800bfe8:	fab2 f282 	clz	r2, r2
 800bfec:	fa06 f202 	lsl.w	r2, r6, r2
 800bff0:	ea47 0602 	orr.w	r6, r7, r2
 800bff4:	68e2      	ldr	r2, [r4, #12]
 800bff6:	f04f 6770 	mov.w	r7, #251658240	; 0xf000000
 800bffa:	fa97 f7a7 	rbit	r7, r7
 800bffe:	fab7 f787 	clz	r7, r7
 800c002:	40ba      	lsls	r2, r7
 800c004:	4332      	orrs	r2, r6
 800c006:	fa93 f3a3 	rbit	r3, r3
 800c00a:	fab3 f383 	clz	r3, r3
 800c00e:	fa01 f303 	lsl.w	r3, r1, r3
 800c012:	4313      	orrs	r3, r2
 800c014:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 800c018:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800c01c:	f023 021f 	bic.w	r2, r3, #31
 800c020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c022:	3b01      	subs	r3, #1
 800c024:	4313      	orrs	r3, r2
 800c026:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800c030:	d03b      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800c032:	4e49      	ldr	r6, [pc, #292]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800c034:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 800c038:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800c03c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800c040:	fa92 f3a2 	rbit	r3, r2
 800c044:	fab3 f383 	clz	r3, r3
 800c048:	40d8      	lsrs	r0, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800c04a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 800c04e:	f001 4ee0 	and.w	lr, r1, #1879048192	; 0x70000000
 800c052:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 800c056:	fa97 f1a7 	rbit	r1, r7
 800c05a:	fab1 f381 	clz	r3, r1
 800c05e:	fa2e f103 	lsr.w	r1, lr, r3
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c062:	6863      	ldr	r3, [r4, #4]
 800c064:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 800c068:	fa9e feae 	rbit	lr, lr
 800c06c:	fabe fe8e 	clz	lr, lr
 800c070:	fa03 fe0e 	lsl.w	lr, r3, lr
 800c074:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800c078:	fa93 f3a3 	rbit	r3, r3
 800c07c:	fab3 fc83 	clz	ip, r3
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	fa03 f30c 	lsl.w	r3, r3, ip
 800c086:	ea4e 0303 	orr.w	r3, lr, r3
 800c08a:	fa92 f2a2 	rbit	r2, r2
 800c08e:	fab2 f282 	clz	r2, r2
 800c092:	fa00 f202 	lsl.w	r2, r0, r2
 800c096:	431a      	orrs	r2, r3
 800c098:	fa97 f3a7 	rbit	r3, r7
 800c09c:	fab3 f383 	clz	r3, r3
 800c0a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c0b0:	d025      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x56a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c0b2:	6862      	ldr	r2, [r4, #4]
 800c0b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c0b8:	fa93 f3a3 	rbit	r3, r3
 800c0bc:	fab3 f383 	clz	r3, r3
 800c0c0:	409a      	lsls	r2, r3
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800c0c8:	fa91 f1a1 	rbit	r1, r1
 800c0cc:	fab1 f181 	clz	r1, r1
 800c0d0:	408b      	lsls	r3, r1
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	68e2      	ldr	r2, [r4, #12]
 800c0d6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800c0da:	fa91 f1a1 	rbit	r1, r1
 800c0de:	fab1 f181 	clz	r1, r1
 800c0e2:	408a      	lsls	r2, r1
 800c0e4:	431a      	orrs	r2, r3
 800c0e6:	68a3      	ldr	r3, [r4, #8]
 800c0e8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800c0ec:	fa91 f1a1 	rbit	r1, r1
 800c0f0:	fab1 f181 	clz	r1, r1
 800c0f4:	408b      	lsls	r3, r1
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	4a17      	ldr	r2, [pc, #92]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800c0fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c0fe:	4a16      	ldr	r2, [pc, #88]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800c100:	6813      	ldr	r3, [r2, #0]
 800c102:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c106:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c108:	f001 fca2 	bl	800da50 <HAL_GetTick>
 800c10c:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c10e:	4b12      	ldr	r3, [pc, #72]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800c116:	d105      	bne.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c118:	f001 fc9a 	bl	800da50 <HAL_GetTick>
 800c11c:	1b80      	subs	r0, r0, r6
 800c11e:	2864      	cmp	r0, #100	; 0x64
 800c120:	d9f5      	bls.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800c122:	e10e      	b.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c124:	2d00      	cmp	r5, #0
 800c126:	f000 810e 	beq.w	800c346 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800c12a:	4a0b      	ldr	r2, [pc, #44]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800c12c:	6813      	ldr	r3, [r2, #0]
 800c12e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c132:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c134:	f001 fc8c 	bl	800da50 <HAL_GetTick>
 800c138:	4605      	mov	r5, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c13a:	4b07      	ldr	r3, [pc, #28]	; (800c158 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c142:	d001      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800c144:	2301      	movs	r3, #1
 800c146:	e000      	b.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800c148:	2300      	movs	r3, #0
 800c14a:	b13b      	cbz	r3, 800c15c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c14c:	f001 fc80 	bl	800da50 <HAL_GetTick>
 800c150:	1b40      	subs	r0, r0, r5
 800c152:	2864      	cmp	r0, #100	; 0x64
 800c154:	d9f1      	bls.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c156:	e0f8      	b.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 800c158:	40023800 	.word	0x40023800
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800c162:	d001      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c164:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c166:	b12a      	cbz	r2, 800c174 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
 800c168:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c16c:	d047      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c170:	2b00      	cmp	r3, #0
 800c172:	d144      	bne.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800c174:	4877      	ldr	r0, [pc, #476]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800c176:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 800c17a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
 800c17e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c182:	fa92 f3a2 	rbit	r3, r2
 800c186:	fab3 f383 	clz	r3, r3
 800c18a:	40dd      	lsrs	r5, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800c18c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800c190:	f001 46e0 	and.w	r6, r1, #1879048192	; 0x70000000
 800c194:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c198:	fa93 f1a3 	rbit	r1, r3
 800c19c:	fab1 f181 	clz	r1, r1
 800c1a0:	fa26 f101 	lsr.w	r1, r6, r1
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c1a4:	6967      	ldr	r7, [r4, #20]
 800c1a6:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 800c1aa:	fa96 f6a6 	rbit	r6, r6
 800c1ae:	fab6 f686 	clz	r6, r6
 800c1b2:	fa07 f606 	lsl.w	r6, r7, r6
 800c1b6:	fa92 f2a2 	rbit	r2, r2
 800c1ba:	fab2 f282 	clz	r2, r2
 800c1be:	fa05 f202 	lsl.w	r2, r5, r2
 800c1c2:	ea46 0502 	orr.w	r5, r6, r2
 800c1c6:	69a2      	ldr	r2, [r4, #24]
 800c1c8:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 800c1cc:	fa96 f6a6 	rbit	r6, r6
 800c1d0:	fab6 f686 	clz	r6, r6
 800c1d4:	40b2      	lsls	r2, r6
 800c1d6:	432a      	orrs	r2, r5
 800c1d8:	fa93 f3a3 	rbit	r3, r3
 800c1dc:	fab3 f383 	clz	r3, r3
 800c1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c1ea:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800c1ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c1f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c1f4:	3a01      	subs	r2, #1
 800c1f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c1fa:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800c204:	d03d      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800c206:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c20c:	d139      	bne.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800c20e:	4e51      	ldr	r6, [pc, #324]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800c210:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
 800c214:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 800c218:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800c21c:	fa92 f3a2 	rbit	r3, r2
 800c220:	fab3 f383 	clz	r3, r3
 800c224:	40d8      	lsrs	r0, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800c226:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 800c22a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800c22e:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
 800c232:	fa95 f3a5 	rbit	r3, r5
 800c236:	fab3 f383 	clz	r3, r3
 800c23a:	40d9      	lsrs	r1, r3
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c23c:	6967      	ldr	r7, [r4, #20]
 800c23e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c242:	fa93 f3a3 	rbit	r3, r3
 800c246:	fab3 f383 	clz	r3, r3
 800c24a:	fa07 fe03 	lsl.w	lr, r7, r3
 800c24e:	6a23      	ldr	r3, [r4, #32]
 800c250:	f44f 3740 	mov.w	r7, #196608	; 0x30000
 800c254:	fa97 f7a7 	rbit	r7, r7
 800c258:	fab7 f787 	clz	r7, r7
 800c25c:	40bb      	lsls	r3, r7
 800c25e:	ea4e 0303 	orr.w	r3, lr, r3
 800c262:	fa92 f2a2 	rbit	r2, r2
 800c266:	fab2 f282 	clz	r2, r2
 800c26a:	fa00 f202 	lsl.w	r2, r0, r2
 800c26e:	431a      	orrs	r2, r3
 800c270:	fa95 f3a5 	rbit	r3, r5
 800c274:	fab3 f383 	clz	r3, r3
 800c278:	fa01 f303 	lsl.w	r3, r1, r3
 800c27c:	4313      	orrs	r3, r2
 800c27e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
    }        

#if defined(STM32F756xx) || defined(STM32F746xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	f013 0f08 	tst.w	r3, #8
 800c288:	d041      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800c28a:	4d32      	ldr	r5, [pc, #200]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800c28c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800c290:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800c294:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800c298:	fa91 f3a1 	rbit	r3, r1
 800c29c:	fab3 f383 	clz	r3, r3
 800c2a0:	fa22 f603 	lsr.w	r6, r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800c2a4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800c2a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c2ac:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800c2b0:	fa90 f2a0 	rbit	r2, r0
 800c2b4:	fab2 f282 	clz	r2, r2
 800c2b8:	fa23 f202 	lsr.w	r2, r3, r2
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c2bc:	6967      	ldr	r7, [r4, #20]
 800c2be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c2c2:	fa93 f3a3 	rbit	r3, r3
 800c2c6:	fab3 f383 	clz	r3, r3
 800c2ca:	409f      	lsls	r7, r3
 800c2cc:	fa90 f3a0 	rbit	r3, r0
 800c2d0:	fab3 f383 	clz	r3, r3
 800c2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d8:	433b      	orrs	r3, r7
 800c2da:	fa91 f2a1 	rbit	r2, r1
 800c2de:	fab2 f282 	clz	r2, r2
 800c2e2:	fa06 f202 	lsl.w	r2, r6, r2
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	69e2      	ldr	r2, [r4, #28]
 800c2ea:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800c2ee:	fa91 f1a1 	rbit	r1, r1
 800c2f2:	fab1 f181 	clz	r1, r1
 800c2f6:	408a      	lsls	r2, r1
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c2fe:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800c302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c306:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c308:	4313      	orrs	r3, r2
 800c30a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }    
#endif /* STM32F756xx || STM32F746xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c30e:	4a11      	ldr	r2, [pc, #68]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800c310:	6813      	ldr	r3, [r2, #0]
 800c312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c316:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c318:	f001 fb9a 	bl	800da50 <HAL_GetTick>
 800c31c:	4604      	mov	r4, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c31e:	4b0d      	ldr	r3, [pc, #52]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800c326:	d112      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x7ba>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c328:	f001 fb92 	bl	800da50 <HAL_GetTick>
 800c32c:	1b00      	subs	r0, r0, r4
 800c32e:	2864      	cmp	r0, #100	; 0x64
 800c330:	d9f5      	bls.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800c332:	2003      	movs	r0, #3
 800c334:	e00c      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 800c336:	2003      	movs	r0, #3
 800c338:	e00a      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c33a:	2003      	movs	r0, #3
 800c33c:	e008      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 800c33e:	2003      	movs	r0, #3
 800c340:	e006      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 800c342:	2003      	movs	r0, #3
 800c344:	e004      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c346:	2000      	movs	r0, #0
 800c348:	e002      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 800c34a:	2003      	movs	r0, #3
 800c34c:	e000      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c34e:	2000      	movs	r0, #0
}
 800c350:	b003      	add	sp, #12
 800c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c354:	40023800 	.word	0x40023800

0800c358 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c35e:	6803      	ldr	r3, [r0, #0]
 800c360:	f013 0f01 	tst.w	r3, #1
 800c364:	f000 8088 	beq.w	800c478 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c368:	4ba2      	ldr	r3, [pc, #648]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f003 030c 	and.w	r3, r3, #12
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c370:	2b04      	cmp	r3, #4
 800c372:	d00c      	beq.n	800c38e <HAL_RCC_OscConfig+0x36>
 800c374:	4b9f      	ldr	r3, [pc, #636]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f003 030c 	and.w	r3, r3, #12
 800c37c:	2b08      	cmp	r3, #8
 800c37e:	d108      	bne.n	800c392 <HAL_RCC_OscConfig+0x3a>
 800c380:	4b9c      	ldr	r3, [pc, #624]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800c388:	d105      	bne.n	800c396 <HAL_RCC_OscConfig+0x3e>
 800c38a:	2300      	movs	r3, #0
 800c38c:	e004      	b.n	800c398 <HAL_RCC_OscConfig+0x40>
 800c38e:	2301      	movs	r3, #1
 800c390:	e002      	b.n	800c398 <HAL_RCC_OscConfig+0x40>
 800c392:	2300      	movs	r3, #0
 800c394:	e000      	b.n	800c398 <HAL_RCC_OscConfig+0x40>
 800c396:	2301      	movs	r3, #1
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800c398:	b163      	cbz	r3, 800c3b4 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c39a:	4a96      	ldr	r2, [pc, #600]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c39c:	6812      	ldr	r2, [r2, #0]
 800c39e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800c3a2:	d003      	beq.n	800c3ac <HAL_RCC_OscConfig+0x54>
 800c3a4:	6862      	ldr	r2, [r4, #4]
 800c3a6:	b112      	cbz	r2, 800c3ae <HAL_RCC_OscConfig+0x56>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e000      	b.n	800c3ae <HAL_RCC_OscConfig+0x56>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d062      	beq.n	800c478 <HAL_RCC_OscConfig+0x120>
 800c3b2:	e1f1      	b.n	800c798 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800c3b4:	4b8f      	ldr	r3, [pc, #572]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c3cc:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3ce:	f001 fb3f 	bl	800da50 <HAL_GetTick>
 800c3d2:	4605      	mov	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3d4:	4b87      	ldr	r3, [pc, #540]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c3dc:	d005      	beq.n	800c3ea <HAL_RCC_OscConfig+0x92>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3de:	f001 fb37 	bl	800da50 <HAL_GetTick>
 800c3e2:	1b40      	subs	r0, r0, r5
 800c3e4:	2864      	cmp	r0, #100	; 0x64
 800c3e6:	d9f5      	bls.n	800c3d4 <HAL_RCC_OscConfig+0x7c>
 800c3e8:	e1d8      	b.n	800c79c <HAL_RCC_OscConfig+0x444>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c3ea:	4a82      	ldr	r2, [pc, #520]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c3ec:	6813      	ldr	r3, [r2, #0]
 800c3ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	6863      	ldr	r3, [r4, #4]
 800c3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fa:	d109      	bne.n	800c410 <HAL_RCC_OscConfig+0xb8>
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	6812      	ldr	r2, [r2, #0]
 800c400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e015      	b.n	800c43c <HAL_RCC_OscConfig+0xe4>
 800c410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c414:	d109      	bne.n	800c42a <HAL_RCC_OscConfig+0xd2>
 800c416:	4b77      	ldr	r3, [pc, #476]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c41e:	601a      	str	r2, [r3, #0]
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	e008      	b.n	800c43c <HAL_RCC_OscConfig+0xe4>
 800c42a:	4b72      	ldr	r3, [pc, #456]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c43a:	601a      	str	r2, [r3, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c43c:	6863      	ldr	r3, [r4, #4]
 800c43e:	b16b      	cbz	r3, 800c45c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c440:	f001 fb06 	bl	800da50 <HAL_GetTick>
 800c444:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c446:	4b6b      	ldr	r3, [pc, #428]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c44e:	d113      	bne.n	800c478 <HAL_RCC_OscConfig+0x120>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c450:	f001 fafe 	bl	800da50 <HAL_GetTick>
 800c454:	1b40      	subs	r0, r0, r5
 800c456:	2864      	cmp	r0, #100	; 0x64
 800c458:	d9f5      	bls.n	800c446 <HAL_RCC_OscConfig+0xee>
 800c45a:	e1a1      	b.n	800c7a0 <HAL_RCC_OscConfig+0x448>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c45c:	f001 faf8 	bl	800da50 <HAL_GetTick>
 800c460:	4605      	mov	r5, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c462:	4b64      	ldr	r3, [pc, #400]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c46a:	d005      	beq.n	800c478 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c46c:	f001 faf0 	bl	800da50 <HAL_GetTick>
 800c470:	1b40      	subs	r0, r0, r5
 800c472:	2864      	cmp	r0, #100	; 0x64
 800c474:	d9f5      	bls.n	800c462 <HAL_RCC_OscConfig+0x10a>
 800c476:	e195      	b.n	800c7a4 <HAL_RCC_OscConfig+0x44c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	f013 0f02 	tst.w	r3, #2
 800c47e:	d069      	beq.n	800c554 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800c480:	4b5c      	ldr	r3, [pc, #368]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c482:	689b      	ldr	r3, [r3, #8]
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c484:	f013 0f0c 	tst.w	r3, #12
 800c488:	d00c      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x14c>
 800c48a:	4b5a      	ldr	r3, [pc, #360]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c48c:	689b      	ldr	r3, [r3, #8]
 800c48e:	f003 030c 	and.w	r3, r3, #12
 800c492:	2b08      	cmp	r3, #8
 800c494:	d108      	bne.n	800c4a8 <HAL_RCC_OscConfig+0x150>
 800c496:	4b57      	ldr	r3, [pc, #348]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800c49e:	d005      	beq.n	800c4ac <HAL_RCC_OscConfig+0x154>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	e004      	b.n	800c4ae <HAL_RCC_OscConfig+0x156>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e002      	b.n	800c4ae <HAL_RCC_OscConfig+0x156>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e000      	b.n	800c4ae <HAL_RCC_OscConfig+0x156>
 800c4ac:	2301      	movs	r3, #1
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800c4ae:	b1db      	cbz	r3, 800c4e8 <HAL_RCC_OscConfig+0x190>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4b0:	4a50      	ldr	r2, [pc, #320]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c4b2:	6812      	ldr	r2, [r2, #0]
 800c4b4:	f012 0f02 	tst.w	r2, #2
 800c4b8:	d004      	beq.n	800c4c4 <HAL_RCC_OscConfig+0x16c>
 800c4ba:	68e2      	ldr	r2, [r4, #12]
 800c4bc:	2a01      	cmp	r2, #1
 800c4be:	d102      	bne.n	800c4c6 <HAL_RCC_OscConfig+0x16e>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e000      	b.n	800c4c6 <HAL_RCC_OscConfig+0x16e>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f040 816e 	bne.w	800c7a8 <HAL_RCC_OscConfig+0x450>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4cc:	4849      	ldr	r0, [pc, #292]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c4ce:	6803      	ldr	r3, [r0, #0]
 800c4d0:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	22f8      	movs	r2, #248	; 0xf8
 800c4d8:	fa92 f2a2 	rbit	r2, r2
 800c4dc:	fab2 f282 	clz	r2, r2
 800c4e0:	4093      	lsls	r3, r2
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	6003      	str	r3, [r0, #0]
 800c4e6:	e035      	b.n	800c554 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c4e8:	68e3      	ldr	r3, [r4, #12]
 800c4ea:	b303      	cbz	r3, 800c52e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4ec:	4a41      	ldr	r2, [pc, #260]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c4ee:	6813      	ldr	r3, [r2, #0]
 800c4f0:	f043 0301 	orr.w	r3, r3, #1
 800c4f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f6:	f001 faab 	bl	800da50 <HAL_GetTick>
 800c4fa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4fc:	4b3d      	ldr	r3, [pc, #244]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f013 0f02 	tst.w	r3, #2
 800c504:	d105      	bne.n	800c512 <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c506:	f001 faa3 	bl	800da50 <HAL_GetTick>
 800c50a:	1b40      	subs	r0, r0, r5
 800c50c:	2864      	cmp	r0, #100	; 0x64
 800c50e:	d9f5      	bls.n	800c4fc <HAL_RCC_OscConfig+0x1a4>
 800c510:	e14c      	b.n	800c7ac <HAL_RCC_OscConfig+0x454>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c512:	4838      	ldr	r0, [pc, #224]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c514:	6803      	ldr	r3, [r0, #0]
 800c516:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 800c51a:	6923      	ldr	r3, [r4, #16]
 800c51c:	22f8      	movs	r2, #248	; 0xf8
 800c51e:	fa92 f2a2 	rbit	r2, r2
 800c522:	fab2 f282 	clz	r2, r2
 800c526:	4093      	lsls	r3, r2
 800c528:	430b      	orrs	r3, r1
 800c52a:	6003      	str	r3, [r0, #0]
 800c52c:	e012      	b.n	800c554 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c52e:	4a31      	ldr	r2, [pc, #196]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c530:	6813      	ldr	r3, [r2, #0]
 800c532:	f023 0301 	bic.w	r3, r3, #1
 800c536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c538:	f001 fa8a 	bl	800da50 <HAL_GetTick>
 800c53c:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c53e:	4b2d      	ldr	r3, [pc, #180]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f013 0f02 	tst.w	r3, #2
 800c546:	d005      	beq.n	800c554 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c548:	f001 fa82 	bl	800da50 <HAL_GetTick>
 800c54c:	1b40      	subs	r0, r0, r5
 800c54e:	2864      	cmp	r0, #100	; 0x64
 800c550:	d9f5      	bls.n	800c53e <HAL_RCC_OscConfig+0x1e6>
 800c552:	e12d      	b.n	800c7b0 <HAL_RCC_OscConfig+0x458>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c554:	6823      	ldr	r3, [r4, #0]
 800c556:	f013 0f08 	tst.w	r3, #8
 800c55a:	d027      	beq.n	800c5ac <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c55c:	6963      	ldr	r3, [r4, #20]
 800c55e:	b193      	cbz	r3, 800c586 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c560:	4a24      	ldr	r2, [pc, #144]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c562:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800c564:	f043 0301 	orr.w	r3, r3, #1
 800c568:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c56a:	f001 fa71 	bl	800da50 <HAL_GetTick>
 800c56e:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c570:	4b20      	ldr	r3, [pc, #128]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c574:	f013 0f02 	tst.w	r3, #2
 800c578:	d118      	bne.n	800c5ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c57a:	f001 fa69 	bl	800da50 <HAL_GetTick>
 800c57e:	1b40      	subs	r0, r0, r5
 800c580:	2864      	cmp	r0, #100	; 0x64
 800c582:	d9f5      	bls.n	800c570 <HAL_RCC_OscConfig+0x218>
 800c584:	e116      	b.n	800c7b4 <HAL_RCC_OscConfig+0x45c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c586:	4a1b      	ldr	r2, [pc, #108]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c588:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800c58a:	f023 0301 	bic.w	r3, r3, #1
 800c58e:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c590:	f001 fa5e 	bl	800da50 <HAL_GetTick>
 800c594:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c596:	4b17      	ldr	r3, [pc, #92]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c59a:	f013 0f02 	tst.w	r3, #2
 800c59e:	d005      	beq.n	800c5ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c5a0:	f001 fa56 	bl	800da50 <HAL_GetTick>
 800c5a4:	1b40      	subs	r0, r0, r5
 800c5a6:	2864      	cmp	r0, #100	; 0x64
 800c5a8:	d9f5      	bls.n	800c596 <HAL_RCC_OscConfig+0x23e>
 800c5aa:	e105      	b.n	800c7b8 <HAL_RCC_OscConfig+0x460>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	f013 0f04 	tst.w	r3, #4
 800c5b2:	f000 8089 	beq.w	800c6c8 <HAL_RCC_OscConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9301      	str	r3, [sp, #4]
 800c5ba:	4b0e      	ldr	r3, [pc, #56]	; (800c5f4 <HAL_RCC_OscConfig+0x29c>)
 800c5bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c5c2:	641a      	str	r2, [r3, #64]	; 0x40
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5ca:	9301      	str	r3, [sp, #4]
 800c5cc:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c5ce:	4a0a      	ldr	r2, [pc, #40]	; (800c5f8 <HAL_RCC_OscConfig+0x2a0>)
 800c5d0:	6813      	ldr	r3, [r2, #0]
 800c5d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5d6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c5d8:	f001 fa3a 	bl	800da50 <HAL_GetTick>
 800c5dc:	4605      	mov	r5, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c5de:	4b06      	ldr	r3, [pc, #24]	; (800c5f8 <HAL_RCC_OscConfig+0x2a0>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c5e6:	d109      	bne.n	800c5fc <HAL_RCC_OscConfig+0x2a4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c5e8:	f001 fa32 	bl	800da50 <HAL_GetTick>
 800c5ec:	1b40      	subs	r0, r0, r5
 800c5ee:	2864      	cmp	r0, #100	; 0x64
 800c5f0:	d9f5      	bls.n	800c5de <HAL_RCC_OscConfig+0x286>
 800c5f2:	e0e3      	b.n	800c7bc <HAL_RCC_OscConfig+0x464>
 800c5f4:	40023800 	.word	0x40023800
 800c5f8:	40007000 	.word	0x40007000
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800c5fc:	4b7a      	ldr	r3, [pc, #488]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c5fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c600:	f022 0201 	bic.w	r2, r2, #1
 800c604:	671a      	str	r2, [r3, #112]	; 0x70
 800c606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c608:	f022 0204 	bic.w	r2, r2, #4
 800c60c:	671a      	str	r2, [r3, #112]	; 0x70
 800c60e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c610:	f022 0201 	bic.w	r2, r2, #1
 800c614:	671a      	str	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c616:	f001 fa1b 	bl	800da50 <HAL_GetTick>
 800c61a:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c61c:	4b72      	ldr	r3, [pc, #456]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c620:	f013 0f02 	tst.w	r3, #2
 800c624:	d007      	beq.n	800c636 <HAL_RCC_OscConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c626:	f001 fa13 	bl	800da50 <HAL_GetTick>
 800c62a:	1b40      	subs	r0, r0, r5
 800c62c:	f241 3388 	movw	r3, #5000	; 0x1388
 800c630:	4298      	cmp	r0, r3
 800c632:	d9f3      	bls.n	800c61c <HAL_RCC_OscConfig+0x2c4>
 800c634:	e0c4      	b.n	800c7c0 <HAL_RCC_OscConfig+0x468>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c636:	4a6c      	ldr	r2, [pc, #432]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c638:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800c63a:	f023 0301 	bic.w	r3, r3, #1
 800c63e:	6713      	str	r3, [r2, #112]	; 0x70
 800c640:	68a3      	ldr	r3, [r4, #8]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d109      	bne.n	800c65a <HAL_RCC_OscConfig+0x302>
 800c646:	4613      	mov	r3, r2
 800c648:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c64a:	f022 0204 	bic.w	r2, r2, #4
 800c64e:	671a      	str	r2, [r3, #112]	; 0x70
 800c650:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c652:	f042 0201 	orr.w	r2, r2, #1
 800c656:	671a      	str	r2, [r3, #112]	; 0x70
 800c658:	e014      	b.n	800c684 <HAL_RCC_OscConfig+0x32c>
 800c65a:	2b05      	cmp	r3, #5
 800c65c:	d109      	bne.n	800c672 <HAL_RCC_OscConfig+0x31a>
 800c65e:	4b62      	ldr	r3, [pc, #392]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c660:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c662:	f042 0204 	orr.w	r2, r2, #4
 800c666:	671a      	str	r2, [r3, #112]	; 0x70
 800c668:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c66a:	f042 0201 	orr.w	r2, r2, #1
 800c66e:	671a      	str	r2, [r3, #112]	; 0x70
 800c670:	e008      	b.n	800c684 <HAL_RCC_OscConfig+0x32c>
 800c672:	4b5d      	ldr	r3, [pc, #372]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c676:	f022 0204 	bic.w	r2, r2, #4
 800c67a:	671a      	str	r2, [r3, #112]	; 0x70
 800c67c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c67e:	f022 0201 	bic.w	r2, r2, #1
 800c682:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c684:	68a3      	ldr	r3, [r4, #8]
 800c686:	b17b      	cbz	r3, 800c6a8 <HAL_RCC_OscConfig+0x350>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c688:	f001 f9e2 	bl	800da50 <HAL_GetTick>
 800c68c:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c68e:	4b56      	ldr	r3, [pc, #344]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c692:	f013 0f02 	tst.w	r3, #2
 800c696:	d117      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c698:	f001 f9da 	bl	800da50 <HAL_GetTick>
 800c69c:	1b40      	subs	r0, r0, r5
 800c69e:	f241 3388 	movw	r3, #5000	; 0x1388
 800c6a2:	4298      	cmp	r0, r3
 800c6a4:	d9f3      	bls.n	800c68e <HAL_RCC_OscConfig+0x336>
 800c6a6:	e08d      	b.n	800c7c4 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a8:	f001 f9d2 	bl	800da50 <HAL_GetTick>
 800c6ac:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6ae:	4b4e      	ldr	r3, [pc, #312]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b2:	f013 0f02 	tst.w	r3, #2
 800c6b6:	d007      	beq.n	800c6c8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6b8:	f001 f9ca 	bl	800da50 <HAL_GetTick>
 800c6bc:	1b40      	subs	r0, r0, r5
 800c6be:	f241 3388 	movw	r3, #5000	; 0x1388
 800c6c2:	4298      	cmp	r0, r3
 800c6c4:	d9f3      	bls.n	800c6ae <HAL_RCC_OscConfig+0x356>
 800c6c6:	e07f      	b.n	800c7c8 <HAL_RCC_OscConfig+0x470>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c6c8:	69a3      	ldr	r3, [r4, #24]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d07e      	beq.n	800c7cc <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c6ce:	4a46      	ldr	r2, [pc, #280]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c6d0:	6892      	ldr	r2, [r2, #8]
 800c6d2:	f002 020c 	and.w	r2, r2, #12
 800c6d6:	2a08      	cmp	r2, #8
 800c6d8:	d07a      	beq.n	800c7d0 <HAL_RCC_OscConfig+0x478>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d148      	bne.n	800c770 <HAL_RCC_OscConfig+0x418>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6de:	4a42      	ldr	r2, [pc, #264]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c6e0:	6813      	ldr	r3, [r2, #0]
 800c6e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6e8:	f001 f9b2 	bl	800da50 <HAL_GetTick>
 800c6ec:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6ee:	4b3e      	ldr	r3, [pc, #248]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c6f6:	d005      	beq.n	800c704 <HAL_RCC_OscConfig+0x3ac>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6f8:	f001 f9aa 	bl	800da50 <HAL_GetTick>
 800c6fc:	1b40      	subs	r0, r0, r5
 800c6fe:	2864      	cmp	r0, #100	; 0x64
 800c700:	d9f5      	bls.n	800c6ee <HAL_RCC_OscConfig+0x396>
 800c702:	e067      	b.n	800c7d4 <HAL_RCC_OscConfig+0x47c>
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c704:	6a25      	ldr	r5, [r4, #32]
 800c706:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c708:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c70c:	fa93 f3a3 	rbit	r3, r3
 800c710:	fab3 f383 	clz	r3, r3
 800c714:	4099      	lsls	r1, r3
 800c716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c718:	085b      	lsrs	r3, r3, #1
 800c71a:	3b01      	subs	r3, #1
 800c71c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c720:	fa92 f2a2 	rbit	r2, r2
 800c724:	fab2 f282 	clz	r2, r2
 800c728:	4093      	lsls	r3, r2
 800c72a:	69e6      	ldr	r6, [r4, #28]
 800c72c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c72e:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 800c732:	fa90 f0a0 	rbit	r0, r0
 800c736:	fab0 f080 	clz	r0, r0
 800c73a:	4082      	lsls	r2, r0
 800c73c:	4329      	orrs	r1, r5
 800c73e:	430b      	orrs	r3, r1
 800c740:	4333      	orrs	r3, r6
 800c742:	4313      	orrs	r3, r2
 800c744:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
 800c748:	4a27      	ldr	r2, [pc, #156]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c74a:	6053      	str	r3, [r2, #4]
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c74c:	6813      	ldr	r3, [r2, #0]
 800c74e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c754:	f001 f97c 	bl	800da50 <HAL_GetTick>
 800c758:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c75a:	4b23      	ldr	r3, [pc, #140]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c762:	d139      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x480>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c764:	f001 f974 	bl	800da50 <HAL_GetTick>
 800c768:	1b00      	subs	r0, r0, r4
 800c76a:	2864      	cmp	r0, #100	; 0x64
 800c76c:	d9f5      	bls.n	800c75a <HAL_RCC_OscConfig+0x402>
 800c76e:	e035      	b.n	800c7dc <HAL_RCC_OscConfig+0x484>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c770:	4a1d      	ldr	r2, [pc, #116]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c772:	6813      	ldr	r3, [r2, #0]
 800c774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c778:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c77a:	f001 f969 	bl	800da50 <HAL_GetTick>
 800c77e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c780:	4b19      	ldr	r3, [pc, #100]	; (800c7e8 <HAL_RCC_OscConfig+0x490>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c788:	d02a      	beq.n	800c7e0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c78a:	f001 f961 	bl	800da50 <HAL_GetTick>
 800c78e:	1b00      	subs	r0, r0, r4
 800c790:	2864      	cmp	r0, #100	; 0x64
 800c792:	d9f5      	bls.n	800c780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c794:	2003      	movs	r0, #3
 800c796:	e024      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 800c798:	2001      	movs	r0, #1
 800c79a:	e022      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800c79c:	2003      	movs	r0, #3
 800c79e:	e020      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c7a0:	2003      	movs	r0, #3
 800c7a2:	e01e      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c7a4:	2003      	movs	r0, #3
 800c7a6:	e01c      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 800c7a8:	2001      	movs	r0, #1
 800c7aa:	e01a      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c7ac:	2003      	movs	r0, #3
 800c7ae:	e018      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c7b0:	2003      	movs	r0, #3
 800c7b2:	e016      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800c7b4:	2003      	movs	r0, #3
 800c7b6:	e014      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800c7b8:	2003      	movs	r0, #3
 800c7ba:	e012      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 800c7bc:	2003      	movs	r0, #3
 800c7be:	e010      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 800c7c0:	2003      	movs	r0, #3
 800c7c2:	e00e      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800c7c4:	2003      	movs	r0, #3
 800c7c6:	e00c      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800c7c8:	2003      	movs	r0, #3
 800c7ca:	e00a      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e008      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	e006      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c7d4:	2003      	movs	r0, #3
 800c7d6:	e004      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800c7d8:	2000      	movs	r0, #0
 800c7da:	e002      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c7dc:	2003      	movs	r0, #3
 800c7de:	e000      	b.n	800c7e2 <HAL_RCC_OscConfig+0x48a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800c7e0:	2000      	movs	r0, #0
}
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd70      	pop	{r4, r5, r6, pc}
 800c7e6:	bf00      	nop
 800c7e8:	40023800 	.word	0x40023800

0800c7ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c7ec:	b570      	push	{r4, r5, r6, lr}
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800c7f2:	4b88      	ldr	r3, [pc, #544]	; (800ca14 <HAL_RCC_ClockConfig+0x228>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 030f 	and.w	r3, r3, #15
 800c7fa:	428b      	cmp	r3, r1
 800c7fc:	d26a      	bcs.n	800c8d4 <HAL_RCC_ClockConfig+0xe8>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7fe:	4a85      	ldr	r2, [pc, #532]	; (800ca14 <HAL_RCC_ClockConfig+0x228>)
 800c800:	6813      	ldr	r3, [r2, #0]
 800c802:	f023 030f 	bic.w	r3, r3, #15
 800c806:	430b      	orrs	r3, r1
 800c808:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c80a:	6813      	ldr	r3, [r2, #0]
 800c80c:	f003 030f 	and.w	r3, r3, #15
 800c810:	4299      	cmp	r1, r3
 800c812:	f040 80e2 	bne.w	800c9da <HAL_RCC_ClockConfig+0x1ee>
    {
      return HAL_ERROR;
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c816:	6803      	ldr	r3, [r0, #0]
 800c818:	f013 0f02 	tst.w	r3, #2
 800c81c:	d006      	beq.n	800c82c <HAL_RCC_ClockConfig+0x40>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c81e:	497e      	ldr	r1, [pc, #504]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c820:	688b      	ldr	r3, [r1, #8]
 800c822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c826:	6883      	ldr	r3, [r0, #8]
 800c828:	4313      	orrs	r3, r2
 800c82a:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	f013 0f01 	tst.w	r3, #1
 800c832:	f000 80b6 	beq.w	800c9a2 <HAL_RCC_ClockConfig+0x1b6>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c836:	6862      	ldr	r2, [r4, #4]
 800c838:	2a01      	cmp	r2, #1
 800c83a:	d105      	bne.n	800c848 <HAL_RCC_ClockConfig+0x5c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c83c:	4b76      	ldr	r3, [pc, #472]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c844:	d10e      	bne.n	800c864 <HAL_RCC_ClockConfig+0x78>
 800c846:	e0ca      	b.n	800c9de <HAL_RCC_ClockConfig+0x1f2>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c848:	2a02      	cmp	r2, #2
 800c84a:	d105      	bne.n	800c858 <HAL_RCC_ClockConfig+0x6c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c84c:	4b72      	ldr	r3, [pc, #456]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c854:	d106      	bne.n	800c864 <HAL_RCC_ClockConfig+0x78>
 800c856:	e0c4      	b.n	800c9e2 <HAL_RCC_ClockConfig+0x1f6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c858:	4b6f      	ldr	r3, [pc, #444]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f013 0f02 	tst.w	r3, #2
 800c860:	f000 80c1 	beq.w	800c9e6 <HAL_RCC_ClockConfig+0x1fa>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c864:	496c      	ldr	r1, [pc, #432]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c866:	688b      	ldr	r3, [r1, #8]
 800c868:	f023 0303 	bic.w	r3, r3, #3
 800c86c:	4313      	orrs	r3, r2
 800c86e:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c870:	f001 f8ee 	bl	800da50 <HAL_GetTick>
 800c874:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c876:	6863      	ldr	r3, [r4, #4]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d10e      	bne.n	800c89a <HAL_RCC_ClockConfig+0xae>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c87c:	4b66      	ldr	r3, [pc, #408]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f003 030c 	and.w	r3, r3, #12
 800c884:	2b04      	cmp	r3, #4
 800c886:	f000 808c 	beq.w	800c9a2 <HAL_RCC_ClockConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c88a:	f001 f8e1 	bl	800da50 <HAL_GetTick>
 800c88e:	1b40      	subs	r0, r0, r5
 800c890:	f241 3388 	movw	r3, #5000	; 0x1388
 800c894:	4298      	cmp	r0, r3
 800c896:	d9f1      	bls.n	800c87c <HAL_RCC_ClockConfig+0x90>
 800c898:	e0a7      	b.n	800c9ea <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d10d      	bne.n	800c8ba <HAL_RCC_ClockConfig+0xce>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c89e:	4b5e      	ldr	r3, [pc, #376]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	f003 030c 	and.w	r3, r3, #12
 800c8a6:	2b08      	cmp	r3, #8
 800c8a8:	d07b      	beq.n	800c9a2 <HAL_RCC_ClockConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8aa:	f001 f8d1 	bl	800da50 <HAL_GetTick>
 800c8ae:	1b40      	subs	r0, r0, r5
 800c8b0:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8b4:	4298      	cmp	r0, r3
 800c8b6:	d9f2      	bls.n	800c89e <HAL_RCC_ClockConfig+0xb2>
 800c8b8:	e099      	b.n	800c9ee <HAL_RCC_ClockConfig+0x202>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c8ba:	4b57      	ldr	r3, [pc, #348]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	f013 0f0c 	tst.w	r3, #12
 800c8c2:	d06e      	beq.n	800c9a2 <HAL_RCC_ClockConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c8c4:	f001 f8c4 	bl	800da50 <HAL_GetTick>
 800c8c8:	1b40      	subs	r0, r0, r5
 800c8ca:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8ce:	4298      	cmp	r0, r3
 800c8d0:	d9f3      	bls.n	800c8ba <HAL_RCC_ClockConfig+0xce>
 800c8d2:	e08e      	b.n	800c9f2 <HAL_RCC_ClockConfig+0x206>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8d4:	6803      	ldr	r3, [r0, #0]
 800c8d6:	f013 0f02 	tst.w	r3, #2
 800c8da:	d006      	beq.n	800c8ea <HAL_RCC_ClockConfig+0xfe>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c8dc:	494e      	ldr	r1, [pc, #312]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c8de:	688b      	ldr	r3, [r1, #8]
 800c8e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8e4:	6883      	ldr	r3, [r0, #8]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	f013 0f01 	tst.w	r3, #1
 800c8f0:	d04c      	beq.n	800c98c <HAL_RCC_ClockConfig+0x1a0>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c8f2:	6862      	ldr	r2, [r4, #4]
 800c8f4:	2a01      	cmp	r2, #1
 800c8f6:	d105      	bne.n	800c904 <HAL_RCC_ClockConfig+0x118>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c8f8:	4b47      	ldr	r3, [pc, #284]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c900:	d10d      	bne.n	800c91e <HAL_RCC_ClockConfig+0x132>
 800c902:	e078      	b.n	800c9f6 <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c904:	2a02      	cmp	r2, #2
 800c906:	d105      	bne.n	800c914 <HAL_RCC_ClockConfig+0x128>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c908:	4b43      	ldr	r3, [pc, #268]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c910:	d105      	bne.n	800c91e <HAL_RCC_ClockConfig+0x132>
 800c912:	e072      	b.n	800c9fa <HAL_RCC_ClockConfig+0x20e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c914:	4b40      	ldr	r3, [pc, #256]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f013 0f02 	tst.w	r3, #2
 800c91c:	d06f      	beq.n	800c9fe <HAL_RCC_ClockConfig+0x212>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c91e:	493e      	ldr	r1, [pc, #248]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c920:	688b      	ldr	r3, [r1, #8]
 800c922:	f023 0303 	bic.w	r3, r3, #3
 800c926:	4313      	orrs	r3, r2
 800c928:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c92a:	f001 f891 	bl	800da50 <HAL_GetTick>
 800c92e:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c930:	6863      	ldr	r3, [r4, #4]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d10d      	bne.n	800c952 <HAL_RCC_ClockConfig+0x166>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c936:	4b38      	ldr	r3, [pc, #224]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f003 030c 	and.w	r3, r3, #12
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d024      	beq.n	800c98c <HAL_RCC_ClockConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c942:	f001 f885 	bl	800da50 <HAL_GetTick>
 800c946:	1b80      	subs	r0, r0, r6
 800c948:	f241 3388 	movw	r3, #5000	; 0x1388
 800c94c:	4298      	cmp	r0, r3
 800c94e:	d9f2      	bls.n	800c936 <HAL_RCC_ClockConfig+0x14a>
 800c950:	e057      	b.n	800ca02 <HAL_RCC_ClockConfig+0x216>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c952:	2b02      	cmp	r3, #2
 800c954:	d10d      	bne.n	800c972 <HAL_RCC_ClockConfig+0x186>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c956:	4b30      	ldr	r3, [pc, #192]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	f003 030c 	and.w	r3, r3, #12
 800c95e:	2b08      	cmp	r3, #8
 800c960:	d014      	beq.n	800c98c <HAL_RCC_ClockConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c962:	f001 f875 	bl	800da50 <HAL_GetTick>
 800c966:	1b80      	subs	r0, r0, r6
 800c968:	f241 3388 	movw	r3, #5000	; 0x1388
 800c96c:	4298      	cmp	r0, r3
 800c96e:	d9f2      	bls.n	800c956 <HAL_RCC_ClockConfig+0x16a>
 800c970:	e049      	b.n	800ca06 <HAL_RCC_ClockConfig+0x21a>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c972:	4b29      	ldr	r3, [pc, #164]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	f013 0f0c 	tst.w	r3, #12
 800c97a:	d007      	beq.n	800c98c <HAL_RCC_ClockConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c97c:	f001 f868 	bl	800da50 <HAL_GetTick>
 800c980:	1b80      	subs	r0, r0, r6
 800c982:	f241 3388 	movw	r3, #5000	; 0x1388
 800c986:	4298      	cmp	r0, r3
 800c988:	d9f3      	bls.n	800c972 <HAL_RCC_ClockConfig+0x186>
 800c98a:	e03e      	b.n	800ca0a <HAL_RCC_ClockConfig+0x21e>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c98c:	4a21      	ldr	r2, [pc, #132]	; (800ca14 <HAL_RCC_ClockConfig+0x228>)
 800c98e:	6813      	ldr	r3, [r2, #0]
 800c990:	f023 030f 	bic.w	r3, r3, #15
 800c994:	432b      	orrs	r3, r5
 800c996:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800c998:	6813      	ldr	r3, [r2, #0]
 800c99a:	f003 030f 	and.w	r3, r3, #15
 800c99e:	429d      	cmp	r5, r3
 800c9a0:	d135      	bne.n	800ca0e <HAL_RCC_ClockConfig+0x222>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	f013 0f04 	tst.w	r3, #4
 800c9a8:	d006      	beq.n	800c9b8 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c9aa:	491b      	ldr	r1, [pc, #108]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c9ac:	688b      	ldr	r3, [r1, #8]
 800c9ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c9b2:	68e3      	ldr	r3, [r4, #12]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	f013 0f08 	tst.w	r3, #8
 800c9be:	d007      	beq.n	800c9d0 <HAL_RCC_ClockConfig+0x1e4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c9c0:	4a15      	ldr	r2, [pc, #84]	; (800ca18 <HAL_RCC_ClockConfig+0x22c>)
 800c9c2:	6893      	ldr	r3, [r2, #8]
 800c9c4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c9c8:	6921      	ldr	r1, [r4, #16]
 800c9ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c9ce:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f001 f80f 	bl	800d9f4 <HAL_InitTick>
  
  return HAL_OK;
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 800c9da:	2001      	movs	r0, #1
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          return HAL_ERROR;
 800c9de:	2001      	movs	r0, #1
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          return HAL_ERROR;
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	bd70      	pop	{r4, r5, r6, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c9ea:	2003      	movs	r0, #3
 800c9ec:	bd70      	pop	{r4, r5, r6, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c9ee:	2003      	movs	r0, #3
 800c9f0:	bd70      	pop	{r4, r5, r6, pc}
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800c9f2:	2003      	movs	r0, #3
 800c9f4:	bd70      	pop	{r4, r5, r6, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          return HAL_ERROR;
 800c9f6:	2001      	movs	r0, #1
 800c9f8:	bd70      	pop	{r4, r5, r6, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          return HAL_ERROR;
 800c9fa:	2001      	movs	r0, #1
 800c9fc:	bd70      	pop	{r4, r5, r6, pc}
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
 800c9fe:	2001      	movs	r0, #1
 800ca00:	bd70      	pop	{r4, r5, r6, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800ca02:	2003      	movs	r0, #3
 800ca04:	bd70      	pop	{r4, r5, r6, pc}
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800ca06:	2003      	movs	r0, #3
 800ca08:	bd70      	pop	{r4, r5, r6, pc}
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800ca0a:	2003      	movs	r0, #3
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 800ca0e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
 800ca12:	bf00      	nop
 800ca14:	40023c00 	.word	0x40023c00
 800ca18:	40023800 	.word	0x40023800

0800ca1c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ca1c:	4b25      	ldr	r3, [pc, #148]	; (800cab4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	f003 030c 	and.w	r3, r3, #12
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	d03f      	beq.n	800caa8 <HAL_RCC_GetSysClockFreq+0x8c>
 800ca28:	2b08      	cmp	r3, #8
 800ca2a:	d001      	beq.n	800ca30 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ca2c:	4822      	ldr	r0, [pc, #136]	; (800cab8 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800ca2e:	4770      	bx	lr
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca30:	b410      	push	{r4}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ca32:	4b20      	ldr	r3, [pc, #128]	; (800cab4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ca34:	6858      	ldr	r0, [r3, #4]
 800ca36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800ca40:	d010      	beq.n	800ca64 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800ca42:	4b1e      	ldr	r3, [pc, #120]	; (800cabc <HAL_RCC_GetSysClockFreq+0xa0>)
 800ca44:	fbb3 f0f0 	udiv	r0, r3, r0
 800ca48:	4b1a      	ldr	r3, [pc, #104]	; (800cab4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800ca50:	400a      	ands	r2, r1
 800ca52:	fa91 f3a1 	rbit	r3, r1
 800ca56:	fab3 f383 	clz	r3, r3
 800ca5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca5e:	fb03 f300 	mul.w	r3, r3, r0
 800ca62:	e010      	b.n	800ca86 <HAL_RCC_GetSysClockFreq+0x6a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800ca64:	4b14      	ldr	r3, [pc, #80]	; (800cab8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ca66:	fbb3 f0f0 	udiv	r0, r3, r0
 800ca6a:	4b12      	ldr	r3, [pc, #72]	; (800cab4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 800ca72:	ea02 0104 	and.w	r1, r2, r4
 800ca76:	fa94 f2a4 	rbit	r2, r4
 800ca7a:	fab2 f282 	clz	r2, r2
 800ca7e:	fa21 f202 	lsr.w	r2, r1, r2
 800ca82:	fb02 f300 	mul.w	r3, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800ca86:	4a0b      	ldr	r2, [pc, #44]	; (800cab4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ca88:	6850      	ldr	r0, [r2, #4]
 800ca8a:	f400 3240 	and.w	r2, r0, #196608	; 0x30000
 800ca8e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800ca92:	fa90 f0a0 	rbit	r0, r0
 800ca96:	fab0 f080 	clz	r0, r0
 800ca9a:	fa22 f000 	lsr.w	r0, r2, r0
 800ca9e:	3001      	adds	r0, #1
 800caa0:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 800caa2:	fbb3 f0f0 	udiv	r0, r3, r0
      break;
 800caa6:	e001      	b.n	800caac <HAL_RCC_GetSysClockFreq+0x90>
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800caa8:	4804      	ldr	r0, [pc, #16]	; (800cabc <HAL_RCC_GetSysClockFreq+0xa0>)
 800caaa:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800caac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	40023800 	.word	0x40023800
 800cab8:	00f42400 	.word	0x00f42400
 800cabc:	007a1200 	.word	0x007a1200

0800cac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cac0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800cac2:	f7ff ffab 	bl	800ca1c <HAL_RCC_GetSysClockFreq>
 800cac6:	4b08      	ldr	r3, [pc, #32]	; (800cae8 <HAL_RCC_GetHCLKFreq+0x28>)
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cace:	23f0      	movs	r3, #240	; 0xf0
 800cad0:	fa93 f3a3 	rbit	r3, r3
 800cad4:	fab3 f383 	clz	r3, r3
 800cad8:	fa22 f303 	lsr.w	r3, r2, r3
 800cadc:	4a03      	ldr	r2, [pc, #12]	; (800caec <HAL_RCC_GetHCLKFreq+0x2c>)
 800cade:	5cd3      	ldrb	r3, [r2, r3]
 800cae0:	40d8      	lsrs	r0, r3
 800cae2:	4b03      	ldr	r3, [pc, #12]	; (800caf0 <HAL_RCC_GetHCLKFreq+0x30>)
 800cae4:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800cae6:	bd08      	pop	{r3, pc}
 800cae8:	40023800 	.word	0x40023800
 800caec:	0801ac34 	.word	0x0801ac34
 800caf0:	20000004 	.word	0x20000004

0800caf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 800caf4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800caf6:	f7ff ffe3 	bl	800cac0 <HAL_RCC_GetHCLKFreq>
 800cafa:	4b08      	ldr	r3, [pc, #32]	; (800cb1c <HAL_RCC_GetPCLK1Freq+0x28>)
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cb02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800cb06:	fa93 f3a3 	rbit	r3, r3
 800cb0a:	fab3 f383 	clz	r3, r3
 800cb0e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb12:	4a03      	ldr	r2, [pc, #12]	; (800cb20 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800cb14:	5cd3      	ldrb	r3, [r2, r3]
}
 800cb16:	40d8      	lsrs	r0, r3
 800cb18:	bd08      	pop	{r3, pc}
 800cb1a:	bf00      	nop
 800cb1c:	40023800 	.word	0x40023800
 800cb20:	0801ac34 	.word	0x0801ac34

0800cb24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb24:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800cb26:	f7ff ffcb 	bl	800cac0 <HAL_RCC_GetHCLKFreq>
 800cb2a:	4b08      	ldr	r3, [pc, #32]	; (800cb4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 800cb32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800cb36:	fa93 f3a3 	rbit	r3, r3
 800cb3a:	fab3 f383 	clz	r3, r3
 800cb3e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb42:	4a03      	ldr	r2, [pc, #12]	; (800cb50 <HAL_RCC_GetPCLK2Freq+0x2c>)
 800cb44:	5cd3      	ldrb	r3, [r2, r3]
} 
 800cb46:	40d8      	lsrs	r0, r3
 800cb48:	bd08      	pop	{r3, pc}
 800cb4a:	bf00      	nop
 800cb4c:	40023800 	.word	0x40023800
 800cb50:	0801ac34 	.word	0x0801ac34

0800cb54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800cb54:	b510      	push	{r4, lr}
 800cb56:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800cb58:	2300      	movs	r3, #0
 800cb5a:	9301      	str	r3, [sp, #4]
 800cb5c:	4b1b      	ldr	r3, [pc, #108]	; (800cbcc <HAL_PWREx_EnableOverDrive+0x78>)
 800cb5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800cb64:	641a      	str	r2, [r3, #64]	; 0x40
 800cb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cb70:	4a17      	ldr	r2, [pc, #92]	; (800cbd0 <HAL_PWREx_EnableOverDrive+0x7c>)
 800cb72:	6813      	ldr	r3, [r2, #0]
 800cb74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb7a:	f000 ff69 	bl	800da50 <HAL_GetTick>
 800cb7e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cb80:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <HAL_PWREx_EnableOverDrive+0x7c>)
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800cb88:	d106      	bne.n	800cb98 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cb8a:	f000 ff61 	bl	800da50 <HAL_GetTick>
 800cb8e:	1b00      	subs	r0, r0, r4
 800cb90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cb94:	d9f4      	bls.n	800cb80 <HAL_PWREx_EnableOverDrive+0x2c>
 800cb96:	e014      	b.n	800cbc2 <HAL_PWREx_EnableOverDrive+0x6e>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800cb98:	4a0d      	ldr	r2, [pc, #52]	; (800cbd0 <HAL_PWREx_EnableOverDrive+0x7c>)
 800cb9a:	6813      	ldr	r3, [r2, #0]
 800cb9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cba0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cba2:	f000 ff55 	bl	800da50 <HAL_GetTick>
 800cba6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cba8:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <HAL_PWREx_EnableOverDrive+0x7c>)
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800cbb0:	d109      	bne.n	800cbc6 <HAL_PWREx_EnableOverDrive+0x72>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cbb2:	f000 ff4d 	bl	800da50 <HAL_GetTick>
 800cbb6:	1b00      	subs	r0, r0, r4
 800cbb8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cbbc:	d9f4      	bls.n	800cba8 <HAL_PWREx_EnableOverDrive+0x54>
    {
      return HAL_TIMEOUT;
 800cbbe:	2003      	movs	r0, #3
 800cbc0:	e002      	b.n	800cbc8 <HAL_PWREx_EnableOverDrive+0x74>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
 800cbc2:	2003      	movs	r0, #3
 800cbc4:	e000      	b.n	800cbc8 <HAL_PWREx_EnableOverDrive+0x74>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800cbc6:	2000      	movs	r0, #0
}
 800cbc8:	b002      	add	sp, #8
 800cbca:	bd10      	pop	{r4, pc}
 800cbcc:	40023800 	.word	0x40023800
 800cbd0:	40007000 	.word	0x40007000

0800cbd4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 800cbd4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800cbd8:	b2db      	uxtb	r3, r3
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d015      	beq.n	800cc0a <HAL_I2CEx_ConfigAnalogFilter+0x36>
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 800cbde:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b12      	cmp	r3, #18
 800cbe6:	d012      	beq.n	800cc0e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800cbe8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	2b22      	cmp	r3, #34	; 0x22
 800cbf0:	d00f      	beq.n	800cc12 <HAL_I2CEx_ConfigAnalogFilter+0x3e>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 800cbf2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b32      	cmp	r3, #50	; 0x32
 800cbfa:	d00c      	beq.n	800cc16 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 800cbfc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b42      	cmp	r3, #66	; 0x42
 800cc04:	d109      	bne.n	800cc1a <HAL_I2CEx_ConfigAnalogFilter+0x46>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e008      	b.n	800cc1c <HAL_I2CEx_ConfigAnalogFilter+0x48>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e006      	b.n	800cc1c <HAL_I2CEx_ConfigAnalogFilter+0x48>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e004      	b.n	800cc1c <HAL_I2CEx_ConfigAnalogFilter+0x48>
 800cc12:	2301      	movs	r3, #1
 800cc14:	e002      	b.n	800cc1c <HAL_I2CEx_ConfigAnalogFilter+0x48>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e000      	b.n	800cc1c <HAL_I2CEx_ConfigAnalogFilter+0x48>
 800cc1a:	2300      	movs	r3, #0
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 800cc1c:	bb1b      	cbnz	r3, 800cc66 <HAL_I2CEx_ConfigAnalogFilter+0x92>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 800cc1e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d021      	beq.n	800cc6a <HAL_I2CEx_ConfigAnalogFilter+0x96>
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter : new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cc26:	b410      	push	{r4}
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 800cc28:	2201      	movs	r2, #1
 800cc2a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cc2e:	2302      	movs	r3, #2
 800cc30:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);    
 800cc34:	6804      	ldr	r4, [r0, #0]
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	f023 0301 	bic.w	r3, r3, #1
 800cc3c:	6023      	str	r3, [r4, #0]
  
  /* Reset I2Cx ANOFF bit */
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 800cc3e:	6804      	ldr	r4, [r0, #0]
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc46:	6023      	str	r3, [r4, #0]
  
  /* Set analog filter bit*/
  hi2c->Instance->CR1 |= AnalogFilter;
 800cc48:	6803      	ldr	r3, [r0, #0]
 800cc4a:	681c      	ldr	r4, [r3, #0]
 800cc4c:	4321      	orrs	r1, r4
 800cc4e:	6019      	str	r1, [r3, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 800cc50:	6801      	ldr	r1, [r0, #0]
 800cc52:	680b      	ldr	r3, [r1, #0]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	600b      	str	r3, [r1, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 800cc58:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  return HAL_OK; 
 800cc62:	4618      	mov	r0, r3
 800cc64:	e003      	b.n	800cc6e <HAL_I2CEx_ConfigAnalogFilter+0x9a>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
  {
    return HAL_BUSY;
 800cc66:	2002      	movs	r0, #2
 800cc68:	4770      	bx	lr
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 800cc6a:	2002      	movs	r0, #2
 800cc6c:	4770      	bx	lr
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);

  return HAL_OK; 
}
 800cc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d04f      	beq.n	800cd18 <HAL_I2C_Init+0xa4>
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 800cc78:	b510      	push	{r4, lr}
 800cc7a:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800cc7c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800cc80:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc84:	d104      	bne.n	800cc90 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cc86:	2300      	movs	r3, #0
 800cc88:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cc8c:	f006 f9f4 	bl	8013078 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cc90:	2302      	movs	r3, #2
 800cc92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cc96:	6822      	ldr	r2, [r4, #0]
 800cc98:	6813      	ldr	r3, [r2, #0]
 800cc9a:	f023 0301 	bic.w	r3, r3, #1
 800cc9e:	6013      	str	r3, [r2, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cca0:	6822      	ldr	r2, [r4, #0]
 800cca2:	6863      	ldr	r3, [r4, #4]
 800cca4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800cca8:	6113      	str	r3, [r2, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ccaa:	6822      	ldr	r2, [r4, #0]
 800ccac:	6893      	ldr	r3, [r2, #8]
 800ccae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ccb2:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800ccb4:	68a3      	ldr	r3, [r4, #8]
 800ccb6:	b15b      	cbz	r3, 800ccd0 <HAL_I2C_Init+0x5c>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ccb8:	68e2      	ldr	r2, [r4, #12]
 800ccba:	2a01      	cmp	r2, #1
 800ccbc:	d104      	bne.n	800ccc8 <HAL_I2C_Init+0x54>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ccbe:	6822      	ldr	r2, [r4, #0]
 800ccc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccc4:	6093      	str	r3, [r2, #8]
 800ccc6:	e003      	b.n	800ccd0 <HAL_I2C_Init+0x5c>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ccc8:	6822      	ldr	r2, [r4, #0]
 800ccca:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800ccce:	6093      	str	r3, [r2, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ccd0:	68e3      	ldr	r3, [r4, #12]
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d103      	bne.n	800ccde <HAL_I2C_Init+0x6a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	6851      	ldr	r1, [r2, #4]
 800cce2:	4b0e      	ldr	r3, [pc, #56]	; (800cd1c <HAL_I2C_Init+0xa8>)
 800cce4:	430b      	orrs	r3, r1
 800cce6:	6053      	str	r3, [r2, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800cce8:	6822      	ldr	r2, [r4, #0]
 800ccea:	6921      	ldr	r1, [r4, #16]
 800ccec:	6963      	ldr	r3, [r4, #20]
 800ccee:	430b      	orrs	r3, r1
 800ccf0:	69a1      	ldr	r1, [r4, #24]
 800ccf2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ccf6:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ccf8:	6822      	ldr	r2, [r4, #0]
 800ccfa:	69e1      	ldr	r1, [r4, #28]
 800ccfc:	6a23      	ldr	r3, [r4, #32]
 800ccfe:	430b      	orrs	r3, r1
 800cd00:	6013      	str	r3, [r2, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cd02:	6822      	ldr	r2, [r4, #0]
 800cd04:	6813      	ldr	r3, [r2, #0]
 800cd06:	f043 0301 	orr.w	r3, r3, #1
 800cd0a:	6013      	str	r3, [r2, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 800cd10:	2301      	movs	r3, #1
 800cd12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 800cd16:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 800cd18:	2001      	movs	r0, #1
 800cd1a:	4770      	bx	lr
 800cd1c:	02008000 	.word	0x02008000

0800cd20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd22:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cd24:	2500      	movs	r5, #0
 800cd26:	2d0f      	cmp	r5, #15
 800cd28:	f200 80e6 	bhi.w	800cef8 <HAL_GPIO_Init+0x1d8>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	40ab      	lsls	r3, r5
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cd30:	680a      	ldr	r2, [r1, #0]
 800cd32:	ea03 0602 	and.w	r6, r3, r2

    if(iocurrent == ioposition)
 800cd36:	42b3      	cmp	r3, r6
 800cd38:	f040 80dc 	bne.w	800cef4 <HAL_GPIO_Init+0x1d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cd3c:	684a      	ldr	r2, [r1, #4]
 800cd3e:	2a12      	cmp	r2, #18
 800cd40:	bf14      	ite	ne
 800cd42:	2400      	movne	r4, #0
 800cd44:	2401      	moveq	r4, #1
 800cd46:	2a02      	cmp	r2, #2
 800cd48:	d000      	beq.n	800cd4c <HAL_GPIO_Init+0x2c>
 800cd4a:	b184      	cbz	r4, 800cd6e <HAL_GPIO_Init+0x4e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800cd4c:	08ec      	lsrs	r4, r5, #3
 800cd4e:	3408      	adds	r4, #8
 800cd50:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800cd54:	f005 0207 	and.w	r2, r5, #7
 800cd58:	0097      	lsls	r7, r2, #2
 800cd5a:	220f      	movs	r2, #15
 800cd5c:	40ba      	lsls	r2, r7
 800cd5e:	ea2c 0e02 	bic.w	lr, ip, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800cd62:	690a      	ldr	r2, [r1, #16]
 800cd64:	40ba      	lsls	r2, r7
 800cd66:	ea4e 0202 	orr.w	r2, lr, r2
        GPIOx->AFR[position >> 3] = temp;
 800cd6a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cd6e:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800cd70:	006f      	lsls	r7, r5, #1
 800cd72:	2403      	movs	r4, #3
 800cd74:	40bc      	lsls	r4, r7
 800cd76:	43e4      	mvns	r4, r4
 800cd78:	ea02 0e04 	and.w	lr, r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800cd7c:	684a      	ldr	r2, [r1, #4]
 800cd7e:	f002 0203 	and.w	r2, r2, #3
 800cd82:	40ba      	lsls	r2, r7
 800cd84:	ea4e 0202 	orr.w	r2, lr, r2
      GPIOx->MODER = temp;
 800cd88:	6002      	str	r2, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cd8a:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800cd8e:	f10e 32ff 	add.w	r2, lr, #4294967295
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cd92:	f1be 0f11 	cmp.w	lr, #17
 800cd96:	bf18      	it	ne
 800cd98:	2a01      	cmpne	r2, #1
 800cd9a:	bf94      	ite	ls
 800cd9c:	2201      	movls	r2, #1
 800cd9e:	2200      	movhi	r2, #0
 800cda0:	d903      	bls.n	800cdaa <HAL_GPIO_Init+0x8a>
 800cda2:	f1be 0f12 	cmp.w	lr, #18
 800cda6:	d100      	bne.n	800cdaa <HAL_GPIO_Init+0x8a>
 800cda8:	2201      	movs	r2, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cdaa:	b182      	cbz	r2, 800cdce <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cdac:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800cdae:	ea04 0e02 	and.w	lr, r4, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 800cdb2:	68ca      	ldr	r2, [r1, #12]
 800cdb4:	40ba      	lsls	r2, r7
 800cdb6:	ea4e 0202 	orr.w	r2, lr, r2
        GPIOx->OSPEEDR = temp;
 800cdba:	6082      	str	r2, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cdbc:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cdbe:	ea22 0303 	bic.w	r3, r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800cdc2:	684a      	ldr	r2, [r1, #4]
 800cdc4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800cdc8:	40aa      	lsls	r2, r5
 800cdca:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 800cdcc:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cdce:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800cdd0:	401c      	ands	r4, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800cdd2:	688b      	ldr	r3, [r1, #8]
 800cdd4:	40bb      	lsls	r3, r7
 800cdd6:	4323      	orrs	r3, r4
      GPIOx->PUPDR = temp;
 800cdd8:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cdda:	684b      	ldr	r3, [r1, #4]
 800cddc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800cde0:	f000 8088 	beq.w	800cef4 <HAL_GPIO_Init+0x1d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cde4:	2300      	movs	r3, #0
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	4b44      	ldr	r3, [pc, #272]	; (800cefc <HAL_GPIO_Init+0x1dc>)
 800cdea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cdf0:	645a      	str	r2, [r3, #68]	; 0x44
 800cdf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 800cdfc:	08ac      	lsrs	r4, r5, #2
 800cdfe:	1ca2      	adds	r2, r4, #2
 800ce00:	4b3f      	ldr	r3, [pc, #252]	; (800cf00 <HAL_GPIO_Init+0x1e0>)
 800ce02:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ce06:	f005 0303 	and.w	r3, r5, #3
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	220f      	movs	r2, #15
 800ce0e:	409a      	lsls	r2, r3
 800ce10:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ce14:	4a3b      	ldr	r2, [pc, #236]	; (800cf04 <HAL_GPIO_Init+0x1e4>)
 800ce16:	4290      	cmp	r0, r2
 800ce18:	d025      	beq.n	800ce66 <HAL_GPIO_Init+0x146>
 800ce1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce1e:	4290      	cmp	r0, r2
 800ce20:	d023      	beq.n	800ce6a <HAL_GPIO_Init+0x14a>
 800ce22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce26:	4290      	cmp	r0, r2
 800ce28:	d021      	beq.n	800ce6e <HAL_GPIO_Init+0x14e>
 800ce2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce2e:	4290      	cmp	r0, r2
 800ce30:	d01f      	beq.n	800ce72 <HAL_GPIO_Init+0x152>
 800ce32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce36:	4290      	cmp	r0, r2
 800ce38:	d01d      	beq.n	800ce76 <HAL_GPIO_Init+0x156>
 800ce3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce3e:	4290      	cmp	r0, r2
 800ce40:	d01b      	beq.n	800ce7a <HAL_GPIO_Init+0x15a>
 800ce42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce46:	4290      	cmp	r0, r2
 800ce48:	d019      	beq.n	800ce7e <HAL_GPIO_Init+0x15e>
 800ce4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce4e:	4290      	cmp	r0, r2
 800ce50:	d017      	beq.n	800ce82 <HAL_GPIO_Init+0x162>
 800ce52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce56:	4290      	cmp	r0, r2
 800ce58:	d015      	beq.n	800ce86 <HAL_GPIO_Init+0x166>
 800ce5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce5e:	4290      	cmp	r0, r2
 800ce60:	d113      	bne.n	800ce8a <HAL_GPIO_Init+0x16a>
 800ce62:	2209      	movs	r2, #9
 800ce64:	e012      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce66:	2200      	movs	r2, #0
 800ce68:	e010      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	e00e      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce6e:	2202      	movs	r2, #2
 800ce70:	e00c      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce72:	2203      	movs	r2, #3
 800ce74:	e00a      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce76:	2204      	movs	r2, #4
 800ce78:	e008      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce7a:	2205      	movs	r2, #5
 800ce7c:	e006      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce7e:	2206      	movs	r2, #6
 800ce80:	e004      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce82:	2207      	movs	r2, #7
 800ce84:	e002      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce86:	2208      	movs	r2, #8
 800ce88:	e000      	b.n	800ce8c <HAL_GPIO_Init+0x16c>
 800ce8a:	220a      	movs	r2, #10
 800ce8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ce90:	433b      	orrs	r3, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800ce92:	3402      	adds	r4, #2
 800ce94:	4a1a      	ldr	r2, [pc, #104]	; (800cf00 <HAL_GPIO_Init+0x1e0>)
 800ce96:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ce9a:	4b1b      	ldr	r3, [pc, #108]	; (800cf08 <HAL_GPIO_Init+0x1e8>)
 800ce9c:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 800ce9e:	43f3      	mvns	r3, r6
 800cea0:	ea02 0403 	and.w	r4, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cea4:	684f      	ldr	r7, [r1, #4]
 800cea6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800ceaa:	d001      	beq.n	800ceb0 <HAL_GPIO_Init+0x190>
        {
          temp |= iocurrent;
 800ceac:	ea46 0402 	orr.w	r4, r6, r2
        }
        EXTI->IMR = temp;
 800ceb0:	4a15      	ldr	r2, [pc, #84]	; (800cf08 <HAL_GPIO_Init+0x1e8>)
 800ceb2:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 800ceb4:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800ceb6:	ea03 0402 	and.w	r4, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ceba:	684f      	ldr	r7, [r1, #4]
 800cebc:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800cec0:	d001      	beq.n	800cec6 <HAL_GPIO_Init+0x1a6>
        {
          temp |= iocurrent;
 800cec2:	ea46 0402 	orr.w	r4, r6, r2
        }
        EXTI->EMR = temp;
 800cec6:	4a10      	ldr	r2, [pc, #64]	; (800cf08 <HAL_GPIO_Init+0x1e8>)
 800cec8:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ceca:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800cecc:	ea03 0402 	and.w	r4, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ced0:	684f      	ldr	r7, [r1, #4]
 800ced2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800ced6:	d001      	beq.n	800cedc <HAL_GPIO_Init+0x1bc>
        {
          temp |= iocurrent;
 800ced8:	ea46 0402 	orr.w	r4, r6, r2
        }
        EXTI->RTSR = temp;
 800cedc:	4a0a      	ldr	r2, [pc, #40]	; (800cf08 <HAL_GPIO_Init+0x1e8>)
 800cede:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800cee0:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800cee2:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cee4:	684c      	ldr	r4, [r1, #4]
 800cee6:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 800ceea:	d001      	beq.n	800cef0 <HAL_GPIO_Init+0x1d0>
        {
          temp |= iocurrent;
 800ceec:	ea46 0302 	orr.w	r3, r6, r2
        }
        EXTI->FTSR = temp;
 800cef0:	4a05      	ldr	r2, [pc, #20]	; (800cf08 <HAL_GPIO_Init+0x1e8>)
 800cef2:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800cef4:	3501      	adds	r5, #1
 800cef6:	e716      	b.n	800cd26 <HAL_GPIO_Init+0x6>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800cef8:	b003      	add	sp, #12
 800cefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cefc:	40023800 	.word	0x40023800
 800cf00:	40013800 	.word	0x40013800
 800cf04:	40020000 	.word	0x40020000
 800cf08:	40013c00 	.word	0x40013c00

0800cf0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cf0c:	b10a      	cbz	r2, 800cf12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cf0e:	6181      	str	r1, [r0, #24]
 800cf10:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800cf12:	0409      	lsls	r1, r1, #16
 800cf14:	6181      	str	r1, [r0, #24]
 800cf16:	4770      	bx	lr

0800cf18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cf18:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800cf1a:	4b04      	ldr	r3, [pc, #16]	; (800cf2c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	4203      	tst	r3, r0
 800cf20:	d003      	beq.n	800cf2a <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cf22:	4b02      	ldr	r3, [pc, #8]	; (800cf2c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800cf24:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cf26:	f000 fe5d 	bl	800dbe4 <HAL_GPIO_EXTI_Callback>
 800cf2a:	bd08      	pop	{r3, pc}
 800cf2c:	40013c00 	.word	0x40013c00

0800cf30 <_ZL15FLASH_MassEraseh>:
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800cf30:	4b08      	ldr	r3, [pc, #32]	; (800cf54 <_ZL15FLASH_MassEraseh+0x24>)
 800cf32:	691a      	ldr	r2, [r3, #16]
 800cf34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800cf38:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800cf3a:	691a      	ldr	r2, [r3, #16]
 800cf3c:	f042 0204 	orr.w	r2, r2, #4
 800cf40:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | (VoltageRange <<8);
 800cf42:	691a      	ldr	r2, [r3, #16]
 800cf44:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800cf48:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800cf4c:	6118      	str	r0, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	4770      	bx	lr
 800cf54:	40023c00 	.word	0x40023c00

0800cf58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800cf58:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800cf5a:	b131      	cbz	r1, 800cf6a <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800cf5c:	2901      	cmp	r1, #1
 800cf5e:	d006      	beq.n	800cf6e <FLASH_Erase_Sector+0x16>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800cf60:	2902      	cmp	r1, #2
 800cf62:	d107      	bne.n	800cf74 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800cf64:	f44f 7400 	mov.w	r4, #512	; 0x200
 800cf68:	e006      	b.n	800cf78 <FLASH_Erase_Sector+0x20>
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	e004      	b.n	800cf78 <FLASH_Erase_Sector+0x20>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800cf6e:	f44f 7480 	mov.w	r4, #256	; 0x100
 800cf72:	e001      	b.n	800cf78 <FLASH_Erase_Sector+0x20>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800cf74:	f44f 7440 	mov.w	r4, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800cf78:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <FLASH_Erase_Sector+0x60>)
 800cf7a:	6919      	ldr	r1, [r3, #16]
 800cf7c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800cf80:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 800cf82:	691a      	ldr	r2, [r3, #16]
 800cf84:	4322      	orrs	r2, r4
 800cf86:	611a      	str	r2, [r3, #16]
  FLASH->CR &= SECTOR_MASK;
 800cf88:	691a      	ldr	r2, [r3, #16]
 800cf8a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800cf8e:	611a      	str	r2, [r3, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf90:	2278      	movs	r2, #120	; 0x78
 800cf92:	fa92 f2a2 	rbit	r2, r2
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 800cf96:	fab2 f282 	clz	r2, r2
 800cf9a:	4090      	lsls	r0, r2
 800cf9c:	691a      	ldr	r2, [r3, #16]
 800cf9e:	f040 0002 	orr.w	r0, r0, #2
 800cfa2:	4310      	orrs	r0, r2
 800cfa4:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800cfa6:	691a      	ldr	r2, [r3, #16]
 800cfa8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cfac:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cfae:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800cfb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	40023c00 	.word	0x40023c00

0800cfbc <HAL_FLASHEx_Erase>:
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cfbc:	4b24      	ldr	r3, [pc, #144]	; (800d050 <HAL_FLASHEx_Erase+0x94>)
 800cfbe:	7d1b      	ldrb	r3, [r3, #20]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d042      	beq.n	800d04a <HAL_FLASHEx_Erase+0x8e>
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	460e      	mov	r6, r1
 800cfc8:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cfca:	2201      	movs	r2, #1
 800cfcc:	4b20      	ldr	r3, [pc, #128]	; (800d050 <HAL_FLASHEx_Erase+0x94>)
 800cfce:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cfd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cfd4:	f000 f8e6 	bl	800d1a4 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800cfd8:	4602      	mov	r2, r0
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d130      	bne.n	800d040 <HAL_FLASHEx_Erase+0x84>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFF;
 800cfde:	f04f 33ff 	mov.w	r3, #4294967295
 800cfe2:	6033      	str	r3, [r6, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d10d      	bne.n	800d006 <HAL_FLASHEx_Erase+0x4a>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);
 800cfea:	7b20      	ldrb	r0, [r4, #12]
 800cfec:	f7ff ffa0 	bl	800cf30 <_ZL15FLASH_MassEraseh>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cff0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cff4:	f000 f8d6 	bl	800d1a4 <FLASH_WaitForLastOperation>
 800cff8:	4602      	mov	r2, r0
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800cffa:	4916      	ldr	r1, [pc, #88]	; (800d054 <HAL_FLASHEx_Erase+0x98>)
 800cffc:	690b      	ldr	r3, [r1, #16]
 800cffe:	f023 0304 	bic.w	r3, r3, #4
 800d002:	610b      	str	r3, [r1, #16]
 800d004:	e01c      	b.n	800d040 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800d006:	6865      	ldr	r5, [r4, #4]
 800d008:	68a1      	ldr	r1, [r4, #8]
 800d00a:	6863      	ldr	r3, [r4, #4]
 800d00c:	440b      	add	r3, r1
 800d00e:	429d      	cmp	r5, r3
 800d010:	d216      	bcs.n	800d040 <HAL_FLASHEx_Erase+0x84>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800d012:	7b21      	ldrb	r1, [r4, #12]
 800d014:	4628      	mov	r0, r5
 800d016:	f7ff ff9f 	bl	800cf58 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d01a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d01e:	f000 f8c1 	bl	800d1a4 <FLASH_WaitForLastOperation>
        
        /* If the erase operation is completed, disable the SER Bit */
        FLASH->CR &= (~FLASH_CR_SER);
 800d022:	4b0c      	ldr	r3, [pc, #48]	; (800d054 <HAL_FLASHEx_Erase+0x98>)
 800d024:	691a      	ldr	r2, [r3, #16]
 800d026:	f022 0202 	bic.w	r2, r2, #2
 800d02a:	611a      	str	r2, [r3, #16]
        FLASH->CR &= SECTOR_MASK; 
 800d02c:	691a      	ldr	r2, [r3, #16]
 800d02e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800d032:	611a      	str	r2, [r3, #16]

        if(status != HAL_OK) 
 800d034:	4602      	mov	r2, r0
 800d036:	b108      	cbz	r0, 800d03c <HAL_FLASHEx_Erase+0x80>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800d038:	6035      	str	r5, [r6, #0]
          break;
 800d03a:	e001      	b.n	800d040 <HAL_FLASHEx_Erase+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800d03c:	3501      	adds	r5, #1
 800d03e:	e7e3      	b.n	800d008 <HAL_FLASHEx_Erase+0x4c>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d040:	2100      	movs	r1, #0
 800d042:	4b03      	ldr	r3, [pc, #12]	; (800d050 <HAL_FLASHEx_Erase+0x94>)
 800d044:	7519      	strb	r1, [r3, #20]

  return status;
 800d046:	4610      	mov	r0, r2
 800d048:	bd70      	pop	{r4, r5, r6, pc}
{
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t index = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d04a:	2002      	movs	r0, #2
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	20000ad0 	.word	0x20000ad0
 800d054:	40023c00 	.word	0x40023c00

0800d058 <_ZL24FLASH_Program_DoubleWordmy>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d058:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d05a:	490a      	ldr	r1, [pc, #40]	; (800d084 <_ZL24FLASH_Program_DoubleWordmy+0x2c>)
 800d05c:	690c      	ldr	r4, [r1, #16]
 800d05e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800d062:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800d064:	690c      	ldr	r4, [r1, #16]
 800d066:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800d06a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d06c:	690c      	ldr	r4, [r1, #16]
 800d06e:	f044 0401 	orr.w	r4, r4, #1
 800d072:	610c      	str	r4, [r1, #16]
  
  *(__IO uint64_t*)Address = Data;
 800d074:	e9c0 2300 	strd	r2, r3, [r0]
 800d078:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800d07c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	40023c00 	.word	0x40023c00

0800d088 <_ZL18FLASH_Program_Wordmm>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d088:	4b08      	ldr	r3, [pc, #32]	; (800d0ac <_ZL18FLASH_Program_Wordmm+0x24>)
 800d08a:	691a      	ldr	r2, [r3, #16]
 800d08c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d090:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800d092:	691a      	ldr	r2, [r3, #16]
 800d094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d098:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d09a:	691a      	ldr	r2, [r3, #16]
 800d09c:	f042 0201 	orr.w	r2, r2, #1
 800d0a0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800d0a2:	6001      	str	r1, [r0, #0]
 800d0a4:	f3bf 8f4f 	dsb	sy
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	40023c00 	.word	0x40023c00

0800d0b0 <_ZL22FLASH_Program_HalfWordmt>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d0b0:	4b08      	ldr	r3, [pc, #32]	; (800d0d4 <_ZL22FLASH_Program_HalfWordmt+0x24>)
 800d0b2:	691a      	ldr	r2, [r3, #16]
 800d0b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d0b8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800d0ba:	691a      	ldr	r2, [r3, #16]
 800d0bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0c0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d0c2:	691a      	ldr	r2, [r3, #16]
 800d0c4:	f042 0201 	orr.w	r2, r2, #1
 800d0c8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800d0ca:	8001      	strh	r1, [r0, #0]
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	40023c00 	.word	0x40023c00

0800d0d8 <_ZL18FLASH_Program_Bytemh>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800d0d8:	4b07      	ldr	r3, [pc, #28]	; (800d0f8 <_ZL18FLASH_Program_Bytemh+0x20>)
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d0e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800d0e2:	691a      	ldr	r2, [r3, #16]
 800d0e4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d0e6:	691a      	ldr	r2, [r3, #16]
 800d0e8:	f042 0201 	orr.w	r2, r2, #1
 800d0ec:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800d0ee:	7001      	strb	r1, [r0, #0]
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	40023c00 	.word	0x40023c00

0800d0fc <_ZL18FLASH_SetErrorCodev>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800d0fc:	4b19      	ldr	r3, [pc, #100]	; (800d164 <_ZL18FLASH_SetErrorCodev+0x68>)
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	f013 0f10 	tst.w	r3, #16
 800d104:	d004      	beq.n	800d110 <_ZL18FLASH_SetErrorCodev+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d106:	4a18      	ldr	r2, [pc, #96]	; (800d168 <_ZL18FLASH_SetErrorCodev+0x6c>)
 800d108:	6993      	ldr	r3, [r2, #24]
 800d10a:	f043 0310 	orr.w	r3, r3, #16
 800d10e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800d110:	4b14      	ldr	r3, [pc, #80]	; (800d164 <_ZL18FLASH_SetErrorCodev+0x68>)
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	f013 0f20 	tst.w	r3, #32
 800d118:	d004      	beq.n	800d124 <_ZL18FLASH_SetErrorCodev+0x28>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d11a:	4a13      	ldr	r2, [pc, #76]	; (800d168 <_ZL18FLASH_SetErrorCodev+0x6c>)
 800d11c:	6993      	ldr	r3, [r2, #24]
 800d11e:	f043 0308 	orr.w	r3, r3, #8
 800d122:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800d124:	4b0f      	ldr	r3, [pc, #60]	; (800d164 <_ZL18FLASH_SetErrorCodev+0x68>)
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d12c:	d004      	beq.n	800d138 <_ZL18FLASH_SetErrorCodev+0x3c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800d12e:	4a0e      	ldr	r2, [pc, #56]	; (800d168 <_ZL18FLASH_SetErrorCodev+0x6c>)
 800d130:	6993      	ldr	r3, [r2, #24]
 800d132:	f043 0304 	orr.w	r3, r3, #4
 800d136:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800d138:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <_ZL18FLASH_SetErrorCodev+0x68>)
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d140:	d004      	beq.n	800d14c <_ZL18FLASH_SetErrorCodev+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800d142:	4a09      	ldr	r2, [pc, #36]	; (800d168 <_ZL18FLASH_SetErrorCodev+0x6c>)
 800d144:	6993      	ldr	r3, [r2, #24]
 800d146:	f043 0302 	orr.w	r3, r3, #2
 800d14a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800d14c:	4b05      	ldr	r3, [pc, #20]	; (800d164 <_ZL18FLASH_SetErrorCodev+0x68>)
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	f013 0f02 	tst.w	r3, #2
 800d154:	d004      	beq.n	800d160 <_ZL18FLASH_SetErrorCodev+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800d156:	4a04      	ldr	r2, [pc, #16]	; (800d168 <_ZL18FLASH_SetErrorCodev+0x6c>)
 800d158:	6993      	ldr	r3, [r2, #24]
 800d15a:	f043 0320 	orr.w	r3, r3, #32
 800d15e:	6193      	str	r3, [r2, #24]
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	40023c00 	.word	0x40023c00
 800d168:	20000ad0 	.word	0x20000ad0

0800d16c <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800d16c:	4b06      	ldr	r3, [pc, #24]	; (800d188 <HAL_FLASH_Unlock+0x1c>)
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	da07      	bge.n	800d184 <HAL_FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800d174:	4b04      	ldr	r3, [pc, #16]	; (800d188 <HAL_FLASH_Unlock+0x1c>)
 800d176:	4a05      	ldr	r2, [pc, #20]	; (800d18c <HAL_FLASH_Unlock+0x20>)
 800d178:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800d17a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800d17e:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK; 
 800d180:	2000      	movs	r0, #0
 800d182:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
    FLASH->KEYR = FLASH_KEY2;
  }
  else
  {
    return HAL_ERROR;
 800d184:	2001      	movs	r0, #1
  }
  
  return HAL_OK; 
}
 800d186:	4770      	bx	lr
 800d188:	40023c00 	.word	0x40023c00
 800d18c:	45670123 	.word	0x45670123

0800d190 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800d190:	4a03      	ldr	r2, [pc, #12]	; (800d1a0 <HAL_FLASH_Lock+0x10>)
 800d192:	6913      	ldr	r3, [r2, #16]
 800d194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d198:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
}
 800d19a:	2000      	movs	r0, #0
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	40023c00 	.word	0x40023c00

0800d1a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <FLASH_WaitForLastOperation+0x58>)
 800d1ac:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800d1ae:	f000 fc4f 	bl	800da50 <HAL_GetTick>
 800d1b2:	4605      	mov	r5, r0

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800d1b4:	4b12      	ldr	r3, [pc, #72]	; (800d200 <FLASH_WaitForLastOperation+0x5c>)
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800d1bc:	d010      	beq.n	800d1e0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800d1be:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d1c2:	d0f7      	beq.n	800d1b4 <FLASH_WaitForLastOperation+0x10>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800d1c4:	b134      	cbz	r4, 800d1d4 <FLASH_WaitForLastOperation+0x30>
 800d1c6:	f000 fc43 	bl	800da50 <HAL_GetTick>
 800d1ca:	1b40      	subs	r0, r0, r5
 800d1cc:	4284      	cmp	r4, r0
 800d1ce:	d303      	bcc.n	800d1d8 <FLASH_WaitForLastOperation+0x34>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e002      	b.n	800d1da <FLASH_WaitForLastOperation+0x36>
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e000      	b.n	800d1da <FLASH_WaitForLastOperation+0x36>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d0ea      	beq.n	800d1b4 <FLASH_WaitForLastOperation+0x10>
 800d1de:	e008      	b.n	800d1f2 <FLASH_WaitForLastOperation+0x4e>
        return HAL_TIMEOUT;
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800d1e0:	4b07      	ldr	r3, [pc, #28]	; (800d200 <FLASH_WaitForLastOperation+0x5c>)
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 800d1e8:	d005      	beq.n	800d1f6 <FLASH_WaitForLastOperation+0x52>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_ERSERR )) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800d1ea:	f7ff ff87 	bl	800d0fc <_ZL18FLASH_SetErrorCodev>
    return HAL_ERROR;
 800d1ee:	2001      	movs	r0, #1
 800d1f0:	bd38      	pop	{r3, r4, r5, pc}
  { 
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
      {
        return HAL_TIMEOUT;
 800d1f2:	2003      	movs	r0, #3
 800d1f4:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
    return HAL_ERROR;
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d1f6:	2000      	movs	r0, #0
  
}  
 800d1f8:	bd38      	pop	{r3, r4, r5, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20000ad0 	.word	0x20000ad0
 800d200:	40023c00 	.word	0x40023c00

0800d204 <HAL_FLASH_Program>:
  * @param  Data: specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d208:	4c1e      	ldr	r4, [pc, #120]	; (800d284 <HAL_FLASH_Program+0x80>)
 800d20a:	7d24      	ldrb	r4, [r4, #20]
 800d20c:	2c01      	cmp	r4, #1
 800d20e:	d036      	beq.n	800d27e <HAL_FLASH_Program+0x7a>
 800d210:	4698      	mov	r8, r3
 800d212:	4617      	mov	r7, r2
 800d214:	460e      	mov	r6, r1
 800d216:	4605      	mov	r5, r0
 800d218:	2201      	movs	r2, #1
 800d21a:	4b1a      	ldr	r3, [pc, #104]	; (800d284 <HAL_FLASH_Program+0x80>)
 800d21c:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d21e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d222:	f7ff ffbf 	bl	800d1a4 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800d226:	4604      	mov	r4, r0
 800d228:	bb18      	cbnz	r0, 800d272 <HAL_FLASH_Program+0x6e>
  {
    switch(TypeProgram)
 800d22a:	2d03      	cmp	r5, #3
 800d22c:	d817      	bhi.n	800d25e <HAL_FLASH_Program+0x5a>
 800d22e:	e8df f005 	tbb	[pc, r5]
 800d232:	0702      	.short	0x0702
 800d234:	110c      	.short	0x110c
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800d236:	b2f9      	uxtb	r1, r7
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff ff4d 	bl	800d0d8 <_ZL18FLASH_Program_Bytemh>
        break;
 800d23e:	e00e      	b.n	800d25e <HAL_FLASH_Program+0x5a>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800d240:	b2b9      	uxth	r1, r7
 800d242:	4630      	mov	r0, r6
 800d244:	f7ff ff34 	bl	800d0b0 <_ZL22FLASH_Program_HalfWordmt>
        break;
 800d248:	e009      	b.n	800d25e <HAL_FLASH_Program+0x5a>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 800d24a:	4639      	mov	r1, r7
 800d24c:	4630      	mov	r0, r6
 800d24e:	f7ff ff1b 	bl	800d088 <_ZL18FLASH_Program_Wordmm>
        break;
 800d252:	e004      	b.n	800d25e <HAL_FLASH_Program+0x5a>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800d254:	463a      	mov	r2, r7
 800d256:	4643      	mov	r3, r8
 800d258:	4630      	mov	r0, r6
 800d25a:	f7ff fefd 	bl	800d058 <_ZL24FLASH_Program_DoubleWordmy>
      }
      default :
        break;
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d25e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d262:	f7ff ff9f 	bl	800d1a4 <FLASH_WaitForLastOperation>
 800d266:	4604      	mov	r4, r0
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800d268:	4a07      	ldr	r2, [pc, #28]	; (800d288 <HAL_FLASH_Program+0x84>)
 800d26a:	6913      	ldr	r3, [r2, #16]
 800d26c:	f023 0301 	bic.w	r3, r3, #1
 800d270:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d272:	2200      	movs	r2, #0
 800d274:	4b03      	ldr	r3, [pc, #12]	; (800d284 <HAL_FLASH_Program+0x80>)
 800d276:	751a      	strb	r2, [r3, #20]

  return status;
 800d278:	4620      	mov	r0, r4
 800d27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d27e:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);

  return status;
}
 800d280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d284:	20000ad0 	.word	0x20000ad0
 800d288:	40023c00 	.word	0x40023c00

0800d28c <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d28c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d28e:	6805      	ldr	r5, [r0, #0]
 800d290:	682c      	ldr	r4, [r5, #0]
 800d292:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800d296:	602c      	str	r4, [r5, #0]
	
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d298:	6804      	ldr	r4, [r0, #0]
 800d29a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d29c:	6883      	ldr	r3, [r0, #8]
 800d29e:	2b40      	cmp	r3, #64	; 0x40
 800d2a0:	d104      	bne.n	800d2ac <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x20>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d2a2:	6803      	ldr	r3, [r0, #0]
 800d2a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d2a6:	6803      	ldr	r3, [r0, #0]
 800d2a8:	60d9      	str	r1, [r3, #12]
 800d2aa:	e003      	b.n	800d2b4 <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm+0x28>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800d2ac:	6803      	ldr	r3, [r0, #0]
 800d2ae:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800d2b0:	6803      	ldr	r3, [r0, #0]
 800d2b2:	60da      	str	r2, [r3, #12]
  }
}
 800d2b4:	bc30      	pop	{r4, r5}
 800d2b6:	4770      	bx	lr

0800d2b8 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 800d2b8:	6802      	ldr	r2, [r0, #0]
 800d2ba:	b2d3      	uxtb	r3, r2
 800d2bc:	3b10      	subs	r3, #16
 800d2be:	4909      	ldr	r1, [pc, #36]	; (800d2e4 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x2c>)
 800d2c0:	fba1 1303 	umull	r1, r3, r1, r3
 800d2c4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d2c6:	4908      	ldr	r1, [pc, #32]	; (800d2e8 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x30>)
 800d2c8:	5cc9      	ldrb	r1, [r1, r3]
 800d2ca:	6541      	str	r1, [r0, #84]	; 0x54
  
  if (stream_number > 3)
 800d2cc:	2b03      	cmp	r3, #3
 800d2ce:	d904      	bls.n	800d2da <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x22>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 800d2d0:	4b06      	ldr	r3, [pc, #24]	; (800d2ec <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x34>)
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	6503      	str	r3, [r0, #80]	; 0x50
 800d2d8:	e002      	b.n	800d2e0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x28>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FF));
 800d2da:	4b04      	ldr	r3, [pc, #16]	; (800d2ec <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x34>)
 800d2dc:	4013      	ands	r3, r2
 800d2de:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
}
 800d2e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800d2e2:	4770      	bx	lr
 800d2e4:	aaaaaaab 	.word	0xaaaaaaab
 800d2e8:	0801ac44 	.word	0x0801ac44
 800d2ec:	fffffc00 	.word	0xfffffc00

0800d2f0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d036      	beq.n	800d362 <HAL_DMA_Init+0x72>
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800d2f4:	b510      	push	{r4, lr}
 800d2f6:	4603      	mov	r3, r0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d2fe:	6804      	ldr	r4, [r0, #0]
 800d300:	6822      	ldr	r2, [r4, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));
 800d302:	4819      	ldr	r0, [pc, #100]	; (800d368 <HAL_DMA_Init+0x78>)
 800d304:	4010      	ands	r0, r2

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d306:	6859      	ldr	r1, [r3, #4]
 800d308:	689a      	ldr	r2, [r3, #8]
 800d30a:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d30c:	68da      	ldr	r2, [r3, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d30e:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d310:	691a      	ldr	r2, [r3, #16]
 800d312:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d314:	695a      	ldr	r2, [r3, #20]
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d316:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d318:	699a      	ldr	r2, [r3, #24]
 800d31a:	4311      	orrs	r1, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800d31c:	69da      	ldr	r2, [r3, #28]
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d31e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800d320:	6a19      	ldr	r1, [r3, #32]
 800d322:	4311      	orrs	r1, r2
 800d324:	ea40 0201 	orr.w	r2, r0, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d328:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d32a:	2904      	cmp	r1, #4
 800d32c:	d103      	bne.n	800d336 <HAL_DMA_Init+0x46>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d32e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d330:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d332:	4301      	orrs	r1, r0
 800d334:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d336:	6022      	str	r2, [r4, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d338:	6819      	ldr	r1, [r3, #0]
 800d33a:	694a      	ldr	r2, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d33c:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d340:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d342:	4302      	orrs	r2, r0

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d344:	2804      	cmp	r0, #4
 800d346:	d101      	bne.n	800d34c <HAL_DMA_Init+0x5c>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d348:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d34a:	4302      	orrs	r2, r0
 800d34c:	461c      	mov	r4, r3
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d34e:	614a      	str	r2, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff ffb1 	bl	800d2b8 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
	
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d356:	2000      	movs	r0, #0
 800d358:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d35a:	2301      	movs	r3, #1
 800d35c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 800d360:	bd10      	pop	{r4, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800d362:	2001      	movs	r0, #1
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	f010803f 	.word	0xf010803f

0800d36c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d36c:	b538      	push	{r3, r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800d36e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800d372:	2c01      	cmp	r4, #1
 800d374:	d01f      	beq.n	800d3b6 <HAL_DMA_Start_IT+0x4a>
 800d376:	4604      	mov	r4, r0
 800d378:	2001      	movs	r0, #1
 800d37a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d37e:	2002      	movs	r0, #2
 800d380:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d384:	6825      	ldr	r5, [r4, #0]
 800d386:	6828      	ldr	r0, [r5, #0]
 800d388:	f020 0001 	bic.w	r0, r0, #1
 800d38c:	6028      	str	r0, [r5, #0]

  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d38e:	4620      	mov	r0, r4
 800d390:	f7ff ff7c 	bl	800d28c <_ZL13DMA_SetConfigP19__DMA_HandleTypeDefmmm>

  /* Enable all interrupts */
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
 800d394:	6822      	ldr	r2, [r4, #0]
 800d396:	6813      	ldr	r3, [r2, #0]
 800d398:	f043 031e 	orr.w	r3, r3, #30
 800d39c:	6013      	str	r3, [r2, #0]
  hdma->Instance->FCR |= DMA_IT_FE;
 800d39e:	6822      	ldr	r2, [r4, #0]
 800d3a0:	6953      	ldr	r3, [r2, #20]
 800d3a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3a6:	6153      	str	r3, [r2, #20]

   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 800d3a8:	6822      	ldr	r2, [r4, #0]
 800d3aa:	6813      	ldr	r3, [r2, #0]
 800d3ac:	f043 0301 	orr.w	r3, r3, #1
 800d3b0:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	bd38      	pop	{r3, r4, r5, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Process locked */
  __HAL_LOCK(hdma);
 800d3b6:	2002      	movs	r0, #2

   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);

  return HAL_OK;
} 
 800d3b8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ba:	bf00      	nop

0800d3bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Disable the stream */
  __HAL_DMA_DISABLE(hdma);
 800d3c0:	6802      	ldr	r2, [r0, #0]
 800d3c2:	6813      	ldr	r3, [r2, #0]
 800d3c4:	f023 0301 	bic.w	r3, r3, #1
 800d3c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d3ca:	f000 fb41 	bl	800da50 <HAL_GetTick>
 800d3ce:	4605      	mov	r5, r0

  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != 0)
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f013 0f01 	tst.w	r3, #1
 800d3d8:	d010      	beq.n	800d3fc <HAL_DMA_Abort+0x40>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d3da:	f000 fb39 	bl	800da50 <HAL_GetTick>
 800d3de:	1b40      	subs	r0, r0, r5
 800d3e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d3e4:	d9f4      	bls.n	800d3d0 <HAL_DMA_Abort+0x14>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800d3e6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d3e8:	f043 0320 	orr.w	r3, r3, #32
 800d3ec:	64e3      	str	r3, [r4, #76]	; 0x4c
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d3f4:	2003      	movs	r0, #3
 800d3f6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34

  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800d402:	2301      	movs	r3, #1
 800d404:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
}
 800d408:	bd38      	pop	{r3, r4, r5, pc}
 800d40a:	bf00      	nop

0800d40c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d410:	6d05      	ldr	r5, [r0, #80]	; 0x50
	
  /* Transfer Error Interrupt management ***************************************/
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d412:	682a      	ldr	r2, [r5, #0]
 800d414:	6d41      	ldr	r1, [r0, #84]	; 0x54
 800d416:	2308      	movs	r3, #8
 800d418:	408b      	lsls	r3, r1
 800d41a:	421a      	tst	r2, r3
 800d41c:	d019      	beq.n	800d452 <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d41e:	6803      	ldr	r3, [r0, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	f012 0f04 	tst.w	r2, #4
 800d426:	d014      	beq.n	800d452 <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	f022 0204 	bic.w	r2, r2, #4
 800d42e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d430:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800d432:	2308      	movs	r3, #8
 800d434:	4093      	lsls	r3, r2
 800d436:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d438:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d43a:	f043 0301 	orr.w	r3, r3, #1
 800d43e:	64c3      	str	r3, [r0, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800d440:	2304      	movs	r3, #4
 800d442:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 800d446:	2300      	movs	r3, #0
 800d448:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 800d44c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800d44e:	b103      	cbz	r3, 800d452 <HAL_DMA_IRQHandler+0x46>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d450:	4798      	blx	r3
      }
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((regs->ISR & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d452:	682a      	ldr	r2, [r5, #0]
 800d454:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d456:	4b58      	ldr	r3, [pc, #352]	; (800d5b8 <HAL_DMA_IRQHandler+0x1ac>)
 800d458:	408b      	lsls	r3, r1
 800d45a:	421a      	tst	r2, r3
 800d45c:	d01a      	beq.n	800d494 <HAL_DMA_IRQHandler+0x88>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d45e:	6823      	ldr	r3, [r4, #0]
 800d460:	695a      	ldr	r2, [r3, #20]
 800d462:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d466:	d015      	beq.n	800d494 <HAL_DMA_IRQHandler+0x88>
    {
      /* Disable the FIFO Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 800d468:	695a      	ldr	r2, [r3, #20]
 800d46a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d46e:	615a      	str	r2, [r3, #20]

      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d470:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d472:	4b51      	ldr	r3, [pc, #324]	; (800d5b8 <HAL_DMA_IRQHandler+0x1ac>)
 800d474:	4093      	lsls	r3, r2
 800d476:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d478:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d47a:	f043 0302 	orr.w	r3, r3, #2
 800d47e:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800d480:	2304      	movs	r3, #4
 800d482:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d486:	2300      	movs	r3, #0
 800d488:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 800d48c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d48e:	b10b      	cbz	r3, 800d494 <HAL_DMA_IRQHandler+0x88>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d490:	4620      	mov	r0, r4
 800d492:	4798      	blx	r3
      }
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((regs->ISR & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d494:	682a      	ldr	r2, [r5, #0]
 800d496:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d498:	4b48      	ldr	r3, [pc, #288]	; (800d5bc <HAL_DMA_IRQHandler+0x1b0>)
 800d49a:	408b      	lsls	r3, r1
 800d49c:	421a      	tst	r2, r3
 800d49e:	d01a      	beq.n	800d4d6 <HAL_DMA_IRQHandler+0xca>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	f012 0f02 	tst.w	r2, #2
 800d4a8:	d015      	beq.n	800d4d6 <HAL_DMA_IRQHandler+0xca>
    {
      /* Disable the direct mode Error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	f022 0202 	bic.w	r2, r2, #2
 800d4b0:	601a      	str	r2, [r3, #0]

      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d4b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d4b4:	4b41      	ldr	r3, [pc, #260]	; (800d5bc <HAL_DMA_IRQHandler+0x1b0>)
 800d4b6:	4093      	lsls	r3, r2
 800d4b8:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d4ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d4bc:	f043 0304 	orr.w	r3, r3, #4
 800d4c0:	64e3      	str	r3, [r4, #76]	; 0x4c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800d4c2:	2304      	movs	r3, #4
 800d4c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      if(hdma->XferErrorCallback != NULL)
 800d4ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d4d0:	b10b      	cbz	r3, 800d4d6 <HAL_DMA_IRQHandler+0xca>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	4798      	blx	r3
      }
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((regs->ISR & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d4d6:	682a      	ldr	r2, [r5, #0]
 800d4d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d4da:	2310      	movs	r3, #16
 800d4dc:	408b      	lsls	r3, r1
 800d4de:	421a      	tst	r2, r3
 800d4e0:	d02d      	beq.n	800d53e <HAL_DMA_IRQHandler+0x132>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d4e2:	6822      	ldr	r2, [r4, #0]
 800d4e4:	6811      	ldr	r1, [r2, #0]
 800d4e6:	f011 0f08 	tst.w	r1, #8
 800d4ea:	d028      	beq.n	800d53e <HAL_DMA_IRQHandler+0x132>
    { 
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 800d4ec:	6811      	ldr	r1, [r2, #0]
 800d4ee:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800d4f2:	d011      	beq.n	800d518 <HAL_DMA_IRQHandler+0x10c>
      {
        /* Clear the half transfer complete flag */
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d4f4:	60ab      	str	r3, [r5, #8]

        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 800d4fe:	d103      	bne.n	800d508 <HAL_DMA_IRQHandler+0xfc>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 800d500:	2331      	movs	r3, #49	; 0x31
 800d502:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800d506:	e016      	b.n	800d536 <HAL_DMA_IRQHandler+0x12a>
        }
        /* Current memory buffer used is Memory 1 */
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800d50e:	d012      	beq.n	800d536 <HAL_DMA_IRQHandler+0x12a>
        {
          /* Change DMA peripheral state */
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 800d510:	2341      	movs	r3, #65	; 0x41
 800d512:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800d516:	e00e      	b.n	800d536 <HAL_DMA_IRQHandler+0x12a>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800d518:	6813      	ldr	r3, [r2, #0]
 800d51a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d51e:	d103      	bne.n	800d528 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d520:	6813      	ldr	r3, [r2, #0]
 800d522:	f023 0308 	bic.w	r3, r3, #8
 800d526:	6013      	str	r3, [r2, #0]
        }
        /* Clear the half transfer complete flag */
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d528:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d52a:	2310      	movs	r3, #16
 800d52c:	4093      	lsls	r3, r2
 800d52e:	60ab      	str	r3, [r5, #8]

        /* Change DMA peripheral state */
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 800d530:	2331      	movs	r3, #49	; 0x31
 800d532:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      }

      if(hdma->XferHalfCpltCallback != NULL)
 800d536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d538:	b10b      	cbz	r3, 800d53e <HAL_DMA_IRQHandler+0x132>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800d53a:	4620      	mov	r0, r4
 800d53c:	4798      	blx	r3
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((regs->ISR & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d53e:	682a      	ldr	r2, [r5, #0]
 800d540:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d542:	2320      	movs	r3, #32
 800d544:	408b      	lsls	r3, r1
 800d546:	421a      	tst	r2, r3
 800d548:	d034      	beq.n	800d5b4 <HAL_DMA_IRQHandler+0x1a8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d54a:	6822      	ldr	r2, [r4, #0]
 800d54c:	6811      	ldr	r1, [r2, #0]
 800d54e:	f011 0f10 	tst.w	r1, #16
 800d552:	d02f      	beq.n	800d5b4 <HAL_DMA_IRQHandler+0x1a8>
    {
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 800d554:	6811      	ldr	r1, [r2, #0]
 800d556:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800d55a:	d013      	beq.n	800d584 <HAL_DMA_IRQHandler+0x178>
      {
        /* Clear the transfer complete flag */
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d55c:	60ab      	str	r3, [r5, #8]

        /* Current memory buffer used is Memory 1 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 800d566:	d104      	bne.n	800d572 <HAL_DMA_IRQHandler+0x166>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d568:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d56a:	b31b      	cbz	r3, 800d5b4 <HAL_DMA_IRQHandler+0x1a8>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d56c:	4620      	mov	r0, r4
 800d56e:	4798      	blx	r3
 800d570:	bd38      	pop	{r3, r4, r5, pc}
          }
        }
        /* Current memory buffer used is Memory 0 */
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0) 
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800d578:	d01c      	beq.n	800d5b4 <HAL_DMA_IRQHandler+0x1a8>
        {
          if(hdma->XferCpltCallback != NULL)
 800d57a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d57c:	b1d3      	cbz	r3, 800d5b4 <HAL_DMA_IRQHandler+0x1a8>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d57e:	4620      	mov	r0, r4
 800d580:	4798      	blx	r3
 800d582:	bd38      	pop	{r3, r4, r5, pc}
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800d584:	6813      	ldr	r3, [r2, #0]
 800d586:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d58a:	d103      	bne.n	800d594 <HAL_DMA_IRQHandler+0x188>
        {
          /* Disable the transfer complete interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800d58c:	6813      	ldr	r3, [r2, #0]
 800d58e:	f023 0310 	bic.w	r3, r3, #16
 800d592:	6013      	str	r3, [r2, #0]
        }
        /* Clear the transfer complete flag */
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d594:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d596:	2320      	movs	r3, #32
 800d598:	4093      	lsls	r3, r2
 800d59a:	60ab      	str	r3, [r5, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 800d59c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d59e:	64e3      	str	r3, [r4, #76]	; 0x4c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 800d5a0:	2311      	movs	r3, #17
 800d5a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);      
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        if(hdma->XferCpltCallback != NULL)
 800d5ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d5ae:	b10b      	cbz	r3, 800d5b4 <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	4798      	blx	r3
 800d5b4:	bd38      	pop	{r3, r4, r5, pc}
 800d5b6:	bf00      	nop
 800d5b8:	00800001 	.word	0x00800001
 800d5bc:	00800004 	.word	0x00800004

0800d5c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d5c0:	4a06      	ldr	r2, [pc, #24]	; (800d5dc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800d5c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d5c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d5c8:	041b      	lsls	r3, r3, #16
 800d5ca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800d5cc:	0200      	lsls	r0, r0, #8
 800d5ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d5d2:	4318      	orrs	r0, r3
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800d5d4:	4b02      	ldr	r3, [pc, #8]	; (800d5e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800d5d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800d5d8:	60d3      	str	r3, [r2, #12]
 800d5da:	4770      	bx	lr
 800d5dc:	e000ed00 	.word	0xe000ed00
 800d5e0:	05fa0000 	.word	0x05fa0000

0800d5e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d5e4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d5e6:	4b14      	ldr	r3, [pc, #80]	; (800d638 <HAL_NVIC_SetPriority+0x54>)
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d5ee:	f1c3 0407 	rsb	r4, r3, #7
 800d5f2:	2c04      	cmp	r4, #4
 800d5f4:	bf28      	it	cs
 800d5f6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d5f8:	1d1d      	adds	r5, r3, #4
 800d5fa:	2d06      	cmp	r5, #6
 800d5fc:	d901      	bls.n	800d602 <HAL_NVIC_SetPriority+0x1e>
 800d5fe:	1edd      	subs	r5, r3, #3
 800d600:	e000      	b.n	800d604 <HAL_NVIC_SetPriority+0x20>
 800d602:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d604:	2301      	movs	r3, #1
 800d606:	fa03 f404 	lsl.w	r4, r3, r4
 800d60a:	3c01      	subs	r4, #1
 800d60c:	4021      	ands	r1, r4
 800d60e:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d610:	40ab      	lsls	r3, r5
 800d612:	3b01      	subs	r3, #1
 800d614:	401a      	ands	r2, r3
         );
 800d616:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800d618:	2800      	cmp	r0, #0
 800d61a:	da06      	bge.n	800d62a <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d61c:	f000 000f 	and.w	r0, r0, #15
 800d620:	0112      	lsls	r2, r2, #4
 800d622:	b2d2      	uxtb	r2, r2
 800d624:	4b05      	ldr	r3, [pc, #20]	; (800d63c <HAL_NVIC_SetPriority+0x58>)
 800d626:	541a      	strb	r2, [r3, r0]
 800d628:	e003      	b.n	800d632 <HAL_NVIC_SetPriority+0x4e>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d62a:	0112      	lsls	r2, r2, #4
 800d62c:	b2d2      	uxtb	r2, r2
 800d62e:	4b04      	ldr	r3, [pc, #16]	; (800d640 <HAL_NVIC_SetPriority+0x5c>)
 800d630:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800d632:	bc30      	pop	{r4, r5}
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	e000ed00 	.word	0xe000ed00
 800d63c:	e000ed14 	.word	0xe000ed14
 800d640:	e000e400 	.word	0xe000e400

0800d644 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800d644:	0942      	lsrs	r2, r0, #5
 800d646:	f000 001f 	and.w	r0, r0, #31
 800d64a:	2301      	movs	r3, #1
 800d64c:	fa03 f000 	lsl.w	r0, r3, r0
 800d650:	4b01      	ldr	r3, [pc, #4]	; (800d658 <HAL_NVIC_EnableIRQ+0x14>)
 800d652:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d656:	4770      	bx	lr
 800d658:	e000e100 	.word	0xe000e100

0800d65c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d65c:	3801      	subs	r0, #1
 800d65e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800d662:	d20a      	bcs.n	800d67a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d664:	4b06      	ldr	r3, [pc, #24]	; (800d680 <HAL_SYSTICK_Config+0x24>)
 800d666:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d668:	21f0      	movs	r1, #240	; 0xf0
 800d66a:	4a06      	ldr	r2, [pc, #24]	; (800d684 <HAL_SYSTICK_Config+0x28>)
 800d66c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d670:	2000      	movs	r0, #0
 800d672:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
 800d674:	2207      	movs	r2, #7
 800d676:	601a      	str	r2, [r3, #0]
 800d678:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800d67a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	e000e010 	.word	0xe000e010
 800d684:	e000ed00 	.word	0xe000ed00

0800d688 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800d688:	2804      	cmp	r0, #4
 800d68a:	d105      	bne.n	800d698 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800d68c:	4a05      	ldr	r2, [pc, #20]	; (800d6a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800d68e:	6813      	ldr	r3, [r2, #0]
 800d690:	f043 0304 	orr.w	r3, r3, #4
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	4770      	bx	lr
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800d698:	4a02      	ldr	r2, [pc, #8]	; (800d6a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800d69a:	6813      	ldr	r3, [r2, #0]
 800d69c:	f023 0304 	bic.w	r3, r3, #4
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	4770      	bx	lr
 800d6a4:	e000e010 	.word	0xe000e010

0800d6a8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800d6a8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800d6aa:	f004 fde7 	bl	801227c <HAL_SYSTICK_Callback>
 800d6ae:	bd08      	pop	{r3, pc}

0800d6b0 <_ZL8ADC_InitP17ADC_HandleTypeDef>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d6b0:	b410      	push	{r4}
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800d6b2:	4b4d      	ldr	r3, [pc, #308]	; (800d7e8 <_ZL8ADC_InitP17ADC_HandleTypeDef+0x138>)
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800d6ba:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800d6bc:	6859      	ldr	r1, [r3, #4]
 800d6be:	6842      	ldr	r2, [r0, #4]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800d6c4:	6802      	ldr	r2, [r0, #0]
 800d6c6:	6853      	ldr	r3, [r2, #4]
 800d6c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6cc:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800d6ce:	6802      	ldr	r2, [r0, #0]
 800d6d0:	6853      	ldr	r3, [r2, #4]
 800d6d2:	6901      	ldr	r1, [r0, #16]
 800d6d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d6d8:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800d6da:	6802      	ldr	r2, [r0, #0]
 800d6dc:	6853      	ldr	r3, [r2, #4]
 800d6de:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800d6e2:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800d6e4:	6802      	ldr	r2, [r0, #0]
 800d6e6:	6851      	ldr	r1, [r2, #4]
 800d6e8:	6883      	ldr	r3, [r0, #8]
 800d6ea:	430b      	orrs	r3, r1
 800d6ec:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800d6ee:	6802      	ldr	r2, [r0, #0]
 800d6f0:	6893      	ldr	r3, [r2, #8]
 800d6f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6f6:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800d6f8:	6802      	ldr	r2, [r0, #0]
 800d6fa:	6891      	ldr	r1, [r2, #8]
 800d6fc:	68c3      	ldr	r3, [r0, #12]
 800d6fe:	430b      	orrs	r3, r1
 800d700:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d702:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d704:	4b39      	ldr	r3, [pc, #228]	; (800d7ec <_ZL8ADC_InitP17ADC_HandleTypeDef+0x13c>)
 800d706:	429a      	cmp	r2, r3
 800d708:	d014      	beq.n	800d734 <_ZL8ADC_InitP17ADC_HandleTypeDef+0x84>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d70a:	6802      	ldr	r2, [r0, #0]
 800d70c:	6893      	ldr	r3, [r2, #8]
 800d70e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800d712:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800d714:	6802      	ldr	r2, [r0, #0]
 800d716:	6891      	ldr	r1, [r2, #8]
 800d718:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d71a:	430b      	orrs	r3, r1
 800d71c:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d71e:	6802      	ldr	r2, [r0, #0]
 800d720:	6893      	ldr	r3, [r2, #8]
 800d722:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800d726:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800d728:	6802      	ldr	r2, [r0, #0]
 800d72a:	6891      	ldr	r1, [r2, #8]
 800d72c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d72e:	430b      	orrs	r3, r1
 800d730:	6093      	str	r3, [r2, #8]
 800d732:	e009      	b.n	800d748 <_ZL8ADC_InitP17ADC_HandleTypeDef+0x98>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d734:	6802      	ldr	r2, [r0, #0]
 800d736:	6893      	ldr	r3, [r2, #8]
 800d738:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800d73c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d73e:	6802      	ldr	r2, [r0, #0]
 800d740:	6893      	ldr	r3, [r2, #8]
 800d742:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800d746:	6093      	str	r3, [r2, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800d748:	6802      	ldr	r2, [r0, #0]
 800d74a:	6893      	ldr	r3, [r2, #8]
 800d74c:	f023 0302 	bic.w	r3, r3, #2
 800d750:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800d752:	6802      	ldr	r2, [r0, #0]
 800d754:	6893      	ldr	r3, [r2, #8]
 800d756:	6981      	ldr	r1, [r0, #24]
 800d758:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800d75c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800d75e:	6a03      	ldr	r3, [r0, #32]
 800d760:	b1bb      	cbz	r3, 800d792 <_ZL8ADC_InitP17ADC_HandleTypeDef+0xe2>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800d762:	6802      	ldr	r2, [r0, #0]
 800d764:	6853      	ldr	r3, [r2, #4]
 800d766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d76a:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800d76c:	6802      	ldr	r2, [r0, #0]
 800d76e:	6853      	ldr	r3, [r2, #4]
 800d770:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d774:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800d776:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d778:	3b01      	subs	r3, #1
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d77a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800d77e:	fa92 f2a2 	rbit	r2, r2
 800d782:	fab2 f282 	clz	r2, r2
 800d786:	6804      	ldr	r4, [r0, #0]
 800d788:	6861      	ldr	r1, [r4, #4]
 800d78a:	4093      	lsls	r3, r2
 800d78c:	430b      	orrs	r3, r1
 800d78e:	6063      	str	r3, [r4, #4]
 800d790:	e004      	b.n	800d79c <_ZL8ADC_InitP17ADC_HandleTypeDef+0xec>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800d792:	6802      	ldr	r2, [r0, #0]
 800d794:	6853      	ldr	r3, [r2, #4]
 800d796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d79a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800d79c:	6802      	ldr	r2, [r0, #0]
 800d79e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d7a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d7a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800d7a6:	6801      	ldr	r1, [r0, #0]
 800d7a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800d7aa:	69c3      	ldr	r3, [r0, #28]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 800d7b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800d7b4:	6802      	ldr	r2, [r0, #0]
 800d7b6:	6893      	ldr	r3, [r2, #8]
 800d7b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7bc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800d7be:	6802      	ldr	r2, [r0, #0]
 800d7c0:	6893      	ldr	r3, [r2, #8]
 800d7c2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800d7c4:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800d7c8:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800d7ca:	6802      	ldr	r2, [r0, #0]
 800d7cc:	6893      	ldr	r3, [r2, #8]
 800d7ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7d2:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800d7d4:	6802      	ldr	r2, [r0, #0]
 800d7d6:	6893      	ldr	r3, [r2, #8]
 800d7d8:	6941      	ldr	r1, [r0, #20]
 800d7da:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800d7de:	6093      	str	r3, [r2, #8]
}
 800d7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	40012300 	.word	0x40012300
 800d7ec:	0f000001 	.word	0x0f000001

0800d7f0 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d7f0:	b318      	cbz	r0, 800d83a <HAL_ADC_Init+0x4a>
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d7f2:	b510      	push	{r4, lr}
 800d7f4:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800d7f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d7f8:	b923      	cbnz	r3, 800d804 <HAL_ADC_Init+0x14>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d7fa:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d7fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d800:	f005 fde2 	bl	80133c8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d806:	f013 0f10 	tst.w	r3, #16
 800d80a:	d111      	bne.n	800d830 <HAL_ADC_Init+0x40>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d80c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d80e:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <HAL_ADC_Init+0x50>)
 800d810:	4013      	ands	r3, r2
 800d812:	f043 0302 	orr.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
 800d816:	6423      	str	r3, [r4, #64]	; 0x40
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800d818:	4620      	mov	r0, r4
 800d81a:	f7ff ff49 	bl	800d6b0 <_ZL8ADC_InitP17ADC_HandleTypeDef>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d81e:	2000      	movs	r0, #0
 800d820:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d824:	f023 0303 	bic.w	r3, r3, #3
 800d828:	f043 0301 	orr.w	r3, r3, #1
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
 800d82c:	6423      	str	r3, [r4, #64]	; 0x40
 800d82e:	e000      	b.n	800d832 <HAL_ADC_Init+0x42>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d830:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d832:	2300      	movs	r3, #0
 800d834:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d838:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 800d83a:	2001      	movs	r0, #1
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	ffffeefd 	.word	0xffffeefd

0800d844 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800d844:	b430      	push	{r4, r5}
 800d846:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 800d848:	2300      	movs	r3, #0
 800d84a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d84c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d850:	2b01      	cmp	r3, #1
 800d852:	f000 80c1 	beq.w	800d9d8 <HAL_ADC_ConfigChannel+0x194>
 800d856:	2301      	movs	r3, #1
 800d858:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800d85c:	680b      	ldr	r3, [r1, #0]
 800d85e:	2b09      	cmp	r3, #9
 800d860:	d922      	bls.n	800d8a8 <HAL_ADC_ConfigChannel+0x64>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800d862:	6805      	ldr	r5, [r0, #0]
 800d864:	68ea      	ldr	r2, [r5, #12]
 800d866:	b29b      	uxth	r3, r3
 800d868:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d86c:	3b1e      	subs	r3, #30
 800d86e:	2407      	movs	r4, #7
 800d870:	fa04 f303 	lsl.w	r3, r4, r3
 800d874:	ea22 0303 	bic.w	r3, r2, r3
 800d878:	60eb      	str	r3, [r5, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d87a:	680b      	ldr	r3, [r1, #0]
 800d87c:	4a58      	ldr	r2, [pc, #352]	; (800d9e0 <HAL_ADC_ConfigChannel+0x19c>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d106      	bne.n	800d890 <HAL_ADC_ConfigChannel+0x4c>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800d882:	6802      	ldr	r2, [r0, #0]
 800d884:	68d3      	ldr	r3, [r2, #12]
 800d886:	688c      	ldr	r4, [r1, #8]
 800d888:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800d88c:	60d3      	str	r3, [r2, #12]
 800d88e:	e01f      	b.n	800d8d0 <HAL_ADC_ConfigChannel+0x8c>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d890:	6804      	ldr	r4, [r0, #0]
 800d892:	68e5      	ldr	r5, [r4, #12]
 800d894:	688a      	ldr	r2, [r1, #8]
 800d896:	b29b      	uxth	r3, r3
 800d898:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d89c:	3b1e      	subs	r3, #30
 800d89e:	fa02 f303 	lsl.w	r3, r2, r3
 800d8a2:	432b      	orrs	r3, r5
 800d8a4:	60e3      	str	r3, [r4, #12]
 800d8a6:	e013      	b.n	800d8d0 <HAL_ADC_ConfigChannel+0x8c>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d8a8:	6805      	ldr	r5, [r0, #0]
 800d8aa:	692a      	ldr	r2, [r5, #16]
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d8b2:	2407      	movs	r4, #7
 800d8b4:	fa04 f303 	lsl.w	r3, r4, r3
 800d8b8:	ea22 0303 	bic.w	r3, r2, r3
 800d8bc:	612b      	str	r3, [r5, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d8be:	6804      	ldr	r4, [r0, #0]
 800d8c0:	6925      	ldr	r5, [r4, #16]
 800d8c2:	688b      	ldr	r3, [r1, #8]
 800d8c4:	880a      	ldrh	r2, [r1, #0]
 800d8c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d8ca:	4093      	lsls	r3, r2
 800d8cc:	432b      	orrs	r3, r5
 800d8ce:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800d8d0:	684b      	ldr	r3, [r1, #4]
 800d8d2:	2b06      	cmp	r3, #6
 800d8d4:	d816      	bhi.n	800d904 <HAL_ADC_ConfigChannel+0xc0>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d8d6:	6805      	ldr	r5, [r0, #0]
 800d8d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800d8da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d8de:	3b05      	subs	r3, #5
 800d8e0:	241f      	movs	r4, #31
 800d8e2:	fa04 f303 	lsl.w	r3, r4, r3
 800d8e6:	ea22 0303 	bic.w	r3, r2, r3
 800d8ea:	636b      	str	r3, [r5, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d8ec:	6804      	ldr	r4, [r0, #0]
 800d8ee:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d8f0:	684b      	ldr	r3, [r1, #4]
 800d8f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d8f6:	3b05      	subs	r3, #5
 800d8f8:	880a      	ldrh	r2, [r1, #0]
 800d8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fe:	432b      	orrs	r3, r5
 800d900:	6363      	str	r3, [r4, #52]	; 0x34
 800d902:	e02e      	b.n	800d962 <HAL_ADC_ConfigChannel+0x11e>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800d904:	2b0c      	cmp	r3, #12
 800d906:	d816      	bhi.n	800d936 <HAL_ADC_ConfigChannel+0xf2>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d908:	6805      	ldr	r5, [r0, #0]
 800d90a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800d90c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d910:	3b23      	subs	r3, #35	; 0x23
 800d912:	241f      	movs	r4, #31
 800d914:	fa04 f303 	lsl.w	r3, r4, r3
 800d918:	ea22 0303 	bic.w	r3, r2, r3
 800d91c:	632b      	str	r3, [r5, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d91e:	6804      	ldr	r4, [r0, #0]
 800d920:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d922:	684b      	ldr	r3, [r1, #4]
 800d924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d928:	3b23      	subs	r3, #35	; 0x23
 800d92a:	880a      	ldrh	r2, [r1, #0]
 800d92c:	fa02 f303 	lsl.w	r3, r2, r3
 800d930:	432b      	orrs	r3, r5
 800d932:	6323      	str	r3, [r4, #48]	; 0x30
 800d934:	e015      	b.n	800d962 <HAL_ADC_ConfigChannel+0x11e>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d936:	6805      	ldr	r5, [r0, #0]
 800d938:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800d93a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d93e:	3b41      	subs	r3, #65	; 0x41
 800d940:	241f      	movs	r4, #31
 800d942:	fa04 f303 	lsl.w	r3, r4, r3
 800d946:	ea22 0303 	bic.w	r3, r2, r3
 800d94a:	62eb      	str	r3, [r5, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800d94c:	6804      	ldr	r4, [r0, #0]
 800d94e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800d950:	684b      	ldr	r3, [r1, #4]
 800d952:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d956:	3b41      	subs	r3, #65	; 0x41
 800d958:	880a      	ldrh	r2, [r1, #0]
 800d95a:	fa02 f303 	lsl.w	r3, r2, r3
 800d95e:	432b      	orrs	r3, r5
 800d960:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800d962:	6802      	ldr	r2, [r0, #0]
 800d964:	4b1f      	ldr	r3, [pc, #124]	; (800d9e4 <HAL_ADC_ConfigChannel+0x1a0>)
 800d966:	429a      	cmp	r2, r3
 800d968:	d107      	bne.n	800d97a <HAL_ADC_ConfigChannel+0x136>
 800d96a:	680b      	ldr	r3, [r1, #0]
 800d96c:	2b12      	cmp	r3, #18
 800d96e:	d104      	bne.n	800d97a <HAL_ADC_ConfigChannel+0x136>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800d970:	4a1d      	ldr	r2, [pc, #116]	; (800d9e8 <HAL_ADC_ConfigChannel+0x1a4>)
 800d972:	6853      	ldr	r3, [r2, #4]
 800d974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d978:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800d97a:	6802      	ldr	r2, [r0, #0]
 800d97c:	4b19      	ldr	r3, [pc, #100]	; (800d9e4 <HAL_ADC_ConfigChannel+0x1a0>)
 800d97e:	429a      	cmp	r2, r3
 800d980:	d10a      	bne.n	800d998 <HAL_ADC_ConfigChannel+0x154>
 800d982:	680b      	ldr	r3, [r1, #0]
 800d984:	4a16      	ldr	r2, [pc, #88]	; (800d9e0 <HAL_ADC_ConfigChannel+0x19c>)
 800d986:	2b11      	cmp	r3, #17
 800d988:	bf18      	it	ne
 800d98a:	4293      	cmpne	r3, r2
 800d98c:	bf0c      	ite	eq
 800d98e:	2301      	moveq	r3, #1
 800d990:	2300      	movne	r3, #0
 800d992:	d002      	beq.n	800d99a <HAL_ADC_ConfigChannel+0x156>
 800d994:	2300      	movs	r3, #0
 800d996:	e000      	b.n	800d99a <HAL_ADC_ConfigChannel+0x156>
 800d998:	2300      	movs	r3, #0
 800d99a:	b1c3      	cbz	r3, 800d9ce <HAL_ADC_ConfigChannel+0x18a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800d99c:	4a12      	ldr	r2, [pc, #72]	; (800d9e8 <HAL_ADC_ConfigChannel+0x1a4>)
 800d99e:	6853      	ldr	r3, [r2, #4]
 800d9a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d9a6:	680a      	ldr	r2, [r1, #0]
 800d9a8:	4b0d      	ldr	r3, [pc, #52]	; (800d9e0 <HAL_ADC_ConfigChannel+0x19c>)
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d10f      	bne.n	800d9ce <HAL_ADC_ConfigChannel+0x18a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800d9ae:	4b0f      	ldr	r3, [pc, #60]	; (800d9ec <HAL_ADC_ConfigChannel+0x1a8>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4a0f      	ldr	r2, [pc, #60]	; (800d9f0 <HAL_ADC_ConfigChannel+0x1ac>)
 800d9b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9b8:	0c9b      	lsrs	r3, r3, #18
 800d9ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d9be:	005a      	lsls	r2, r3, #1
 800d9c0:	9201      	str	r2, [sp, #4]
      while(counter != 0)
 800d9c2:	9b01      	ldr	r3, [sp, #4]
 800d9c4:	b11b      	cbz	r3, 800d9ce <HAL_ADC_ConfigChannel+0x18a>
      {
        counter--;
 800d9c6:	9b01      	ldr	r3, [sp, #4]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	9301      	str	r3, [sp, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
      while(counter != 0)
 800d9cc:	e7f9      	b.n	800d9c2 <HAL_ADC_ConfigChannel+0x17e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	e000      	b.n	800d9da <HAL_ADC_ConfigChannel+0x196>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d9d8:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 800d9da:	b002      	add	sp, #8
 800d9dc:	bc30      	pop	{r4, r5}
 800d9de:	4770      	bx	lr
 800d9e0:	10000012 	.word	0x10000012
 800d9e4:	40012000 	.word	0x40012000
 800d9e8:	40012300 	.word	0x40012300
 800d9ec:	20000004 	.word	0x20000004
 800d9f0:	431bde83 	.word	0x431bde83

0800d9f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d9f4:	b510      	push	{r4, lr}
 800d9f6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800d9f8:	f7ff f862 	bl	800cac0 <HAL_RCC_GetHCLKFreq>
 800d9fc:	4b06      	ldr	r3, [pc, #24]	; (800da18 <HAL_InitTick+0x24>)
 800d9fe:	fba3 3000 	umull	r3, r0, r3, r0
 800da02:	0980      	lsrs	r0, r0, #6
 800da04:	f7ff fe2a 	bl	800d65c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800da08:	2200      	movs	r2, #0
 800da0a:	4621      	mov	r1, r4
 800da0c:	f04f 30ff 	mov.w	r0, #4294967295
 800da10:	f7ff fde8 	bl	800d5e4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800da14:	2000      	movs	r0, #0
 800da16:	bd10      	pop	{r4, pc}
 800da18:	10624dd3 	.word	0x10624dd3

0800da1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800da1c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800da1e:	4a07      	ldr	r2, [pc, #28]	; (800da3c <HAL_Init+0x20>)
 800da20:	6813      	ldr	r3, [r2, #0]
 800da22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da26:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800da28:	2003      	movs	r0, #3
 800da2a:	f7ff fdc9 	bl	800d5c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800da2e:	2001      	movs	r0, #1
 800da30:	f7ff ffe0 	bl	800d9f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800da34:	f001 fcfe 	bl	800f434 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800da38:	2000      	movs	r0, #0
 800da3a:	bd08      	pop	{r3, pc}
 800da3c:	40023c00 	.word	0x40023c00

0800da40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800da40:	4a02      	ldr	r2, [pc, #8]	; (800da4c <HAL_IncTick+0xc>)
 800da42:	6813      	ldr	r3, [r2, #0]
 800da44:	3301      	adds	r3, #1
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	20000aec 	.word	0x20000aec

0800da50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800da50:	4b01      	ldr	r3, [pc, #4]	; (800da58 <HAL_GetTick+0x8>)
 800da52:	6818      	ldr	r0, [r3, #0]
}
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	20000aec 	.word	0x20000aec

0800da5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800da5c:	b510      	push	{r4, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800da62:	f7ff fff5 	bl	800da50 <HAL_GetTick>
 800da66:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800da68:	f7ff fff2 	bl	800da50 <HAL_GetTick>
 800da6c:	1b00      	subs	r0, r0, r4
 800da6e:	9b01      	ldr	r3, [sp, #4]
 800da70:	4298      	cmp	r0, r3
 800da72:	d3f9      	bcc.n	800da68 <HAL_Delay+0xc>
  {
  }
}
 800da74:	b002      	add	sp, #8
 800da76:	bd10      	pop	{r4, pc}

0800da78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800da78:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800da7a:	4a0f      	ldr	r2, [pc, #60]	; (800dab8 <SystemInit+0x40>)
 800da7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800da80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800da88:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <SystemInit+0x44>)
 800da8a:	6819      	ldr	r1, [r3, #0]
 800da8c:	f041 0101 	orr.w	r1, r1, #1
 800da90:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800da92:	2000      	movs	r0, #0
 800da94:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800da96:	681c      	ldr	r4, [r3, #0]
 800da98:	4909      	ldr	r1, [pc, #36]	; (800dac0 <SystemInit+0x48>)
 800da9a:	4021      	ands	r1, r4
 800da9c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800da9e:	4909      	ldr	r1, [pc, #36]	; (800dac4 <SystemInit+0x4c>)
 800daa0:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800daa2:	6819      	ldr	r1, [r3, #0]
 800daa4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800daa8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800daaa:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800daac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dab0:	6093      	str	r3, [r2, #8]
#endif
}
 800dab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	e000ed00 	.word	0xe000ed00
 800dabc:	40023800 	.word	0x40023800
 800dac0:	fef6ffff 	.word	0xfef6ffff
 800dac4:	24003010 	.word	0x24003010

0800dac8 <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU>:
extern uint8_t radio_flag;

void RosNode::Ros_Pid_controller(encoder::ENCODER_ *enc_l,
		encoder::ENCODER_ *enc_r,
		IMU *imu)
{
 800dac8:	b570      	push	{r4, r5, r6, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	4604      	mov	r4, r0
	//get the linear err
	float err_linear_l = aim_linear_spd - enc_l->ave_velo;
 800dace:	edd0 7a18 	vldr	s15, [r0, #96]	; 0x60
 800dad2:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 800dad6:	ee37 6ac6 	vsub.f32	s12, s15, s12
	float err_linear_r = aim_linear_spd - enc_r->ave_velo;
 800dada:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 800dade:	ee77 7ac7 	vsub.f32	s15, s15, s14
	float d_err_linear_l = enc_l->ave_acc;
 800dae2:	edd1 6a0c 	vldr	s13, [r1, #48]	; 0x30
	float d_err_linear_r = enc_r->ave_acc;
 800dae6:	edd2 4a0c 	vldr	s9, [r2, #48]	; 0x30
	//get the angular err
	float err_angular = aim_angular_spd - imu->ave_gyro.z;
 800daea:	ed90 7a19 	vldr	s14, [r0, #100]	; 0x64
 800daee:	edd3 5a08 	vldr	s11, [r3, #32]
 800daf2:	ee77 5a65 	vsub.f32	s11, s14, s11
	float d_err_angular = imu->ave_gyroacc.z;
 800daf6:	ed93 5a0b 	vldr	s10, [r3, #44]	; 0x2c

	//test  using the cmd_vel_msg.linear.y as Kp using angular.y as Kd
	LMotor_duty += (int)(Kp_l*err_linear_l - Kd_l*d_err_linear_l);
 800dafa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800dafe:	ee26 6a07 	vmul.f32	s12, s12, s14
 800db02:	ed9f 4a34 	vldr	s8, [pc, #208]	; 800dbd4 <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU+0x10c>
 800db06:	ee66 6a84 	vmul.f32	s13, s13, s8
 800db0a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800db0e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800db12:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 800db16:	ee16 3a90 	vmov	r3, s13
 800db1a:	442b      	add	r3, r5
 800db1c:	b29d      	uxth	r5, r3
	RMotor_duty += (int)(Kp_l*err_linear_r - Kd_l*d_err_linear_r);
 800db1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800db22:	ee64 7a84 	vmul.f32	s15, s9, s8
 800db26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db2e:	f8b0 606a 	ldrh.w	r6, [r0, #106]	; 0x6a
 800db32:	ee17 3a90 	vmov	r3, s15
 800db36:	4433      	add	r3, r6
 800db38:	461e      	mov	r6, r3
	//turning left imu output positive..  R forward L backward..
    LMotor_duty -= (int)(Kp*err_angular - Kd*d_err_angular);
 800db3a:	edd0 7a1b 	vldr	s15, [r0, #108]	; 0x6c
 800db3e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800db42:	edd0 7a1c 	vldr	s15, [r0, #112]	; 0x70
 800db46:	ee65 7a27 	vmul.f32	s15, s10, s15
 800db4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db52:	edcd 7a01 	vstr	s15, [sp, #4]
 800db56:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800db5a:	1aed      	subs	r5, r5, r3
 800db5c:	b2ad      	uxth	r5, r5
 800db5e:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
    RMotor_duty += (int)(Kp*err_angular - Kd*d_err_angular);
 800db62:	fa13 f686 	uxtah	r6, r3, r6
 800db66:	b2b6      	uxth	r6, r6
 800db68:	f8a0 606a 	strh.w	r6, [r0, #106]	; 0x6a

	// next we need to control the angular....
    odom_msg.angular.x = LMotor_duty;
 800db6c:	4628      	mov	r0, r5
 800db6e:	f7fa fe2b 	bl	80087c8 <__aeabi_ui2d>
 800db72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    odom_msg.angular.y = RMotor_duty;
 800db76:	4630      	mov	r0, r6
 800db78:	f7fa fe26 	bl	80087c8 <__aeabi_ui2d>
 800db7c:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
	this->radioflag_msg.data = radio_flag;
 800db80:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU+0x110>)
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	7423      	strb	r3, [r4, #16]
	/* if automatic control */
	if(!radio_flag)
 800db86:	b9e3      	cbnz	r3, 800dbc2 <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU+0xfa>
	{
		LMotor_duty = LMotor_duty>MAX_DUTY?MAX_DUTY:LMotor_duty;
 800db88:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 800db8c:	4295      	cmp	r5, r2
 800db8e:	bf28      	it	cs
 800db90:	4615      	movcs	r5, r2
		LMotor_duty = LMotor_duty<MIN_DUTY?MIN_DUTY:LMotor_duty;
 800db92:	f646 1378 	movw	r3, #27000	; 0x6978
 800db96:	429d      	cmp	r5, r3
 800db98:	bf38      	it	cc
 800db9a:	461d      	movcc	r5, r3
 800db9c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
		RMotor_duty = RMotor_duty>MAX_DUTY?MAX_DUTY:RMotor_duty;
 800dba0:	4296      	cmp	r6, r2
 800dba2:	bf28      	it	cs
 800dba4:	4616      	movcs	r6, r2
		RMotor_duty = RMotor_duty<MIN_DUTY?MIN_DUTY:RMotor_duty;
 800dba6:	42b3      	cmp	r3, r6
 800dba8:	bf38      	it	cc
 800dbaa:	4633      	movcc	r3, r6
 800dbac:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		SetLMotor(LMotor_duty);
 800dbb0:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU+0x114>)
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	6395      	str	r5, [r2, #56]	; 0x38
		SetRMotor(RMotor_duty);
 800dbb6:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800dbba:	4b09      	ldr	r3, [pc, #36]	; (800dbe0 <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU+0x118>)
 800dbbc:	1a5b      	subs	r3, r3, r1
 800dbbe:	6353      	str	r3, [r2, #52]	; 0x34
 800dbc0:	e005      	b.n	800dbce <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU+0x106>
	}
	else // or manual control, the control will not accumulate..
	{
		LMotor_duty = NEU_DUTY;
 800dbc2:	f649 6334 	movw	r3, #40500	; 0x9e34
 800dbc6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
		RMotor_duty = NEU_DUTY;
 800dbca:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	}

}
 800dbce:	b002      	add	sp, #8
 800dbd0:	bd70      	pop	{r4, r5, r6, pc}
 800dbd2:	bf00      	nop
 800dbd4:	459c4000 	.word	0x459c4000
 800dbd8:	20000afc 	.word	0x20000afc
 800dbdc:	20003dd4 	.word	0x20003dd4
 800dbe0:	00013c68 	.word	0x00013c68

0800dbe4 <HAL_GPIO_EXTI_Callback>:
		for(i=0;i<400;i++);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dbe4:	b538      	push	{r3, r4, r5, lr}
	//all the external pin interrupts come in this call back
	uint16_t temp_timer = TIM8->CNT;
 800dbe6:	4b5f      	ldr	r3, [pc, #380]	; (800dd64 <HAL_GPIO_EXTI_Callback+0x180>)
 800dbe8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dbea:	b2a5      	uxth	r5, r4
	float signal_interval;
	Delay(1);
	switch(GPIO_Pin)
 800dbec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800dbf0:	f000 80b0 	beq.w	800dd54 <HAL_GPIO_EXTI_Callback+0x170>
 800dbf4:	d804      	bhi.n	800dc00 <HAL_GPIO_EXTI_Callback+0x1c>
 800dbf6:	2801      	cmp	r0, #1
 800dbf8:	d042      	beq.n	800dc80 <HAL_GPIO_EXTI_Callback+0x9c>
 800dbfa:	2802      	cmp	r0, #2
 800dbfc:	d048      	beq.n	800dc90 <HAL_GPIO_EXTI_Callback+0xac>
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800dc04:	d034      	beq.n	800dc70 <HAL_GPIO_EXTI_Callback+0x8c>
 800dc06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800dc0a:	d06e      	beq.n	800dcea <HAL_GPIO_EXTI_Callback+0x106>
 800dc0c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800dc10:	f040 80a7 	bne.w	800dd62 <HAL_GPIO_EXTI_Callback+0x17e>
	{
	case Channel_1:  //right motor, 1.5->1ms forward, 1.5->2ms backward
	{
		if(!(GPIOC->IDR & Channel_1))
 800dc14:	4b54      	ldr	r3, [pc, #336]	; (800dd68 <HAL_GPIO_EXTI_Callback+0x184>)
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800dc1c:	d125      	bne.n	800dc6a <HAL_GPIO_EXTI_Callback+0x86>
		{
			//falling
			signal_interval = (temp_timer - c_counter[0])>0?
 800dc1e:	4b53      	ldr	r3, [pc, #332]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	b2a4      	uxth	r4, r4
 800dc24:	1ae4      	subs	r4, r4, r3
					(temp_timer - c_counter[0]):
					(temp_timer - c_counter[0] + COUNTER_RELOAD);
 800dc26:	2c00      	cmp	r4, #0
 800dc28:	dd04      	ble.n	800dc34 <HAL_GPIO_EXTI_Callback+0x50>
 800dc2a:	ee07 4a90 	vmov	s15, r4
 800dc2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc32:	e006      	b.n	800dc42 <HAL_GPIO_EXTI_Callback+0x5e>
 800dc34:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dc38:	4423      	add	r3, r4
 800dc3a:	ee07 3a90 	vmov	s15, r3
 800dc3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			//from 1000-2000 indicates time in micro seconds
			if(radio_flag) //in remote control mode
 800dc42:	4b4b      	ldr	r3, [pc, #300]	; (800dd70 <HAL_GPIO_EXTI_Callback+0x18c>)
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f000 808b 	beq.w	800dd62 <HAL_GPIO_EXTI_Callback+0x17e>
			{
				htim4.Instance->CCR1 = (float)(MAX_DUTY * signal_interval/2000);
 800dc4c:	4b49      	ldr	r3, [pc, #292]	; (800dd74 <HAL_GPIO_EXTI_Callback+0x190>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800dd78 <HAL_GPIO_EXTI_Callback+0x194>
 800dc54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc58:	eddf 6a48 	vldr	s13, [pc, #288]	; 800dd7c <HAL_GPIO_EXTI_Callback+0x198>
 800dc5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dc60:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800dc64:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
 800dc68:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else
			//rising
			c_counter[0] = temp_timer;
 800dc6a:	4b40      	ldr	r3, [pc, #256]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dc6c:	801d      	strh	r5, [r3, #0]
 800dc6e:	bd38      	pop	{r3, r4, r5, pc}
		break;
	}
	case Channel_2:
	{
		if(!(GPIOC->IDR & Channel_2))
 800dc70:	4b3d      	ldr	r3, [pc, #244]	; (800dd68 <HAL_GPIO_EXTI_Callback+0x184>)
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800dc78:	d073      	beq.n	800dd62 <HAL_GPIO_EXTI_Callback+0x17e>
			//falling

		}
		else
			//rising
			c_counter[1] = temp_timer;
 800dc7a:	4b3c      	ldr	r3, [pc, #240]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dc7c:	805d      	strh	r5, [r3, #2]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}

		break;
	}
	case Channel_3:
	{
		if(!(GPIOD->IDR & Channel_3))
 800dc80:	4b3f      	ldr	r3, [pc, #252]	; (800dd80 <HAL_GPIO_EXTI_Callback+0x19c>)
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	f013 0f01 	tst.w	r3, #1
 800dc88:	d06b      	beq.n	800dd62 <HAL_GPIO_EXTI_Callback+0x17e>
			//falling

		}
		else
			//rising
			c_counter[2] = temp_timer;
 800dc8a:	4b38      	ldr	r3, [pc, #224]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dc8c:	809d      	strh	r5, [r3, #4]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}

		break;
	}
	case Channel_4://left motor, 1.5->2ms forward, 1.5->1ms backward
	{
		if(!(GPIOD->IDR & Channel_4))
 800dc90:	4b3b      	ldr	r3, [pc, #236]	; (800dd80 <HAL_GPIO_EXTI_Callback+0x19c>)
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	f013 0f02 	tst.w	r3, #2
 800dc98:	d124      	bne.n	800dce4 <HAL_GPIO_EXTI_Callback+0x100>
		{
			//falling
			signal_interval = (temp_timer - c_counter[3])>0?
 800dc9a:	4b34      	ldr	r3, [pc, #208]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dc9c:	88db      	ldrh	r3, [r3, #6]
 800dc9e:	b2a4      	uxth	r4, r4
 800dca0:	1ae4      	subs	r4, r4, r3
					(temp_timer - c_counter[3]):
					(temp_timer - c_counter[3] + COUNTER_RELOAD);
 800dca2:	2c00      	cmp	r4, #0
 800dca4:	dd04      	ble.n	800dcb0 <HAL_GPIO_EXTI_Callback+0xcc>
 800dca6:	ee07 4a90 	vmov	s15, r4
 800dcaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcae:	e006      	b.n	800dcbe <HAL_GPIO_EXTI_Callback+0xda>
 800dcb0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dcb4:	4423      	add	r3, r4
 800dcb6:	ee07 3a90 	vmov	s15, r3
 800dcba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			//from 1000-2000 indicates time in micro seconds
			if(radio_flag) //in remote control mode
 800dcbe:	4b2c      	ldr	r3, [pc, #176]	; (800dd70 <HAL_GPIO_EXTI_Callback+0x18c>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d04d      	beq.n	800dd62 <HAL_GPIO_EXTI_Callback+0x17e>
			{
				htim4.Instance->CCR2 = (float)(MAX_DUTY * signal_interval/2000);
 800dcc6:	4b2b      	ldr	r3, [pc, #172]	; (800dd74 <HAL_GPIO_EXTI_Callback+0x190>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800dd78 <HAL_GPIO_EXTI_Callback+0x194>
 800dcce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcd2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800dd7c <HAL_GPIO_EXTI_Callback+0x198>
 800dcd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dcda:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800dcde:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
		else
			//rising
			c_counter[3] = temp_timer;
 800dce4:	4b21      	ldr	r3, [pc, #132]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dce6:	80dd      	strh	r5, [r3, #6]
 800dce8:	bd38      	pop	{r3, r4, r5, pc}

		break;
	}
	case Channel_5:
	{
		if(!(GPIOA->IDR & Channel_5))
 800dcea:	4b26      	ldr	r3, [pc, #152]	; (800dd84 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800dcf2:	d126      	bne.n	800dd42 <HAL_GPIO_EXTI_Callback+0x15e>
		{
			//falling
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_RESET);
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcfa:	481b      	ldr	r0, [pc, #108]	; (800dd68 <HAL_GPIO_EXTI_Callback+0x184>)
 800dcfc:	f7ff f906 	bl	800cf0c <HAL_GPIO_WritePin>
			signal_interval = (temp_timer - c_counter[4])>0?
 800dd00:	4b1a      	ldr	r3, [pc, #104]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dd02:	891b      	ldrh	r3, [r3, #8]
 800dd04:	b2a4      	uxth	r4, r4
 800dd06:	1ae4      	subs	r4, r4, r3
					(temp_timer - c_counter[4]):
					(temp_timer - c_counter[4] + COUNTER_RELOAD);
 800dd08:	2c00      	cmp	r4, #0
 800dd0a:	dd04      	ble.n	800dd16 <HAL_GPIO_EXTI_Callback+0x132>
 800dd0c:	ee07 4a90 	vmov	s15, r4
 800dd10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd14:	e006      	b.n	800dd24 <HAL_GPIO_EXTI_Callback+0x140>
 800dd16:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dd1a:	4423      	add	r3, r4
 800dd1c:	ee07 3a90 	vmov	s15, r3
 800dd20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if(signal_interval < 1500) //less than 1.5ms  1ms
 800dd24:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800dd88 <HAL_GPIO_EXTI_Callback+0x1a4>
 800dd28:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd30:	d503      	bpl.n	800dd3a <HAL_GPIO_EXTI_Callback+0x156>
				radio_flag = 0;
 800dd32:	2200      	movs	r2, #0
 800dd34:	4b0e      	ldr	r3, [pc, #56]	; (800dd70 <HAL_GPIO_EXTI_Callback+0x18c>)
 800dd36:	701a      	strb	r2, [r3, #0]
 800dd38:	bd38      	pop	{r3, r4, r5, pc}

			else						//more than 1.5ms  2ms
				radio_flag = 1;
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	4b0c      	ldr	r3, [pc, #48]	; (800dd70 <HAL_GPIO_EXTI_Callback+0x18c>)
 800dd3e:	701a      	strb	r2, [r3, #0]
 800dd40:	bd38      	pop	{r3, r4, r5, pc}

		}
		else
		{
			//rising
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_SET);
 800dd42:	2201      	movs	r2, #1
 800dd44:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd48:	4807      	ldr	r0, [pc, #28]	; (800dd68 <HAL_GPIO_EXTI_Callback+0x184>)
 800dd4a:	f7ff f8df 	bl	800cf0c <HAL_GPIO_WritePin>
			c_counter[4] = temp_timer;
 800dd4e:	4b07      	ldr	r3, [pc, #28]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dd50:	811d      	strh	r5, [r3, #8]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}

		break;
	}
	case Channel_6:
	{
		if(!(GPIOC->IDR & Channel_6))
 800dd54:	4b04      	ldr	r3, [pc, #16]	; (800dd68 <HAL_GPIO_EXTI_Callback+0x184>)
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800dd5c:	d001      	beq.n	800dd62 <HAL_GPIO_EXTI_Callback+0x17e>
			//falling

		}
		else
			//rising
			c_counter[5] = temp_timer;
 800dd5e:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <HAL_GPIO_EXTI_Callback+0x188>)
 800dd60:	815d      	strh	r5, [r3, #10]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	40010400 	.word	0x40010400
 800dd68:	40020800 	.word	0x40020800
 800dd6c:	20000af0 	.word	0x20000af0
 800dd70:	20000afc 	.word	0x20000afc
 800dd74:	20003dd4 	.word	0x20003dd4
 800dd78:	4752f000 	.word	0x4752f000
 800dd7c:	44fa0000 	.word	0x44fa0000
 800dd80:	40020c00 	.word	0x40020c00
 800dd84:	40020000 	.word	0x40020000
 800dd88:	44bb8000 	.word	0x44bb8000

0800dd8c <_ZN3ros16normalizeSecNSecERmS0_>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 800dd8c:	b430      	push	{r4, r5}
    uint32_t nsec_part= nsec % 1000000000UL;
 800dd8e:	680c      	ldr	r4, [r1, #0]
 800dd90:	0a63      	lsrs	r3, r4, #9
 800dd92:	4a07      	ldr	r2, [pc, #28]	; (800ddb0 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
 800dd94:	fba2 2303 	umull	r2, r3, r2, r3
 800dd98:	09da      	lsrs	r2, r3, #7
 800dd9a:	4d06      	ldr	r5, [pc, #24]	; (800ddb4 <_ZN3ros16normalizeSecNSecERmS0_+0x28>)
 800dd9c:	fb05 4212 	mls	r2, r5, r2, r4
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 800dda0:	6804      	ldr	r4, [r0, #0]
 800dda2:	eb04 13d3 	add.w	r3, r4, r3, lsr #7
 800dda6:	6003      	str	r3, [r0, #0]
    nsec = nsec_part;
 800dda8:	600a      	str	r2, [r1, #0]
  }
 800ddaa:	bc30      	pop	{r4, r5}
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	00044b83 	.word	0x00044b83
 800ddb4:	3b9aca00 	.word	0x3b9aca00

0800ddb8 <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800ddb8:	7903      	ldrb	r3, [r0, #4]
 800ddba:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	4770      	bx	lr

0800ddc0 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800ddc0:	780b      	ldrb	r3, [r1, #0]
 800ddc2:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 800ddc4:	2001      	movs	r0, #1
 800ddc6:	4770      	bx	lr

0800ddc8 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 800ddc8:	4800      	ldr	r0, [pc, #0]	; (800ddcc <_ZN8std_msgs5UInt87getTypeEv+0x4>)
 800ddca:	4770      	bx	lr
 800ddcc:	0801ad04 	.word	0x0801ad04

0800ddd0 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 800ddd0:	4800      	ldr	r0, [pc, #0]	; (800ddd4 <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
 800ddd2:	4770      	bx	lr
 800ddd4:	0801ad14 	.word	0x0801ad14

0800ddd8 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E>:
	}
}

void IMU::imuConfigCallback(const std_msgs::UInt8& config_msg)
{
	switch(config_msg.data)
 800ddd8:	790b      	ldrb	r3, [r1, #4]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d011      	beq.n	800de02 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x2a>
 800ddde:	b113      	cbz	r3, 800dde6 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0xe>
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d015      	beq.n	800de10 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x38>
 800dde4:	4770      	bx	lr
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 800ddec:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 800ddf0:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 800ddf4:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 800ddf8:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 800ddfc:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 800de00:	4770      	bx	lr
		acc_offset_.zero();
		mag_offset_.zero();
		//writeCalibData(); //no need?
		break;
	case MPU_ACC_GYRO_CALIB_CMD:
		calibrate_gyro_ = CALIBRATING_STEP;
 800de02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de06:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
		calibrate_acc_ = CALIBRATING_STEP;
 800de0a:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
		break;
 800de0e:	4770      	bx	lr
	case MPU_MAG_CALIB_CMD:
		calibrate_mag_ = CALIBRATING_MAG_STEP;
 800de10:	4b01      	ldr	r3, [pc, #4]	; (800de18 <_ZN3IMU17imuConfigCallbackERKN8std_msgs5UInt8E+0x40>)
 800de12:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 800de16:	4770      	bx	lr
 800de18:	0001d4c0 	.word	0x0001d4c0

0800de1c <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh>:
      {
        //std::binder1st t  = std::bind1st(std::mem_fun1_t())
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 800de1c:	b510      	push	{r4, lr}
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800de1e:	780b      	ldrb	r3, [r1, #0]
 800de20:	7403      	strb	r3, [r0, #16]
        msg.deserialize(data);
        this->fun_obj_(obj_, msg);
 800de22:	6942      	ldr	r2, [r0, #20]
 800de24:	f100 010c 	add.w	r1, r0, #12
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
 800de28:	69c3      	ldr	r3, [r0, #28]
 800de2a:	f013 0f01 	tst.w	r3, #1
 800de2e:	d101      	bne.n	800de34 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh+0x18>
 800de30:	6984      	ldr	r4, [r0, #24]
 800de32:	e003      	b.n	800de3c <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE8callbackEPh+0x20>
 800de34:	105c      	asrs	r4, r3, #1
 800de36:	5914      	ldr	r4, [r2, r4]
 800de38:	6980      	ldr	r0, [r0, #24]
 800de3a:	5824      	ldr	r4, [r4, r0]
 800de3c:	eb02 0063 	add.w	r0, r2, r3, asr #1
 800de40:	47a0      	blx	r4
 800de42:	bd10      	pop	{r4, pc}

0800de44 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE15getEndpointTypeEv>:
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 800de44:	6a00      	ldr	r0, [r0, #32]
 800de46:	4770      	bx	lr

0800de48 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->fun_obj_(obj_, msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800de48:	4800      	ldr	r0, [pc, #0]	; (800de4c <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE10getMsgTypeEv+0x4>)
 800de4a:	4770      	bx	lr
 800de4c:	0801ad04 	.word	0x0801ad04

0800de50 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800de50:	4800      	ldr	r0, [pc, #0]	; (800de54 <_ZN3ros11Subscriber2IN8std_msgs5UInt8E3IMUE9getMsgMD5Ev+0x4>)
 800de52:	4770      	bx	lr
 800de54:	0801ad14 	.word	0x0801ad14

0800de58 <_ZN3IMU9ledOutputEv>:
	return data_queue.size();

}

void IMU::ledOutput()
{
 800de58:	b508      	push	{r3, lr}
	if(calibrate_acc_ || calibrate_gyro_ || calibrate_mag_) LED0_L;
 800de5a:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800de5e:	b92b      	cbnz	r3, 800de6c <_ZN3IMU9ledOutputEv+0x14>
 800de60:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800de64:	b913      	cbnz	r3, 800de6c <_ZN3IMU9ledOutputEv+0x14>
 800de66:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 800de6a:	b12b      	cbz	r3, 800de78 <_ZN3IMU9ledOutputEv+0x20>
 800de6c:	2201      	movs	r2, #1
 800de6e:	2104      	movs	r1, #4
 800de70:	4804      	ldr	r0, [pc, #16]	; (800de84 <_ZN3IMU9ledOutputEv+0x2c>)
 800de72:	f7ff f84b 	bl	800cf0c <HAL_GPIO_WritePin>
 800de76:	bd08      	pop	{r3, pc}
	else LED0_H;
 800de78:	2200      	movs	r2, #0
 800de7a:	2104      	movs	r1, #4
 800de7c:	4801      	ldr	r0, [pc, #4]	; (800de84 <_ZN3IMU9ledOutputEv+0x2c>)
 800de7e:	f7ff f845 	bl	800cf0c <HAL_GPIO_WritePin>
 800de82:	bd08      	pop	{r3, pc}
 800de84:	40021000 	.word	0x40021000

0800de88 <_ZN3IMU13getCalibratedEv>:
}

bool IMU::getCalibrated()
{
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 800de88:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800de8c:	b93b      	cbnz	r3, 800de9e <_ZN3IMU13getCalibratedEv+0x16>
 800de8e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800de92:	b933      	cbnz	r3, 800dea2 <_ZN3IMU13getCalibratedEv+0x1a>
 800de94:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 800de98:	b12b      	cbz	r3, 800dea6 <_ZN3IMU13getCalibratedEv+0x1e>
	else return false;
 800de9a:	2000      	movs	r0, #0
 800de9c:	4770      	bx	lr
 800de9e:	2000      	movs	r0, #0
 800dea0:	4770      	bx	lr
 800dea2:	2000      	movs	r0, #0
 800dea4:	4770      	bx	lr
	else LED0_H;
}

bool IMU::getCalibrated()
{
	if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
 800dea6:	2001      	movs	r0, #1
	else return false;
}
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop

0800deac <_ZN3IMU13readCalibDataEv>:

void IMU::readCalibData()
{
 800deac:	b538      	push	{r3, r4, r5, lr}
 800deae:	4604      	mov	r4, r0
	HAL_StatusTypeDef status = HAL_ERROR;

	status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800deb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800deb4:	f7ff f976 	bl	800d1a4 <FLASH_WaitForLastOperation>

	if(status == HAL_OK)
 800deb8:	b9d0      	cbnz	r0, 800def0 <_ZN3IMU13readCalibDataEv+0x44>
 800deba:	2100      	movs	r1, #0
	{
		for(int i = 0; i < 3; i++)
 800debc:	2902      	cmp	r1, #2
 800debe:	dc12      	bgt.n	800dee6 <_ZN3IMU13readCalibDataEv+0x3a>
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800dec0:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800dec4:	b2cb      	uxtb	r3, r1
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	441a      	add	r2, r3
		{
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
 800deca:	008d      	lsls	r5, r1, #2
 800decc:	4809      	ldr	r0, [pc, #36]	; (800def4 <_ZN3IMU13readCalibDataEv+0x48>)
 800dece:	4428      	add	r0, r5
 800ded0:	6800      	ldr	r0, [r0, #0]
 800ded2:	6010      	str	r0, [r2, #0]
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800ded4:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800ded8:	4413      	add	r3, r2
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
 800deda:	4a07      	ldr	r2, [pc, #28]	; (800def8 <_ZN3IMU13readCalibDataEv+0x4c>)
 800dedc:	442a      	add	r2, r5
 800dede:	6812      	ldr	r2, [r2, #0]
 800dee0:	601a      	str	r2, [r3, #0]

	status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);

	if(status == HAL_OK)
	{
		for(int i = 0; i < 3; i++)
 800dee2:	3101      	adds	r1, #1
 800dee4:	e7ea      	b.n	800debc <_ZN3IMU13readCalibDataEv+0x10>
		{
			acc_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i));
			mag_offset_[i] = (*(__IO float*)(CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i));
		}
		/* If the program operation is completed, disable the PG Bit */
		FLASH->CR &= (~FLASH_CR_PG);
 800dee6:	4a05      	ldr	r2, [pc, #20]	; (800defc <_ZN3IMU13readCalibDataEv+0x50>)
 800dee8:	6913      	ldr	r3, [r2, #16]
 800deea:	f023 0301 	bic.w	r3, r3, #1
 800deee:	6113      	str	r3, [r2, #16]
 800def0:	bd38      	pop	{r3, r4, r5, pc}
 800def2:	bf00      	nop
 800def4:	08040000 	.word	0x08040000
 800def8:	0804000c 	.word	0x0804000c
 800defc:	40023c00 	.word	0x40023c00

0800df00 <_ZN3IMU14writeCalibDataEv>:
	}
}

void IMU::writeCalibData()
{
 800df00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df02:	b087      	sub	sp, #28
 800df04:	4606      	mov	r6, r0
	HAL_StatusTypeDef r;

	r = HAL_FLASH_Unlock();
 800df06:	f7ff f931 	bl	800d16c <HAL_FLASH_Unlock>
	if( r != HAL_OK ) return;
 800df0a:	bb58      	cbnz	r0, 800df64 <_ZN3IMU14writeCalibDataEv+0x64>

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	9301      	str	r3, [sp, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800df10:	9302      	str	r3, [sp, #8]
	EraseInitStruct.Sector = CALIB_DATA_SECTOR ;
 800df12:	2305      	movs	r3, #5
 800df14:	9303      	str	r3, [sp, #12]
	EraseInitStruct.NbSectors = 1;
 800df16:	2301      	movs	r3, #1
 800df18:	9304      	str	r3, [sp, #16]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800df1a:	2302      	movs	r3, #2
 800df1c:	9305      	str	r3, [sp, #20]

	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800df1e:	a901      	add	r1, sp, #4
 800df20:	a802      	add	r0, sp, #8
 800df22:	f7ff f84b 	bl	800cfbc <HAL_FLASHEx_Erase>
	if ( r != HAL_OK )
 800df26:	b9e8      	cbnz	r0, 800df64 <_ZN3IMU14writeCalibDataEv+0x64>
 800df28:	2500      	movs	r5, #0
		return;

	for(int i = 0; i < 3; i++)
 800df2a:	2d02      	cmp	r5, #2
 800df2c:	dc18      	bgt.n	800df60 <_ZN3IMU14writeCalibDataEv+0x60>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i, (*(__IO uint64_t*)(&acc_offset_[i])));
 800df2e:	00af      	lsls	r7, r5, #2
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800df30:	f106 03d0 	add.w	r3, r6, #208	; 0xd0
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800df34:	b2ec      	uxtb	r4, r5
 800df36:	00a4      	lsls	r4, r4, #2
 800df38:	4423      	add	r3, r4
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	490a      	ldr	r1, [pc, #40]	; (800df68 <_ZN3IMU14writeCalibDataEv+0x68>)
 800df40:	4439      	add	r1, r7
 800df42:	2002      	movs	r0, #2
 800df44:	f7ff f95e 	bl	800d204 <HAL_FLASH_Program>
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800df48:	f106 03e8 	add.w	r3, r6, #232	; 0xe8
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800df4c:	441c      	add	r4, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i, (*(__IO uint64_t*)(&mag_offset_[i])));
 800df4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df52:	4906      	ldr	r1, [pc, #24]	; (800df6c <_ZN3IMU14writeCalibDataEv+0x6c>)
 800df54:	4439      	add	r1, r7
 800df56:	2002      	movs	r0, #2
 800df58:	f7ff f954 	bl	800d204 <HAL_FLASH_Program>

	r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
	if ( r != HAL_OK )
		return;

	for(int i = 0; i < 3; i++)
 800df5c:	3501      	adds	r5, #1
 800df5e:	e7e4      	b.n	800df2a <_ZN3IMU14writeCalibDataEv+0x2a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_ACC_ADDRESS + 4 * i, (*(__IO uint64_t*)(&acc_offset_[i])));
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CALIB_DATA_ADDRESS + CALIB_MAG_ADDRESS + 4 * i, (*(__IO uint64_t*)(&mag_offset_[i])));

	}

	r = HAL_FLASH_Lock();
 800df60:	f7ff f916 	bl	800d190 <HAL_FLASH_Lock>
}
 800df64:	b007      	add	sp, #28
 800df66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df68:	08040000 	.word	0x08040000
 800df6c:	0804000c 	.word	0x0804000c

0800df70 <_ZN3IMU8mpuWriteEhh>:



void IMU::mpuWrite(uint8_t address, uint8_t value)
{
 800df70:	b530      	push	{r4, r5, lr}
 800df72:	b083      	sub	sp, #12
 800df74:	4605      	mov	r5, r0
 800df76:	f88d 1007 	strb.w	r1, [sp, #7]
 800df7a:	f88d 2006 	strb.w	r2, [sp, #6]
	IMU_SPI_CS_L;
 800df7e:	4c0e      	ldr	r4, [pc, #56]	; (800dfb8 <_ZN3IMU8mpuWriteEhh+0x48>)
 800df80:	2200      	movs	r2, #0
 800df82:	2140      	movs	r1, #64	; 0x40
 800df84:	4620      	mov	r0, r4
 800df86:	f7fe ffc1 	bl	800cf0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 800df8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df8e:	2201      	movs	r2, #1
 800df90:	f10d 0107 	add.w	r1, sp, #7
 800df94:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800df96:	f7fd fa57 	bl	800b448 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 800df9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f10d 0106 	add.w	r1, sp, #6
 800dfa4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800dfa6:	f7fd fa4f 	bl	800b448 <HAL_SPI_Transmit>
	IMU_SPI_CS_H;
 800dfaa:	2201      	movs	r2, #1
 800dfac:	2140      	movs	r1, #64	; 0x40
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f7fe ffac 	bl	800cf0c <HAL_GPIO_WritePin>
}
 800dfb4:	b003      	add	sp, #12
 800dfb6:	bd30      	pop	{r4, r5, pc}
 800dfb8:	40020400 	.word	0x40020400

0800dfbc <_ZN3IMU8gyroInitEv>:
	IMU_SPI_CS_H;
	return temp;
}

void IMU::gyroInit(void)
{
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	4604      	mov	r4, r0
	HAL_Delay(100);
 800dfc0:	2064      	movs	r0, #100	; 0x64
 800dfc2:	f7ff fd4b 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x6B, 0x80);             //PWR_MGMT_1    -- DEVICE_RESET 1
 800dfc6:	2280      	movs	r2, #128	; 0x80
 800dfc8:	216b      	movs	r1, #107	; 0x6b
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f7ff ffd0 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800dfd0:	200a      	movs	r0, #10
 800dfd2:	f7ff fd43 	bl	800da5c <HAL_Delay>
	//mpuWrite( 0x6B, 0x01);             //PWR_MGMT_1    -- SLEEP 0; CYCLE 0; TEMP_DIS 0; CLKSEL 3 (PLL with Z Gyro reference)
	HAL_Delay(1); //very important!, some duration for process the setting
 800dfd6:	2001      	movs	r0, #1
 800dfd8:	f7ff fd40 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x6A, 0x10);             //disable i2c communication
 800dfdc:	2210      	movs	r2, #16
 800dfde:	216a      	movs	r1, #106	; 0x6a
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7ff ffc5 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800dfe6:	2001      	movs	r0, #1
 800dfe8:	f7ff fd38 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 800dfec:	2201      	movs	r2, #1
 800dfee:	211a      	movs	r1, #26
 800dff0:	4620      	mov	r0, r4
 800dff2:	f7ff ffbd 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1); //very importnat! between gyro and acc
 800dff6:	2001      	movs	r0, #1
 800dff8:	f7ff fd30 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 800dffc:	2218      	movs	r2, #24
 800dffe:	211b      	movs	r1, #27
 800e000:	4620      	mov	r0, r4
 800e002:	f7ff ffb5 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10); //very importnat! between gyro and acc
 800e006:	200a      	movs	r0, #10
 800e008:	f7ff fd28 	bl	800da5c <HAL_Delay>

	//calib in the first time
	calibrate_gyro_ = CALIBRATING_STEP;
 800e00c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e010:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 800e01a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 800e01e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 800e022:	bd10      	pop	{r4, pc}

0800e024 <_ZN3IMU7accInitEv>:

	raw_gyro_p_.zero();
}

void IMU::accInit (void) {
 800e024:	b510      	push	{r4, lr}
 800e026:	4604      	mov	r4, r0
	mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 800e028:	2210      	movs	r2, #16
 800e02a:	211c      	movs	r1, #28
 800e02c:	f7ff ffa0 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e030:	2001      	movs	r0, #1
 800e032:	f7ff fd13 	bl	800da5c <HAL_Delay>
	//old: acceleration bandwidth is 460Hz
	mpuWrite( 0x1D, ACC_DLPF_CFG);
 800e036:	2203      	movs	r2, #3
 800e038:	211d      	movs	r1, #29
 800e03a:	4620      	mov	r0, r4
 800e03c:	f7ff ff98 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800e040:	200a      	movs	r0, #10
 800e042:	f7ff fd0b 	bl	800da5c <HAL_Delay>
	calibrate_acc_ = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800e04c:	2300      	movs	r3, #0
 800e04e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 800e052:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 800e056:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 800e05a:	bd10      	pop	{r4, pc}

0800e05c <_ZN3IMU7magInitEv>:
	raw_acc_p_.zero();
}


void IMU::magInit(void)
{
 800e05c:	b510      	push	{r4, lr}
 800e05e:	4604      	mov	r4, r0
	HAL_Delay(10);
 800e060:	200a      	movs	r0, #10
 800e062:	f7ff fcfb 	bl	800da5c <HAL_Delay>
	//at this stage, the MAG is configured via the original MAG init function in I2C bypass mode
	//now we configure MPU as a I2C Master device to handle the MAG via the I2C AUX port (done here for HMC5883)
	mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 800e066:	2220      	movs	r2, #32
 800e068:	216a      	movs	r1, #106	; 0x6a
 800e06a:	4620      	mov	r0, r4
 800e06c:	f7ff ff80 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(10);
 800e070:	200a      	movs	r0, #10
 800e072:	f7ff fcf3 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 800e076:	2200      	movs	r2, #0
 800e078:	2137      	movs	r1, #55	; 0x37
 800e07a:	4620      	mov	r0, r4
 800e07c:	f7ff ff78 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e080:	2001      	movs	r0, #1
 800e082:	f7ff fceb 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 800e086:	220d      	movs	r2, #13
 800e088:	2124      	movs	r1, #36	; 0x24
 800e08a:	4620      	mov	r0, r4
 800e08c:	f7ff ff70 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e090:	2001      	movs	r0, #1
 800e092:	f7ff fce3 	bl	800da5c <HAL_Delay>

	//write mode
	mpuWrite( 0x25, MAG_ADDRESS);
 800e096:	220c      	movs	r2, #12
 800e098:	2125      	movs	r1, #37	; 0x25
 800e09a:	4620      	mov	r0, r4
 800e09c:	f7ff ff68 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e0a0:	2001      	movs	r0, #1
 800e0a2:	f7ff fcdb 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x26, 0x0B);
 800e0a6:	220b      	movs	r2, #11
 800e0a8:	2126      	movs	r1, #38	; 0x26
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f7ff ff60 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e0b0:	2001      	movs	r0, #1
 800e0b2:	f7ff fcd3 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x63, 0x01);
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	2163      	movs	r1, #99	; 0x63
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f7ff ff58 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	f7ff fccb 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800e0c6:	2281      	movs	r2, #129	; 0x81
 800e0c8:	2127      	movs	r1, #39	; 0x27
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f7ff ff50 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e0d0:	2001      	movs	r0, #1
 800e0d2:	f7ff fcc3 	bl	800da5c <HAL_Delay>

	mpuWrite( 0x26, 0x0A);
 800e0d6:	220a      	movs	r2, #10
 800e0d8:	2126      	movs	r1, #38	; 0x26
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f7ff ff48 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e0e0:	2001      	movs	r0, #1
 800e0e2:	f7ff fcbb 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x63, 0x16);
 800e0e6:	2216      	movs	r2, #22
 800e0e8:	2163      	movs	r1, #99	; 0x63
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f7ff ff40 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e0f0:	2001      	movs	r0, #1
 800e0f2:	f7ff fcb3 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x27, 0x81);
 800e0f6:	2281      	movs	r2, #129	; 0x81
 800e0f8:	2127      	movs	r1, #39	; 0x27
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f7ff ff38 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e100:	2001      	movs	r0, #1
 800e102:	f7ff fcab 	bl	800da5c <HAL_Delay>

	//read mode
	mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 800e106:	228c      	movs	r2, #140	; 0x8c
 800e108:	2125      	movs	r1, #37	; 0x25
 800e10a:	4620      	mov	r0, r4
 800e10c:	f7ff ff30 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e110:	2001      	movs	r0, #1
 800e112:	f7ff fca3 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 800e116:	2203      	movs	r2, #3
 800e118:	2126      	movs	r1, #38	; 0x26
 800e11a:	4620      	mov	r0, r4
 800e11c:	f7ff ff28 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e120:	2001      	movs	r0, #1
 800e122:	f7ff fc9b 	bl	800da5c <HAL_Delay>
	mpuWrite( 0x27, 0x87);
 800e126:	2287      	movs	r2, #135	; 0x87
 800e128:	2127      	movs	r1, #39	; 0x27
 800e12a:	4620      	mov	r0, r4
 800e12c:	f7ff ff20 	bl	800df70 <_ZN3IMU8mpuWriteEhh>
	HAL_Delay(1);
 800e130:	2001      	movs	r0, #1
 800e132:	f7ff fc93 	bl	800da5c <HAL_Delay>

	calibrate_mag_ = 0;
 800e136:	2300      	movs	r3, #0
 800e138:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 800e13c:	bd10      	pop	{r4, pc}
 800e13e:	bf00      	nop

0800e140 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
{
	init(hspi, nh);
}

void IMU::init(SPI_HandleTypeDef* hspi, ros::NodeHandle* nh)
{
 800e140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e142:	b087      	sub	sp, #28
 800e144:	4605      	mov	r5, r0
 800e146:	460e      	mov	r6, r1
	reset_calib_flag_  = 0;
 800e148:	2400      	movs	r4, #0
 800e14a:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
 800e14e:	2300      	movs	r3, #0
 800e150:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800e154:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800e158:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800e15c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 800e160:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 800e164:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800e168:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 800e16c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 800e170:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0

	acc_.zero();
	gyro_.zero();
	mag_.zero();
	nh_ = nh;
 800e174:	6342      	str	r2, [r0, #52]	; 0x34

	imu_config_sub_ = new ros::Subscriber2<std_msgs::UInt8, IMU> ("/imu_config_cmd", &IMU::imuConfigCallback, this );
 800e176:	2024      	movs	r0, #36	; 0x24
 800e178:	f006 f93a 	bl	80143f0 <_Znwj>
 800e17c:	4607      	mov	r7, r0
 800e17e:	4b28      	ldr	r3, [pc, #160]	; (800e220 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xe0>)
 800e180:	9304      	str	r3, [sp, #16]
 800e182:	9405      	str	r4, [sp, #20]
 800e184:	ab06      	add	r3, sp, #24
 800e186:	e913 0003 	ldmdb	r3, {r0, r1}
 800e18a:	e88d 0003 	stmia.w	sp, {r0, r1}
    public:
      typedef void(T::*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber2(const char * topic_name, CallbackT cb, T *obj,  int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 800e18e:	4b25      	ldr	r3, [pc, #148]	; (800e224 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xe4>)
 800e190:	603b      	str	r3, [r7, #0]
  {
    public:
      uint8_t data;

    UInt8():
      data(0)
 800e192:	4b25      	ldr	r3, [pc, #148]	; (800e228 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xe8>)
 800e194:	60fb      	str	r3, [r7, #12]
 800e196:	743c      	strb	r4, [r7, #16]
 800e198:	617d      	str	r5, [r7, #20]
 800e19a:	ab02      	add	r3, sp, #8
 800e19c:	e883 0003 	stmia.w	r3, {r0, r1}
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }
 800e1a0:	f107 0218 	add.w	r2, r7, #24
 800e1a4:	e882 0003 	stmia.w	r2, {r0, r1}
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	623b      	str	r3, [r7, #32]
      {
        //std::binder1st t  = std::bind1st(std::mem_fun1_t())
        topic_ = topic_name;
 800e1ac:	4b1f      	ldr	r3, [pc, #124]	; (800e22c <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xec>)
 800e1ae:	60bb      	str	r3, [r7, #8]
 800e1b0:	63af      	str	r7, [r5, #56]	; 0x38
	nh_->subscribe<std_msgs::UInt8, IMU>(*imu_config_sub_);
 800e1b2:	6b69      	ldr	r1, [r5, #52]	; 0x34
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800e1b4:	4623      	mov	r3, r4
 800e1b6:	2b13      	cmp	r3, #19
 800e1b8:	dc0f      	bgt.n	800e1da <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x9a>
        if(subscribers[i] == 0){ // empty slot
 800e1ba:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 800e1be:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e1c2:	6852      	ldr	r2, [r2, #4]
 800e1c4:	b93a      	cbnz	r2, 800e1d6 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x96>
          subscribers[i] = (Subscriber_*) &s;
 800e1c6:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 800e1ca:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e1ce:	604f      	str	r7, [r1, #4]
          s.id_ = i+100;
 800e1d0:	3364      	adds	r3, #100	; 0x64
 800e1d2:	607b      	str	r3, [r7, #4]
 800e1d4:	e001      	b.n	800e1da <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x9a>
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	e7ed      	b.n	800e1b6 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x76>

	ahb_suspend_flag_ = false;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
	mag_filtering_flag_ = false;
 800e1e0:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
	mag_outlier_counter_ = 0;
 800e1e4:	f8a5 310e 	strh.w	r3, [r5, #270]	; 0x10e

	hspi_ = hspi;
 800e1e8:	632e      	str	r6, [r5, #48]	; 0x30
	readCalibData();
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f7ff fe5e 	bl	800deac <_ZN3IMU13readCalibDataEv>
	gyroInit();
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f7ff fee3 	bl	800dfbc <_ZN3IMU8gyroInitEv>
	accInit();
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f7ff ff14 	bl	800e024 <_ZN3IMU7accInitEv>
	magInit();
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f7ff ff2d 	bl	800e05c <_ZN3IMU7magInitEv>

	/* change to 13.5Mhz for polling sensor data from acc, gyro and mag */
	hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800e202:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	6813      	ldr	r3, [r2, #0]
 800e208:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e20c:	6013      	str	r3, [r2, #0]
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 800e20e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	f043 0310 	orr.w	r3, r3, #16
 800e218:	6013      	str	r3, [r2, #0]

}
 800e21a:	b007      	add	sp, #28
 800e21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e21e:	bf00      	nop
 800e220:	0800ddd9 	.word	0x0800ddd9
 800e224:	0801acf4 	.word	0x0801acf4
 800e228:	0801acdc 	.word	0x0801acdc
 800e22c:	0801ad38 	.word	0x0801ad38

0800e230 <_ZN3IMU4readEv>:

	calibrate_mag_ = 0;
}

void IMU::read()
{
 800e230:	b570      	push	{r4, r5, r6, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	4604      	mov	r4, r0
	uint8_t adc_gyro[6];
	uint8_t adc_acc[6];
	uint8_t adc_mag[7];

	uint8_t t_data[1];
	t_data[0] = 0x43 | 0x80;
 800e236:	ae08      	add	r6, sp, #32
 800e238:	23c3      	movs	r3, #195	; 0xc3
 800e23a:	f806 3d1c 	strb.w	r3, [r6, #-28]!

	IMU_SPI_CS_L;
 800e23e:	4d97      	ldr	r5, [pc, #604]	; (800e49c <_ZN3IMU4readEv+0x26c>)
 800e240:	2200      	movs	r2, #0
 800e242:	2140      	movs	r1, #64	; 0x40
 800e244:	4628      	mov	r0, r5
 800e246:	f7fe fe61 	bl	800cf0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800e24a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e24e:	2201      	movs	r2, #1
 800e250:	4631      	mov	r1, r6
 800e252:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e254:	f7fd f8f8 	bl	800b448 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_gyro, 6, 1000);
 800e258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e25c:	2206      	movs	r2, #6
 800e25e:	a906      	add	r1, sp, #24
 800e260:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e262:	f7fd fb63 	bl	800b92c <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 800e266:	2201      	movs	r2, #1
 800e268:	2140      	movs	r1, #64	; 0x40
 800e26a:	4628      	mov	r0, r5
 800e26c:	f7fe fe4e 	bl	800cf0c <HAL_GPIO_WritePin>

	/* we need add some delay between each sensor reading */
	raw_gyro_adc_[0] = (int16_t)(adc_gyro[0] << 8 | adc_gyro[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800e270:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800e274:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e278:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e27c:	b21b      	sxth	r3, r3
 800e27e:	ee07 3a10 	vmov	s14, r3
 800e282:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e286:	ed9f 5a86 	vldr	s10, [pc, #536]	; 800e4a0 <_ZN3IMU4readEv+0x270>
 800e28a:	ee27 7a05 	vmul.f32	s14, s14, s10
 800e28e:	eddf 5a85 	vldr	s11, [pc, #532]	; 800e4a4 <_ZN3IMU4readEv+0x274>
 800e292:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800e296:	ed9f 6a84 	vldr	s12, [pc, #528]	; 800e4a8 <_ZN3IMU4readEv+0x278>
 800e29a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e29e:	eddf 6a83 	vldr	s13, [pc, #524]	; 800e4ac <_ZN3IMU4readEv+0x27c>
 800e2a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e2a6:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
	raw_gyro_adc_[1] = (int16_t)(adc_gyro[2] << 8 | adc_gyro[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800e2aa:	f89d 201a 	ldrb.w	r2, [sp, #26]
 800e2ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e2b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2b6:	b21b      	sxth	r3, r3
 800e2b8:	ee07 3a10 	vmov	s14, r3
 800e2bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e2c0:	ee27 7a05 	vmul.f32	s14, s14, s10
 800e2c4:	eec7 7a25 	vdiv.f32	s15, s14, s11
 800e2c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e2cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e2d0:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
	raw_gyro_adc_[2] = (int16_t)(adc_gyro[4] << 8 | adc_gyro[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
 800e2d4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800e2d8:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e2dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e2e0:	b21b      	sxth	r3, r3
 800e2e2:	ee07 3a90 	vmov	s15, r3
 800e2e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2ea:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e2ee:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e2f2:	ee67 7a06 	vmul.f32	s15, s14, s12
 800e2f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e2fa:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48

	t_data[0] = 0x3B | 0x80;
 800e2fe:	23bb      	movs	r3, #187	; 0xbb
 800e300:	f88d 3004 	strb.w	r3, [sp, #4]
	IMU_SPI_CS_L;
 800e304:	2200      	movs	r2, #0
 800e306:	2140      	movs	r1, #64	; 0x40
 800e308:	4628      	mov	r0, r5
 800e30a:	f7fe fdff 	bl	800cf0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800e30e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e312:	2201      	movs	r2, #1
 800e314:	4631      	mov	r1, r6
 800e316:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e318:	f7fd f896 	bl	800b448 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi_, adc_acc, 6, 1000);
 800e31c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e320:	2206      	movs	r2, #6
 800e322:	a904      	add	r1, sp, #16
 800e324:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e326:	f7fd fb01 	bl	800b92c <HAL_SPI_Receive>
	IMU_SPI_CS_H;
 800e32a:	2201      	movs	r2, #1
 800e32c:	2140      	movs	r1, #64	; 0x40
 800e32e:	4628      	mov	r0, r5
 800e330:	f7fe fdec 	bl	800cf0c <HAL_GPIO_WritePin>

	/* we need add some delay between each sensor reading */
	raw_acc_adc_[0] = (int16_t)(adc_acc[0] << 8 | adc_acc[1]) / 4096.0f * GRAVITY_MSS;
 800e334:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800e338:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800e33c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e340:	b21b      	sxth	r3, r3
 800e342:	ee07 3a10 	vmov	s14, r3
 800e346:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e34a:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800e4b0 <_ZN3IMU4readEv+0x280>
 800e34e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e352:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e4b4 <_ZN3IMU4readEv+0x284>
 800e356:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e35a:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
	raw_acc_adc_[1] = (int16_t)(adc_acc[2] << 8 | adc_acc[3]) / 4096.0f * GRAVITY_MSS;
 800e35e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800e362:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800e366:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e36a:	b21b      	sxth	r3, r3
 800e36c:	ee07 3a10 	vmov	s14, r3
 800e370:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e374:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e378:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e37c:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
	raw_acc_adc_[2] = (int16_t)(adc_acc[4] << 8 | adc_acc[5]) / 4096.0f * GRAVITY_MSS;
 800e380:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e384:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800e388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e38c:	b21b      	sxth	r3, r3
 800e38e:	ee07 3a90 	vmov	s15, r3
 800e392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e396:	ee67 7a06 	vmul.f32	s15, s14, s12
 800e39a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e39e:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54


	if(i == MAG_PRESCALER)
 800e3a2:	4b45      	ldr	r3, [pc, #276]	; (800e4b8 <_ZN3IMU4readEv+0x288>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b04      	cmp	r3, #4
 800e3a8:	d16b      	bne.n	800e482 <_ZN3IMU4readEv+0x252>
	{
		//mag is in low speed
		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800e3aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	6813      	ldr	r3, [r2, #0]
 800e3b0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e3b4:	6013      	str	r3, [r2, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
 800e3b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	6813      	ldr	r3, [r2, #0]
 800e3bc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800e3c0:	6013      	str	r3, [r2, #0]
		t_data[0] = 0x49 | 0x80;
 800e3c2:	ad08      	add	r5, sp, #32
 800e3c4:	23c9      	movs	r3, #201	; 0xc9
 800e3c6:	f805 3d1c 	strb.w	r3, [r5, #-28]!
		IMU_SPI_CS_L;
 800e3ca:	4e34      	ldr	r6, [pc, #208]	; (800e49c <_ZN3IMU4readEv+0x26c>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2140      	movs	r1, #64	; 0x40
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7fe fd9b 	bl	800cf0c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 800e3d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e3da:	2201      	movs	r2, #1
 800e3dc:	4629      	mov	r1, r5
 800e3de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e3e0:	f7fd f832 	bl	800b448 <HAL_SPI_Transmit>
		HAL_SPI_Receive(hspi_, adc_mag, 7, 1000);
 800e3e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e3e8:	2207      	movs	r2, #7
 800e3ea:	a902      	add	r1, sp, #8
 800e3ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e3ee:	f7fd fa9d 	bl	800b92c <HAL_SPI_Receive>
		IMU_SPI_CS_H;
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	2140      	movs	r1, #64	; 0x40
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f7fe fd88 	bl	800cf0c <HAL_GPIO_WritePin>

		hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 800e3fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	6813      	ldr	r3, [r2, #0]
 800e402:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e406:	6013      	str	r3, [r2, #0]
		hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 800e408:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	6813      	ldr	r3, [r2, #0]
 800e40e:	f043 0310 	orr.w	r3, r3, #16
 800e412:	6013      	str	r3, [r2, #0]

		//uT(10e-6 T)
		raw_mag_adc_[0] = (int16_t)(adc_mag[1] << 8 | adc_mag[0]) * 4912.0f / 32760.0f;
 800e414:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800e418:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e41c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e420:	b21b      	sxth	r3, r3
 800e422:	ee07 3a10 	vmov	s14, r3
 800e426:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e42a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 800e4bc <_ZN3IMU4readEv+0x28c>
 800e42e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e432:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e4c0 <_ZN3IMU4readEv+0x290>
 800e436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e43a:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
		raw_mag_adc_[1] = (int16_t)(adc_mag[3] << 8 | adc_mag[2]) * 4912.0f / 32760.0f;
 800e43e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800e442:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800e446:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e44a:	b21b      	sxth	r3, r3
 800e44c:	ee07 3a10 	vmov	s14, r3
 800e450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e454:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e45c:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
		raw_mag_adc_[2] = (int16_t)(adc_mag[5] << 8 | adc_mag[4]) * 4912.0f / 32760.0f;
 800e460:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e464:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e468:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e46c:	b21b      	sxth	r3, r3
 800e46e:	ee07 3a90 	vmov	s15, r3
 800e472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e476:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e47a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e47e:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
	}
	if(i == MAG_PRESCALER) i =0;
 800e482:	4b0d      	ldr	r3, [pc, #52]	; (800e4b8 <_ZN3IMU4readEv+0x288>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2b04      	cmp	r3, #4
 800e488:	d103      	bne.n	800e492 <_ZN3IMU4readEv+0x262>
 800e48a:	2200      	movs	r2, #0
 800e48c:	4b0a      	ldr	r3, [pc, #40]	; (800e4b8 <_ZN3IMU4readEv+0x288>)
 800e48e:	601a      	str	r2, [r3, #0]
 800e490:	e002      	b.n	800e498 <_ZN3IMU4readEv+0x268>
	else i++;
 800e492:	3301      	adds	r3, #1
 800e494:	4a08      	ldr	r2, [pc, #32]	; (800e4b8 <_ZN3IMU4readEv+0x288>)
 800e496:	6013      	str	r3, [r2, #0]

}
 800e498:	b008      	add	sp, #32
 800e49a:	bd70      	pop	{r4, r5, r6, pc}
 800e49c:	40020400 	.word	0x40020400
 800e4a0:	44fa0000 	.word	0x44fa0000
 800e4a4:	46fffe00 	.word	0x46fffe00
 800e4a8:	40490fdb 	.word	0x40490fdb
 800e4ac:	43340000 	.word	0x43340000
 800e4b0:	39800000 	.word	0x39800000
 800e4b4:	411ce80a 	.word	0x411ce80a
 800e4b8:	20000574 	.word	0x20000574
 800e4bc:	45998000 	.word	0x45998000
 800e4c0:	46fff000 	.word	0x46fff000

0800e4c4 <_ZN3IMU7processEv>:

void IMU::process (void) 
{
 800e4c4:	b530      	push	{r4, r5, lr}
 800e4c6:	ed2d 8b02 	vpush	{d8}
 800e4ca:	b08b      	sub	sp, #44	; 0x2c
 800e4cc:	4604      	mov	r4, r0

	/* gyro part */
	if (calibrate_gyro_ > 0)
 800e4ce:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	dd1f      	ble.n	800e516 <_ZN3IMU7processEv+0x52>
	{
		if (calibrate_gyro_ == CALIBRATING_STEP)
 800e4d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e4da:	d106      	bne.n	800e4ea <_ZN3IMU7processEv+0x26>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 800e4e2:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800e4e6:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
			gyro_offset_.zero();

		gyro_offset_ += raw_gyro_adc_;
 800e4ea:	f104 05dc 	add.w	r5, r4, #220	; 0xdc
 800e4ee:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f005 f8d0 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>
		if (calibrate_gyro_ == 1)
 800e4f8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d104      	bne.n	800e50a <_ZN3IMU7processEv+0x46>
		{
			gyro_offset_ /= (float)CALIBRATING_STEP;
 800e500:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 800e810 <_ZN3IMU7processEv+0x34c>
 800e504:	4628      	mov	r0, r5
 800e506:	f005 f86d 	bl	80135e4 <_ZN7Vector3IfEdVEf>
		}
		calibrate_gyro_--;
 800e50a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800e50e:	3b01      	subs	r3, #1
 800e510:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 800e514:	e02b      	b.n	800e56e <_ZN3IMU7processEv+0xaa>
	}
	else
	{
		raw_gyro_= raw_gyro_adc_ - gyro_offset_;
 800e516:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
 800e51a:	3040      	adds	r0, #64	; 0x40
 800e51c:	f005 f9ac 	bl	8013878 <_ZNK7Vector3IfEmiERKS0_>
 800e520:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 800e524:	edc4 0a1d 	vstr	s1, [r4, #116]	; 0x74
 800e528:	ed84 1a1e 	vstr	s2, [r4, #120]	; 0x78
		raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
 800e52c:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 800e530:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e534:	4628      	mov	r0, r5
 800e536:	f005 f8dd 	bl	80136f4 <_ZNK7Vector3IfEdvEf>
 800e53a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e53e:	edcd 0a02 	vstr	s1, [sp, #8]
 800e542:	ed8d 1a03 	vstr	s2, [sp, #12]
 800e546:	a901      	add	r1, sp, #4
 800e548:	4628      	mov	r0, r5
 800e54a:	f005 f877 	bl	801363c <_ZN7Vector3IfEmIERKS0_>
		raw_gyro_p_   += raw_gyro_;
 800e54e:	f104 0170 	add.w	r1, r4, #112	; 0x70
 800e552:	4628      	mov	r0, r5
 800e554:	f005 f8a0 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>
		gyro_  = (raw_gyro_p_/GYRO_LPF_FACTOR);
 800e558:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 800e55c:	4628      	mov	r0, r5
 800e55e:	f005 f8c9 	bl	80136f4 <_ZNK7Vector3IfEdvEf>
 800e562:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
 800e566:	edc4 0a26 	vstr	s1, [r4, #152]	; 0x98
 800e56a:	ed84 1a27 	vstr	s2, [r4, #156]	; 0x9c
	}

	/* acc part */
	if (calibrate_acc_ > 0) {
 800e56e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800e572:	2b00      	cmp	r3, #0
 800e574:	dd34      	ble.n	800e5e0 <_ZN3IMU7processEv+0x11c>
		if (calibrate_acc_ == CALIBRATING_STEP) acc_offset_.zero();
 800e576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e57a:	d106      	bne.n	800e58a <_ZN3IMU7processEv+0xc6>
 800e57c:	2300      	movs	r3, #0
 800e57e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800e582:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800e586:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		acc_offset_ += raw_acc_adc_;
 800e58a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800e58e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e592:	f005 f881 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>

		if (calibrate_acc_ == 1) {
 800e596:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d11a      	bne.n	800e5d4 <_ZN3IMU7processEv+0x110>
			acc_offset_[0] /= (float)CALIBRATING_STEP;
 800e59e:	edd4 6a34 	vldr	s13, [r4, #208]	; 0xd0
 800e5a2:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800e810 <_ZN3IMU7processEv+0x34c>
 800e5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5aa:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
			acc_offset_[1] /= (float)CALIBRATING_STEP;
 800e5ae:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 800e5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5b6:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
			acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
 800e5ba:	edd4 6a36 	vldr	s13, [r4, #216]	; 0xd8
 800e5be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5c2:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800e814 <_ZN3IMU7processEv+0x350>
 800e5c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5ca:	edc4 7a36 	vstr	s15, [r4, #216]	; 0xd8

			writeCalibData();
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f7ff fc96 	bl	800df00 <_ZN3IMU14writeCalibDataEv>
		}
		calibrate_acc_--;
 800e5d4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800e5de:	e02e      	b.n	800e63e <_ZN3IMU7processEv+0x17a>
	}
	else
	{
		raw_acc_ = raw_acc_adc_ - acc_offset_;
 800e5e0:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
 800e5e4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800e5e8:	f005 f946 	bl	8013878 <_ZNK7Vector3IfEmiERKS0_>
 800e5ec:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
 800e5f0:	edc4 0a1a 	vstr	s1, [r4, #104]	; 0x68
 800e5f4:	ed84 1a1b 	vstr	s2, [r4, #108]	; 0x6c
		raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
 800e5f8:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 800e5fc:	ed9f 8a86 	vldr	s16, [pc, #536]	; 800e818 <_ZN3IMU7processEv+0x354>
 800e600:	eeb0 0a48 	vmov.f32	s0, s16
 800e604:	4628      	mov	r0, r5
 800e606:	f005 f875 	bl	80136f4 <_ZNK7Vector3IfEdvEf>
 800e60a:	ed8d 0a04 	vstr	s0, [sp, #16]
 800e60e:	edcd 0a05 	vstr	s1, [sp, #20]
 800e612:	ed8d 1a06 	vstr	s2, [sp, #24]
 800e616:	a904      	add	r1, sp, #16
 800e618:	4628      	mov	r0, r5
 800e61a:	f005 f80f 	bl	801363c <_ZN7Vector3IfEmIERKS0_>
		raw_acc_p_    += raw_acc_;
 800e61e:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800e622:	4628      	mov	r0, r5
 800e624:	f005 f838 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>
		acc_  = (raw_acc_p_/ACC_LPF_FACTOR);
 800e628:	eeb0 0a48 	vmov.f32	s0, s16
 800e62c:	4628      	mov	r0, r5
 800e62e:	f005 f861 	bl	80136f4 <_ZNK7Vector3IfEdvEf>
 800e632:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
 800e636:	edc4 0a23 	vstr	s1, [r4, #140]	; 0x8c
 800e63a:	ed84 1a24 	vstr	s2, [r4, #144]	; 0x90
	}

	/* mag part */
	if (calibrate_mag_ > 0)
 800e63e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800e642:	2b00      	cmp	r3, #0
 800e644:	dd61      	ble.n	800e70a <_ZN3IMU7processEv+0x246>
	{
		if(calibrate_mag_  == CALIBRATING_MAG_STEP)
 800e646:	4a75      	ldr	r2, [pc, #468]	; (800e81c <_ZN3IMU7processEv+0x358>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d114      	bne.n	800e676 <_ZN3IMU7processEv+0x1b2>
 800e64c:	2300      	movs	r3, #0
 800e64e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800e652:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800e656:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
		{
			mag_offset_.zero();
			mag_min_ = raw_mag_adc_;
 800e65a:	f504 7580 	add.w	r5, r4, #256	; 0x100
 800e65e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800e662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e666:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			mag_max_ = raw_mag_adc_;
 800e66a:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 800e66e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e672:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	else i++;

}

void IMU::process (void) 
{
 800e676:	2100      	movs	r1, #0
			mag_offset_.zero();
			mag_min_ = raw_mag_adc_;
			mag_max_ = raw_mag_adc_;
		}
		// 30s: you have 30s to turn the multi in all directions
		for (int i = 0; i < 3; i++)
 800e678:	2902      	cmp	r1, #2
 800e67a:	dc22      	bgt.n	800e6c2 <_ZN3IMU7processEv+0x1fe>
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800e67c:	f104 0258 	add.w	r2, r4, #88	; 0x58
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800e680:	b2cb      	uxtb	r3, r1
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	441a      	add	r2, r3
		{
			if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
 800e686:	edd2 7a00 	vldr	s15, [r2]
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800e68a:	f504 7080 	add.w	r0, r4, #256	; 0x100
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800e68e:	4418      	add	r0, r3
 800e690:	ed90 7a00 	vldr	s14, [r0]
 800e694:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69c:	d501      	bpl.n	800e6a2 <_ZN3IMU7processEv+0x1de>
 800e69e:	edc0 7a00 	vstr	s15, [r0]
			if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
 800e6a2:	edd2 7a00 	vldr	s15, [r2]
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800e6a6:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800e6aa:	4413      	add	r3, r2
 800e6ac:	ed93 7a00 	vldr	s14, [r3]
 800e6b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b8:	dd01      	ble.n	800e6be <_ZN3IMU7processEv+0x1fa>
 800e6ba:	edc3 7a00 	vstr	s15, [r3]
			mag_offset_.zero();
			mag_min_ = raw_mag_adc_;
			mag_max_ = raw_mag_adc_;
		}
		// 30s: you have 30s to turn the multi in all directions
		for (int i = 0; i < 3; i++)
 800e6be:	3101      	adds	r1, #1
 800e6c0:	e7da      	b.n	800e678 <_ZN3IMU7processEv+0x1b4>
			if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
			if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
		}
		// http://www.aichi-mi.com/old_pages/5_2_transistor_gijutu/transistor_gijutu.htm

		if(calibrate_mag_ == 1)
 800e6c2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d119      	bne.n	800e6fe <_ZN3IMU7processEv+0x23a>
		{
			mag_offset_ = (mag_min_ + mag_max_) /2 ;
 800e6ca:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
 800e6ce:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800e6d2:	f005 f88f 	bl	80137f4 <_ZNK7Vector3IfEplERKS0_>
 800e6d6:	ed8d 0a07 	vstr	s0, [sp, #28]
 800e6da:	edcd 0a08 	vstr	s1, [sp, #32]
 800e6de:	ed8d 1a09 	vstr	s2, [sp, #36]	; 0x24
 800e6e2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e6e6:	a807      	add	r0, sp, #28
 800e6e8:	f005 f804 	bl	80136f4 <_ZNK7Vector3IfEdvEf>
 800e6ec:	ed84 0a3a 	vstr	s0, [r4, #232]	; 0xe8
 800e6f0:	edc4 0a3b 	vstr	s1, [r4, #236]	; 0xec
 800e6f4:	ed84 1a3c 	vstr	s2, [r4, #240]	; 0xf0

			writeCalibData();
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f7ff fc01 	bl	800df00 <_ZN3IMU14writeCalibDataEv>
		}
		calibrate_mag_ --;
 800e6fe:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800e702:	3b01      	subs	r3, #1
 800e704:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 800e708:	e07e      	b.n	800e808 <_ZN3IMU7processEv+0x344>
	}
	else
	{
		/* transform coordinate */
		raw_mag_[0] = raw_mag_adc_[1] - mag_offset_[1];
 800e70a:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800e70e:	edd4 7a3b 	vldr	s15, [r4, #236]	; 0xec
 800e712:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e716:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
		raw_mag_[1] = raw_mag_adc_[0]  - mag_offset_[0];
 800e71a:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 800e71e:	edd4 7a3a 	vldr	s15, [r4, #232]	; 0xe8
 800e722:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e726:	edc4 7a20 	vstr	s15, [r4, #128]	; 0x80
		raw_mag_[2] = -(raw_mag_adc_[2] - mag_offset_[2]);
 800e72a:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 800e72e:	edd4 7a3c 	vldr	s15, [r4, #240]	; 0xf0
 800e732:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e736:	eef1 7a67 	vneg.f32	s15, s15
 800e73a:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84

		/* filtering => because the magnetemeter generates too much outlier, not know the reason */
		if(mag_filtering_flag_)
 800e73e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 800e742:	2b00      	cmp	r3, #0
 800e744:	d03d      	beq.n	800e7c2 <_ZN3IMU7processEv+0x2fe>
 800e746:	2100      	movs	r1, #0
 800e748:	460d      	mov	r5, r1
		{
			bool mag_outlier_flag = false;
			for(int i = 0; i < 3; i++)
 800e74a:	2902      	cmp	r1, #2
 800e74c:	dc19      	bgt.n	800e782 <_ZN3IMU7processEv+0x2be>
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800e74e:	f104 027c 	add.w	r2, r4, #124	; 0x7c
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800e752:	b2cb      	uxtb	r3, r1
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	441a      	add	r2, r3
    // uniform scaling
    Vector3<T> &operator /=(const T num);

    // allow a vector3 to be used as an array, 0 indexed
    T & operator[](uint8_t i) {
        T *_v = &x;
 800e758:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 800e75c:	4403      	add	r3, r0
			{
				if(fabs(raw_mag_[i] - mag_[i]) > MAG_GENERAL_THRESH) mag_outlier_flag = true;
 800e75e:	edd2 7a00 	vldr	s15, [r2]
 800e762:	ed93 7a00 	vldr	s14, [r3]
 800e766:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e76a:	eef0 7ae7 	vabs.f32	s15, s15
 800e76e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800e772:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77a:	dd00      	ble.n	800e77e <_ZN3IMU7processEv+0x2ba>
 800e77c:	2501      	movs	r5, #1

		/* filtering => because the magnetemeter generates too much outlier, not know the reason */
		if(mag_filtering_flag_)
		{
			bool mag_outlier_flag = false;
			for(int i = 0; i < 3; i++)
 800e77e:	3101      	adds	r1, #1
 800e780:	e7e3      	b.n	800e74a <_ZN3IMU7processEv+0x286>
			{
				if(fabs(raw_mag_[i] - mag_[i]) > MAG_GENERAL_THRESH) mag_outlier_flag = true;
			}

			if(!mag_outlier_flag)
 800e782:	b955      	cbnz	r5, 800e79a <_ZN3IMU7processEv+0x2d6>
			{
				mag_ = raw_mag_;
 800e784:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800e788:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 800e78c:	ca07      	ldmia	r2, {r0, r1, r2}
 800e78e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				mag_outlier_counter_ = 0;
 800e792:	2300      	movs	r3, #0
 800e794:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
 800e798:	e036      	b.n	800e808 <_ZN3IMU7processEv+0x344>
			}
			else
			{
				if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
 800e79a:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
 800e79e:	3301      	adds	r3, #1
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
 800e7a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e7aa:	d92d      	bls.n	800e808 <_ZN3IMU7processEv+0x344>
				{
					mag_outlier_counter_ = 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
					mag_ = raw_mag_;
 800e7b2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800e7b6:	347c      	adds	r4, #124	; 0x7c
 800e7b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e7bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e7c0:	e022      	b.n	800e808 <_ZN3IMU7processEv+0x344>

    // check if any elements are infinity
    bool is_inf(void) const;

    // check if all elements are zero
    bool is_zero(void) const { return (fabsf(x) < FLT_EPSILON) && (fabsf(y) < FLT_EPSILON) && (fabsf(z) < FLT_EPSILON); }
 800e7c2:	eeb0 7ac7 	vabs.f32	s14, s14
 800e7c6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e820 <_ZN3IMU7processEv+0x35c>
 800e7ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d2:	d50e      	bpl.n	800e7f2 <_ZN3IMU7processEv+0x32e>
 800e7d4:	eef0 6ae6 	vabs.f32	s13, s13
 800e7d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e0:	d507      	bpl.n	800e7f2 <_ZN3IMU7processEv+0x32e>
 800e7e2:	eeb0 6ac6 	vabs.f32	s12, s12
 800e7e6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	d500      	bpl.n	800e7f2 <_ZN3IMU7processEv+0x32e>
 800e7f0:	2301      	movs	r3, #1
				}
			}
		}
		else
		{
			if(!raw_mag_adc_.is_zero())
 800e7f2:	b94b      	cbnz	r3, 800e808 <_ZN3IMU7processEv+0x344>
			{//should notice that the raw_mag_adc may be 0 in the early stage
				mag_ = raw_mag_;
 800e7f4:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 800e7f8:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 800e7fc:	ca07      	ldmia	r2, {r0, r1, r2}
 800e7fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			mag_filtering_flag_  = true;
 800e802:	2301      	movs	r3, #1
 800e804:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
			}
		}
	}
}
 800e808:	b00b      	add	sp, #44	; 0x2c
 800e80a:	ecbd 8b02 	vpop	{d8}
 800e80e:	bd30      	pop	{r4, r5, pc}
 800e810:	447a0000 	.word	0x447a0000
 800e814:	411ce80a 	.word	0x411ce80a
 800e818:	42280000 	.word	0x42280000
 800e81c:	0001d4c0 	.word	0x0001d4c0
 800e820:	34000000 	.word	0x34000000

0800e824 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	b082      	sub	sp, #8
 800e82a:	460c      	mov	r4, r1
 800e82c:	2301      	movs	r3, #1
 800e82e:	9300      	str	r3, [sp, #0]

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e830:	6843      	ldr	r3, [r0, #4]
 800e832:	6802      	ldr	r2, [r0, #0]
 800e834:	1a9a      	subs	r2, r3, r2
 800e836:	1095      	asrs	r5, r2, #2
 800e838:	4a2b      	ldr	r2, [pc, #172]	; (800e8e8 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xc4>)
 800e83a:	fb02 f205 	mul.w	r2, r2, r5

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 800e83e:	492b      	ldr	r1, [pc, #172]	; (800e8ec <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xc8>)
 800e840:	4291      	cmp	r1, r2
 800e842:	d102      	bne.n	800e84a <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800e844:	482a      	ldr	r0, [pc, #168]	; (800e8f0 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xcc>)
 800e846:	f006 f829 	bl	801489c <_ZSt20__throw_length_errorPKc>
 800e84a:	4607      	mov	r7, r0

	const size_type __len = size() + std::max(size(), __n);
 800e84c:	9201      	str	r2, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800e84e:	b90a      	cbnz	r2, 800e854 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x30>
	return __b;
 800e850:	4669      	mov	r1, sp
 800e852:	e000      	b.n	800e856 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x32>
      return __a;
 800e854:	a901      	add	r1, sp, #4
 800e856:	680d      	ldr	r5, [r1, #0]
 800e858:	4415      	add	r5, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	1a9b      	subs	r3, r3, r2
 800e85e:	109b      	asrs	r3, r3, #2
 800e860:	4a21      	ldr	r2, [pc, #132]	; (800e8e8 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xc4>)
 800e862:	fb02 f303 	mul.w	r3, r2, r3
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800e866:	429d      	cmp	r5, r3
 800e868:	d303      	bcc.n	800e872 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x4e>
 800e86a:	4b20      	ldr	r3, [pc, #128]	; (800e8ec <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xc8>)
 800e86c:	429d      	cmp	r5, r3
 800e86e:	d802      	bhi.n	800e876 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x52>
 800e870:	e002      	b.n	800e878 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x54>
 800e872:	4d1e      	ldr	r5, [pc, #120]	; (800e8ec <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xc8>)
 800e874:	e000      	b.n	800e878 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x54>
 800e876:	4d1d      	ldr	r5, [pc, #116]	; (800e8ec <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xc8>)

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e878:	b15d      	cbz	r5, 800e892 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x6e>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 800e87a:	4b1c      	ldr	r3, [pc, #112]	; (800e8ec <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xc8>)
 800e87c:	429d      	cmp	r5, r3
 800e87e:	d901      	bls.n	800e884 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x60>
	  std::__throw_bad_alloc();
 800e880:	f005 ffe4 	bl	801484c <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e884:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800e888:	0098      	lsls	r0, r3, #2
 800e88a:	f005 fdb1 	bl	80143f0 <_Znwj>
 800e88e:	4680      	mov	r8, r0
 800e890:	e001      	b.n	800e896 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x72>
 800e892:	f04f 0800 	mov.w	r8, #0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	1a9b      	subs	r3, r3, r2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e89c:	eb18 0303 	adds.w	r3, r8, r3
 800e8a0:	d003      	beq.n	800e8aa <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x86>
 800e8a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e8a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	687e      	ldr	r6, [r7, #4]
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
 800e8ae:	4643      	mov	r3, r8
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }
 800e8b0:	4614      	mov	r4, r2
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
 800e8b2:	42b2      	cmp	r2, r6
 800e8b4:	d007      	beq.n	800e8c6 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xa2>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800e8b6:	b113      	cbz	r3, 800e8be <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x9a>
 800e8b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800e8ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { return _M_current; }

      move_iterator&
      operator++()
      {
	++_M_current;
 800e8be:	f104 020c 	add.w	r2, r4, #12
 800e8c2:	330c      	adds	r3, #12
 800e8c4:	e7f4      	b.n	800e8b0 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0x8c>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
 800e8c6:	f103 040c 	add.w	r4, r3, #12
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
 800e8ca:	6838      	ldr	r0, [r7, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 800e8cc:	b108      	cbz	r0, 800e8d2 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_+0xae>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 800e8ce:	f005 ffbb 	bl	8014848 <_ZdlPv>
	this->_M_impl._M_start = __new_start;
 800e8d2:	f8c7 8000 	str.w	r8, [r7]
	this->_M_impl._M_finish = __new_finish;
 800e8d6:	607c      	str	r4, [r7, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
 800e8d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8dc:	00ab      	lsls	r3, r5, #2
 800e8de:	4443      	add	r3, r8
 800e8e0:	60bb      	str	r3, [r7, #8]
      }
 800e8e2:	b002      	add	sp, #8
 800e8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e8:	aaaaaaab 	.word	0xaaaaaaab
 800e8ec:	15555555 	.word	0x15555555
 800e8f0:	0801ad48 	.word	0x0801ad48

0800e8f4 <_ZNSt6vectorI7Vector3IfESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 800e8f4:	b4f0      	push	{r4, r5, r6, r7}
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	460f      	mov	r7, r1
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
 800e8fa:	f101 050c 	add.w	r5, r1, #12
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 800e8fe:	6843      	ldr	r3, [r0, #4]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 800e900:	42ab      	cmp	r3, r5
 800e902:	d010      	beq.n	800e926 <_ZNSt6vectorI7Vector3IfESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x32>
  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
 800e904:	462c      	mov	r4, r5
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800e906:	1b5d      	subs	r5, r3, r5
 800e908:	10ad      	asrs	r5, r5, #2
 800e90a:	4b0a      	ldr	r3, [pc, #40]	; (800e934 <_ZNSt6vectorI7Vector3IfESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x40>)
 800e90c:	fb03 f505 	mul.w	r5, r3, r5
 800e910:	460b      	mov	r3, r1
 800e912:	2d00      	cmp	r5, #0
 800e914:	dd07      	ble.n	800e926 <_ZNSt6vectorI7Vector3IfESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x32>
	    {
	      *__result = std::move(*__first);
 800e916:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e91a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	      ++__first;
 800e91e:	340c      	adds	r4, #12
	      ++__result;
 800e920:	330c      	adds	r3, #12
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800e922:	3d01      	subs	r5, #1
 800e924:	e7f5      	b.n	800e912 <_ZNSt6vectorI7Vector3IfESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE+0x1e>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
 800e926:	6873      	ldr	r3, [r6, #4]
 800e928:	3b0c      	subs	r3, #12
 800e92a:	6073      	str	r3, [r6, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }
 800e92c:	4638      	mov	r0, r7
 800e92e:	bcf0      	pop	{r4, r5, r6, r7}
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	aaaaaaab 	.word	0xaaaaaaab

0800e938 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800e938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e93c:	b082      	sub	sp, #8
 800e93e:	460c      	mov	r4, r1
 800e940:	2301      	movs	r3, #1
 800e942:	9300      	str	r3, [sp, #0]

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e944:	6843      	ldr	r3, [r0, #4]
 800e946:	6802      	ldr	r2, [r0, #0]
 800e948:	1a9a      	subs	r2, r3, r2
 800e94a:	1095      	asrs	r5, r2, #2
 800e94c:	4a2b      	ldr	r2, [pc, #172]	; (800e9fc <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xc4>)
 800e94e:	fb02 f205 	mul.w	r2, r2, r5

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 800e952:	492b      	ldr	r1, [pc, #172]	; (800ea00 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xc8>)
 800e954:	4291      	cmp	r1, r2
 800e956:	d102      	bne.n	800e95e <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800e958:	482a      	ldr	r0, [pc, #168]	; (800ea04 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xcc>)
 800e95a:	f005 ff9f 	bl	801489c <_ZSt20__throw_length_errorPKc>
 800e95e:	4607      	mov	r7, r0

	const size_type __len = size() + std::max(size(), __n);
 800e960:	9201      	str	r2, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800e962:	b90a      	cbnz	r2, 800e968 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x30>
	return __b;
 800e964:	4669      	mov	r1, sp
 800e966:	e000      	b.n	800e96a <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x32>
      return __a;
 800e968:	a901      	add	r1, sp, #4
 800e96a:	680d      	ldr	r5, [r1, #0]
 800e96c:	4415      	add	r5, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	109b      	asrs	r3, r3, #2
 800e974:	4a21      	ldr	r2, [pc, #132]	; (800e9fc <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xc4>)
 800e976:	fb02 f303 	mul.w	r3, r2, r3
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800e97a:	429d      	cmp	r5, r3
 800e97c:	d303      	bcc.n	800e986 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x4e>
 800e97e:	4b20      	ldr	r3, [pc, #128]	; (800ea00 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xc8>)
 800e980:	429d      	cmp	r5, r3
 800e982:	d802      	bhi.n	800e98a <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x52>
 800e984:	e002      	b.n	800e98c <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x54>
 800e986:	4d1e      	ldr	r5, [pc, #120]	; (800ea00 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xc8>)
 800e988:	e000      	b.n	800e98c <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x54>
 800e98a:	4d1d      	ldr	r5, [pc, #116]	; (800ea00 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xc8>)

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e98c:	b15d      	cbz	r5, 800e9a6 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x6e>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 800e98e:	4b1c      	ldr	r3, [pc, #112]	; (800ea00 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xc8>)
 800e990:	429d      	cmp	r5, r3
 800e992:	d901      	bls.n	800e998 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x60>
	  std::__throw_bad_alloc();
 800e994:	f005 ff5a 	bl	801484c <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e998:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800e99c:	0098      	lsls	r0, r3, #2
 800e99e:	f005 fd27 	bl	80143f0 <_Znwj>
 800e9a2:	4680      	mov	r8, r0
 800e9a4:	e001      	b.n	800e9aa <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x72>
 800e9a6:	f04f 0800 	mov.w	r8, #0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	683a      	ldr	r2, [r7, #0]
 800e9ae:	1a9b      	subs	r3, r3, r2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800e9b0:	eb18 0303 	adds.w	r3, r8, r3
 800e9b4:	d003      	beq.n	800e9be <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x86>
 800e9b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e9ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	687e      	ldr	r6, [r7, #4]
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
 800e9c2:	4643      	mov	r3, r8
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }
 800e9c4:	4614      	mov	r4, r2
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
 800e9c6:	42b2      	cmp	r2, r6
 800e9c8:	d007      	beq.n	800e9da <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xa2>
 800e9ca:	b113      	cbz	r3, 800e9d2 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x9a>
 800e9cc:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      { return _M_current; }

      move_iterator&
      operator++()
      {
	++_M_current;
 800e9d2:	f104 020c 	add.w	r2, r4, #12
 800e9d6:	330c      	adds	r3, #12
 800e9d8:	e7f4      	b.n	800e9c4 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0x8c>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
 800e9da:	f103 040c 	add.w	r4, r3, #12
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
 800e9de:	6838      	ldr	r0, [r7, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 800e9e0:	b108      	cbz	r0, 800e9e6 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_+0xae>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 800e9e2:	f005 ff31 	bl	8014848 <_ZdlPv>
	this->_M_impl._M_start = __new_start;
 800e9e6:	f8c7 8000 	str.w	r8, [r7]
	this->_M_impl._M_finish = __new_finish;
 800e9ea:	607c      	str	r4, [r7, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
 800e9ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9f0:	00ab      	lsls	r3, r5, #2
 800e9f2:	4443      	add	r3, r8
 800e9f4:	60bb      	str	r3, [r7, #8]
      }
 800e9f6:	b002      	add	sp, #8
 800e9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9fc:	aaaaaaab 	.word	0xaaaaaaab
 800ea00:	15555555 	.word	0x15555555
 800ea04:	0801ad48 	.word	0x0801ad48

0800ea08 <_ZNSt6vectorI7Vector3IfESaIS1_EE12emplace_backIIS1_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	4604      	mov	r4, r0
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ea0c:	6843      	ldr	r3, [r0, #4]
 800ea0e:	6882      	ldr	r2, [r0, #8]
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d007      	beq.n	800ea24 <_ZNSt6vectorI7Vector3IfESaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x1c>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ea14:	b113      	cbz	r3, 800ea1c <_ZNSt6vectorI7Vector3IfESaIS1_EE12emplace_backIIS1_EEEvDpOT_+0x14>
 800ea16:	c907      	ldmia	r1, {r0, r1, r2}
 800ea18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800ea1c:	6863      	ldr	r3, [r4, #4]
 800ea1e:	330c      	adds	r3, #12
 800ea20:	6063      	str	r3, [r4, #4]
 800ea22:	bd10      	pop	{r4, pc}
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 800ea24:	f7ff ff88 	bl	800e938 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIS1_EEEvDpOT_>
 800ea28:	bd10      	pop	{r4, pc}
 800ea2a:	bf00      	nop

0800ea2c <_ZN3IMU6updateEt>:
	hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz

}

uint16_t IMU::update(uint16_t queue_size)
{
 800ea2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea2e:	b09f      	sub	sp, #124	; 0x7c
 800ea30:	4605      	mov	r5, r0
 800ea32:	460f      	mov	r7, r1
	if(nh_->connected() && (!nh_->getHardware()->getUartDriver()->getTx()->idleFlag()))
 800ea34:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ea36:	6803      	ldr	r3, [r0, #0]
 800ea38:	689b      	ldr	r3, [r3, #8]
 800ea3a:	4798      	blx	r3
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	b118      	cbz	r0, 800ea48 <_ZN3IMU6updateEt+0x1c>
      }
  }

  uint8_t subscriptInProgress(){return subscript_in_progress_;}
  uint8_t subscriptToAdd(){return subscript_to_add_;}
  bool idleFlag(){return idle_flag_;}
 800ea40:	4ab8      	ldr	r2, [pc, #736]	; (800ed24 <_ZN3IMU6updateEt+0x2f8>)
 800ea42:	7812      	ldrb	r2, [r2, #0]
 800ea44:	b102      	cbz	r2, 800ea48 <_ZN3IMU6updateEt+0x1c>
 800ea46:	2300      	movs	r3, #0
 800ea48:	b113      	cbz	r3, 800ea50 <_ZN3IMU6updateEt+0x24>
		ahb_suspend_flag_ = true; //should suspend USART1 of DMA(ros) for a while
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111

	if(ahb_suspend_flag_)
 800ea50:	f895 3111 	ldrb.w	r3, [r5, #273]	; 0x111
 800ea54:	b1cb      	cbz	r3, 800ea8a <_ZN3IMU6updateEt+0x5e>
	{
		UART_HandleTypeDef *huart = nh_->getHardware()->getUartDriver()->getHuart();
 800ea56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}

UartDriver<serial_class>* getUartDriver() {return  iostream_;}
 800ea58:	689b      	ldr	r3, [r3, #8]
    return rx_->read();
  }

  Hardware* getHuart()
  {
    return huart_;
 800ea5a:	681c      	ldr	r4, [r3, #0]
		HAL_DMA_Abort(huart->hdmatx); //suspend the dma first(please note that TCIF of DMATx is set because of suspension)
 800ea5c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ea5e:	f7fe fcad 	bl	800d3bc <HAL_DMA_Abort>
  uint8_t subscriptToAdd(){return subscript_to_add_;}
  bool idleFlag(){return idle_flag_;}

 uint8_t  getCurrentTransmitBufferLen()
{
return tx_buffer_unit_[subscript_in_progress_].tx_len_;
 800ea62:	4bb1      	ldr	r3, [pc, #708]	; (800ed28 <_ZN3IMU6updateEt+0x2fc>)
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 800ea6a:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
 800ea6e:	4aaf      	ldr	r2, [pc, #700]	; (800ed2c <_ZN3IMU6updateEt+0x300>)
 800ea70:	4413      	add	r3, r2
 800ea72:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa

		uint8_t temp_length = nh_->getHardware()->getUartDriver()->getTx()->getCurrentTransmitBufferLen();
		uint8_t temp_length2 = huart->hdmatx->Instance->NDTR;
 800ea76:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800ea78:	6808      	ldr	r0, [r1, #0]
 800ea7a:	6841      	ldr	r1, [r0, #4]
 800ea7c:	b2c9      	uxtb	r1, r1
		uint8_t* temp_p = nh_->getHardware()->getUartDriver()->getTx()->getCurrentTransmitBufferP() + (temp_length - temp_length2);
 800ea7e:	1a52      	subs	r2, r2, r1
 800ea80:	4413      	add	r3, r2
		uint32_t *tmp32 = (uint32_t*)&temp_p;
		huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 800ea82:	60c3      	str	r3, [r0, #12]
		huart->hdmatx->Instance->NDTR = temp_length2;
 800ea84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6059      	str	r1, [r3, #4]
	}

	read(); //read from SPI
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f7ff fbd0 	bl	800e230 <_ZN3IMU4readEv>

	if(ahb_suspend_flag_)
 800ea90:	f895 3111 	ldrb.w	r3, [r5, #273]	; 0x111
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 8179 	beq.w	800ed8c <_ZN3IMU6updateEt+0x360>
	{
		UART_HandleTypeDef *huart = nh_->getHardware()->getUartDriver()->getHuart();
 800ea9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}

UartDriver<serial_class>* getUartDriver() {return  iostream_;}
 800ea9c:	689b      	ldr	r3, [r3, #8]
    return rx_->read();
  }

  Hardware* getHuart()
  {
    return huart_;
 800ea9e:	681a      	ldr	r2, [r3, #0]
		__HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx)); // this should come before __HAL_DMA_ENABLE!!
 800eaa0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	49a2      	ldr	r1, [pc, #648]	; (800ed30 <_ZN3IMU6updateEt+0x304>)
 800eaa6:	428b      	cmp	r3, r1
 800eaa8:	d954      	bls.n	800eb54 <_ZN3IMU6updateEt+0x128>
 800eaaa:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800eaae:	428b      	cmp	r3, r1
 800eab0:	d02e      	beq.n	800eb10 <_ZN3IMU6updateEt+0xe4>
 800eab2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eab6:	428b      	cmp	r3, r1
 800eab8:	d02c      	beq.n	800eb14 <_ZN3IMU6updateEt+0xe8>
 800eaba:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800eabe:	428b      	cmp	r3, r1
 800eac0:	d02a      	beq.n	800eb18 <_ZN3IMU6updateEt+0xec>
 800eac2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eac6:	428b      	cmp	r3, r1
 800eac8:	d028      	beq.n	800eb1c <_ZN3IMU6updateEt+0xf0>
 800eaca:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800eace:	428b      	cmp	r3, r1
 800ead0:	d026      	beq.n	800eb20 <_ZN3IMU6updateEt+0xf4>
 800ead2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ead6:	428b      	cmp	r3, r1
 800ead8:	d025      	beq.n	800eb26 <_ZN3IMU6updateEt+0xfa>
 800eada:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800eade:	428b      	cmp	r3, r1
 800eae0:	d024      	beq.n	800eb2c <_ZN3IMU6updateEt+0x100>
 800eae2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eae6:	428b      	cmp	r3, r1
 800eae8:	d023      	beq.n	800eb32 <_ZN3IMU6updateEt+0x106>
 800eaea:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800eaee:	428b      	cmp	r3, r1
 800eaf0:	d022      	beq.n	800eb38 <_ZN3IMU6updateEt+0x10c>
 800eaf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eaf6:	428b      	cmp	r3, r1
 800eaf8:	d021      	beq.n	800eb3e <_ZN3IMU6updateEt+0x112>
 800eafa:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800eafe:	428b      	cmp	r3, r1
 800eb00:	d020      	beq.n	800eb44 <_ZN3IMU6updateEt+0x118>
 800eb02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb06:	428b      	cmp	r3, r1
 800eb08:	d11f      	bne.n	800eb4a <_ZN3IMU6updateEt+0x11e>
 800eb0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eb0e:	e01e      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb10:	2320      	movs	r3, #32
 800eb12:	e01c      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb14:	2320      	movs	r3, #32
 800eb16:	e01a      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb18:	2320      	movs	r3, #32
 800eb1a:	e018      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb1c:	2320      	movs	r3, #32
 800eb1e:	e016      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb24:	e013      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb2a:	e010      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb30:	e00d      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb36:	e00a      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eb3c:	e007      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eb42:	e004      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eb48:	e001      	b.n	800eb4e <_ZN3IMU6updateEt+0x122>
 800eb4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb4e:	4979      	ldr	r1, [pc, #484]	; (800ed34 <_ZN3IMU6updateEt+0x308>)
 800eb50:	60cb      	str	r3, [r1, #12]
 800eb52:	e112      	b.n	800ed7a <_ZN3IMU6updateEt+0x34e>
 800eb54:	4978      	ldr	r1, [pc, #480]	; (800ed38 <_ZN3IMU6updateEt+0x30c>)
 800eb56:	428b      	cmp	r3, r1
 800eb58:	d953      	bls.n	800ec02 <_ZN3IMU6updateEt+0x1d6>
 800eb5a:	39a8      	subs	r1, #168	; 0xa8
 800eb5c:	428b      	cmp	r3, r1
 800eb5e:	d02e      	beq.n	800ebbe <_ZN3IMU6updateEt+0x192>
 800eb60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb64:	428b      	cmp	r3, r1
 800eb66:	d02c      	beq.n	800ebc2 <_ZN3IMU6updateEt+0x196>
 800eb68:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800eb6c:	428b      	cmp	r3, r1
 800eb6e:	d02a      	beq.n	800ebc6 <_ZN3IMU6updateEt+0x19a>
 800eb70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb74:	428b      	cmp	r3, r1
 800eb76:	d028      	beq.n	800ebca <_ZN3IMU6updateEt+0x19e>
 800eb78:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800eb7c:	428b      	cmp	r3, r1
 800eb7e:	d026      	beq.n	800ebce <_ZN3IMU6updateEt+0x1a2>
 800eb80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb84:	428b      	cmp	r3, r1
 800eb86:	d025      	beq.n	800ebd4 <_ZN3IMU6updateEt+0x1a8>
 800eb88:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800eb8c:	428b      	cmp	r3, r1
 800eb8e:	d024      	beq.n	800ebda <_ZN3IMU6updateEt+0x1ae>
 800eb90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eb94:	428b      	cmp	r3, r1
 800eb96:	d023      	beq.n	800ebe0 <_ZN3IMU6updateEt+0x1b4>
 800eb98:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800eb9c:	428b      	cmp	r3, r1
 800eb9e:	d022      	beq.n	800ebe6 <_ZN3IMU6updateEt+0x1ba>
 800eba0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eba4:	428b      	cmp	r3, r1
 800eba6:	d021      	beq.n	800ebec <_ZN3IMU6updateEt+0x1c0>
 800eba8:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800ebac:	428b      	cmp	r3, r1
 800ebae:	d020      	beq.n	800ebf2 <_ZN3IMU6updateEt+0x1c6>
 800ebb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ebb4:	428b      	cmp	r3, r1
 800ebb6:	d11f      	bne.n	800ebf8 <_ZN3IMU6updateEt+0x1cc>
 800ebb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ebbc:	e01e      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebbe:	2320      	movs	r3, #32
 800ebc0:	e01c      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebc2:	2320      	movs	r3, #32
 800ebc4:	e01a      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebc6:	2320      	movs	r3, #32
 800ebc8:	e018      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebca:	2320      	movs	r3, #32
 800ebcc:	e016      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebd2:	e013      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebd8:	e010      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebde:	e00d      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebe0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebe4:	e00a      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebe6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ebea:	e007      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ebf0:	e004      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebf2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ebf6:	e001      	b.n	800ebfc <_ZN3IMU6updateEt+0x1d0>
 800ebf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ebfc:	494d      	ldr	r1, [pc, #308]	; (800ed34 <_ZN3IMU6updateEt+0x308>)
 800ebfe:	608b      	str	r3, [r1, #8]
 800ec00:	e0bb      	b.n	800ed7a <_ZN3IMU6updateEt+0x34e>
 800ec02:	494e      	ldr	r1, [pc, #312]	; (800ed3c <_ZN3IMU6updateEt+0x310>)
 800ec04:	428b      	cmp	r3, r1
 800ec06:	d953      	bls.n	800ecb0 <_ZN3IMU6updateEt+0x284>
 800ec08:	3948      	subs	r1, #72	; 0x48
 800ec0a:	428b      	cmp	r3, r1
 800ec0c:	d02e      	beq.n	800ec6c <_ZN3IMU6updateEt+0x240>
 800ec0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec12:	428b      	cmp	r3, r1
 800ec14:	d02c      	beq.n	800ec70 <_ZN3IMU6updateEt+0x244>
 800ec16:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800ec1a:	428b      	cmp	r3, r1
 800ec1c:	d02a      	beq.n	800ec74 <_ZN3IMU6updateEt+0x248>
 800ec1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec22:	428b      	cmp	r3, r1
 800ec24:	d028      	beq.n	800ec78 <_ZN3IMU6updateEt+0x24c>
 800ec26:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800ec2a:	428b      	cmp	r3, r1
 800ec2c:	d026      	beq.n	800ec7c <_ZN3IMU6updateEt+0x250>
 800ec2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec32:	428b      	cmp	r3, r1
 800ec34:	d025      	beq.n	800ec82 <_ZN3IMU6updateEt+0x256>
 800ec36:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800ec3a:	428b      	cmp	r3, r1
 800ec3c:	d024      	beq.n	800ec88 <_ZN3IMU6updateEt+0x25c>
 800ec3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec42:	428b      	cmp	r3, r1
 800ec44:	d023      	beq.n	800ec8e <_ZN3IMU6updateEt+0x262>
 800ec46:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800ec4a:	428b      	cmp	r3, r1
 800ec4c:	d022      	beq.n	800ec94 <_ZN3IMU6updateEt+0x268>
 800ec4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec52:	428b      	cmp	r3, r1
 800ec54:	d021      	beq.n	800ec9a <_ZN3IMU6updateEt+0x26e>
 800ec56:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800ec5a:	428b      	cmp	r3, r1
 800ec5c:	d020      	beq.n	800eca0 <_ZN3IMU6updateEt+0x274>
 800ec5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec62:	428b      	cmp	r3, r1
 800ec64:	d11f      	bne.n	800eca6 <_ZN3IMU6updateEt+0x27a>
 800ec66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ec6a:	e01e      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec6c:	2320      	movs	r3, #32
 800ec6e:	e01c      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec70:	2320      	movs	r3, #32
 800ec72:	e01a      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec74:	2320      	movs	r3, #32
 800ec76:	e018      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec78:	2320      	movs	r3, #32
 800ec7a:	e016      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec80:	e013      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec86:	e010      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec8c:	e00d      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec92:	e00a      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ec98:	e007      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800ec9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ec9e:	e004      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800eca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eca4:	e001      	b.n	800ecaa <_ZN3IMU6updateEt+0x27e>
 800eca6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ecaa:	4925      	ldr	r1, [pc, #148]	; (800ed40 <_ZN3IMU6updateEt+0x314>)
 800ecac:	60cb      	str	r3, [r1, #12]
 800ecae:	e064      	b.n	800ed7a <_ZN3IMU6updateEt+0x34e>
 800ecb0:	4924      	ldr	r1, [pc, #144]	; (800ed44 <_ZN3IMU6updateEt+0x318>)
 800ecb2:	428b      	cmp	r3, r1
 800ecb4:	d02e      	beq.n	800ed14 <_ZN3IMU6updateEt+0x2e8>
 800ecb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ecba:	428b      	cmp	r3, r1
 800ecbc:	d02c      	beq.n	800ed18 <_ZN3IMU6updateEt+0x2ec>
 800ecbe:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800ecc2:	428b      	cmp	r3, r1
 800ecc4:	d02a      	beq.n	800ed1c <_ZN3IMU6updateEt+0x2f0>
 800ecc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ecca:	428b      	cmp	r3, r1
 800eccc:	d028      	beq.n	800ed20 <_ZN3IMU6updateEt+0x2f4>
 800ecce:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800ecd2:	428b      	cmp	r3, r1
 800ecd4:	d038      	beq.n	800ed48 <_ZN3IMU6updateEt+0x31c>
 800ecd6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ecda:	428b      	cmp	r3, r1
 800ecdc:	d037      	beq.n	800ed4e <_ZN3IMU6updateEt+0x322>
 800ecde:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800ece2:	428b      	cmp	r3, r1
 800ece4:	d036      	beq.n	800ed54 <_ZN3IMU6updateEt+0x328>
 800ece6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ecea:	428b      	cmp	r3, r1
 800ecec:	d035      	beq.n	800ed5a <_ZN3IMU6updateEt+0x32e>
 800ecee:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800ecf2:	428b      	cmp	r3, r1
 800ecf4:	d034      	beq.n	800ed60 <_ZN3IMU6updateEt+0x334>
 800ecf6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ecfa:	428b      	cmp	r3, r1
 800ecfc:	d033      	beq.n	800ed66 <_ZN3IMU6updateEt+0x33a>
 800ecfe:	f5a1 7168 	sub.w	r1, r1, #928	; 0x3a0
 800ed02:	428b      	cmp	r3, r1
 800ed04:	d032      	beq.n	800ed6c <_ZN3IMU6updateEt+0x340>
 800ed06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ed0a:	428b      	cmp	r3, r1
 800ed0c:	d131      	bne.n	800ed72 <_ZN3IMU6updateEt+0x346>
 800ed0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed12:	e030      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed14:	2320      	movs	r3, #32
 800ed16:	e02e      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed18:	2320      	movs	r3, #32
 800ed1a:	e02c      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed1c:	2320      	movs	r3, #32
 800ed1e:	e02a      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed20:	2320      	movs	r3, #32
 800ed22:	e028      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed24:	20000afd 	.word	0x20000afd
 800ed28:	20000afe 	.word	0x20000afe
 800ed2c:	20000b00 	.word	0x20000b00
 800ed30:	40026458 	.word	0x40026458
 800ed34:	40026400 	.word	0x40026400
 800ed38:	400260b8 	.word	0x400260b8
 800ed3c:	40026058 	.word	0x40026058
 800ed40:	40026000 	.word	0x40026000
 800ed44:	40026010 	.word	0x40026010
 800ed48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed4c:	e013      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed52:	e010      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed58:	e00d      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed5e:	e00a      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed64:	e007      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed6a:	e004      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed70:	e001      	b.n	800ed76 <_ZN3IMU6updateEt+0x34a>
 800ed72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed76:	4977      	ldr	r1, [pc, #476]	; (800ef54 <_ZN3IMU6updateEt+0x528>)
 800ed78:	608b      	str	r3, [r1, #8]
		__HAL_DMA_ENABLE(huart->hdmatx);
 800ed7a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	6813      	ldr	r3, [r2, #0]
 800ed80:	f043 0301 	orr.w	r3, r3, #1
 800ed84:	6013      	str	r3, [r2, #0]
		//__HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx)); => should not be after the hal_dma_enable!!(lot of 1 exceed the message frame)

		ahb_suspend_flag_ = false; //finish suspension
 800ed86:	2300      	movs	r3, #0
 800ed88:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
	}

	process();
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	f7ff fb99 	bl	800e4c4 <_ZN3IMU7processEv>

	update_ = true;
 800ed92:	2301      	movs	r3, #1
 800ed94:	f885 3110 	strb.w	r3, [r5, #272]	; 0x110

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ed98:	686b      	ldr	r3, [r5, #4]
 800ed9a:	682a      	ldr	r2, [r5, #0]
 800ed9c:	1a9b      	subs	r3, r3, r2
 800ed9e:	109b      	asrs	r3, r3, #2
 800eda0:	4a6d      	ldr	r2, [pc, #436]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800eda2:	fb02 f303 	mul.w	r3, r2, r3
	//chen 0526 add imu data buffer
	if(data_queue.size())
 800eda6:	b31b      	cbz	r3, 800edf0 <_ZN3IMU6updateEt+0x3c4>
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
	Vector3f  getGyro(){return gyro_;}
 800eda8:	ac09      	add	r4, sp, #36	; 0x24
 800edaa:	f105 0394 	add.w	r3, r5, #148	; 0x94
 800edae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800edb6:	ab06      	add	r3, sp, #24
 800edb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		Imugyro tmpvelo = getGyro();
 800edbc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 800edc0:	6869      	ldr	r1, [r5, #4]
		tmpvelo -= data_queue.back();
 800edc2:	390c      	subs	r1, #12
 800edc4:	4668      	mov	r0, sp
 800edc6:	f004 fc39 	bl	801363c <_ZN7Vector3IfEmIERKS0_>
		gyroacc_quene.push_back(tmpvelo);
 800edca:	f105 040c 	add.w	r4, r5, #12
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800edce:	6863      	ldr	r3, [r4, #4]
 800edd0:	68a2      	ldr	r2, [r4, #8]
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d008      	beq.n	800ede8 <_ZN3IMU6updateEt+0x3bc>
 800edd6:	b11b      	cbz	r3, 800ede0 <_ZN3IMU6updateEt+0x3b4>
 800edd8:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 800eddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
 800ede0:	6863      	ldr	r3, [r4, #4]
 800ede2:	330c      	adds	r3, #12
 800ede4:	6063      	str	r3, [r4, #4]
 800ede6:	e003      	b.n	800edf0 <_ZN3IMU6updateEt+0x3c4>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
 800ede8:	4669      	mov	r1, sp
 800edea:	4620      	mov	r0, r4
 800edec:	f7ff fd1a 	bl	800e824 <_ZNSt6vectorI7Vector3IfESaIS1_EE19_M_emplace_back_auxIIRKS1_EEEvDpOT_>
	}
	data_queue.push_back(getGyro());
 800edf0:	462e      	mov	r6, r5
 800edf2:	ac0f      	add	r4, sp, #60	; 0x3c
 800edf4:	f105 0394 	add.w	r3, r5, #148	; 0x94
 800edf8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee00:	ab0c      	add	r3, sp, #48	; 0x30
 800ee02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ee06:	ac03      	add	r4, sp, #12
 800ee08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f7ff fdfa 	bl	800ea08 <_ZNSt6vectorI7Vector3IfESaIS1_EE12emplace_backIIS1_EEEvDpOT_>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ee14:	686b      	ldr	r3, [r5, #4]
 800ee16:	6829      	ldr	r1, [r5, #0]
 800ee18:	1a5b      	subs	r3, r3, r1
 800ee1a:	109b      	asrs	r3, r3, #2
 800ee1c:	4a4e      	ldr	r2, [pc, #312]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800ee1e:	fb02 f303 	mul.w	r3, r2, r3
	if(data_queue.size()>queue_size)
 800ee22:	429f      	cmp	r7, r3
 800ee24:	d23f      	bcs.n	800eea6 <_ZN3IMU6updateEt+0x47a>
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 800ee26:	4628      	mov	r0, r5
 800ee28:	f7ff fd64 	bl	800e8f4 <_ZNSt6vectorI7Vector3IfESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ee2c:	686b      	ldr	r3, [r5, #4]
 800ee2e:	6829      	ldr	r1, [r5, #0]
 800ee30:	1a5b      	subs	r3, r3, r1
 800ee32:	109b      	asrs	r3, r3, #2
 800ee34:	4a48      	ldr	r2, [pc, #288]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800ee36:	fb02 f203 	mul.w	r2, r2, r3
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 800ee3a:	b91a      	cbnz	r2, 800ee44 <_ZN3IMU6updateEt+0x418>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4847      	ldr	r0, [pc, #284]	; (800ef5c <_ZN3IMU6updateEt+0x530>)
 800ee40:	f005 fd44 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
      data_queue.erase(data_queue.begin());
    return data_queue.size();
  };
  T Average_vec(std::vector<T> *data)
  {
	  T sum = data->at(0);
 800ee44:	c907      	ldmia	r1, {r0, r1, r2}
 800ee46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
	  for(int i = 1; i < data->size(); i++)
 800ee4a:	2401      	movs	r4, #1

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ee4c:	6872      	ldr	r2, [r6, #4]
 800ee4e:	6831      	ldr	r1, [r6, #0]
 800ee50:	1a52      	subs	r2, r2, r1
 800ee52:	1092      	asrs	r2, r2, #2
 800ee54:	4b40      	ldr	r3, [pc, #256]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800ee56:	fb03 f202 	mul.w	r2, r3, r2
 800ee5a:	42a2      	cmp	r2, r4
 800ee5c:	d90d      	bls.n	800ee7a <_ZN3IMU6updateEt+0x44e>
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 800ee5e:	d803      	bhi.n	800ee68 <_ZN3IMU6updateEt+0x43c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800ee60:	4621      	mov	r1, r4
 800ee62:	483e      	ldr	r0, [pc, #248]	; (800ef5c <_ZN3IMU6updateEt+0x530>)
 800ee64:	f005 fd32 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      { return *(this->_M_impl._M_start + __n); }
 800ee68:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ee6c:	009a      	lsls	r2, r3, #2
		  sum += data->at(i);
 800ee6e:	4411      	add	r1, r2
 800ee70:	4668      	mov	r0, sp
 800ee72:	f004 fc11 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>
    return data_queue.size();
  };
  T Average_vec(std::vector<T> *data)
  {
	  T sum = data->at(0);
	  for(int i = 1; i < data->size(); i++)
 800ee76:	3401      	adds	r4, #1
 800ee78:	e7e8      	b.n	800ee4c <_ZN3IMU6updateEt+0x420>
		  sum += data->at(i);

	  return sum/data->size();
 800ee7a:	ee07 2a90 	vmov	s15, r2
 800ee7e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800ee82:	4668      	mov	r0, sp
 800ee84:	f004 fc36 	bl	80136f4 <_ZNK7Vector3IfEdvEf>
 800ee88:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
 800ee8c:	edcd 0a16 	vstr	s1, [sp, #88]	; 0x58
 800ee90:	ed8d 1a17 	vstr	s2, [sp, #92]	; 0x5c
 800ee94:	ab12      	add	r3, sp, #72	; 0x48
 800ee96:	aa15      	add	r2, sp, #84	; 0x54
 800ee98:	ca07      	ldmia	r2, {r0, r1, r2}
 800ee9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		data_queue.erase(data_queue.begin());
		ave_gyro = Average_vec(&data_queue);
 800ee9e:	f105 0418 	add.w	r4, r5, #24
 800eea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eea6:	692b      	ldr	r3, [r5, #16]
 800eea8:	68e9      	ldr	r1, [r5, #12]
 800eeaa:	1a5b      	subs	r3, r3, r1
 800eeac:	109b      	asrs	r3, r3, #2
 800eeae:	4a2a      	ldr	r2, [pc, #168]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800eeb0:	fb02 f303 	mul.w	r3, r2, r3
	}
	if(gyroacc_quene.size()>queue_size)
 800eeb4:	429f      	cmp	r7, r3
 800eeb6:	d242      	bcs.n	800ef3e <_ZN3IMU6updateEt+0x512>
	{
		gyroacc_quene.erase(gyroacc_quene.begin());
 800eeb8:	f105 060c 	add.w	r6, r5, #12
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7ff fd19 	bl	800e8f4 <_ZNSt6vectorI7Vector3IfESaIS1_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS1_S3_EE>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eec2:	6873      	ldr	r3, [r6, #4]
 800eec4:	68e9      	ldr	r1, [r5, #12]
 800eec6:	1a5b      	subs	r3, r3, r1
 800eec8:	109b      	asrs	r3, r3, #2
 800eeca:	4a23      	ldr	r2, [pc, #140]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800eecc:	fb02 f203 	mul.w	r2, r2, r3
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 800eed0:	b91a      	cbnz	r2, 800eeda <_ZN3IMU6updateEt+0x4ae>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800eed2:	2100      	movs	r1, #0
 800eed4:	4821      	ldr	r0, [pc, #132]	; (800ef5c <_ZN3IMU6updateEt+0x530>)
 800eed6:	f005 fcf9 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
      data_queue.erase(data_queue.begin());
    return data_queue.size();
  };
  T Average_vec(std::vector<T> *data)
  {
	  T sum = data->at(0);
 800eeda:	c907      	ldmia	r1, {r0, r1, r2}
 800eedc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
	  for(int i = 1; i < data->size(); i++)
 800eee0:	2401      	movs	r4, #1

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800eee2:	6872      	ldr	r2, [r6, #4]
 800eee4:	6831      	ldr	r1, [r6, #0]
 800eee6:	1a52      	subs	r2, r2, r1
 800eee8:	1092      	asrs	r2, r2, #2
 800eeea:	4b1b      	ldr	r3, [pc, #108]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800eeec:	fb03 f202 	mul.w	r2, r3, r2
 800eef0:	42a2      	cmp	r2, r4
 800eef2:	d90d      	bls.n	800ef10 <_ZN3IMU6updateEt+0x4e4>
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 800eef4:	d803      	bhi.n	800eefe <_ZN3IMU6updateEt+0x4d2>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800eef6:	4621      	mov	r1, r4
 800eef8:	4818      	ldr	r0, [pc, #96]	; (800ef5c <_ZN3IMU6updateEt+0x530>)
 800eefa:	f005 fce7 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      { return *(this->_M_impl._M_start + __n); }
 800eefe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ef02:	009a      	lsls	r2, r3, #2
		  sum += data->at(i);
 800ef04:	4411      	add	r1, r2
 800ef06:	4668      	mov	r0, sp
 800ef08:	f004 fbc6 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>
    return data_queue.size();
  };
  T Average_vec(std::vector<T> *data)
  {
	  T sum = data->at(0);
	  for(int i = 1; i < data->size(); i++)
 800ef0c:	3401      	adds	r4, #1
 800ef0e:	e7e8      	b.n	800eee2 <_ZN3IMU6updateEt+0x4b6>
		  sum += data->at(i);

	  return sum/data->size();
 800ef10:	ee07 2a90 	vmov	s15, r2
 800ef14:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800ef18:	4668      	mov	r0, sp
 800ef1a:	f004 fbeb 	bl	80136f4 <_ZNK7Vector3IfEdvEf>
 800ef1e:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
 800ef22:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 800ef26:	ed8d 1a1d 	vstr	s2, [sp, #116]	; 0x74
 800ef2a:	ab18      	add	r3, sp, #96	; 0x60
 800ef2c:	aa1e      	add	r2, sp, #120	; 0x78
 800ef2e:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800ef32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ave_gyroacc = Average_vec(&gyroacc_quene);
 800ef36:	f105 0424 	add.w	r4, r5, #36	; 0x24
 800ef3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ef3e:	686b      	ldr	r3, [r5, #4]
 800ef40:	6828      	ldr	r0, [r5, #0]
 800ef42:	1a1b      	subs	r3, r3, r0
 800ef44:	109b      	asrs	r3, r3, #2
 800ef46:	4804      	ldr	r0, [pc, #16]	; (800ef58 <_ZN3IMU6updateEt+0x52c>)
 800ef48:	fb00 f003 	mul.w	r0, r0, r3
	}
	return data_queue.size();

}
 800ef4c:	b280      	uxth	r0, r0
 800ef4e:	b01f      	add	sp, #124	; 0x7c
 800ef50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef52:	bf00      	nop
 800ef54:	40026000 	.word	0x40026000
 800ef58:	aaaaaaab 	.word	0xaaaaaaab
 800ef5c:	0801ad64 	.word	0x0801ad64

0800ef60 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ef60:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800ef62:	4809      	ldr	r0, [pc, #36]	; (800ef88 <MX_USART1_UART_Init+0x28>)
 800ef64:	4b09      	ldr	r3, [pc, #36]	; (800ef8c <MX_USART1_UART_Init+0x2c>)
 800ef66:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 800ef68:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800ef6c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ef72:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ef74:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ef76:	220c      	movs	r2, #12
 800ef78:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ef7a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ef7c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ef7e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ef80:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_UART_Init(&huart1);
 800ef82:	f7fb fc6d 	bl	800a860 <HAL_UART_Init>
 800ef86:	bd08      	pop	{r3, pc}
 800ef88:	20003cb8 	.word	0x20003cb8
 800ef8c:	40011000 	.word	0x40011000

0800ef90 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ef90:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800ef92:	4809      	ldr	r0, [pc, #36]	; (800efb8 <MX_USART3_UART_Init+0x28>)
 800ef94:	4b09      	ldr	r3, [pc, #36]	; (800efbc <MX_USART3_UART_Init+0x2c>)
 800ef96:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 921600;
 800ef98:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800ef9c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800efa2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800efa4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800efa6:	220c      	movs	r2, #12
 800efa8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800efaa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800efac:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800efae:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800efb0:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_UART_Init(&huart3);
 800efb2:	f7fb fc55 	bl	800a860 <HAL_UART_Init>
 800efb6:	bd08      	pop	{r3, pc}
 800efb8:	20003d28 	.word	0x20003d28
 800efbc:	40004800 	.word	0x40004800

0800efc0 <HAL_UART_MspInit>:

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800efc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc4:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800efc6:	6803      	ldr	r3, [r0, #0]
 800efc8:	4a3d      	ldr	r2, [pc, #244]	; (800f0c0 <HAL_UART_MspInit+0x100>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d156      	bne.n	800f07c <HAL_UART_MspInit+0xbc>
 800efce:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800efd0:	2600      	movs	r6, #0
 800efd2:	9601      	str	r6, [sp, #4]
 800efd4:	4b3b      	ldr	r3, [pc, #236]	; (800f0c4 <HAL_UART_MspInit+0x104>)
 800efd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efd8:	f042 0210 	orr.w	r2, r2, #16
 800efdc:	645a      	str	r2, [r3, #68]	; 0x44
 800efde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efe0:	f003 0310 	and.w	r3, r3, #16
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800efe8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800efec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800efee:	2302      	movs	r3, #2
 800eff0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eff2:	f04f 0b01 	mov.w	fp, #1
 800eff6:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800effa:	2303      	movs	r3, #3
 800effc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800effe:	2307      	movs	r3, #7
 800f000:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f002:	a903      	add	r1, sp, #12
 800f004:	4830      	ldr	r0, [pc, #192]	; (800f0c8 <HAL_UART_MspInit+0x108>)
 800f006:	f7fd fe8b 	bl	800cd20 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800f00a:	4d30      	ldr	r5, [pc, #192]	; (800f0cc <HAL_UART_MspInit+0x10c>)
 800f00c:	4b30      	ldr	r3, [pc, #192]	; (800f0d0 <HAL_UART_MspInit+0x110>)
 800f00e:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800f010:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
 800f014:	f8c5 a004 	str.w	sl, [r5, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f018:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f01a:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800f01c:	f44f 6980 	mov.w	r9, #1024	; 0x400
 800f020:	f8c5 9010 	str.w	r9, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f024:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f026:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800f028:	f44f 7880 	mov.w	r8, #256	; 0x100
 800f02c:	f8c5 801c 	str.w	r8, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800f030:	f44f 3740 	mov.w	r7, #196608	; 0x30000
 800f034:	622f      	str	r7, [r5, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800f036:	2304      	movs	r3, #4
 800f038:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800f03a:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC8;
 800f03e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f042:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800f044:	632e      	str	r6, [r5, #48]	; 0x30
    HAL_DMA_Init(&hdma_usart1_rx);
 800f046:	4628      	mov	r0, r5
 800f048:	f7fe f952 	bl	800d2f0 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800f04c:	6665      	str	r5, [r4, #100]	; 0x64
 800f04e:	63ac      	str	r4, [r5, #56]	; 0x38

    hdma_usart1_tx.Instance = DMA2_Stream7;
 800f050:	4d20      	ldr	r5, [pc, #128]	; (800f0d4 <HAL_UART_MspInit+0x114>)
 800f052:	4b21      	ldr	r3, [pc, #132]	; (800f0d8 <HAL_UART_MspInit+0x118>)
 800f054:	602b      	str	r3, [r5, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800f056:	f8c5 a004 	str.w	sl, [r5, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f05a:	2340      	movs	r3, #64	; 0x40
 800f05c:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f05e:	60ee      	str	r6, [r5, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f060:	f8c5 9010 	str.w	r9, [r5, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f064:	616e      	str	r6, [r5, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f066:	61ae      	str	r6, [r5, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800f068:	f8c5 801c 	str.w	r8, [r5, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800f06c:	622f      	str	r7, [r5, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f06e:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_DMA_Init(&hdma_usart1_tx);
 800f070:	4628      	mov	r0, r5
 800f072:	f7fe f93d 	bl	800d2f0 <HAL_DMA_Init>

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800f076:	6625      	str	r5, [r4, #96]	; 0x60
 800f078:	63ac      	str	r4, [r5, #56]	; 0x38
 800f07a:	e01d      	b.n	800f0b8 <HAL_UART_MspInit+0xf8>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800f07c:	4a17      	ldr	r2, [pc, #92]	; (800f0dc <HAL_UART_MspInit+0x11c>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d11a      	bne.n	800f0b8 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800f082:	2300      	movs	r3, #0
 800f084:	9302      	str	r3, [sp, #8]
 800f086:	4b0f      	ldr	r3, [pc, #60]	; (800f0c4 <HAL_UART_MspInit+0x104>)
 800f088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f08a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f08e:	641a      	str	r2, [r3, #64]	; 0x40
 800f090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f096:	9302      	str	r3, [sp, #8]
 800f098:	9b02      	ldr	r3, [sp, #8]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800f09a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f09e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f0a8:	2303      	movs	r3, #3
 800f0aa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800f0ac:	2307      	movs	r3, #7
 800f0ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f0b0:	a903      	add	r1, sp, #12
 800f0b2:	480b      	ldr	r0, [pc, #44]	; (800f0e0 <HAL_UART_MspInit+0x120>)
 800f0b4:	f7fd fe34 	bl	800cd20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800f0b8:	b009      	add	sp, #36	; 0x24
 800f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0be:	bf00      	nop
 800f0c0:	40011000 	.word	0x40011000
 800f0c4:	40023800 	.word	0x40023800
 800f0c8:	40020000 	.word	0x40020000
 800f0cc:	20003c60 	.word	0x20003c60
 800f0d0:	40026440 	.word	0x40026440
 800f0d4:	20003c08 	.word	0x20003c08
 800f0d8:	400264b8 	.word	0x400264b8
 800f0dc:	40004800 	.word	0x40004800
 800f0e0:	40020c00 	.word	0x40020c00

0800f0e4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800f0e4:	b530      	push	{r4, r5, lr}
 800f0e6:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800f0e8:	4d10      	ldr	r5, [pc, #64]	; (800f12c <MX_TIM3_Init+0x48>)
 800f0ea:	4b11      	ldr	r3, [pc, #68]	; (800f130 <MX_TIM3_Init+0x4c>)
 800f0ec:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
 800f0ee:	2400      	movs	r4, #0
 800f0f0:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800f0f2:	2310      	movs	r3, #16
 800f0f4:	60ab      	str	r3, [r5, #8]
  htim3.Init.Period = 30000;
 800f0f6:	f247 5330 	movw	r3, #30000	; 0x7530
 800f0fa:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f0fc:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800f0fe:	2303      	movs	r3, #3
 800f100:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f102:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f104:	2301      	movs	r3, #1
 800f106:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f108:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 800f10a:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f10c:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f10e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f110:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f112:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim3, &sConfig);
 800f114:	a903      	add	r1, sp, #12
 800f116:	4628      	mov	r0, r5
 800f118:	f7fb fe0c 	bl	800ad34 <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f11c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f11e:	9402      	str	r4, [sp, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800f120:	4669      	mov	r1, sp
 800f122:	4628      	mov	r0, r5
 800f124:	f7fb fcc2 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>

}
 800f128:	b00d      	add	sp, #52	; 0x34
 800f12a:	bd30      	pop	{r4, r5, pc}
 800f12c:	20003d98 	.word	0x20003d98
 800f130:	40000400 	.word	0x40000400

0800f134 <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800f134:	b530      	push	{r4, r5, lr}
 800f136:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 800f138:	4d10      	ldr	r5, [pc, #64]	; (800f17c <MX_TIM5_Init+0x48>)
 800f13a:	4b11      	ldr	r3, [pc, #68]	; (800f180 <MX_TIM5_Init+0x4c>)
 800f13c:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 800f13e:	2400      	movs	r4, #0
 800f140:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f142:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 30000;
 800f144:	f247 5330 	movw	r3, #30000	; 0x7530
 800f148:	60eb      	str	r3, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f14a:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800f14c:	2303      	movs	r3, #3
 800f14e:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800f150:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800f152:	2301      	movs	r3, #1
 800f154:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800f156:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 800f158:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800f15a:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800f15c:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800f15e:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800f160:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim5, &sConfig);
 800f162:	a903      	add	r1, sp, #12
 800f164:	4628      	mov	r0, r5
 800f166:	f7fb fde5 	bl	800ad34 <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f16a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f16c:	9402      	str	r4, [sp, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 800f16e:	4669      	mov	r1, sp
 800f170:	4628      	mov	r0, r5
 800f172:	f7fb fc9b 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>

}
 800f176:	b00d      	add	sp, #52	; 0x34
 800f178:	bd30      	pop	{r4, r5, pc}
 800f17a:	bf00      	nop
 800f17c:	20003e10 	.word	0x20003e10
 800f180:	40000c00 	.word	0x40000c00

0800f184 <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800f184:	b500      	push	{lr}
 800f186:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 800f188:	6803      	ldr	r3, [r0, #0]
 800f18a:	4a1d      	ldr	r2, [pc, #116]	; (800f200 <HAL_TIM_Encoder_MspInit+0x7c>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d118      	bne.n	800f1c2 <HAL_TIM_Encoder_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800f190:	2300      	movs	r3, #0
 800f192:	9301      	str	r3, [sp, #4]
 800f194:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 800f198:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800f19a:	f041 0102 	orr.w	r1, r1, #2
 800f19e:	6411      	str	r1, [r2, #64]	; 0x40
 800f1a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f1a2:	f002 0202 	and.w	r2, r2, #2
 800f1a6:	9201      	str	r2, [sp, #4]
 800f1a8:	9a01      	ldr	r2, [sp, #4]
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f1aa:	22c0      	movs	r2, #192	; 0xc0
 800f1ac:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1ae:	2202      	movs	r2, #2
 800f1b0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f1b6:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1b8:	a903      	add	r1, sp, #12
 800f1ba:	4812      	ldr	r0, [pc, #72]	; (800f204 <HAL_TIM_Encoder_MspInit+0x80>)
 800f1bc:	f7fd fdb0 	bl	800cd20 <HAL_GPIO_Init>
 800f1c0:	e01a      	b.n	800f1f8 <HAL_TIM_Encoder_MspInit+0x74>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM5)
 800f1c2:	4a11      	ldr	r2, [pc, #68]	; (800f208 <HAL_TIM_Encoder_MspInit+0x84>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d117      	bne.n	800f1f8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	9302      	str	r3, [sp, #8]
 800f1cc:	f502 320b 	add.w	r2, r2, #142336	; 0x22c00
 800f1d0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800f1d2:	f041 0108 	orr.w	r1, r1, #8
 800f1d6:	6411      	str	r1, [r2, #64]	; 0x40
 800f1d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f1da:	f002 0208 	and.w	r2, r2, #8
 800f1de:	9202      	str	r2, [sp, #8]
 800f1e0:	9a02      	ldr	r2, [sp, #8]
  
    /**TIM5 GPIO Configuration    
    PA0/WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f1e2:	2203      	movs	r2, #3
 800f1e4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f1ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800f1ee:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1f0:	a903      	add	r1, sp, #12
 800f1f2:	4804      	ldr	r0, [pc, #16]	; (800f204 <HAL_TIM_Encoder_MspInit+0x80>)
 800f1f4:	f7fd fd94 	bl	800cd20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800f1f8:	b009      	add	sp, #36	; 0x24
 800f1fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1fe:	bf00      	nop
 800f200:	40000400 	.word	0x40000400
 800f204:	40020000 	.word	0x40020000
 800f208:	40000c00 	.word	0x40000c00

0800f20c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f20c:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM4)
 800f20e:	6803      	ldr	r3, [r0, #0]
 800f210:	4a10      	ldr	r2, [pc, #64]	; (800f254 <HAL_TIM_Base_MspInit+0x48>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d10c      	bne.n	800f230 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800f216:	2300      	movs	r3, #0
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	4b0f      	ldr	r3, [pc, #60]	; (800f258 <HAL_TIM_Base_MspInit+0x4c>)
 800f21c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f21e:	f042 0204 	orr.w	r2, r2, #4
 800f222:	641a      	str	r2, [r3, #64]	; 0x40
 800f224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f226:	f003 0304 	and.w	r3, r3, #4
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	9b00      	ldr	r3, [sp, #0]
 800f22e:	e00e      	b.n	800f24e <HAL_TIM_Base_MspInit+0x42>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 800f230:	4a0a      	ldr	r2, [pc, #40]	; (800f25c <HAL_TIM_Base_MspInit+0x50>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d10b      	bne.n	800f24e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800f236:	2300      	movs	r3, #0
 800f238:	9301      	str	r3, [sp, #4]
 800f23a:	4b07      	ldr	r3, [pc, #28]	; (800f258 <HAL_TIM_Base_MspInit+0x4c>)
 800f23c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f23e:	f042 0202 	orr.w	r2, r2, #2
 800f242:	645a      	str	r2, [r3, #68]	; 0x44
 800f244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f246:	f003 0302 	and.w	r3, r3, #2
 800f24a:	9301      	str	r3, [sp, #4]
 800f24c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800f24e:	b002      	add	sp, #8
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	40000800 	.word	0x40000800
 800f258:	40023800 	.word	0x40023800
 800f25c:	40010400 	.word	0x40010400

0800f260 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800f260:	b500      	push	{lr}
 800f262:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 800f264:	6803      	ldr	r3, [r0, #0]
 800f266:	4a12      	ldr	r2, [pc, #72]	; (800f2b0 <HAL_TIM_MspPostInit+0x50>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d10d      	bne.n	800f288 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM4_MspPostInit 0 */
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800f26c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f270:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f272:	2302      	movs	r3, #2
 800f274:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f276:	2200      	movs	r2, #0
 800f278:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f27a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800f27c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f27e:	a901      	add	r1, sp, #4
 800f280:	480c      	ldr	r0, [pc, #48]	; (800f2b4 <HAL_TIM_MspPostInit+0x54>)
 800f282:	f7fd fd4d 	bl	800cd20 <HAL_GPIO_Init>
 800f286:	e00f      	b.n	800f2a8 <HAL_TIM_MspPostInit+0x48>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 800f288:	4a0b      	ldr	r2, [pc, #44]	; (800f2b8 <HAL_TIM_MspPostInit+0x58>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d10c      	bne.n	800f2a8 <HAL_TIM_MspPostInit+0x48>
  /* USER CODE END TIM8_MspPostInit 0 */
  
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800f28e:	2340      	movs	r3, #64	; 0x40
 800f290:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f292:	2302      	movs	r3, #2
 800f294:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f296:	2300      	movs	r3, #0
 800f298:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f29a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800f29c:	2303      	movs	r3, #3
 800f29e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f2a0:	a901      	add	r1, sp, #4
 800f2a2:	4806      	ldr	r0, [pc, #24]	; (800f2bc <HAL_TIM_MspPostInit+0x5c>)
 800f2a4:	f7fd fd3c 	bl	800cd20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800f2a8:	b007      	add	sp, #28
 800f2aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2ae:	bf00      	nop
 800f2b0:	40000800 	.word	0x40000800
 800f2b4:	40020c00 	.word	0x40020c00
 800f2b8:	40010400 	.word	0x40010400
 800f2bc:	40020800 	.word	0x40020800

0800f2c0 <MX_TIM4_Init>:
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800f2c0:	b530      	push	{r4, r5, lr}
 800f2c2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim4.Instance = TIM4;
 800f2c4:	4c1a      	ldr	r4, [pc, #104]	; (800f330 <MX_TIM4_Init+0x70>)
 800f2c6:	4b1b      	ldr	r3, [pc, #108]	; (800f334 <MX_TIM4_Init+0x74>)
 800f2c8:	6023      	str	r3, [r4, #0]
  htim4.Init.Prescaler = 1;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	6063      	str	r3, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800f2ce:	2320      	movs	r3, #32
 800f2d0:	60a3      	str	r3, [r4, #8]
  htim4.Init.Period = 54000;
 800f2d2:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
 800f2d6:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f2d8:	2500      	movs	r5, #0
 800f2da:	6125      	str	r5, [r4, #16]
  HAL_TIM_Base_Init(&htim4);
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f7fb fcf3 	bl	800acc8 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f2e2:	a90e      	add	r1, sp, #56	; 0x38
 800f2e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f2e8:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f7fb fe43 	bl	800af78 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim4);
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f7fb fd02 	bl	800acfc <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f2f8:	9507      	str	r5, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f2fa:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800f2fc:	a907      	add	r1, sp, #28
 800f2fe:	4620      	mov	r0, r4
 800f300:	f7fb fbd4 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f304:	2360      	movs	r3, #96	; 0x60
 800f306:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 40500;
 800f308:	f649 6334 	movw	r3, #40500	; 0x9e34
 800f30c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f30e:	9502      	str	r5, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f310:	9504      	str	r5, [sp, #16]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 800f312:	462a      	mov	r2, r5
 800f314:	4669      	mov	r1, sp
 800f316:	4620      	mov	r0, r4
 800f318:	f7fb fb2c 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 800f31c:	2204      	movs	r2, #4
 800f31e:	4669      	mov	r1, sp
 800f320:	4620      	mov	r0, r4
 800f322:	f7fb fb27 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim4);
 800f326:	4620      	mov	r0, r4
 800f328:	f7ff ff9a 	bl	800f260 <HAL_TIM_MspPostInit>

}
 800f32c:	b00f      	add	sp, #60	; 0x3c
 800f32e:	bd30      	pop	{r4, r5, pc}
 800f330:	20003dd4 	.word	0x20003dd4
 800f334:	40000800 	.word	0x40000800

0800f338 <MX_TIM8_Init>:
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800f338:	b530      	push	{r4, r5, lr}
 800f33a:	b09b      	sub	sp, #108	; 0x6c
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim8.Instance = TIM8;
 800f33c:	4d23      	ldr	r5, [pc, #140]	; (800f3cc <MX_TIM8_Init+0x94>)
 800f33e:	4b24      	ldr	r3, [pc, #144]	; (800f3d0 <MX_TIM8_Init+0x98>)
 800f340:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 216;
 800f342:	23d8      	movs	r3, #216	; 0xd8
 800f344:	606b      	str	r3, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f346:	2400      	movs	r4, #0
 800f348:	60ac      	str	r4, [r5, #8]
  htim8.Init.Period = 50000;
 800f34a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f34e:	60eb      	str	r3, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f350:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 800f352:	616c      	str	r4, [r5, #20]
  HAL_TIM_Base_Init(&htim8);
 800f354:	4628      	mov	r0, r5
 800f356:	f7fb fcb7 	bl	800acc8 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f35a:	a91a      	add	r1, sp, #104	; 0x68
 800f35c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f360:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
 800f364:	4628      	mov	r0, r5
 800f366:	f7fb fe07 	bl	800af78 <HAL_TIM_ConfigClockSource>

  HAL_TIM_PWM_Init(&htim8);
 800f36a:	4628      	mov	r0, r5
 800f36c:	f7fb fcc6 	bl	800acfc <HAL_TIM_PWM_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f370:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f372:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f374:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
 800f376:	a913      	add	r1, sp, #76	; 0x4c
 800f378:	4628      	mov	r0, r5
 800f37a:	f7fb fb97 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f37e:	9408      	str	r4, [sp, #32]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f380:	9409      	str	r4, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f382:	940a      	str	r4, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800f384:	940b      	str	r4, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f386:	940c      	str	r4, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f38c:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f38e:	940e      	str	r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f390:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f396:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f398:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f39a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
 800f39c:	a908      	add	r1, sp, #32
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f7fb fbb4 	bl	800ab0c <HAL_TIMEx_ConfigBreakDeadTime>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f3a4:	2360      	movs	r3, #96	; 0x60
 800f3a6:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 25000;
 800f3a8:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800f3ac:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f3ae:	9403      	str	r4, [sp, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f3b0:	9404      	str	r4, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f3b2:	9405      	str	r4, [sp, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f3b4:	9406      	str	r4, [sp, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f3b6:	9407      	str	r4, [sp, #28]
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
 800f3b8:	4622      	mov	r2, r4
 800f3ba:	a901      	add	r1, sp, #4
 800f3bc:	4628      	mov	r0, r5
 800f3be:	f7fb fad9 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_MspPostInit(&htim8);
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	f7ff ff4c 	bl	800f260 <HAL_TIM_MspPostInit>

}
 800f3c8:	b01b      	add	sp, #108	; 0x6c
 800f3ca:	bd30      	pop	{r4, r5, pc}
 800f3cc:	20003e4c 	.word	0x20003e4c
 800f3d0:	40010400 	.word	0x40010400

0800f3d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800f3d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f3d6:	f7fe fb33 	bl	800da40 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800f3da:	f7fe f965 	bl	800d6a8 <HAL_SYSTICK_IRQHandler>
 800f3de:	bd08      	pop	{r3, pc}

0800f3e0 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800f3e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800f3e2:	2001      	movs	r0, #1
 800f3e4:	f7fd fd98 	bl	800cf18 <HAL_GPIO_EXTI_IRQHandler>
 800f3e8:	bd08      	pop	{r3, pc}
 800f3ea:	bf00      	nop

0800f3ec <EXTI1_IRQHandler>:

/**
* @brief This function handles EXTI line1 interrupt.
*/
void EXTI1_IRQHandler(void)
{
 800f3ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800f3ee:	2002      	movs	r0, #2
 800f3f0:	f7fd fd92 	bl	800cf18 <HAL_GPIO_EXTI_IRQHandler>
 800f3f4:	bd08      	pop	{r3, pc}
 800f3f6:	bf00      	nop

0800f3f8 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 800f3f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800f3fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f3fe:	f7fd fd8b 	bl	800cf18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800f402:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f406:	f7fd fd87 	bl	800cf18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800f40a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f40e:	f7fd fd83 	bl	800cf18 <HAL_GPIO_EXTI_IRQHandler>
 800f412:	bd08      	pop	{r3, pc}

0800f414 <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream2 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 800f414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800f416:	4802      	ldr	r0, [pc, #8]	; (800f420 <DMA2_Stream2_IRQHandler+0xc>)
 800f418:	f7fd fff8 	bl	800d40c <HAL_DMA_IRQHandler>
 800f41c:	bd08      	pop	{r3, pc}
 800f41e:	bf00      	nop
 800f420:	20003c60 	.word	0x20003c60

0800f424 <DMA2_Stream7_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream7_IRQHandler(void)
{
 800f424:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800f426:	4802      	ldr	r0, [pc, #8]	; (800f430 <DMA2_Stream7_IRQHandler+0xc>)
 800f428:	f7fd fff0 	bl	800d40c <HAL_DMA_IRQHandler>
 800f42c:	bd08      	pop	{r3, pc}
 800f42e:	bf00      	nop
 800f430:	20003c08 	.word	0x20003c08

0800f434 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f434:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800f436:	2005      	movs	r0, #5
 800f438:	f7fe f8c2 	bl	800d5c0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800f43c:	2200      	movs	r2, #0
 800f43e:	4611      	mov	r1, r2
 800f440:	f06f 000b 	mvn.w	r0, #11
 800f444:	f7fe f8ce 	bl	800d5e4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800f448:	2200      	movs	r2, #0
 800f44a:	4611      	mov	r1, r2
 800f44c:	f06f 000a 	mvn.w	r0, #10
 800f450:	f7fe f8c8 	bl	800d5e4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800f454:	2200      	movs	r2, #0
 800f456:	4611      	mov	r1, r2
 800f458:	f06f 0009 	mvn.w	r0, #9
 800f45c:	f7fe f8c2 	bl	800d5e4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800f460:	2200      	movs	r2, #0
 800f462:	4611      	mov	r1, r2
 800f464:	f06f 0003 	mvn.w	r0, #3
 800f468:	f7fe f8bc 	bl	800d5e4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 1, 2);
 800f46c:	2202      	movs	r2, #2
 800f46e:	2101      	movs	r1, #1
 800f470:	f04f 30ff 	mov.w	r0, #4294967295
 800f474:	f7fe f8b6 	bl	800d5e4 <HAL_NVIC_SetPriority>
 800f478:	bd08      	pop	{r3, pc}
 800f47a:	bf00      	nop

0800f47c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800f47c:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 800f47e:	480e      	ldr	r0, [pc, #56]	; (800f4b8 <MX_SPI1_Init+0x3c>)
 800f480:	4b0e      	ldr	r3, [pc, #56]	; (800f4bc <MX_SPI1_Init+0x40>)
 800f482:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800f484:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f488:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800f48a:	2300      	movs	r3, #0
 800f48c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800f48e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800f492:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f494:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f496:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800f498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f49c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800f49e:	2230      	movs	r2, #48	; 0x30
 800f4a0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f4a2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800f4a4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f4a6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800f4a8:	2207      	movs	r2, #7
 800f4aa:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800f4ac:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800f4ae:	2308      	movs	r3, #8
 800f4b0:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_SPI_Init(&hspi1);
 800f4b2:	f7fb ff67 	bl	800b384 <HAL_SPI_Init>
 800f4b6:	bd08      	pop	{r3, pc}
 800f4b8:	20003e88 	.word	0x20003e88
 800f4bc:	40013000 	.word	0x40013000

0800f4c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800f4c0:	6802      	ldr	r2, [r0, #0]
 800f4c2:	4b11      	ldr	r3, [pc, #68]	; (800f508 <HAL_SPI_MspInit+0x48>)
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d11e      	bne.n	800f506 <HAL_SPI_MspInit+0x46>
  HAL_SPI_Init(&hspi1);

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f4c8:	b500      	push	{lr}
 800f4ca:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	9100      	str	r1, [sp, #0]
 800f4d0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 800f4d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f4da:	645a      	str	r2, [r3, #68]	; 0x44
 800f4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800f4e6:	2338      	movs	r3, #56	; 0x38
 800f4e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4ea:	2302      	movs	r3, #2
 800f4ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ee:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800f4f4:	2305      	movs	r3, #5
 800f4f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4f8:	a901      	add	r1, sp, #4
 800f4fa:	4804      	ldr	r0, [pc, #16]	; (800f50c <HAL_SPI_MspInit+0x4c>)
 800f4fc:	f7fd fc10 	bl	800cd20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800f500:	b007      	add	sp, #28
 800f502:	f85d fb04 	ldr.w	pc, [sp], #4
 800f506:	4770      	bx	lr
 800f508:	40013000 	.word	0x40013000
 800f50c:	40020400 	.word	0x40020400

0800f510 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800f510:	6843      	ldr	r3, [r0, #4]
 800f512:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800f514:	6843      	ldr	r3, [r0, #4]
 800f516:	0a1b      	lsrs	r3, r3, #8
 800f518:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800f51a:	88c3      	ldrh	r3, [r0, #6]
 800f51c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800f51e:	79c3      	ldrb	r3, [r0, #7]
 800f520:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800f522:	6883      	ldr	r3, [r0, #8]
 800f524:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800f526:	6883      	ldr	r3, [r0, #8]
 800f528:	0a1b      	lsrs	r3, r3, #8
 800f52a:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800f52c:	8943      	ldrh	r3, [r0, #10]
 800f52e:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800f530:	7ac3      	ldrb	r3, [r0, #11]
 800f532:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800f534:	2008      	movs	r0, #8
 800f536:	4770      	bx	lr

0800f538 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f538:	780b      	ldrb	r3, [r1, #0]
 800f53a:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f53c:	784a      	ldrb	r2, [r1, #1]
 800f53e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f542:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f544:	788a      	ldrb	r2, [r1, #2]
 800f546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f54a:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f54c:	78ca      	ldrb	r2, [r1, #3]
 800f54e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f552:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f554:	790b      	ldrb	r3, [r1, #4]
 800f556:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f558:	794a      	ldrb	r2, [r1, #5]
 800f55a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f55e:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f560:	798a      	ldrb	r2, [r1, #6]
 800f562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f566:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f568:	79ca      	ldrb	r2, [r1, #7]
 800f56a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f56e:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 800f570:	2008      	movs	r0, #8
 800f572:	4770      	bx	lr

0800f574 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800f574:	4800      	ldr	r0, [pc, #0]	; (800f578 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 800f576:	4770      	bx	lr
 800f578:	0801b20c 	.word	0x0801b20c

0800f57c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800f57c:	4800      	ldr	r0, [pc, #0]	; (800f580 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 800f57e:	4770      	bx	lr
 800f580:	0801b21c 	.word	0x0801b21c

0800f584 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800f584:	4800      	ldr	r0, [pc, #0]	; (800f588 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 800f586:	4770      	bx	lr
 800f588:	0801b240 	.word	0x0801b240

0800f58c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800f58c:	4800      	ldr	r0, [pc, #0]	; (800f590 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 800f58e:	4770      	bx	lr
 800f590:	0801b25c 	.word	0x0801b25c

0800f594 <_ZN14rosserial_msgs3Log7getTypeEv>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/Log"; };
 800f594:	4800      	ldr	r0, [pc, #0]	; (800f598 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 800f596:	4770      	bx	lr
 800f598:	0801b280 	.word	0x0801b280

0800f59c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800f59c:	4800      	ldr	r0, [pc, #0]	; (800f5a0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 800f59e:	4770      	bx	lr
 800f5a0:	0801b294 	.word	0x0801b294

0800f5a4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800f5a4:	4800      	ldr	r0, [pc, #0]	; (800f5a8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 800f5a6:	4770      	bx	lr
 800f5a8:	0801a4e0 	.word	0x0801a4e0

0800f5ac <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800f5ac:	4800      	ldr	r0, [pc, #0]	; (800f5b0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 800f5ae:	4770      	bx	lr
 800f5b0:	0801b2b8 	.word	0x0801b2b8

0800f5b4 <_ZNK8std_msgs4Int89serializeEPh>:
      int offset = 0;
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800f5b4:	f990 3004 	ldrsb.w	r3, [r0, #4]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800f5b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800f5ba:	2001      	movs	r0, #1
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop

0800f5c0 <_ZN8std_msgs4Int811deserializeEPh>:
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f5c0:	780b      	ldrb	r3, [r1, #0]
      this->data = u_data.real;
 800f5c2:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 800f5c4:	2001      	movs	r0, #1
 800f5c6:	4770      	bx	lr

0800f5c8 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 800f5c8:	4800      	ldr	r0, [pc, #0]	; (800f5cc <_ZN8std_msgs4Int87getTypeEv+0x4>)
 800f5ca:	4770      	bx	lr
 800f5cc:	0801b2dc 	.word	0x0801b2dc

0800f5d0 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 800f5d0:	4800      	ldr	r0, [pc, #0]	; (800f5d4 <_ZN8std_msgs4Int86getMD5Ev+0x4>)
 800f5d2:	4770      	bx	lr
 800f5d4:	0801b2ec 	.word	0x0801b2ec

0800f5d8 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f5d8:	b410      	push	{r4}
 800f5da:	6882      	ldr	r2, [r0, #8]
 800f5dc:	68c3      	ldr	r3, [r0, #12]
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800f5de:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800f5e0:	0a14      	lsrs	r4, r2, #8
 800f5e2:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800f5e4:	0c14      	lsrs	r4, r2, #16
 800f5e6:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800f5e8:	0e12      	lsrs	r2, r2, #24
 800f5ea:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800f5ec:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800f5ee:	0a1a      	lsrs	r2, r3, #8
 800f5f0:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800f5f2:	0c1a      	lsrs	r2, r3, #16
 800f5f4:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800f5f6:	0e1b      	lsrs	r3, r3, #24
 800f5f8:	71cb      	strb	r3, [r1, #7]
 800f5fa:	6902      	ldr	r2, [r0, #16]
 800f5fc:	6943      	ldr	r3, [r0, #20]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800f5fe:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800f600:	0a14      	lsrs	r4, r2, #8
 800f602:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800f604:	0c14      	lsrs	r4, r2, #16
 800f606:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800f608:	0e12      	lsrs	r2, r2, #24
 800f60a:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800f60c:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800f60e:	0a1a      	lsrs	r2, r3, #8
 800f610:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800f612:	0c1a      	lsrs	r2, r3, #16
 800f614:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800f616:	0e1b      	lsrs	r3, r3, #24
 800f618:	73cb      	strb	r3, [r1, #15]
      offset += sizeof(this->y);
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800f61a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800f61e:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800f620:	0a10      	lsrs	r0, r2, #8
 800f622:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800f624:	0c10      	lsrs	r0, r2, #16
 800f626:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800f628:	0e12      	lsrs	r2, r2, #24
 800f62a:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800f62c:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800f62e:	0a1a      	lsrs	r2, r3, #8
 800f630:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800f632:	0c1a      	lsrs	r2, r3, #16
 800f634:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800f636:	0e1b      	lsrs	r3, r3, #24
 800f638:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->z);
      return offset;
    }
 800f63a:	2018      	movs	r0, #24
 800f63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop

0800f644 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800f644:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f648:	780a      	ldrb	r2, [r1, #0]
 800f64a:	2300      	movs	r3, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f64c:	784e      	ldrb	r6, [r1, #1]
 800f64e:	2500      	movs	r5, #0
 800f650:	0234      	lsls	r4, r6, #8
 800f652:	4322      	orrs	r2, r4
 800f654:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f656:	788e      	ldrb	r6, [r1, #2]
 800f658:	2500      	movs	r5, #0
 800f65a:	0434      	lsls	r4, r6, #16
 800f65c:	4322      	orrs	r2, r4
 800f65e:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f660:	78ce      	ldrb	r6, [r1, #3]
 800f662:	2500      	movs	r5, #0
 800f664:	0634      	lsls	r4, r6, #24
 800f666:	4322      	orrs	r2, r4
 800f668:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800f66a:	2400      	movs	r4, #0
 800f66c:	790d      	ldrb	r5, [r1, #4]
 800f66e:	4322      	orrs	r2, r4
 800f670:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800f672:	f891 8005 	ldrb.w	r8, [r1, #5]
 800f676:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800f67a:	4322      	orrs	r2, r4
 800f67c:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800f67e:	f891 8006 	ldrb.w	r8, [r1, #6]
 800f682:	ea4f 4708 	mov.w	r7, r8, lsl #16
 800f686:	4322      	orrs	r2, r4
 800f688:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800f68a:	f891 8007 	ldrb.w	r8, [r1, #7]
 800f68e:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 800f692:	4322      	orrs	r2, r4
 800f694:	433b      	orrs	r3, r7
 800f696:	e9c0 2302 	strd	r2, r3, [r0, #8]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f69a:	7a0e      	ldrb	r6, [r1, #8]
 800f69c:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f69e:	f891 8009 	ldrb.w	r8, [r1, #9]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800f6a8:	4332      	orrs	r2, r6
 800f6aa:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f6ac:	f891 800a 	ldrb.w	r8, [r1, #10]
 800f6b0:	2700      	movs	r7, #0
 800f6b2:	ea4f 4608 	mov.w	r6, r8, lsl #16
 800f6b6:	4332      	orrs	r2, r6
 800f6b8:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f6ba:	f891 800b 	ldrb.w	r8, [r1, #11]
 800f6be:	2700      	movs	r7, #0
 800f6c0:	ea4f 6608 	mov.w	r6, r8, lsl #24
 800f6c4:	4316      	orrs	r6, r2
 800f6c6:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800f6c8:	7b0b      	ldrb	r3, [r1, #12]
 800f6ca:	4326      	orrs	r6, r4
 800f6cc:	431f      	orrs	r7, r3
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800f6ce:	f891 800d 	ldrb.w	r8, [r1, #13]
 800f6d2:	ea4f 2308 	mov.w	r3, r8, lsl #8
 800f6d6:	4622      	mov	r2, r4
 800f6d8:	4332      	orrs	r2, r6
 800f6da:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800f6dc:	f891 800e 	ldrb.w	r8, [r1, #14]
 800f6e0:	ea4f 4708 	mov.w	r7, r8, lsl #16
 800f6e4:	4322      	orrs	r2, r4
 800f6e6:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800f6e8:	f891 800f 	ldrb.w	r8, [r1, #15]
 800f6ec:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
 800f6f0:	4322      	orrs	r2, r4
 800f6f2:	433b      	orrs	r3, r7
 800f6f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f6f8:	7c0e      	ldrb	r6, [r1, #16]
 800f6fa:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f6fc:	f891 8011 	ldrb.w	r8, [r1, #17]
 800f700:	2300      	movs	r3, #0
 800f702:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800f706:	4332      	orrs	r2, r6
 800f708:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f70a:	f891 8012 	ldrb.w	r8, [r1, #18]
 800f70e:	2700      	movs	r7, #0
 800f710:	ea4f 4608 	mov.w	r6, r8, lsl #16
 800f714:	4332      	orrs	r2, r6
 800f716:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f718:	f891 8013 	ldrb.w	r8, [r1, #19]
 800f71c:	2700      	movs	r7, #0
 800f71e:	ea4f 6608 	mov.w	r6, r8, lsl #24
 800f722:	4316      	orrs	r6, r2
 800f724:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800f726:	7d0b      	ldrb	r3, [r1, #20]
 800f728:	4326      	orrs	r6, r4
 800f72a:	431f      	orrs	r7, r3
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800f72c:	f891 8015 	ldrb.w	r8, [r1, #21]
 800f730:	ea4f 2308 	mov.w	r3, r8, lsl #8
 800f734:	4622      	mov	r2, r4
 800f736:	4332      	orrs	r2, r6
 800f738:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800f73a:	f891 8016 	ldrb.w	r8, [r1, #22]
 800f73e:	ea4f 4708 	mov.w	r7, r8, lsl #16
 800f742:	4322      	orrs	r2, r4
 800f744:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800f746:	f891 8017 	ldrb.w	r8, [r1, #23]
 800f74a:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 800f74e:	4322      	orrs	r2, r4
 800f750:	433b      	orrs	r3, r7
 800f752:	e9c0 2306 	strd	r2, r3, [r0, #24]
      offset += sizeof(this->z);
     return offset;
    }
 800f756:	2018      	movs	r0, #24
 800f758:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop

0800f760 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800f760:	4800      	ldr	r0, [pc, #0]	; (800f764 <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
 800f762:	4770      	bx	lr
 800f764:	0801b310 	.word	0x0801b310

0800f768 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800f768:	4800      	ldr	r0, [pc, #0]	; (800f76c <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
 800f76a:	4770      	bx	lr
 800f76c:	0801b328 	.word	0x0801b328

0800f770 <_ZN13geometry_msgs5Twist7getTypeEv>:
      offset += this->linear.deserialize(inbuffer + offset);
      offset += this->angular.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Twist"; };
 800f770:	4800      	ldr	r0, [pc, #0]	; (800f774 <_ZN13geometry_msgs5Twist7getTypeEv+0x4>)
 800f772:	4770      	bx	lr
 800f774:	0801b34c 	.word	0x0801b34c

0800f778 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800f778:	4800      	ldr	r0, [pc, #0]	; (800f77c <_ZN13geometry_msgs5Twist6getMD5Ev+0x4>)
 800f77a:	4770      	bx	lr
 800f77c:	0801b360 	.word	0x0801b360

0800f780 <_ZNK17aerial_robot_msgs3Imu9serializeEPh>:
      mag_data(),
      angles()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f780:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800f782:	6843      	ldr	r3, [r0, #4]
 800f784:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800f786:	6843      	ldr	r3, [r0, #4]
 800f788:	0a1b      	lsrs	r3, r3, #8
 800f78a:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800f78c:	88c3      	ldrh	r3, [r0, #6]
 800f78e:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800f790:	79c3      	ldrb	r3, [r0, #7]
 800f792:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800f794:	6883      	ldr	r3, [r0, #8]
 800f796:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800f798:	6883      	ldr	r3, [r0, #8]
 800f79a:	0a1b      	lsrs	r3, r3, #8
 800f79c:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800f79e:	8943      	ldrh	r3, [r0, #10]
 800f7a0:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800f7a2:	7ac3      	ldrb	r3, [r0, #11]
 800f7a4:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 3; i++){
 800f7a6:	2400      	movs	r4, #0
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
 800f7a8:	2308      	movs	r3, #8
      for( uint8_t i = 0; i < 3; i++){
 800f7aa:	2c02      	cmp	r4, #2
 800f7ac:	d811      	bhi.n	800f7d2 <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x52>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.real = this->acc_data[i];
 800f7ae:	1ca2      	adds	r2, r4, #2
 800f7b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f7b4:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_acc_datai.base >> (8 * 0)) & 0xFF;
 800f7b6:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
 800f7b8:	1c5d      	adds	r5, r3, #1
 800f7ba:	0a16      	lsrs	r6, r2, #8
 800f7bc:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
 800f7be:	1c9d      	adds	r5, r3, #2
 800f7c0:	0c16      	lsrs	r6, r2, #16
 800f7c2:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
 800f7c4:	1cdd      	adds	r5, r3, #3
 800f7c6:	0e12      	lsrs	r2, r2, #24
 800f7c8:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->acc_data[i]);
 800f7ca:	3304      	adds	r3, #4
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 3; i++){
 800f7cc:	3401      	adds	r4, #1
 800f7ce:	b2e4      	uxtb	r4, r4
 800f7d0:	e7eb      	b.n	800f7aa <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x2a>
 800f7d2:	2400      	movs	r4, #0
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f7d4:	2c02      	cmp	r4, #2
 800f7d6:	d810      	bhi.n	800f7fa <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x7a>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.real = this->gyro_data[i];
 800f7d8:	1da2      	adds	r2, r4, #6
 800f7da:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_gyro_datai.base >> (8 * 0)) & 0xFF;
 800f7de:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
 800f7e0:	1c5d      	adds	r5, r3, #1
 800f7e2:	0a16      	lsrs	r6, r2, #8
 800f7e4:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
 800f7e6:	1c9d      	adds	r5, r3, #2
 800f7e8:	0c16      	lsrs	r6, r2, #16
 800f7ea:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
 800f7ec:	1cdd      	adds	r5, r3, #3
 800f7ee:	0e12      	lsrs	r2, r2, #24
 800f7f0:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->gyro_data[i]);
 800f7f2:	3304      	adds	r3, #4
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f7f4:	3401      	adds	r4, #1
 800f7f6:	b2e4      	uxtb	r4, r4
 800f7f8:	e7ec      	b.n	800f7d4 <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x54>
 800f7fa:	2400      	movs	r4, #0
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f7fc:	2c02      	cmp	r4, #2
 800f7fe:	d812      	bhi.n	800f826 <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0xa6>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.real = this->mag_data[i];
 800f800:	f104 0208 	add.w	r2, r4, #8
 800f804:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f808:	6852      	ldr	r2, [r2, #4]
      *(outbuffer + offset + 0) = (u_mag_datai.base >> (8 * 0)) & 0xFF;
 800f80a:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
 800f80c:	1c5d      	adds	r5, r3, #1
 800f80e:	0a16      	lsrs	r6, r2, #8
 800f810:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
 800f812:	1c9d      	adds	r5, r3, #2
 800f814:	0c16      	lsrs	r6, r2, #16
 800f816:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
 800f818:	1cdd      	adds	r5, r3, #3
 800f81a:	0e12      	lsrs	r2, r2, #24
 800f81c:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->mag_data[i]);
 800f81e:	3304      	adds	r3, #4
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f820:	3401      	adds	r4, #1
 800f822:	b2e4      	uxtb	r4, r4
 800f824:	e7ea      	b.n	800f7fc <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x7c>
 800f826:	2400      	movs	r4, #0
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f828:	2c02      	cmp	r4, #2
 800f82a:	d811      	bhi.n	800f850 <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0xd0>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.real = this->angles[i];
 800f82c:	f104 020c 	add.w	r2, r4, #12
 800f830:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_anglesi.base >> (8 * 0)) & 0xFF;
 800f834:	54ca      	strb	r2, [r1, r3]
      *(outbuffer + offset + 1) = (u_anglesi.base >> (8 * 1)) & 0xFF;
 800f836:	1c5d      	adds	r5, r3, #1
 800f838:	0a16      	lsrs	r6, r2, #8
 800f83a:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
 800f83c:	1c9d      	adds	r5, r3, #2
 800f83e:	0c16      	lsrs	r6, r2, #16
 800f840:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
 800f842:	1cdd      	adds	r5, r3, #3
 800f844:	0e12      	lsrs	r2, r2, #24
 800f846:	554a      	strb	r2, [r1, r5]
      offset += sizeof(this->angles[i]);
 800f848:	3304      	adds	r3, #4
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f84a:	3401      	adds	r4, #1
 800f84c:	b2e4      	uxtb	r4, r4
 800f84e:	e7eb      	b.n	800f828 <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0xa8>
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->angles[i]);
      }
      return offset;
    }
 800f850:	4618      	mov	r0, r3
 800f852:	bc70      	pop	{r4, r5, r6}
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop

0800f858 <_ZN17aerial_robot_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800f858:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f85a:	780b      	ldrb	r3, [r1, #0]
 800f85c:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f85e:	784a      	ldrb	r2, [r1, #1]
 800f860:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f864:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f866:	788a      	ldrb	r2, [r1, #2]
 800f868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f86c:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f86e:	78ca      	ldrb	r2, [r1, #3]
 800f870:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f874:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f876:	790b      	ldrb	r3, [r1, #4]
 800f878:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f87a:	794a      	ldrb	r2, [r1, #5]
 800f87c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f880:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f882:	798a      	ldrb	r2, [r1, #6]
 800f884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f888:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f88a:	79ca      	ldrb	r2, [r1, #7]
 800f88c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f890:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 3; i++){
 800f892:	2400      	movs	r4, #0
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
 800f894:	2308      	movs	r3, #8
      for( uint8_t i = 0; i < 3; i++){
 800f896:	2c02      	cmp	r4, #2
 800f898:	d814      	bhi.n	800f8c4 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x6c>
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.base = 0;
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f89a:	5cca      	ldrb	r2, [r1, r3]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f89c:	1c5d      	adds	r5, r3, #1
 800f89e:	5d4d      	ldrb	r5, [r1, r5]
 800f8a0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f8a4:	1c9d      	adds	r5, r3, #2
 800f8a6:	5d4d      	ldrb	r5, [r1, r5]
 800f8a8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f8ac:	1cdd      	adds	r5, r3, #3
 800f8ae:	5d4e      	ldrb	r6, [r1, r5]
      this->acc_data[i] = u_acc_datai.real;
 800f8b0:	1ca5      	adds	r5, r4, #2
 800f8b2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800f8b6:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800f8ba:	606a      	str	r2, [r5, #4]
      offset += sizeof(this->acc_data[i]);
 800f8bc:	3304      	adds	r3, #4
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 3; i++){
 800f8be:	3401      	adds	r4, #1
 800f8c0:	b2e4      	uxtb	r4, r4
 800f8c2:	e7e8      	b.n	800f896 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x3e>
 800f8c4:	2400      	movs	r4, #0
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->acc_data[i] = u_acc_datai.real;
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f8c6:	2c02      	cmp	r4, #2
 800f8c8:	d814      	bhi.n	800f8f4 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x9c>
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.base = 0;
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f8ca:	5cca      	ldrb	r2, [r1, r3]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f8cc:	1c5d      	adds	r5, r3, #1
 800f8ce:	5d4d      	ldrb	r5, [r1, r5]
 800f8d0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f8d4:	1c9d      	adds	r5, r3, #2
 800f8d6:	5d4d      	ldrb	r5, [r1, r5]
 800f8d8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f8dc:	1cdd      	adds	r5, r3, #3
 800f8de:	5d4e      	ldrb	r6, [r1, r5]
      this->gyro_data[i] = u_gyro_datai.real;
 800f8e0:	1da5      	adds	r5, r4, #6
 800f8e2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800f8e6:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800f8ea:	602a      	str	r2, [r5, #0]
      offset += sizeof(this->gyro_data[i]);
 800f8ec:	3304      	adds	r3, #4
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->acc_data[i] = u_acc_datai.real;
      offset += sizeof(this->acc_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f8ee:	3401      	adds	r4, #1
 800f8f0:	b2e4      	uxtb	r4, r4
 800f8f2:	e7e8      	b.n	800f8c6 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x6e>
 800f8f4:	2400      	movs	r4, #0
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->gyro_data[i] = u_gyro_datai.real;
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f8f6:	2c02      	cmp	r4, #2
 800f8f8:	d815      	bhi.n	800f926 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0xce>
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.base = 0;
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f8fa:	5cca      	ldrb	r2, [r1, r3]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f8fc:	1c5d      	adds	r5, r3, #1
 800f8fe:	5d4d      	ldrb	r5, [r1, r5]
 800f900:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f904:	1c9d      	adds	r5, r3, #2
 800f906:	5d4d      	ldrb	r5, [r1, r5]
 800f908:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f90c:	1cdd      	adds	r5, r3, #3
 800f90e:	5d4e      	ldrb	r6, [r1, r5]
      this->mag_data[i] = u_mag_datai.real;
 800f910:	f104 0508 	add.w	r5, r4, #8
 800f914:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800f918:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800f91c:	606a      	str	r2, [r5, #4]
      offset += sizeof(this->mag_data[i]);
 800f91e:	3304      	adds	r3, #4
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->gyro_data[i] = u_gyro_datai.real;
      offset += sizeof(this->gyro_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f920:	3401      	adds	r4, #1
 800f922:	b2e4      	uxtb	r4, r4
 800f924:	e7e7      	b.n	800f8f6 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x9e>
 800f926:	2400      	movs	r4, #0
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->mag_data[i] = u_mag_datai.real;
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f928:	2c02      	cmp	r4, #2
 800f92a:	d815      	bhi.n	800f958 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x100>
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.base = 0;
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f92c:	5cca      	ldrb	r2, [r1, r3]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f92e:	1c5d      	adds	r5, r3, #1
 800f930:	5d4d      	ldrb	r5, [r1, r5]
 800f932:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f936:	1c9d      	adds	r5, r3, #2
 800f938:	5d4d      	ldrb	r5, [r1, r5]
 800f93a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f93e:	1cdd      	adds	r5, r3, #3
 800f940:	5d4e      	ldrb	r6, [r1, r5]
      this->angles[i] = u_anglesi.real;
 800f942:	f104 050c 	add.w	r5, r4, #12
 800f946:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800f94a:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800f94e:	602a      	str	r2, [r5, #0]
      offset += sizeof(this->angles[i]);
 800f950:	3304      	adds	r3, #4
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->mag_data[i] = u_mag_datai.real;
      offset += sizeof(this->mag_data[i]);
      }
      for( uint8_t i = 0; i < 3; i++){
 800f952:	3401      	adds	r4, #1
 800f954:	b2e4      	uxtb	r4, r4
 800f956:	e7e7      	b.n	800f928 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0xd0>
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->angles[i] = u_anglesi.real;
      offset += sizeof(this->angles[i]);
      }
     return offset;
    }
 800f958:	4618      	mov	r0, r3
 800f95a:	bc70      	pop	{r4, r5, r6}
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop

0800f960 <_ZN17aerial_robot_msgs3Imu7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Imu"; };
 800f960:	4800      	ldr	r0, [pc, #0]	; (800f964 <_ZN17aerial_robot_msgs3Imu7getTypeEv+0x4>)
 800f962:	4770      	bx	lr
 800f964:	0801b384 	.word	0x0801b384

0800f968 <_ZN17aerial_robot_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "68b769ca85e5d9c44dbce51dc60e4be7"; };
 800f968:	4800      	ldr	r0, [pc, #0]	; (800f96c <_ZN17aerial_robot_msgs3Imu6getMD5Ev+0x4>)
 800f96a:	4770      	bx	lr
 800f96c:	0801b39c 	.word	0x0801b39c

0800f970 <_ZNK17aerial_robot_base11DesireCoord9serializeEPh>:
      yaw(0),
      coord_type(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f970:	6843      	ldr	r3, [r0, #4]
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 800f972:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 800f974:	0a1a      	lsrs	r2, r3, #8
 800f976:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 800f978:	0c1a      	lsrs	r2, r3, #16
 800f97a:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 800f97c:	0e1b      	lsrs	r3, r3, #24
 800f97e:	70cb      	strb	r3, [r1, #3]
 800f980:	6883      	ldr	r3, [r0, #8]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 800f982:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 800f984:	0a1a      	lsrs	r2, r3, #8
 800f986:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 800f988:	0c1a      	lsrs	r2, r3, #16
 800f98a:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 800f98c:	0e1b      	lsrs	r3, r3, #24
 800f98e:	71cb      	strb	r3, [r1, #7]
 800f990:	68c3      	ldr	r3, [r0, #12]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 800f992:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 800f994:	0a1a      	lsrs	r2, r3, #8
 800f996:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 800f998:	0c1a      	lsrs	r2, r3, #16
 800f99a:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 800f99c:	0e1b      	lsrs	r3, r3, #24
 800f99e:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->yaw);
      *(outbuffer + offset + 0) = (this->coord_type >> (8 * 0)) & 0xFF;
 800f9a0:	7c03      	ldrb	r3, [r0, #16]
 800f9a2:	730b      	strb	r3, [r1, #12]
      offset += sizeof(this->coord_type);
      return offset;
    }
 800f9a4:	200d      	movs	r0, #13
 800f9a6:	4770      	bx	lr

0800f9a8 <_ZN17aerial_robot_base11DesireCoord11deserializeEPh>:
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.base = 0;
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f9a8:	780b      	ldrb	r3, [r1, #0]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f9aa:	784a      	ldrb	r2, [r1, #1]
 800f9ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f9b0:	788a      	ldrb	r2, [r1, #2]
 800f9b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f9b6:	78ca      	ldrb	r2, [r1, #3]
      this->roll = u_roll.real;
 800f9b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f9bc:	6043      	str	r3, [r0, #4]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.base = 0;
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f9be:	790b      	ldrb	r3, [r1, #4]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f9c0:	794a      	ldrb	r2, [r1, #5]
 800f9c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f9c6:	798a      	ldrb	r2, [r1, #6]
 800f9c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f9cc:	79ca      	ldrb	r2, [r1, #7]
      this->pitch = u_pitch.real;
 800f9ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f9d2:	6083      	str	r3, [r0, #8]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.base = 0;
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f9d4:	7a0b      	ldrb	r3, [r1, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f9d6:	7a4a      	ldrb	r2, [r1, #9]
 800f9d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f9dc:	7a8a      	ldrb	r2, [r1, #10]
 800f9de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f9e2:	7aca      	ldrb	r2, [r1, #11]
      this->yaw = u_yaw.real;
 800f9e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f9e8:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->yaw);
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 800f9ea:	7b0b      	ldrb	r3, [r1, #12]
 800f9ec:	7403      	strb	r3, [r0, #16]
      offset += sizeof(this->coord_type);
     return offset;
    }
 800f9ee:	200d      	movs	r0, #13
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop

0800f9f4 <_ZN17aerial_robot_base11DesireCoord7getTypeEv>:

    const char * getType(){ return "aerial_robot_base/DesireCoord"; };
 800f9f4:	4800      	ldr	r0, [pc, #0]	; (800f9f8 <_ZN17aerial_robot_base11DesireCoord7getTypeEv+0x4>)
 800f9f6:	4770      	bx	lr
 800f9f8:	0801b3c0 	.word	0x0801b3c0

0800f9fc <_ZN17aerial_robot_base11DesireCoord6getMD5Ev>:
    const char * getMD5(){ return "6ccf1a68453182818d4a1d0d5013bd0d"; };
 800f9fc:	4800      	ldr	r0, [pc, #0]	; (800fa00 <_ZN17aerial_robot_base11DesireCoord6getMD5Ev+0x4>)
 800f9fe:	4770      	bx	lr
 800fa00:	0801b3e0 	.word	0x0801b3e0

0800fa04 <_ZNK17aerial_robot_msgs9Barometer9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800fa04:	6843      	ldr	r3, [r0, #4]
 800fa06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800fa08:	6843      	ldr	r3, [r0, #4]
 800fa0a:	0a1b      	lsrs	r3, r3, #8
 800fa0c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800fa0e:	88c3      	ldrh	r3, [r0, #6]
 800fa10:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800fa12:	79c3      	ldrb	r3, [r0, #7]
 800fa14:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800fa16:	6883      	ldr	r3, [r0, #8]
 800fa18:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800fa1a:	6883      	ldr	r3, [r0, #8]
 800fa1c:	0a1b      	lsrs	r3, r3, #8
 800fa1e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800fa20:	8943      	ldrh	r3, [r0, #10]
 800fa22:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800fa24:	7ac3      	ldrb	r3, [r0, #11]
 800fa26:	71cb      	strb	r3, [r1, #7]
 800fa28:	68c3      	ldr	r3, [r0, #12]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.real = this->altitude;
      *(outbuffer + offset + 0) = (u_altitude.base >> (8 * 0)) & 0xFF;
 800fa2a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_altitude.base >> (8 * 1)) & 0xFF;
 800fa2c:	0a1a      	lsrs	r2, r3, #8
 800fa2e:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
 800fa30:	0c1a      	lsrs	r2, r3, #16
 800fa32:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
 800fa34:	0e1b      	lsrs	r3, r3, #24
 800fa36:	72cb      	strb	r3, [r1, #11]
 800fa38:	6903      	ldr	r3, [r0, #16]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.real = this->pressure;
      *(outbuffer + offset + 0) = (u_pressure.base >> (8 * 0)) & 0xFF;
 800fa3a:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_pressure.base >> (8 * 1)) & 0xFF;
 800fa3c:	0a1a      	lsrs	r2, r3, #8
 800fa3e:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
 800fa40:	0c1a      	lsrs	r2, r3, #16
 800fa42:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
 800fa44:	0e1b      	lsrs	r3, r3, #24
 800fa46:	73cb      	strb	r3, [r1, #15]
 800fa48:	6943      	ldr	r3, [r0, #20]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
 800fa4a:	740b      	strb	r3, [r1, #16]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
 800fa4c:	0a1a      	lsrs	r2, r3, #8
 800fa4e:	744a      	strb	r2, [r1, #17]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
 800fa50:	0c1a      	lsrs	r2, r3, #16
 800fa52:	748a      	strb	r2, [r1, #18]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
 800fa54:	0e1b      	lsrs	r3, r3, #24
 800fa56:	74cb      	strb	r3, [r1, #19]
      offset += sizeof(this->temperature);
      return offset;
    }
 800fa58:	2014      	movs	r0, #20
 800fa5a:	4770      	bx	lr

0800fa5c <_ZN17aerial_robot_msgs9Barometer11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800fa5c:	780b      	ldrb	r3, [r1, #0]
 800fa5e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fa60:	784a      	ldrb	r2, [r1, #1]
 800fa62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fa66:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fa68:	788a      	ldrb	r2, [r1, #2]
 800fa6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa6e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800fa70:	78ca      	ldrb	r2, [r1, #3]
 800fa72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa76:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800fa78:	790b      	ldrb	r3, [r1, #4]
 800fa7a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fa7c:	794a      	ldrb	r2, [r1, #5]
 800fa7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fa82:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fa84:	798a      	ldrb	r2, [r1, #6]
 800fa86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa8a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800fa8c:	79ca      	ldrb	r2, [r1, #7]
 800fa8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fa92:	6083      	str	r3, [r0, #8]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.base = 0;
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800fa94:	7a0b      	ldrb	r3, [r1, #8]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fa96:	7a4a      	ldrb	r2, [r1, #9]
 800fa98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fa9c:	7a8a      	ldrb	r2, [r1, #10]
 800fa9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800faa2:	7aca      	ldrb	r2, [r1, #11]
      this->altitude = u_altitude.real;
 800faa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800faa8:	60c3      	str	r3, [r0, #12]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.base = 0;
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800faaa:	7b0b      	ldrb	r3, [r1, #12]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800faac:	7b4a      	ldrb	r2, [r1, #13]
 800faae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fab2:	7b8a      	ldrb	r2, [r1, #14]
 800fab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800fab8:	7bca      	ldrb	r2, [r1, #15]
      this->pressure = u_pressure.real;
 800faba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fabe:	6103      	str	r3, [r0, #16]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.base = 0;
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800fac0:	7c0b      	ldrb	r3, [r1, #16]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fac2:	7c4a      	ldrb	r2, [r1, #17]
 800fac4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fac8:	7c8a      	ldrb	r2, [r1, #18]
 800faca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800face:	7cca      	ldrb	r2, [r1, #19]
      this->temperature = u_temperature.real;
 800fad0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fad4:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->temperature);
     return offset;
    }
 800fad6:	2014      	movs	r0, #20
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop

0800fadc <_ZN17aerial_robot_msgs9Barometer7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Barometer"; };
 800fadc:	4800      	ldr	r0, [pc, #0]	; (800fae0 <_ZN17aerial_robot_msgs9Barometer7getTypeEv+0x4>)
 800fade:	4770      	bx	lr
 800fae0:	0801b404 	.word	0x0801b404

0800fae4 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev>:
    const char * getMD5(){ return "b732c389660333d48fe976feb5768402"; };
 800fae4:	4800      	ldr	r0, [pc, #0]	; (800fae8 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev+0x4>)
 800fae6:	4770      	bx	lr
 800fae8:	0801b420 	.word	0x0801b420

0800faec <_ZNK17aerial_robot_msgs3Gps9serializeEPh>:
      velocity(),
      sat_num(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800faec:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800faee:	6843      	ldr	r3, [r0, #4]
 800faf0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800faf2:	6843      	ldr	r3, [r0, #4]
 800faf4:	0a1b      	lsrs	r3, r3, #8
 800faf6:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800faf8:	88c3      	ldrh	r3, [r0, #6]
 800fafa:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800fafc:	79c3      	ldrb	r3, [r0, #7]
 800fafe:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800fb00:	6883      	ldr	r3, [r0, #8]
 800fb02:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800fb04:	6883      	ldr	r3, [r0, #8]
 800fb06:	0a1b      	lsrs	r3, r3, #8
 800fb08:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800fb0a:	8943      	ldrh	r3, [r0, #10]
 800fb0c:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800fb0e:	7ac3      	ldrb	r3, [r0, #11]
 800fb10:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 2; i++){
 800fb12:	2200      	movs	r2, #0
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
 800fb14:	2308      	movs	r3, #8
      for( uint8_t i = 0; i < 2; i++){
 800fb16:	2a01      	cmp	r2, #1
 800fb18:	d811      	bhi.n	800fb3e <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x52>
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.real = this->location[i];
 800fb1a:	1c94      	adds	r4, r2, #2
 800fb1c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800fb20:	6864      	ldr	r4, [r4, #4]
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
 800fb22:	54cc      	strb	r4, [r1, r3]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
 800fb24:	1c5d      	adds	r5, r3, #1
 800fb26:	0a26      	lsrs	r6, r4, #8
 800fb28:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
 800fb2a:	1c9d      	adds	r5, r3, #2
 800fb2c:	0c26      	lsrs	r6, r4, #16
 800fb2e:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
 800fb30:	1cdd      	adds	r5, r3, #3
 800fb32:	0e24      	lsrs	r4, r4, #24
 800fb34:	554c      	strb	r4, [r1, r5]
      offset += sizeof(this->location[i]);
 800fb36:	3304      	adds	r3, #4
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 2; i++){
 800fb38:	3201      	adds	r2, #1
 800fb3a:	b2d2      	uxtb	r2, r2
 800fb3c:	e7eb      	b.n	800fb16 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x2a>
 800fb3e:	2200      	movs	r2, #0
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 800fb40:	2a01      	cmp	r2, #1
 800fb42:	d811      	bhi.n	800fb68 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x7c>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
 800fb44:	1d14      	adds	r4, r2, #4
 800fb46:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800fb4a:	6864      	ldr	r4, [r4, #4]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
 800fb4c:	54cc      	strb	r4, [r1, r3]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
 800fb4e:	1c5d      	adds	r5, r3, #1
 800fb50:	0a26      	lsrs	r6, r4, #8
 800fb52:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
 800fb54:	1c9d      	adds	r5, r3, #2
 800fb56:	0c26      	lsrs	r6, r4, #16
 800fb58:	554e      	strb	r6, [r1, r5]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
 800fb5a:	1cdd      	adds	r5, r3, #3
 800fb5c:	0e24      	lsrs	r4, r4, #24
 800fb5e:	554c      	strb	r4, [r1, r5]
      offset += sizeof(this->velocity[i]);
 800fb60:	3304      	adds	r3, #4
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 800fb62:	3201      	adds	r2, #1
 800fb64:	b2d2      	uxtb	r2, r2
 800fb66:	e7eb      	b.n	800fb40 <_ZNK17aerial_robot_msgs3Gps9serializeEPh+0x54>
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->velocity[i]);
      }
      *(outbuffer + offset + 0) = (this->sat_num >> (8 * 0)) & 0xFF;
 800fb68:	7f02      	ldrb	r2, [r0, #28]
 800fb6a:	54ca      	strb	r2, [r1, r3]
      offset += sizeof(this->sat_num);
      return offset;
    }
 800fb6c:	1c58      	adds	r0, r3, #1
 800fb6e:	bc70      	pop	{r4, r5, r6}
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop

0800fb74 <_ZN17aerial_robot_msgs3Gps11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800fb74:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800fb76:	780b      	ldrb	r3, [r1, #0]
 800fb78:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fb7a:	784a      	ldrb	r2, [r1, #1]
 800fb7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fb80:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fb82:	788a      	ldrb	r2, [r1, #2]
 800fb84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb88:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800fb8a:	78ca      	ldrb	r2, [r1, #3]
 800fb8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fb90:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800fb92:	790b      	ldrb	r3, [r1, #4]
 800fb94:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fb96:	794a      	ldrb	r2, [r1, #5]
 800fb98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fb9c:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fb9e:	798a      	ldrb	r2, [r1, #6]
 800fba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fba4:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800fba6:	79ca      	ldrb	r2, [r1, #7]
 800fba8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fbac:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 2; i++){
 800fbae:	2400      	movs	r4, #0
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
 800fbb0:	2308      	movs	r3, #8
      for( uint8_t i = 0; i < 2; i++){
 800fbb2:	2c01      	cmp	r4, #1
 800fbb4:	d814      	bhi.n	800fbe0 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x6c>
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.base = 0;
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800fbb6:	5cca      	ldrb	r2, [r1, r3]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fbb8:	1c5d      	adds	r5, r3, #1
 800fbba:	5d4d      	ldrb	r5, [r1, r5]
 800fbbc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fbc0:	1c9d      	adds	r5, r3, #2
 800fbc2:	5d4d      	ldrb	r5, [r1, r5]
 800fbc4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800fbc8:	1cdd      	adds	r5, r3, #3
 800fbca:	5d4e      	ldrb	r6, [r1, r5]
      this->location[i] = u_locationi.real;
 800fbcc:	1ca5      	adds	r5, r4, #2
 800fbce:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800fbd2:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800fbd6:	606a      	str	r2, [r5, #4]
      offset += sizeof(this->location[i]);
 800fbd8:	3304      	adds	r3, #4
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
      for( uint8_t i = 0; i < 2; i++){
 800fbda:	3401      	adds	r4, #1
 800fbdc:	b2e4      	uxtb	r4, r4
 800fbde:	e7e8      	b.n	800fbb2 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x3e>
 800fbe0:	2400      	movs	r4, #0
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->location[i] = u_locationi.real;
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 800fbe2:	2c01      	cmp	r4, #1
 800fbe4:	d814      	bhi.n	800fc10 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x9c>
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.base = 0;
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800fbe6:	5cca      	ldrb	r2, [r1, r3]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800fbe8:	1c5d      	adds	r5, r3, #1
 800fbea:	5d4d      	ldrb	r5, [r1, r5]
 800fbec:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800fbf0:	1c9d      	adds	r5, r3, #2
 800fbf2:	5d4d      	ldrb	r5, [r1, r5]
 800fbf4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800fbf8:	1cdd      	adds	r5, r3, #3
 800fbfa:	5d4e      	ldrb	r6, [r1, r5]
      this->velocity[i] = u_velocityi.real;
 800fbfc:	1d25      	adds	r5, r4, #4
 800fbfe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800fc02:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 800fc06:	606a      	str	r2, [r5, #4]
      offset += sizeof(this->velocity[i]);
 800fc08:	3304      	adds	r3, #4
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->location[i] = u_locationi.real;
      offset += sizeof(this->location[i]);
      }
      for( uint8_t i = 0; i < 2; i++){
 800fc0a:	3401      	adds	r4, #1
 800fc0c:	b2e4      	uxtb	r4, r4
 800fc0e:	e7e8      	b.n	800fbe2 <_ZN17aerial_robot_msgs3Gps11deserializeEPh+0x6e>
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->velocity[i] = u_velocityi.real;
      offset += sizeof(this->velocity[i]);
      }
      this->sat_num =  ((uint8_t) (*(inbuffer + offset)));
 800fc10:	5cca      	ldrb	r2, [r1, r3]
 800fc12:	7702      	strb	r2, [r0, #28]
      offset += sizeof(this->sat_num);
     return offset;
    }
 800fc14:	1c58      	adds	r0, r3, #1
 800fc16:	bc70      	pop	{r4, r5, r6}
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop

0800fc1c <_ZN17aerial_robot_msgs3Gps7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Gps"; };
 800fc1c:	4800      	ldr	r0, [pc, #0]	; (800fc20 <_ZN17aerial_robot_msgs3Gps7getTypeEv+0x4>)
 800fc1e:	4770      	bx	lr
 800fc20:	0801b444 	.word	0x0801b444

0800fc24 <_ZN17aerial_robot_msgs3Gps6getMD5Ev>:
    const char * getMD5(){ return "b9b55701ff5240f76ada29af2827853c"; };
 800fc24:	4800      	ldr	r0, [pc, #0]	; (800fc28 <_ZN17aerial_robot_msgs3Gps6getMD5Ev+0x4>)
 800fc26:	4770      	bx	lr
 800fc28:	0801b45c 	.word	0x0801b45c

0800fc2c <_ZN13StateEstimateD1Ev>:
{
public:
  StateEstimate()
  {
  }
  ~StateEstimate(){}
 800fc2c:	4770      	bx	lr
 800fc2e:	bf00      	nop

0800fc30 <_ZN7RosNode16Cmd_Vel_CallbackERKN13geometry_msgs5TwistE>:

}

/* callback function for subscribe */
void RosNode::Cmd_Vel_Callback(const geometry_msgs::Twist& cmd_vel_msg)
{
 800fc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc32:	4605      	mov	r5, r0
 800fc34:	460c      	mov	r4, r1
	// here we must take the limitation, check it again
	if(cmd_vel_msg.linear.x < 4.0)  //4 m/s
 800fc36:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	4b12      	ldr	r3, [pc, #72]	; (800fc88 <_ZN7RosNode16Cmd_Vel_CallbackERKN13geometry_msgs5TwistE+0x58>)
 800fc3e:	4630      	mov	r0, r6
 800fc40:	4639      	mov	r1, r7
 800fc42:	f7f9 f8a9 	bl	8008d98 <__aeabi_dcmplt>
 800fc46:	b120      	cbz	r0, 800fc52 <_ZN7RosNode16Cmd_Vel_CallbackERKN13geometry_msgs5TwistE+0x22>
		this->aim_linear_spd = cmd_vel_msg.linear.x;
 800fc48:	4630      	mov	r0, r6
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	f7f9 f90a 	bl	8008e64 <__aeabi_d2f>
 800fc50:	6628      	str	r0, [r5, #96]	; 0x60
	if(cmd_vel_msg.angular.z < 2.0) // 2rad/s
 800fc52:	e9d4 6710 	ldrd	r6, r7, [r4, #64]	; 0x40
 800fc56:	2200      	movs	r2, #0
 800fc58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	4639      	mov	r1, r7
 800fc60:	f7f9 f89a 	bl	8008d98 <__aeabi_dcmplt>
 800fc64:	b120      	cbz	r0, 800fc70 <_ZN7RosNode16Cmd_Vel_CallbackERKN13geometry_msgs5TwistE+0x40>
		this->aim_angular_spd = cmd_vel_msg.angular.z;
 800fc66:	4630      	mov	r0, r6
 800fc68:	4639      	mov	r1, r7
 800fc6a:	f7f9 f8fb 	bl	8008e64 <__aeabi_d2f>
 800fc6e:	6668      	str	r0, [r5, #100]	; 0x64
	this->Kp = cmd_vel_msg.linear.y;
 800fc70:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800fc74:	f7f9 f8f6 	bl	8008e64 <__aeabi_d2f>
 800fc78:	66e8      	str	r0, [r5, #108]	; 0x6c
	this->Kd = cmd_vel_msg.angular.y;
 800fc7a:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800fc7e:	f7f9 f8f1 	bl	8008e64 <__aeabi_d2f>
 800fc82:	6728      	str	r0, [r5, #112]	; 0x70
 800fc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc86:	bf00      	nop
 800fc88:	40100000 	.word	0x40100000

0800fc8c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE9connectedEv>:


    /* Are we connected to the PC? */
    virtual bool connected() {
      return configured_;
    };
 800fc8c:	f890 02d0 	ldrb.w	r0, [r0, #720]	; 0x2d0
 800fc90:	4770      	bx	lr
 800fc92:	bf00      	nop

0800fc94 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef>:
  inline uint8_t& rxValue() { return rx_value_; }
  inline RingBuffer<uint8_t, RX_SIZE>* ringBuffer() { return ring_buf_; }

  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
  {
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 800fc94:	6b83      	ldr	r3, [r0, #56]	; 0x38

    /* DMA Normal mode */
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800fc96:	6802      	ldr	r2, [r0, #0]
 800fc98:	6812      	ldr	r2, [r2, #0]
 800fc9a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800fc9e:	d10f      	bne.n	800fcc0 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x2c>
      {
        huart->RxXferCount = 0;
 800fca0:	2200      	movs	r2, #0
 800fca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
           in the UART CR3 register */
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 800fca6:	6819      	ldr	r1, [r3, #0]
 800fca8:	688a      	ldr	r2, [r1, #8]
 800fcaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fcae:	608a      	str	r2, [r1, #8]

        /* Check if a transmit Process is ongoing or not */
        if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800fcb0:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800fcb4:	b2d2      	uxtb	r2, r2
 800fcb6:	2a32      	cmp	r2, #50	; 0x32
 800fcb8:	d104      	bne.n	800fcc4 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x30>
          huart->State = HAL_UART_STATE_BUSY_TX;
 800fcba:	2212      	movs	r2, #18
 800fcbc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  bool available() { return ring_buf_->length(); }

  inline uint8_t& rxValue() { return rx_value_; }
  inline RingBuffer<uint8_t, RX_SIZE>* ringBuffer() { return ring_buf_; }

  static void ReceiveCplt(DMA_HandleTypeDef *hdma)
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	e003      	b.n	800fccc <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x38>

        /* Check if a transmit Process is ongoing or not */
        if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
          huart->State = HAL_UART_STATE_BUSY_TX;
        else
          huart->State = HAL_UART_STATE_READY;
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800fcca:	e7f9      	b.n	800fcc0 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x2c>
      }
    //sepecial process
for(int i = 0; i < RX_BURST_SIZE; i++)
 800fccc:	2907      	cmp	r1, #7
 800fcce:	dc13      	bgt.n	800fcf8 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x64>
    ring_buf_->push(rx_value_[i]);
 800fcd0:	4b0a      	ldr	r3, [pc, #40]	; (800fcfc <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x68>)
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	4b0a      	ldr	r3, [pc, #40]	; (800fd00 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x6c>)
 800fcd6:	5c58      	ldrb	r0, [r3, r1]
    // the process node should have higher priority than the rx it callback
#if 0
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
#endif

    buf_[byte_to_add_] = new_value;
 800fcd8:	f9b2 3192 	ldrsh.w	r3, [r2, #402]	; 0x192
 800fcdc:	54d0      	strb	r0, [r2, r3]

    byte_to_add_++;
 800fcde:	3301      	adds	r3, #1
 800fce0:	b21b      	sxth	r3, r3
 800fce2:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192

    if (byte_to_add_ == buffer_length_)
 800fce6:	f8b2 0194 	ldrh.w	r0, [r2, #404]	; 0x194
 800fcea:	4283      	cmp	r3, r0
 800fcec:	d102      	bne.n	800fcf4 <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x60>
      {
        byte_to_add_ = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
          huart->State = HAL_UART_STATE_BUSY_TX;
        else
          huart->State = HAL_UART_STATE_READY;
      }
    //sepecial process
for(int i = 0; i < RX_BURST_SIZE; i++)
 800fcf4:	3101      	adds	r1, #1
 800fcf6:	e7e9      	b.n	800fccc <_ZN8RxBufferI18UART_HandleTypeDefLi400ELi8EE11ReceiveCpltEP19__DMA_HandleTypeDef+0x38>
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop
 800fcfc:	20003ef8 	.word	0x20003ef8
 800fd00:	20003ef0 	.word	0x20003ef0

0800fd04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef>:
  ~TxBuffer(){}


  static void TransmitCplt(DMA_HandleTypeDef *hdma)
  {
    Hardware* huart = ( Hardware* )(hdma)->Parent;
 800fd04:	6b83      	ldr	r3, [r0, #56]	; 0x38
    /* DMA Normal mode*/
    if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 800fd06:	6802      	ldr	r2, [r0, #0]
 800fd08:	6812      	ldr	r2, [r2, #0]
 800fd0a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800fd0e:	d10d      	bne.n	800fd2c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x28>
      {
        huart->TxXferCount = 0;
 800fd10:	2200      	movs	r2, #0
 800fd12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* Disable the DMA transfer for transmit request by setting the DMAT bit
           in the UART CR3 register */
        huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 800fd16:	6819      	ldr	r1, [r3, #0]
 800fd18:	688a      	ldr	r2, [r1, #8]
 800fd1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd1e:	608a      	str	r2, [r1, #8]
 /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	6813      	ldr	r3, [r2, #0]
 800fd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	4770      	bx	lr
      }
    /* DMA Circular mode */
    else
      {
        /* Disable the peripheral */
        huart->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 800fd2c:	6819      	ldr	r1, [r3, #0]
 800fd2e:	688a      	ldr	r2, [r1, #8]
 800fd30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd34:	608a      	str	r2, [r1, #8]

        if(!idle_flag_)
 800fd36:	4aa0      	ldr	r2, [pc, #640]	; (800ffb8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b4>)
 800fd38:	7812      	ldrb	r2, [r2, #0]
 800fd3a:	2a00      	cmp	r2, #0
 800fd3c:	d134      	bne.n	800fda8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa4>
          {
            subscript_in_progress_++;
 800fd3e:	499f      	ldr	r1, [pc, #636]	; (800ffbc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b8>)
 800fd40:	780a      	ldrb	r2, [r1, #0]
 800fd42:	3201      	adds	r2, #1
 800fd44:	b2d2      	uxtb	r2, r2
 800fd46:	700a      	strb	r2, [r1, #0]

            if (subscript_in_progress_ == TX_SIZE)
 800fd48:	2a32      	cmp	r2, #50	; 0x32
 800fd4a:	d102      	bne.n	800fd52 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x4e>
                subscript_in_progress_ = 0;
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	4a9b      	ldr	r2, [pc, #620]	; (800ffbc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b8>)
 800fd50:	7011      	strb	r1, [r2, #0]

            if (subscript_in_progress_ != subscript_to_add_)
 800fd52:	4a9a      	ldr	r2, [pc, #616]	; (800ffbc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b8>)
 800fd54:	7811      	ldrb	r1, [r2, #0]
 800fd56:	4a9a      	ldr	r2, [pc, #616]	; (800ffc0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2bc>)
 800fd58:	7812      	ldrb	r2, [r2, #0]
 800fd5a:	4291      	cmp	r1, r2
 800fd5c:	d021      	beq.n	800fda2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x9e>
              {
                __HAL_DMA_DISABLE(huart->hdmatx);
 800fd5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fd60:	6811      	ldr	r1, [r2, #0]
 800fd62:	680a      	ldr	r2, [r1, #0]
 800fd64:	f022 0201 	bic.w	r2, r2, #1
 800fd68:	600a      	str	r2, [r1, #0]
                uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 800fd6a:	4a94      	ldr	r2, [pc, #592]	; (800ffbc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b8>)
 800fd6c:	7812      	ldrb	r2, [r2, #0]
 800fd6e:	ebc2 1182 	rsb	r1, r2, r2, lsl #6
 800fd72:	ebc2 0281 	rsb	r2, r2, r1, lsl #2
 800fd76:	4993      	ldr	r1, [pc, #588]	; (800ffc4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c0>)
 800fd78:	440a      	add	r2, r1
                uint32_t * tmp32 = (uint32_t*)&tmp8;
                huart->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 800fd7a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800fd7c:	6809      	ldr	r1, [r1, #0]
 800fd7e:	f892 00fa 	ldrb.w	r0, [r2, #250]	; 0xfa
 800fd82:	6048      	str	r0, [r1, #4]

                huart->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 800fd84:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800fd86:	6809      	ldr	r1, [r1, #0]
 800fd88:	60ca      	str	r2, [r1, #12]
                /* Enable USARTy DMA TX Channel */
                huart->Instance->CR3 |= USART_CR3_DMAT; //enable dma request in hsuart side
 800fd8a:	6819      	ldr	r1, [r3, #0]
 800fd8c:	688a      	ldr	r2, [r1, #8]
 800fd8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fd92:	608a      	str	r2, [r1, #8]
                __HAL_DMA_ENABLE(huart->hdmatx);
 800fd94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800fd96:	6811      	ldr	r1, [r2, #0]
 800fd98:	680a      	ldr	r2, [r1, #0]
 800fd9a:	f042 0201 	orr.w	r2, r2, #1
 800fd9e:	600a      	str	r2, [r1, #0]
 800fda0:	e002      	b.n	800fda8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0xa4>
              }	
            else
              {
                idle_flag_ = true;
 800fda2:	2101      	movs	r1, #1
 800fda4:	4a84      	ldr	r2, [pc, #528]	; (800ffb8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2b4>)
 800fda6:	7011      	strb	r1, [r2, #0]
              }

          }
        __HAL_DMA_CLEAR_FLAG(huart->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart->hdmatx));
 800fda8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a86      	ldr	r2, [pc, #536]	; (800ffc8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c4>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d954      	bls.n	800fe5c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x158>
 800fdb2:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d02e      	beq.n	800fe18 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x114>
 800fdba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d02c      	beq.n	800fe1c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x118>
 800fdc2:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d02a      	beq.n	800fe20 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x11c>
 800fdca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d028      	beq.n	800fe24 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x120>
 800fdd2:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d026      	beq.n	800fe28 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x124>
 800fdda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d025      	beq.n	800fe2e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x12a>
 800fde2:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d024      	beq.n	800fe34 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x130>
 800fdea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d023      	beq.n	800fe3a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x136>
 800fdf2:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d022      	beq.n	800fe40 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x13c>
 800fdfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d021      	beq.n	800fe46 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x142>
 800fe02:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d020      	beq.n	800fe4c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x148>
 800fe0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d11f      	bne.n	800fe52 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x14e>
 800fe12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fe16:	e01e      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe18:	2220      	movs	r2, #32
 800fe1a:	e01c      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe1c:	2220      	movs	r2, #32
 800fe1e:	e01a      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe20:	2220      	movs	r2, #32
 800fe22:	e018      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe24:	2220      	movs	r2, #32
 800fe26:	e016      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe2c:	e013      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe32:	e010      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe38:	e00d      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fe3e:	e00a      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fe44:	e007      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fe4a:	e004      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fe50:	e001      	b.n	800fe56 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x152>
 800fe52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fe56:	4b5d      	ldr	r3, [pc, #372]	; (800ffcc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c8>)
 800fe58:	60da      	str	r2, [r3, #12]
 800fe5a:	4770      	bx	lr
 800fe5c:	4a5c      	ldr	r2, [pc, #368]	; (800ffd0 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2cc>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d953      	bls.n	800ff0a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x206>
 800fe62:	3aa8      	subs	r2, #168	; 0xa8
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d02e      	beq.n	800fec6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1c2>
 800fe68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d02c      	beq.n	800feca <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1c6>
 800fe70:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d02a      	beq.n	800fece <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1ca>
 800fe78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d028      	beq.n	800fed2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1ce>
 800fe80:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d026      	beq.n	800fed6 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1d2>
 800fe88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d025      	beq.n	800fedc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1d8>
 800fe90:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d024      	beq.n	800fee2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1de>
 800fe98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d023      	beq.n	800fee8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1e4>
 800fea0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d022      	beq.n	800feee <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1ea>
 800fea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800feac:	4293      	cmp	r3, r2
 800feae:	d021      	beq.n	800fef4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1f0>
 800feb0:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d020      	beq.n	800fefa <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1f6>
 800feb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800febc:	4293      	cmp	r3, r2
 800febe:	d11f      	bne.n	800ff00 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x1fc>
 800fec0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fec4:	e01e      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fec6:	2220      	movs	r2, #32
 800fec8:	e01c      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800feca:	2220      	movs	r2, #32
 800fecc:	e01a      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fece:	2220      	movs	r2, #32
 800fed0:	e018      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fed2:	2220      	movs	r2, #32
 800fed4:	e016      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800feda:	e013      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fedc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fee0:	e010      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fee6:	e00d      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800feec:	e00a      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800feee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fef2:	e007      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fef4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fef8:	e004      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800fefa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fefe:	e001      	b.n	800ff04 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x200>
 800ff00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ff04:	4b31      	ldr	r3, [pc, #196]	; (800ffcc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2c8>)
 800ff06:	609a      	str	r2, [r3, #8]
 800ff08:	4770      	bx	lr
 800ff0a:	4a32      	ldr	r2, [pc, #200]	; (800ffd4 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2d0>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d965      	bls.n	800ffdc <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2d8>
 800ff10:	3a48      	subs	r2, #72	; 0x48
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d02e      	beq.n	800ff74 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x270>
 800ff16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d02c      	beq.n	800ff78 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x274>
 800ff1e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d02a      	beq.n	800ff7c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x278>
 800ff26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d028      	beq.n	800ff80 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x27c>
 800ff2e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d026      	beq.n	800ff84 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x280>
 800ff36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d025      	beq.n	800ff8a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x286>
 800ff3e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d024      	beq.n	800ff90 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x28c>
 800ff46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d023      	beq.n	800ff96 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x292>
 800ff4e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800ff52:	4293      	cmp	r3, r2
 800ff54:	d022      	beq.n	800ff9c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x298>
 800ff56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d021      	beq.n	800ffa2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x29e>
 800ff5e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d020      	beq.n	800ffa8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2a4>
 800ff66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d11f      	bne.n	800ffae <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2aa>
 800ff6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ff72:	e01e      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff74:	2220      	movs	r2, #32
 800ff76:	e01c      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff78:	2220      	movs	r2, #32
 800ff7a:	e01a      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff7c:	2220      	movs	r2, #32
 800ff7e:	e018      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff80:	2220      	movs	r2, #32
 800ff82:	e016      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff88:	e013      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff8e:	e010      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff94:	e00d      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ff9a:	e00a      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ff9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ffa0:	e007      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ffa2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ffa6:	e004      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ffa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ffac:	e001      	b.n	800ffb2 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2ae>
 800ffae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ffb2:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x2d4>)
 800ffb4:	60da      	str	r2, [r3, #12]
 800ffb6:	4770      	bx	lr
 800ffb8:	20000afd 	.word	0x20000afd
 800ffbc:	20000afe 	.word	0x20000afe
 800ffc0:	20003eec 	.word	0x20003eec
 800ffc4:	20000b00 	.word	0x20000b00
 800ffc8:	40026458 	.word	0x40026458
 800ffcc:	40026400 	.word	0x40026400
 800ffd0:	400260b8 	.word	0x400260b8
 800ffd4:	40026058 	.word	0x40026058
 800ffd8:	40026000 	.word	0x40026000
 800ffdc:	4a29      	ldr	r2, [pc, #164]	; (8010084 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x380>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d02e      	beq.n	8010040 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x33c>
 800ffe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d02c      	beq.n	8010044 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x340>
 800ffea:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d02a      	beq.n	8010048 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x344>
 800fff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d028      	beq.n	801004c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x348>
 800fffa:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800fffe:	4293      	cmp	r3, r2
 8010000:	d026      	beq.n	8010050 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x34c>
 8010002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010006:	4293      	cmp	r3, r2
 8010008:	d025      	beq.n	8010056 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x352>
 801000a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 801000e:	4293      	cmp	r3, r2
 8010010:	d024      	beq.n	801005c <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x358>
 8010012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010016:	4293      	cmp	r3, r2
 8010018:	d023      	beq.n	8010062 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x35e>
 801001a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 801001e:	4293      	cmp	r3, r2
 8010020:	d022      	beq.n	8010068 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x364>
 8010022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010026:	4293      	cmp	r3, r2
 8010028:	d021      	beq.n	801006e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x36a>
 801002a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 801002e:	4293      	cmp	r3, r2
 8010030:	d020      	beq.n	8010074 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x370>
 8010032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010036:	4293      	cmp	r3, r2
 8010038:	d11f      	bne.n	801007a <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x376>
 801003a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801003e:	e01e      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010040:	2220      	movs	r2, #32
 8010042:	e01c      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010044:	2220      	movs	r2, #32
 8010046:	e01a      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010048:	2220      	movs	r2, #32
 801004a:	e018      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 801004c:	2220      	movs	r2, #32
 801004e:	e016      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010054:	e013      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801005a:	e010      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 801005c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010060:	e00d      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010066:	e00a      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010068:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801006c:	e007      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 801006e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010072:	e004      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 8010074:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010078:	e001      	b.n	801007e <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x37a>
 801007a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801007e:	4b02      	ldr	r3, [pc, #8]	; (8010088 <_ZN8TxBufferI18UART_HandleTypeDefLi50ELi250EE12TransmitCpltEP19__DMA_HandleTypeDef+0x384>)
 8010080:	609a      	str	r2, [r3, #8]
 8010082:	4770      	bx	lr
 8010084:	40026010 	.word	0x40026010
 8010088:	40026000 	.word	0x40026000

0801008c <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE15getEndpointTypeEv>:
        this->fun_obj_(obj_, msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 801008c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801008e:	4770      	bx	lr

08010090 <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE10getMsgTypeEv>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->fun_obj_(obj_, msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 8010090:	4800      	ldr	r0, [pc, #0]	; (8010094 <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE10getMsgTypeEv+0x4>)
 8010092:	4770      	bx	lr
 8010094:	0801b3c0 	.word	0x0801b3c0

08010098 <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 8010098:	4800      	ldr	r0, [pc, #0]	; (801009c <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev+0x4>)
 801009a:	4770      	bx	lr
 801009c:	0801b3e0 	.word	0x0801b3e0

080100a0 <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE15getEndpointTypeEv>:
      virtual int getEndpointType(){ return endpoint_; }
 80100a0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80100a2:	4770      	bx	lr

080100a4 <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE10getMsgTypeEv>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->fun_obj_(obj_, msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 80100a4:	4800      	ldr	r0, [pc, #0]	; (80100a8 <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE10getMsgTypeEv+0x4>)
 80100a6:	4770      	bx	lr
 80100a8:	0801b34c 	.word	0x0801b34c

080100ac <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE9getMsgMD5Ev>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 80100ac:	4800      	ldr	r0, [pc, #0]	; (80100b0 <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE9getMsgMD5Ev+0x4>)
 80100ae:	4770      	bx	lr
 80100b0:	0801b360 	.word	0x0801b360

080100b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80100b4:	b430      	push	{r4, r5}
 80100b6:	b084      	sub	sp, #16
 80100b8:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80100ba:	780b      	ldrb	r3, [r1, #0]
 80100bc:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80100be:	784a      	ldrb	r2, [r1, #1]
 80100c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80100c4:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 80100c6:	f8d1 0002 	ldr.w	r0, [r1, #2]
 80100ca:	9003      	str	r0, [sp, #12]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80100cc:	2306      	movs	r3, #6
 80100ce:	9a03      	ldr	r2, [sp, #12]
 80100d0:	1d90      	adds	r0, r2, #6
 80100d2:	4283      	cmp	r3, r0
 80100d4:	d204      	bcs.n	80100e0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x2c>
          inbuffer[k-1]=inbuffer[k];
 80100d6:	1e5a      	subs	r2, r3, #1
 80100d8:	5cc8      	ldrb	r0, [r1, r3]
 80100da:	5488      	strb	r0, [r1, r2]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80100dc:	3301      	adds	r3, #1
 80100de:	e7f6      	b.n	80100ce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x1a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 80100e0:	3205      	adds	r2, #5
 80100e2:	2300      	movs	r3, #0
 80100e4:	548b      	strb	r3, [r1, r2]
      this->topic_name = (char *)(inbuffer + offset-1);
 80100e6:	1d4b      	adds	r3, r1, #5
 80100e8:	60a3      	str	r3, [r4, #8]
      offset += length_topic_name;
 80100ea:	9b03      	ldr	r3, [sp, #12]
 80100ec:	1d9a      	adds	r2, r3, #6
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 80100ee:	5888      	ldr	r0, [r1, r2]
 80100f0:	9002      	str	r0, [sp, #8]
      offset += 4;
 80100f2:	f103 050a 	add.w	r5, r3, #10
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80100f6:	462b      	mov	r3, r5
 80100f8:	9a02      	ldr	r2, [sp, #8]
 80100fa:	442a      	add	r2, r5
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d204      	bcs.n	801010a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8010100:	1e5a      	subs	r2, r3, #1
 8010102:	5cc8      	ldrb	r0, [r1, r3]
 8010104:	5488      	strb	r0, [r1, r2]
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8010106:	3301      	adds	r3, #1
 8010108:	e7f6      	b.n	80100f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 801010a:	3a01      	subs	r2, #1
 801010c:	2300      	movs	r3, #0
 801010e:	548b      	strb	r3, [r1, r2]
      this->message_type = (char *)(inbuffer + offset-1);
 8010110:	1e6b      	subs	r3, r5, #1
 8010112:	440b      	add	r3, r1
 8010114:	60e3      	str	r3, [r4, #12]
      offset += length_message_type;
 8010116:	9b02      	ldr	r3, [sp, #8]
 8010118:	442b      	add	r3, r5
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 801011a:	58c8      	ldr	r0, [r1, r3]
 801011c:	9001      	str	r0, [sp, #4]
      offset += 4;
 801011e:	1d18      	adds	r0, r3, #4
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8010120:	4603      	mov	r3, r0
 8010122:	9a01      	ldr	r2, [sp, #4]
 8010124:	4402      	add	r2, r0
 8010126:	4293      	cmp	r3, r2
 8010128:	d204      	bcs.n	8010134 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x80>
          inbuffer[k-1]=inbuffer[k];
 801012a:	1e5a      	subs	r2, r3, #1
 801012c:	5ccd      	ldrb	r5, [r1, r3]
 801012e:	548d      	strb	r5, [r1, r2]
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8010130:	3301      	adds	r3, #1
 8010132:	e7f6      	b.n	8010122 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x6e>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 8010134:	3a01      	subs	r2, #1
 8010136:	2300      	movs	r3, #0
 8010138:	548b      	strb	r3, [r1, r2]
      this->md5sum = (char *)(inbuffer + offset-1);
 801013a:	1e43      	subs	r3, r0, #1
 801013c:	440b      	add	r3, r1
 801013e:	6123      	str	r3, [r4, #16]
      offset += length_md5sum;
 8010140:	9b01      	ldr	r3, [sp, #4]
 8010142:	4418      	add	r0, r3
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010144:	5c0b      	ldrb	r3, [r1, r0]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010146:	1c42      	adds	r2, r0, #1
 8010148:	5c8a      	ldrb	r2, [r1, r2]
 801014a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801014e:	1c82      	adds	r2, r0, #2
 8010150:	5c8a      	ldrb	r2, [r1, r2]
 8010152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010156:	1cc2      	adds	r2, r0, #3
 8010158:	5c8a      	ldrb	r2, [r1, r2]
 801015a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
 801015e:	6163      	str	r3, [r4, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8010160:	3004      	adds	r0, #4
 8010162:	b004      	add	sp, #16
 8010164:	bc30      	pop	{r4, r5}
 8010166:	4770      	bx	lr

08010168 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8010168:	b410      	push	{r4}
 801016a:	b083      	sub	sp, #12
 801016c:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 801016e:	460b      	mov	r3, r1
 8010170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010174:	7102      	strb	r2, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 8010176:	6818      	ldr	r0, [r3, #0]
 8010178:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 801017a:	2305      	movs	r3, #5
 801017c:	9a01      	ldr	r2, [sp, #4]
 801017e:	1d50      	adds	r0, r2, #5
 8010180:	4283      	cmp	r3, r0
 8010182:	d204      	bcs.n	801018e <_ZN14rosserial_msgs3Log11deserializeEPh+0x26>
          inbuffer[k-1]=inbuffer[k];
 8010184:	1e5a      	subs	r2, r3, #1
 8010186:	5cc8      	ldrb	r0, [r1, r3]
 8010188:	5488      	strb	r0, [r1, r2]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 801018a:	3301      	adds	r3, #1
 801018c:	e7f6      	b.n	801017c <_ZN14rosserial_msgs3Log11deserializeEPh+0x14>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 801018e:	3204      	adds	r2, #4
 8010190:	2300      	movs	r3, #0
 8010192:	548b      	strb	r3, [r1, r2]
      this->msg = (char *)(inbuffer + offset-1);
 8010194:	3104      	adds	r1, #4
 8010196:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 8010198:	9801      	ldr	r0, [sp, #4]
 801019a:	3005      	adds	r0, #5
 801019c:	b003      	add	sp, #12
 801019e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE>:
            }
        }
      configured_ = true;
    }

    virtual int publish(int id, const Msg * msg)
 80101a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a8:	b084      	sub	sp, #16
    {
      if(id >= 100 && !configured_)
 80101aa:	2963      	cmp	r1, #99	; 0x63
 80101ac:	dd04      	ble.n	80101b8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x14>
 80101ae:	f890 32d0 	ldrb.w	r3, [r0, #720]	; 0x2d0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f000 822d 	beq.w	8010612 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x46e>
 80101b8:	460e      	mov	r6, r1
 80101ba:	4604      	mov	r4, r0
        return 0;

      /* serialize message */
      uint16_t l = msg->serialize(message_out+7);
 80101bc:	6813      	ldr	r3, [r2, #0]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f500 7191 	add.w	r1, r0, #290	; 0x122
 80101c4:	4610      	mov	r0, r2
 80101c6:	4798      	blx	r3
 80101c8:	b287      	uxth	r7, r0

      /* setup the header */
      message_out[0] = 0xff;
 80101ca:	23ff      	movs	r3, #255	; 0xff
 80101cc:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
      message_out[1] = PROTOCOL_VER;
 80101d0:	23fe      	movs	r3, #254	; 0xfe
 80101d2:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
      message_out[2] = (uint8_t) ((uint16_t)l&255);
 80101d6:	b2c3      	uxtb	r3, r0
 80101d8:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 80101dc:	463d      	mov	r5, r7
      message_out[3] = (uint8_t) ((uint16_t)l>>8);
 80101de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80101e2:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 80101e6:	4418      	add	r0, r3
 80101e8:	43c3      	mvns	r3, r0
 80101ea:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
      message_out[5] = (uint8_t) ((int16_t)id&255);
 80101ee:	f884 6120 	strb.w	r6, [r4, #288]	; 0x120
      message_out[6] = (uint8_t) ((int16_t)id>>8);
 80101f2:	f346 2607 	sbfx	r6, r6, #8, #8
 80101f6:	f884 6121 	strb.w	r6, [r4, #289]	; 0x121

      /* calculate checksum */
      int chk = 0;
      for(int i =5; i<l+7; i++)
 80101fa:	2305      	movs	r3, #5
      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
      message_out[5] = (uint8_t) ((int16_t)id&255);
      message_out[6] = (uint8_t) ((int16_t)id>>8);

      /* calculate checksum */
      int chk = 0;
 80101fc:	2200      	movs	r2, #0
      for(int i =5; i<l+7; i++)
 80101fe:	1de9      	adds	r1, r5, #7
 8010200:	428b      	cmp	r3, r1
 8010202:	da05      	bge.n	8010210 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x6c>
        chk += message_out[i];
 8010204:	18e1      	adds	r1, r4, r3
 8010206:	f891 111b 	ldrb.w	r1, [r1, #283]	; 0x11b
 801020a:	440a      	add	r2, r1
      message_out[5] = (uint8_t) ((int16_t)id&255);
      message_out[6] = (uint8_t) ((int16_t)id>>8);

      /* calculate checksum */
      int chk = 0;
      for(int i =5; i<l+7; i++)
 801020c:	3301      	adds	r3, #1
 801020e:	e7f6      	b.n	80101fe <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x5a>
        chk += message_out[i];
      l += 7;
 8010210:	1df9      	adds	r1, r7, #7
      message_out[l++] = 255 - (chk%256);
 8010212:	f107 0608 	add.w	r6, r7, #8
 8010216:	b2b6      	uxth	r6, r6
 8010218:	fa14 f181 	uxtah	r1, r4, r1
 801021c:	4bb7      	ldr	r3, [pc, #732]	; (80104fc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x358>)
 801021e:	4013      	ands	r3, r2
 8010220:	2b00      	cmp	r3, #0
 8010222:	da03      	bge.n	801022c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x88>
 8010224:	3b01      	subs	r3, #1
 8010226:	f063 03ff 	orn	r3, r3, #255	; 0xff
 801022a:	3301      	adds	r3, #1
 801022c:	43db      	mvns	r3, r3
 801022e:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
        {
          uint8_t reminder = l % DMA_TX_BURST_SIZE;
          if(reminder != 0) l = (l / DMA_TX_BURST_SIZE + 1) * DMA_TX_BURST_SIZE;
        }

      if( l <= OUTPUT_SIZE ){
 8010232:	2eff      	cmp	r6, #255	; 0xff
 8010234:	f200 81dd 	bhi.w	80105f2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x44e>
        hardware_.write(message_out, l);
 8010238:	f204 111b 	addw	r1, r4, #283	; 0x11b
  {
    return iostream_->read();
  };

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
 801023c:	68a3      	ldr	r3, [r4, #8]
 801023e:	b2f2      	uxtb	r2, r6
    write(&data_byte, 1);
  }

  void write(uint8_t * data_byte, uint8_t size)
  {
    tx_->write(data_byte, size);
 8010240:	f8d3 8008 	ldr.w	r8, [r3, #8]
  void write(uint8_t * new_data, uint8_t new_size)
  {
    //if (subscript_in_progress_ == subscript_to_add_) idle_flag_= false;

    //if subscript comes around and get to one in progress_, then wait.
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0) )
 8010244:	4bae      	ldr	r3, [pc, #696]	; (8010500 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x35c>)
 8010246:	781f      	ldrb	r7, [r3, #0]
 8010248:	463c      	mov	r4, r7
 801024a:	4bae      	ldr	r3, [pc, #696]	; (8010504 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x360>)
 801024c:	781d      	ldrb	r5, [r3, #0]
 801024e:	1c6b      	adds	r3, r5, #1
 8010250:	429f      	cmp	r7, r3
 8010252:	d002      	beq.n	801025a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb6>
 8010254:	2d31      	cmp	r5, #49	; 0x31
 8010256:	d106      	bne.n	8010266 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xc2>
 8010258:	b92f      	cbnz	r7, 8010266 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xc2>
      {
        //TODO: address the overflow
		while(subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_SIZE - 1 && subscript_in_progress_ == 0)){}
 801025a:	429c      	cmp	r4, r3
 801025c:	d0fd      	beq.n	801025a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb6>
 801025e:	2d31      	cmp	r5, #49	; 0x31
 8010260:	d101      	bne.n	8010266 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xc2>
 8010262:	2f00      	cmp	r7, #0
 8010264:	d0f9      	beq.n	801025a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb6>
      //  return;
      }


    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
 8010266:	ebc5 1385 	rsb	r3, r5, r5, lsl #6
 801026a:	ebc5 0383 	rsb	r3, r5, r3, lsl #2
 801026e:	48a6      	ldr	r0, [pc, #664]	; (8010508 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x364>)
 8010270:	4418      	add	r0, r3
 8010272:	f880 20fa 	strb.w	r2, [r0, #250]	; 0xfa
    memcpy(tx_buffer_unit_[subscript_to_add_].tx_data_, new_data, new_size);
 8010276:	f006 fe10 	bl	8016e9a <memcpy>

    //speed slows down?
    //memcpy(tx_data_[subscript_to_add_], new_data, new_size);

    subscript_to_add_++;
 801027a:	1c6b      	adds	r3, r5, #1
 801027c:	b2db      	uxtb	r3, r3
 801027e:	4aa1      	ldr	r2, [pc, #644]	; (8010504 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x360>)
 8010280:	7013      	strb	r3, [r2, #0]

    //if subscript reaches end make to go back to front
    if (subscript_to_add_ == TX_SIZE)
 8010282:	2b32      	cmp	r3, #50	; 0x32
 8010284:	d102      	bne.n	801028c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xe8>
      subscript_to_add_ = 0;
 8010286:	2200      	movs	r2, #0
 8010288:	4b9e      	ldr	r3, [pc, #632]	; (8010504 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x360>)
 801028a:	701a      	strb	r2, [r3, #0]

    // enable and start DMA transfer
    if (idle_flag_ )
 801028c:	4b9f      	ldr	r3, [pc, #636]	; (801050c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x368>)
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	f000 81ac 	beq.w	80105ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x44a>
      {
        // check the needs to enable and start DMA transfer
        if ((subscript_in_progress_ == (subscript_to_add_-1)) || (subscript_in_progress_ == TX_SIZE -1 && subscript_to_add_ == 0)) idle_flag_= false;
 8010296:	4b9b      	ldr	r3, [pc, #620]	; (8010504 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x360>)
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	1e5a      	subs	r2, r3, #1
 801029c:	4297      	cmp	r7, r2
 801029e:	d002      	beq.n	80102a6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x102>
 80102a0:	2f31      	cmp	r7, #49	; 0x31
 80102a2:	d103      	bne.n	80102ac <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x108>
 80102a4:	b913      	cbnz	r3, 80102ac <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x108>
 80102a6:	2200      	movs	r2, #0
 80102a8:	4b98      	ldr	r3, [pc, #608]	; (801050c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x368>)
 80102aa:	701a      	strb	r2, [r3, #0]

        huart_->Instance->CR3 &= (uint32_t)(~USART_CR3_DMAT);
 80102ac:	f8d8 3000 	ldr.w	r3, [r8]
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	6893      	ldr	r3, [r2, #8]
 80102b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102b8:	6093      	str	r3, [r2, #8]
        __HAL_DMA_DISABLE(huart_->hdmatx);
 80102ba:	f8d8 3000 	ldr.w	r3, [r8]
 80102be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	6813      	ldr	r3, [r2, #0]
 80102c4:	f023 0301 	bic.w	r3, r3, #1
 80102c8:	6013      	str	r3, [r2, #0]
        uint8_t* tmp8 = tx_buffer_unit_[subscript_in_progress_].tx_data_;
 80102ca:	4b8d      	ldr	r3, [pc, #564]	; (8010500 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x35c>)
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 80102d2:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
 80102d6:	4a8c      	ldr	r2, [pc, #560]	; (8010508 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x364>)
 80102d8:	4413      	add	r3, r2
        uint32_t *tmp32 = (uint32_t*)&tmp8;
        huart_->hdmatx->Instance->NDTR = (uint32_t)tx_buffer_unit_[subscript_in_progress_].tx_len_;
 80102da:	f8d8 2000 	ldr.w	r2, [r8]
 80102de:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80102e0:	6812      	ldr	r2, [r2, #0]
 80102e2:	f893 10fa 	ldrb.w	r1, [r3, #250]	; 0xfa
 80102e6:	6051      	str	r1, [r2, #4]

        huart_->hdmatx->Instance->M0AR = *(uint32_t*)tmp32;
 80102e8:	f8d8 2000 	ldr.w	r2, [r8]
 80102ec:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80102ee:	6812      	ldr	r2, [r2, #0]
 80102f0:	60d3      	str	r3, [r2, #12]
        /* Enable USARTy DMA TX Channel */
        huart_->Instance->CR3 |= USART_CR3_DMAT;
 80102f2:	f8d8 3000 	ldr.w	r3, [r8]
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	6893      	ldr	r3, [r2, #8]
 80102fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102fe:	6093      	str	r3, [r2, #8]
        __HAL_DMA_ENABLE(huart_->hdmatx);
 8010300:	f8d8 3000 	ldr.w	r3, [r8]
 8010304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010306:	681a      	ldr	r2, [r3, #0]
 8010308:	6813      	ldr	r3, [r2, #0]
 801030a:	f043 0301 	orr.w	r3, r3, #1
 801030e:	6013      	str	r3, [r2, #0]
        __HAL_DMA_CLEAR_FLAG(huart_->hdmatx, __HAL_DMA_GET_TC_FLAG_INDEX(huart_->hdmatx));
 8010310:	f8d8 3000 	ldr.w	r3, [r8]
 8010314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4a7d      	ldr	r2, [pc, #500]	; (8010510 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x36c>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d954      	bls.n	80103c8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x224>
 801031e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8010322:	4293      	cmp	r3, r2
 8010324:	d02e      	beq.n	8010384 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e0>
 8010326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801032a:	4293      	cmp	r3, r2
 801032c:	d02c      	beq.n	8010388 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e4>
 801032e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8010332:	4293      	cmp	r3, r2
 8010334:	d02a      	beq.n	801038c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1e8>
 8010336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801033a:	4293      	cmp	r3, r2
 801033c:	d028      	beq.n	8010390 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1ec>
 801033e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8010342:	4293      	cmp	r3, r2
 8010344:	d026      	beq.n	8010394 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1f0>
 8010346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801034a:	4293      	cmp	r3, r2
 801034c:	d025      	beq.n	801039a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1f6>
 801034e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8010352:	4293      	cmp	r3, r2
 8010354:	d024      	beq.n	80103a0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x1fc>
 8010356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801035a:	4293      	cmp	r3, r2
 801035c:	d023      	beq.n	80103a6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x202>
 801035e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8010362:	4293      	cmp	r3, r2
 8010364:	d022      	beq.n	80103ac <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x208>
 8010366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801036a:	4293      	cmp	r3, r2
 801036c:	d021      	beq.n	80103b2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x20e>
 801036e:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8010372:	4293      	cmp	r3, r2
 8010374:	d020      	beq.n	80103b8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x214>
 8010376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801037a:	4293      	cmp	r3, r2
 801037c:	d11f      	bne.n	80103be <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21a>
 801037e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010382:	e01e      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 8010384:	2320      	movs	r3, #32
 8010386:	e01c      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 8010388:	2320      	movs	r3, #32
 801038a:	e01a      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 801038c:	2320      	movs	r3, #32
 801038e:	e018      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 8010390:	2320      	movs	r3, #32
 8010392:	e016      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 8010394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010398:	e013      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 801039a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801039e:	e010      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 80103a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80103a4:	e00d      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 80103a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80103aa:	e00a      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 80103ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80103b0:	e007      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 80103b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80103b6:	e004      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 80103b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80103bc:	e001      	b.n	80103c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x21e>
 80103be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80103c2:	4a54      	ldr	r2, [pc, #336]	; (8010514 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x370>)
 80103c4:	60d3      	str	r3, [r2, #12]
 80103c6:	e112      	b.n	80105ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x44a>
 80103c8:	4a53      	ldr	r2, [pc, #332]	; (8010518 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x374>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d953      	bls.n	8010476 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2d2>
 80103ce:	3aa8      	subs	r2, #168	; 0xa8
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d02e      	beq.n	8010432 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x28e>
 80103d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80103d8:	4293      	cmp	r3, r2
 80103da:	d02c      	beq.n	8010436 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x292>
 80103dc:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d02a      	beq.n	801043a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x296>
 80103e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d028      	beq.n	801043e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x29a>
 80103ec:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d026      	beq.n	8010442 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x29e>
 80103f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d025      	beq.n	8010448 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2a4>
 80103fc:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8010400:	4293      	cmp	r3, r2
 8010402:	d024      	beq.n	801044e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2aa>
 8010404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010408:	4293      	cmp	r3, r2
 801040a:	d023      	beq.n	8010454 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2b0>
 801040c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8010410:	4293      	cmp	r3, r2
 8010412:	d022      	beq.n	801045a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2b6>
 8010414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010418:	4293      	cmp	r3, r2
 801041a:	d021      	beq.n	8010460 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2bc>
 801041c:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8010420:	4293      	cmp	r3, r2
 8010422:	d020      	beq.n	8010466 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2c2>
 8010424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010428:	4293      	cmp	r3, r2
 801042a:	d11f      	bne.n	801046c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2c8>
 801042c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010430:	e01e      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 8010432:	2320      	movs	r3, #32
 8010434:	e01c      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 8010436:	2320      	movs	r3, #32
 8010438:	e01a      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 801043a:	2320      	movs	r3, #32
 801043c:	e018      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 801043e:	2320      	movs	r3, #32
 8010440:	e016      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 8010442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010446:	e013      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 8010448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801044c:	e010      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 801044e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010452:	e00d      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 8010454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010458:	e00a      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 801045a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801045e:	e007      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 8010460:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010464:	e004      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 8010466:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801046a:	e001      	b.n	8010470 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x2cc>
 801046c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010470:	4a28      	ldr	r2, [pc, #160]	; (8010514 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x370>)
 8010472:	6093      	str	r3, [r2, #8]
 8010474:	e0bb      	b.n	80105ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x44a>
 8010476:	4a29      	ldr	r2, [pc, #164]	; (801051c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x378>)
 8010478:	4293      	cmp	r3, r2
 801047a:	d965      	bls.n	8010548 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x3a4>
 801047c:	3a48      	subs	r2, #72	; 0x48
 801047e:	4293      	cmp	r3, r2
 8010480:	d02e      	beq.n	80104e0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x33c>
 8010482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010486:	4293      	cmp	r3, r2
 8010488:	d02c      	beq.n	80104e4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x340>
 801048a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 801048e:	4293      	cmp	r3, r2
 8010490:	d02a      	beq.n	80104e8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x344>
 8010492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010496:	4293      	cmp	r3, r2
 8010498:	d028      	beq.n	80104ec <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x348>
 801049a:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 801049e:	4293      	cmp	r3, r2
 80104a0:	d026      	beq.n	80104f0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x34c>
 80104a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d025      	beq.n	80104f6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x352>
 80104aa:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d036      	beq.n	8010520 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x37c>
 80104b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d035      	beq.n	8010526 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x382>
 80104ba:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80104be:	4293      	cmp	r3, r2
 80104c0:	d034      	beq.n	801052c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x388>
 80104c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d033      	beq.n	8010532 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x38e>
 80104ca:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d032      	beq.n	8010538 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x394>
 80104d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d131      	bne.n	801053e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39a>
 80104da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80104de:	e030      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 80104e0:	2320      	movs	r3, #32
 80104e2:	e02e      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 80104e4:	2320      	movs	r3, #32
 80104e6:	e02c      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 80104e8:	2320      	movs	r3, #32
 80104ea:	e02a      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 80104ec:	2320      	movs	r3, #32
 80104ee:	e028      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 80104f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104f4:	e025      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 80104f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104fa:	e022      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 80104fc:	800000ff 	.word	0x800000ff
 8010500:	20000afe 	.word	0x20000afe
 8010504:	20003eec 	.word	0x20003eec
 8010508:	20000b00 	.word	0x20000b00
 801050c:	20000afd 	.word	0x20000afd
 8010510:	40026458 	.word	0x40026458
 8010514:	40026400 	.word	0x40026400
 8010518:	400260b8 	.word	0x400260b8
 801051c:	40026058 	.word	0x40026058
 8010520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010524:	e00d      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 8010526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801052a:	e00a      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 801052c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010530:	e007      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 8010532:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010536:	e004      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 8010538:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801053c:	e001      	b.n	8010542 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x39e>
 801053e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010542:	4a36      	ldr	r2, [pc, #216]	; (801061c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x478>)
 8010544:	60d3      	str	r3, [r2, #12]
 8010546:	e052      	b.n	80105ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x44a>
 8010548:	4a35      	ldr	r2, [pc, #212]	; (8010620 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x47c>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d02e      	beq.n	80105ac <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x408>
 801054e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010552:	4293      	cmp	r3, r2
 8010554:	d02c      	beq.n	80105b0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x40c>
 8010556:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 801055a:	4293      	cmp	r3, r2
 801055c:	d02a      	beq.n	80105b4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x410>
 801055e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010562:	4293      	cmp	r3, r2
 8010564:	d028      	beq.n	80105b8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x414>
 8010566:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 801056a:	4293      	cmp	r3, r2
 801056c:	d026      	beq.n	80105bc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x418>
 801056e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010572:	4293      	cmp	r3, r2
 8010574:	d025      	beq.n	80105c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x41e>
 8010576:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 801057a:	4293      	cmp	r3, r2
 801057c:	d024      	beq.n	80105c8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x424>
 801057e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010582:	4293      	cmp	r3, r2
 8010584:	d023      	beq.n	80105ce <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x42a>
 8010586:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 801058a:	4293      	cmp	r3, r2
 801058c:	d022      	beq.n	80105d4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x430>
 801058e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010592:	4293      	cmp	r3, r2
 8010594:	d021      	beq.n	80105da <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x436>
 8010596:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 801059a:	4293      	cmp	r3, r2
 801059c:	d020      	beq.n	80105e0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x43c>
 801059e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d11f      	bne.n	80105e6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x442>
 80105a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80105aa:	e01e      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105ac:	2320      	movs	r3, #32
 80105ae:	e01c      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105b0:	2320      	movs	r3, #32
 80105b2:	e01a      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105b4:	2320      	movs	r3, #32
 80105b6:	e018      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105b8:	2320      	movs	r3, #32
 80105ba:	e016      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105c0:	e013      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105c6:	e010      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105cc:	e00d      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105d2:	e00a      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80105d8:	e007      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80105de:	e004      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80105e4:	e001      	b.n	80105ea <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x446>
 80105e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80105ea:	4a0c      	ldr	r2, [pc, #48]	; (801061c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x478>)
 80105ec:	6093      	str	r3, [r2, #8]
        return l;
 80105ee:	4630      	mov	r0, r6
 80105f0:	e010      	b.n	8010614 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x470>
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
 80105f2:	4b0c      	ldr	r3, [pc, #48]	; (8010624 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x480>)
 80105f4:	9301      	str	r3, [sp, #4]
     */

  private:
    void log(char byte, const char * msg){
      rosserial_msgs::Log l;
      l.level= byte;
 80105f6:	2303      	movs	r3, #3
 80105f8:	f88d 3008 	strb.w	r3, [sp, #8]
      l.msg = (char*)msg;
 80105fc:	4b0a      	ldr	r3, [pc, #40]	; (8010628 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x484>)
 80105fe:	9303      	str	r3, [sp, #12]
      publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	aa01      	add	r2, sp, #4
 8010606:	2107      	movs	r1, #7
 8010608:	4620      	mov	r0, r4
 801060a:	4798      	blx	r3
      if( l <= OUTPUT_SIZE ){
        hardware_.write(message_out, l);
        return l;
      }else{
        logerror("Message from device dropped: message larger than buffer.");
        return -1;
 801060c:	f04f 30ff 	mov.w	r0, #4294967295
 8010610:	e000      	b.n	8010614 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x470>
    }

    virtual int publish(int id, const Msg * msg)
    {
      if(id >= 100 && !configured_)
        return 0;
 8010612:	2000      	movs	r0, #0
        return l;
      }else{
        logerror("Message from device dropped: message larger than buffer.");
        return -1;
      }
    }
 8010614:	b004      	add	sp, #16
 8010616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801061a:	bf00      	nop
 801061c:	40026000 	.word	0x40026000
 8010620:	40026010 	.word	0x40026010
 8010624:	0801b0ec 	.word	0x0801b0ec
 8010628:	0801b480 	.word	0x0801b480

0801062c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 801062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801062e:	b085      	sub	sp, #20
 8010630:	4605      	mov	r5, r0
 8010632:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8010634:	8883      	ldrh	r3, [r0, #4]
 8010636:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8010638:	8883      	ldrh	r3, [r0, #4]
 801063a:	0a1b      	lsrs	r3, r3, #8
 801063c:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
 801063e:	6880      	ldr	r0, [r0, #8]
 8010640:	f7f7 ff78 	bl	8008534 <strlen>
 8010644:	4602      	mov	r2, r0
 8010646:	ab04      	add	r3, sp, #16
 8010648:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 801064c:	6818      	ldr	r0, [r3, #0]
 801064e:	f8c4 0002 	str.w	r0, [r4, #2]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8010652:	68a9      	ldr	r1, [r5, #8]
 8010654:	1da0      	adds	r0, r4, #6
 8010656:	f006 fc20 	bl	8016e9a <memcpy>
      offset += length_topic_name;
 801065a:	9e03      	ldr	r6, [sp, #12]
 801065c:	1db7      	adds	r7, r6, #6
      uint32_t length_message_type = strlen(this->message_type);
 801065e:	68e8      	ldr	r0, [r5, #12]
 8010660:	f7f7 ff68 	bl	8008534 <strlen>
 8010664:	4602      	mov	r2, r0
 8010666:	ab04      	add	r3, sp, #16
 8010668:	f843 0d08 	str.w	r0, [r3, #-8]!
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 801066c:	6818      	ldr	r0, [r3, #0]
 801066e:	51e0      	str	r0, [r4, r7]
      offset += 4;
 8010670:	360a      	adds	r6, #10
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8010672:	68e9      	ldr	r1, [r5, #12]
 8010674:	19a0      	adds	r0, r4, r6
 8010676:	f006 fc10 	bl	8016e9a <memcpy>
      offset += length_message_type;
 801067a:	9802      	ldr	r0, [sp, #8]
 801067c:	4406      	add	r6, r0
      uint32_t length_md5sum = strlen(this->md5sum);
 801067e:	6928      	ldr	r0, [r5, #16]
 8010680:	f7f7 ff58 	bl	8008534 <strlen>
 8010684:	4602      	mov	r2, r0
 8010686:	ab04      	add	r3, sp, #16
 8010688:	f843 0d0c 	str.w	r0, [r3, #-12]!
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 801068c:	6818      	ldr	r0, [r3, #0]
 801068e:	51a0      	str	r0, [r4, r6]
      offset += 4;
 8010690:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8010692:	6929      	ldr	r1, [r5, #16]
 8010694:	19a0      	adds	r0, r4, r6
 8010696:	f006 fc00 	bl	8016e9a <memcpy>
      offset += length_md5sum;
 801069a:	9801      	ldr	r0, [sp, #4]
 801069c:	4430      	add	r0, r6
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 801069e:	696b      	ldr	r3, [r5, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80106a0:	5423      	strb	r3, [r4, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80106a2:	1c42      	adds	r2, r0, #1
 80106a4:	0a19      	lsrs	r1, r3, #8
 80106a6:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80106a8:	1c82      	adds	r2, r0, #2
 80106aa:	0c19      	lsrs	r1, r3, #16
 80106ac:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80106ae:	1cc2      	adds	r2, r0, #3
 80106b0:	0e1b      	lsrs	r3, r3, #24
 80106b2:	54a3      	strb	r3, [r4, r2]
      offset += sizeof(this->buffer_size);
      return offset;
    }
 80106b4:	3004      	adds	r0, #4
 80106b6:	b005      	add	sp, #20
 80106b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106ba:	bf00      	nop

080106bc <_ZNK14rosserial_msgs3Log9serializeEPh>:
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 80106bc:	b530      	push	{r4, r5, lr}
 80106be:	b083      	sub	sp, #12
 80106c0:	4605      	mov	r5, r0
 80106c2:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80106c4:	7903      	ldrb	r3, [r0, #4]
 80106c6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 80106c8:	6880      	ldr	r0, [r0, #8]
 80106ca:	f7f7 ff33 	bl	8008534 <strlen>
 80106ce:	4602      	mov	r2, r0
 80106d0:	ab02      	add	r3, sp, #8
 80106d2:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 80106d6:	6818      	ldr	r0, [r3, #0]
 80106d8:	f8c4 0001 	str.w	r0, [r4, #1]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 80106dc:	68a9      	ldr	r1, [r5, #8]
 80106de:	1d60      	adds	r0, r4, #5
 80106e0:	f006 fbdb 	bl	8016e9a <memcpy>
      offset += length_msg;
      return offset;
    }
 80106e4:	9801      	ldr	r0, [sp, #4]
 80106e6:	3005      	adds	r0, #5
 80106e8:	b003      	add	sp, #12
 80106ea:	bd30      	pop	{r4, r5, pc}

080106ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 80106ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ee:	b083      	sub	sp, #12
 80106f0:	4605      	mov	r5, r0
 80106f2:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 80106f4:	7903      	ldrb	r3, [r0, #4]
 80106f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 80106f8:	2100      	movs	r1, #0
 80106fa:	7061      	strb	r1, [r4, #1]
      *(outbuffer + offset++) = 0;
 80106fc:	70a1      	strb	r1, [r4, #2]
      *(outbuffer + offset++) = 0;
 80106fe:	70e1      	strb	r1, [r4, #3]
 8010700:	2304      	movs	r3, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8010702:	792a      	ldrb	r2, [r5, #4]
 8010704:	4291      	cmp	r1, r2
 8010706:	d210      	bcs.n	801072a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x3e>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8010708:	68ea      	ldr	r2, [r5, #12]
 801070a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 801070e:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8010710:	1c58      	adds	r0, r3, #1
 8010712:	0a16      	lsrs	r6, r2, #8
 8010714:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8010716:	1c98      	adds	r0, r3, #2
 8010718:	0c16      	lsrs	r6, r2, #16
 801071a:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 801071c:	1cd8      	adds	r0, r3, #3
 801071e:	0e12      	lsrs	r2, r2, #24
 8010720:	5422      	strb	r2, [r4, r0]
      offset += sizeof(this->ints[i]);
 8010722:	3304      	adds	r3, #4
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < ints_length; i++){
 8010724:	3101      	adds	r1, #1
 8010726:	b2c9      	uxtb	r1, r1
 8010728:	e7eb      	b.n	8010702 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	7c29      	ldrb	r1, [r5, #16]
 801072e:	54e1      	strb	r1, [r4, r3]
      *(outbuffer + offset++) = 0;
 8010730:	1c98      	adds	r0, r3, #2
 8010732:	2100      	movs	r1, #0
 8010734:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset++) = 0;
 8010736:	1cda      	adds	r2, r3, #3
 8010738:	5421      	strb	r1, [r4, r0]
      *(outbuffer + offset++) = 0;
 801073a:	3304      	adds	r3, #4
 801073c:	54a1      	strb	r1, [r4, r2]
      for( uint8_t i = 0; i < floats_length; i++){
 801073e:	7c2a      	ldrb	r2, [r5, #16]
 8010740:	4291      	cmp	r1, r2
 8010742:	d210      	bcs.n	8010766 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x7a>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8010744:	69aa      	ldr	r2, [r5, #24]
 8010746:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 801074a:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 801074c:	1c58      	adds	r0, r3, #1
 801074e:	0a16      	lsrs	r6, r2, #8
 8010750:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8010752:	1c98      	adds	r0, r3, #2
 8010754:	0c16      	lsrs	r6, r2, #16
 8010756:	5426      	strb	r6, [r4, r0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8010758:	1cd8      	adds	r0, r3, #3
 801075a:	0e12      	lsrs	r2, r2, #24
 801075c:	5422      	strb	r2, [r4, r0]
      offset += sizeof(this->floats[i]);
 801075e:	3304      	adds	r3, #4
      }
      *(outbuffer + offset++) = floats_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < floats_length; i++){
 8010760:	3101      	adds	r1, #1
 8010762:	b2c9      	uxtb	r1, r1
 8010764:	e7eb      	b.n	801073e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x52>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 8010766:	1c5a      	adds	r2, r3, #1
 8010768:	7f29      	ldrb	r1, [r5, #28]
 801076a:	54e1      	strb	r1, [r4, r3]
      *(outbuffer + offset++) = 0;
 801076c:	1c99      	adds	r1, r3, #2
 801076e:	2700      	movs	r7, #0
 8010770:	54a7      	strb	r7, [r4, r2]
      *(outbuffer + offset++) = 0;
 8010772:	1cda      	adds	r2, r3, #3
 8010774:	5467      	strb	r7, [r4, r1]
      *(outbuffer + offset++) = 0;
 8010776:	1d1e      	adds	r6, r3, #4
 8010778:	54a7      	strb	r7, [r4, r2]
      for( uint8_t i = 0; i < strings_length; i++){
 801077a:	7f2b      	ldrb	r3, [r5, #28]
 801077c:	429f      	cmp	r7, r3
 801077e:	d216      	bcs.n	80107ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xc2>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8010780:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010782:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010786:	f7f7 fed5 	bl	8008534 <strlen>
 801078a:	4602      	mov	r2, r0
 801078c:	ab02      	add	r3, sp, #8
 801078e:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 8010792:	6818      	ldr	r0, [r3, #0]
 8010794:	51a0      	str	r0, [r4, r6]
      offset += 4;
 8010796:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8010798:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801079a:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 801079e:	19a0      	adds	r0, r4, r6
 80107a0:	f006 fb7b 	bl	8016e9a <memcpy>
      offset += length_stringsi;
 80107a4:	9b01      	ldr	r3, [sp, #4]
 80107a6:	441e      	add	r6, r3
      }
      *(outbuffer + offset++) = strings_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
 80107a8:	3701      	adds	r7, #1
 80107aa:	b2ff      	uxtb	r7, r7
 80107ac:	e7e5      	b.n	801077a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8e>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
 80107ae:	4630      	mov	r0, r6
 80107b0:	b003      	add	sp, #12
 80107b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80107b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107b6:	b083      	sub	sp, #12
 80107b8:	4606      	mov	r6, r0
 80107ba:	460c      	mov	r4, r1
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 80107bc:	780d      	ldrb	r5, [r1, #0]
      if(ints_lengthT > ints_length)
 80107be:	7903      	ldrb	r3, [r0, #4]
 80107c0:	429d      	cmp	r5, r3
 80107c2:	d904      	bls.n	80107ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1a>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80107c4:	00a9      	lsls	r1, r5, #2
 80107c6:	68c0      	ldr	r0, [r0, #12]
 80107c8:	f006 fbce 	bl	8016f68 <realloc>
 80107cc:	60f0      	str	r0, [r6, #12]
      offset += 3;
      ints_length = ints_lengthT;
 80107ce:	7135      	strb	r5, [r6, #4]
      for( uint8_t i = 0; i < ints_length; i++){
 80107d0:	2200      	movs	r2, #0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
 80107d2:	2504      	movs	r5, #4
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 80107d4:	7933      	ldrb	r3, [r6, #4]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d215      	bcs.n	8010806 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x52>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80107da:	5d63      	ldrb	r3, [r4, r5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80107dc:	1c69      	adds	r1, r5, #1
 80107de:	5c61      	ldrb	r1, [r4, r1]
 80107e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80107e4:	1ca9      	adds	r1, r5, #2
 80107e6:	5c61      	ldrb	r1, [r4, r1]
 80107e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80107ec:	1ce9      	adds	r1, r5, #3
 80107ee:	5c61      	ldrb	r1, [r4, r1]
 80107f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 80107f4:	60b3      	str	r3, [r6, #8]
      offset += sizeof(this->st_ints);
 80107f6:	3504      	adds	r5, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80107f8:	68f3      	ldr	r3, [r6, #12]
 80107fa:	68b1      	ldr	r1, [r6, #8]
 80107fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 8010800:	3201      	adds	r2, #1
 8010802:	b2d2      	uxtb	r2, r2
 8010804:	e7e6      	b.n	80107d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x20>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 8010806:	5d67      	ldrb	r7, [r4, r5]
      if(floats_lengthT > floats_length)
 8010808:	7c33      	ldrb	r3, [r6, #16]
 801080a:	429f      	cmp	r7, r3
 801080c:	d904      	bls.n	8010818 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x64>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 801080e:	00b9      	lsls	r1, r7, #2
 8010810:	69b0      	ldr	r0, [r6, #24]
 8010812:	f006 fba9 	bl	8016f68 <realloc>
 8010816:	61b0      	str	r0, [r6, #24]
      offset += 3;
 8010818:	3504      	adds	r5, #4
      floats_length = floats_lengthT;
 801081a:	7437      	strb	r7, [r6, #16]
      for( uint8_t i = 0; i < floats_length; i++){
 801081c:	2200      	movs	r2, #0
 801081e:	7c33      	ldrb	r3, [r6, #16]
 8010820:	429a      	cmp	r2, r3
 8010822:	d215      	bcs.n	8010850 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x9c>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010824:	5d63      	ldrb	r3, [r4, r5]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010826:	1c69      	adds	r1, r5, #1
 8010828:	5c61      	ldrb	r1, [r4, r1]
 801082a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801082e:	1ca9      	adds	r1, r5, #2
 8010830:	5c61      	ldrb	r1, [r4, r1]
 8010832:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010836:	1ce9      	adds	r1, r5, #3
 8010838:	5c61      	ldrb	r1, [r4, r1]
      this->st_floats = u_st_floats.real;
 801083a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801083e:	6173      	str	r3, [r6, #20]
      offset += sizeof(this->st_floats);
 8010840:	3504      	adds	r5, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8010842:	69b3      	ldr	r3, [r6, #24]
 8010844:	6971      	ldr	r1, [r6, #20]
 8010846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 801084a:	3201      	adds	r2, #1
 801084c:	b2d2      	uxtb	r2, r2
 801084e:	e7e6      	b.n	801081e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x6a>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8010850:	5d67      	ldrb	r7, [r4, r5]
      if(strings_lengthT > strings_length)
 8010852:	7f33      	ldrb	r3, [r6, #28]
 8010854:	429f      	cmp	r7, r3
 8010856:	d904      	bls.n	8010862 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xae>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8010858:	00b9      	lsls	r1, r7, #2
 801085a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801085c:	f006 fb84 	bl	8016f68 <realloc>
 8010860:	6270      	str	r0, [r6, #36]	; 0x24
      offset += 3;
 8010862:	1d29      	adds	r1, r5, #4
      strings_length = strings_lengthT;
 8010864:	7737      	strb	r7, [r6, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 8010866:	2700      	movs	r7, #0
 8010868:	7f33      	ldrb	r3, [r6, #28]
 801086a:	429f      	cmp	r7, r3
 801086c:	d21b      	bcs.n	80108a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf2>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 801086e:	5860      	ldr	r0, [r4, r1]
 8010870:	9001      	str	r0, [sp, #4]
      offset += 4;
 8010872:	3104      	adds	r1, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8010874:	460b      	mov	r3, r1
 8010876:	9a01      	ldr	r2, [sp, #4]
 8010878:	440a      	add	r2, r1
 801087a:	4293      	cmp	r3, r2
 801087c:	d204      	bcs.n	8010888 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xd4>
          inbuffer[k-1]=inbuffer[k];
 801087e:	1e5a      	subs	r2, r3, #1
 8010880:	5ce0      	ldrb	r0, [r4, r3]
 8010882:	54a0      	strb	r0, [r4, r2]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8010884:	3301      	adds	r3, #1
 8010886:	e7f6      	b.n	8010876 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc2>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 8010888:	3a01      	subs	r2, #1
 801088a:	2300      	movs	r3, #0
 801088c:	54a3      	strb	r3, [r4, r2]
      this->st_strings = (char *)(inbuffer + offset-1);
 801088e:	1e4b      	subs	r3, r1, #1
 8010890:	4423      	add	r3, r4
 8010892:	6233      	str	r3, [r6, #32]
      offset += length_st_strings;
 8010894:	9d01      	ldr	r5, [sp, #4]
 8010896:	4429      	add	r1, r5
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8010898:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801089a:	6a32      	ldr	r2, [r6, #32]
 801089c:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 80108a0:	3701      	adds	r7, #1
 80108a2:	b2ff      	uxtb	r7, r7
 80108a4:	e7e0      	b.n	8010868 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xb4>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
 80108a6:	4608      	mov	r0, r1
 80108a8:	b003      	add	sp, #12
 80108aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080108ac <_ZN7encoder8ENCODER_D1Ev>:
{
  class ENCODER_ : public SENSOR_<Enctype>  //the data is uint16_t
  {
  public:
    ENCODER_(){};
    ~ENCODER_(){};
 80108ac:	b510      	push	{r4, lr}
 80108ae:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
 80108b0:	6a00      	ldr	r0, [r0, #32]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80108b2:	b108      	cbz	r0, 80108b8 <_ZN7encoder8ENCODER_D1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80108b4:	f003 ffc8 	bl	8014848 <_ZdlPv>
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
 80108b8:	6960      	ldr	r0, [r4, #20]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80108ba:	b108      	cbz	r0, 80108c0 <_ZN7encoder8ENCODER_D1Ev+0x14>
 80108bc:	f003 ffc4 	bl	8014848 <_ZdlPv>
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
 80108c0:	6820      	ldr	r0, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80108c2:	b108      	cbz	r0, 80108c8 <_ZN7encoder8ENCODER_D1Ev+0x1c>
 80108c4:	f003 ffc0 	bl	8014848 <_ZdlPv>
 80108c8:	4620      	mov	r0, r4
 80108ca:	bd10      	pop	{r4, pc}

080108cc <_ZN3IMUD1Ev>:
class IMU : public SENSOR_<Imugyro>
{
public:
	IMU(SPI_HandleTypeDef* hspi, ros::NodeHandle* nh);
	IMU(){};
	~IMU(){}
 80108cc:	b510      	push	{r4, lr}
 80108ce:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
 80108d0:	68c0      	ldr	r0, [r0, #12]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80108d2:	b108      	cbz	r0, 80108d8 <_ZN3IMUD1Ev+0xc>
 80108d4:	f003 ffb8 	bl	8014848 <_ZdlPv>
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
 80108d8:	6820      	ldr	r0, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80108da:	b108      	cbz	r0, 80108e0 <_ZN3IMUD1Ev+0x14>
 80108dc:	f003 ffb4 	bl	8014848 <_ZdlPv>
 80108e0:	4620      	mov	r0, r4
 80108e2:	bd10      	pop	{r4, pc}

080108e4 <_ZN16AttitudeEstimate19desireCoordCallbackERKN17aerial_robot_base11DesireCoordE>:
  EstimatorAlgorithm* estimator_;
  IMU* imu_;

  uint32_t last_pub_time_;

  void desireCoordCallback(const aerial_robot_base::DesireCoord& coord_msg)
 80108e4:	b508      	push	{r3, lr}
  {
    estimator_->coordinateUpdate(coord_msg.roll, coord_msg.pitch);
 80108e6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80108e8:	ed91 0a01 	vldr	s0, [r1, #4]
 80108ec:	edd1 0a02 	vldr	s1, [r1, #8]
  ~EstimatorAlgorithm(){}

  /* coodrinate change  */
  void coordinateUpdate(float desire_attitude_roll, float desire_attitude_pitch)
  {
    desire_attitude_roll_ = desire_attitude_roll; 
 80108f0:	ed80 0a23 	vstr	s0, [r0, #140]	; 0x8c
    desire_attitude_pitch_ = desire_attitude_pitch; 
 80108f4:	edc0 0a24 	vstr	s1, [r0, #144]	; 0x90

    r_.from_euler(desire_attitude_roll_, desire_attitude_pitch_, 0);
 80108f8:	ed9f 1a02 	vldr	s2, [pc, #8]	; 8010904 <_ZN16AttitudeEstimate19desireCoordCallbackERKN17aerial_robot_base11DesireCoordE+0x20>
 80108fc:	304c      	adds	r0, #76	; 0x4c
 80108fe:	f003 f817 	bl	8013930 <_ZN7Matrix3IfE10from_eulerEfff>
 8010902:	bd08      	pop	{r3, pc}
 8010904:	00000000 	.word	0x00000000

08010908 <_ZN17ComplementaryAHRS10estimationEv>:
    v->y +=  delta[X]  * v_tmp.z - delta[Z]   * v_tmp.x;
  }
  */

  /* core esitmation process, using body frame */
  virtual void estimation() 
 8010908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801090c:	ed2d 8b04 	vpush	{d8-d9}
 8010910:	b09e      	sub	sp, #120	; 0x78
 8010912:	4604      	mov	r4, r0

      rotateV(&EstGb_.V,delta_gyro_angle);
      rotateV(&EstMb_.V,delta_gyro_angle);
 #endif

    float acc_magnitude = acc_b_ * acc_b_; //norm?
 8010914:	f100 0904 	add.w	r9, r0, #4
 8010918:	4649      	mov	r1, r9
 801091a:	4648      	mov	r0, r9
 801091c:	f002 fe3a 	bl	8013594 <_ZNK7Vector3IfEmlERKS0_>
 8010920:	eef0 8a40 	vmov.f32	s17, s0
    Vector3f est_g_b_tmp = est_g_b_;
 8010924:	f10d 080c 	add.w	r8, sp, #12
 8010928:	f104 06b0 	add.w	r6, r4, #176	; 0xb0
 801092c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010930:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_b_;
 8010934:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8010938:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801093c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 8010940:	f104 0a1c 	add.w	sl, r4, #28
 8010944:	ed9f 8a87 	vldr	s16, [pc, #540]	; 8010b64 <_ZN17ComplementaryAHRS10estimationEv+0x25c>
 8010948:	eeb0 0a48 	vmov.f32	s0, s16
 801094c:	4650      	mov	r0, sl
 801094e:	f002 ff11 	bl	8013774 <_ZNK7Vector3IfEmlEf>
 8010952:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
 8010956:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 801095a:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 801095e:	a909      	add	r1, sp, #36	; 0x24
 8010960:	4640      	mov	r0, r8
 8010962:	f002 fdb7 	bl	80134d4 <_ZNK7Vector3IfErmERKS0_>
 8010966:	ed8d 0a06 	vstr	s0, [sp, #24]
 801096a:	edcd 0a07 	vstr	s1, [sp, #28]
 801096e:	ed8d 1a08 	vstr	s2, [sp, #32]
 8010972:	a906      	add	r1, sp, #24
 8010974:	4630      	mov	r0, r6
 8010976:	f002 fe8f 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>
    est_m_b_ += (est_m_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
 801097a:	eeb0 0a48 	vmov.f32	s0, s16
 801097e:	4650      	mov	r0, sl
 8010980:	f002 fef8 	bl	8013774 <_ZNK7Vector3IfEmlEf>
 8010984:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
 8010988:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
 801098c:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
 8010990:	a90f      	add	r1, sp, #60	; 0x3c
 8010992:	4668      	mov	r0, sp
 8010994:	f002 fd9e 	bl	80134d4 <_ZNK7Vector3IfErmERKS0_>
 8010998:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 801099c:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 80109a0:	ed8d 1a0e 	vstr	s2, [sp, #56]	; 0x38
 80109a4:	a90c      	add	r1, sp, #48	; 0x30
 80109a6:	4628      	mov	r0, r5
 80109a8:	f002 fe76 	bl	8013698 <_ZN7Vector3IfEpLERKS0_>



    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 80109ac:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8010b68 <_ZN17ComplementaryAHRS10estimationEv+0x260>
 80109b0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80109b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109b8:	dd08      	ble.n	80109cc <_ZN17ComplementaryAHRS10estimationEv+0xc4>
 80109ba:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8010b6c <_ZN17ComplementaryAHRS10estimationEv+0x264>
 80109be:	eef4 8ae7 	vcmpe.f32	s17, s15
 80109c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c6:	d403      	bmi.n	80109d0 <_ZN17ComplementaryAHRS10estimationEv+0xc8>
    else valid_acc = 0;
 80109c8:	2700      	movs	r7, #0
 80109ca:	e002      	b.n	80109d2 <_ZN17ComplementaryAHRS10estimationEv+0xca>
 80109cc:	2700      	movs	r7, #0
 80109ce:	e000      	b.n	80109d2 <_ZN17ComplementaryAHRS10estimationEv+0xca>
    est_g_b_ += (est_g_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro
    est_m_b_ += (est_m_b_tmp % (gyro_b_  * (DELTA_T * GYRO_AMP) )); //rotation by gyro



    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
 80109d0:	2701      	movs	r7, #1
    rpy_[Z] = atan2f( EstMv_.V.z * EstGv_.V.y - EstMv_.V.y * EstGv_.V.z,
                      EstMv_.V.x * invG * sqGY_sqGZ  - (EstMv_.V.y * EstGv_.V.y + EstMv_.V.z * EstGv_.V.z) * invG * EstGv_.V.x ) ;//+ MAG_DECLINIATION;
#endif


    est_g_b_tmp = est_g_b_;
 80109d2:	ab03      	add	r3, sp, #12
 80109d4:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 80109d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80109da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    est_m_b_tmp = est_m_b_;
 80109de:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80109e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80109e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}

    if ( valid_acc == 1 && cnt == 0)
 80109e8:	b317      	cbz	r7, 8010a30 <_ZN17ComplementaryAHRS10estimationEv+0x128>
 80109ea:	4b61      	ldr	r3, [pc, #388]	; (8010b70 <_ZN17ComplementaryAHRS10estimationEv+0x268>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	b9fb      	cbnz	r3, 8010a30 <_ZN17ComplementaryAHRS10estimationEv+0x128>
      est_g_b_ = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_b_) * INV_GYR_CMPF_FACTOR;
 80109f0:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8010b74 <_ZN17ComplementaryAHRS10estimationEv+0x26c>
 80109f4:	a803      	add	r0, sp, #12
 80109f6:	f002 febd 	bl	8013774 <_ZNK7Vector3IfEmlEf>
 80109fa:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
 80109fe:	edcd 0a16 	vstr	s1, [sp, #88]	; 0x58
 8010a02:	ed8d 1a17 	vstr	s2, [sp, #92]	; 0x5c
 8010a06:	4649      	mov	r1, r9
 8010a08:	a815      	add	r0, sp, #84	; 0x54
 8010a0a:	f002 fef3 	bl	80137f4 <_ZNK7Vector3IfEplERKS0_>
 8010a0e:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8010a12:	edcd 0a13 	vstr	s1, [sp, #76]	; 0x4c
 8010a16:	ed8d 1a14 	vstr	s2, [sp, #80]	; 0x50
 8010a1a:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8010b78 <_ZN17ComplementaryAHRS10estimationEv+0x270>
 8010a1e:	a812      	add	r0, sp, #72	; 0x48
 8010a20:	f002 fea8 	bl	8013774 <_ZNK7Vector3IfEmlEf>
 8010a24:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 8010a28:	edc4 0a2d 	vstr	s1, [r4, #180]	; 0xb4
 8010a2c:	ed84 1a2e 	vstr	s2, [r4, #184]	; 0xb8
    est_m_b_ = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_b_) * INV_GYR_CMPFM_FACTOR;
 8010a30:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8010b7c <_ZN17ComplementaryAHRS10estimationEv+0x274>
 8010a34:	4668      	mov	r0, sp
 8010a36:	f002 fe9d 	bl	8013774 <_ZNK7Vector3IfEmlEf>
 8010a3a:	ed8d 0a1b 	vstr	s0, [sp, #108]	; 0x6c
 8010a3e:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 8010a42:	ed8d 1a1d 	vstr	s2, [sp, #116]	; 0x74
 8010a46:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8010a4a:	a81b      	add	r0, sp, #108	; 0x6c
 8010a4c:	f002 fed2 	bl	80137f4 <_ZNK7Vector3IfEplERKS0_>
 8010a50:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 8010a54:	edcd 0a19 	vstr	s1, [sp, #100]	; 0x64
 8010a58:	ed8d 1a1a 	vstr	s2, [sp, #104]	; 0x68
 8010a5c:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8010b80 <_ZN17ComplementaryAHRS10estimationEv+0x278>
 8010a60:	a818      	add	r0, sp, #96	; 0x60
 8010a62:	f002 fe87 	bl	8013774 <_ZNK7Vector3IfEmlEf>
 8010a66:	ed84 0a2f 	vstr	s0, [r4, #188]	; 0xbc
 8010a6a:	edc4 0a30 	vstr	s1, [r4, #192]	; 0xc0
 8010a6e:	ed84 1a31 	vstr	s2, [r4, #196]	; 0xc4

    est_g_v_ = r_ * est_g_b_;
 8010a72:	f104 084c 	add.w	r8, r4, #76	; 0x4c
 8010a76:	4631      	mov	r1, r6
 8010a78:	4640      	mov	r0, r8
 8010a7a:	f003 f80b 	bl	8013a94 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8010a7e:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
 8010a82:	edc4 0a27 	vstr	s1, [r4, #156]	; 0x9c
 8010a86:	ed84 1a28 	vstr	s2, [r4, #160]	; 0xa0
    est_m_v_ = r_ * est_m_b_;
 8010a8a:	4629      	mov	r1, r5
 8010a8c:	4640      	mov	r0, r8
 8010a8e:	f003 f801 	bl	8013a94 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8010a92:	ed84 0a29 	vstr	s0, [r4, #164]	; 0xa4
 8010a96:	edc4 0a2a 	vstr	s1, [r4, #168]	; 0xa8
 8010a9a:	ed84 1a2b 	vstr	s2, [r4, #172]	; 0xac

    // Attitude of the estimated vector
    float sq_g_x_sq_g_z = est_g_v_.x * est_g_v_.x + est_g_v_.z * est_g_v_.z;
 8010a9e:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8010aa2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010aa6:	ed94 8a28 	vldr	s16, [r4, #160]	; 0xa0
 8010aaa:	ee28 8a08 	vmul.f32	s16, s16, s16
 8010aae:	ee70 7a08 	vadd.f32	s15, s0, s16
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
 8010ab2:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
 8010ab6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010aba:	ee38 8a00 	vadd.f32	s16, s16, s0
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);
 8010abe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010ac2:	f003 f865 	bl	8013b90 <_Z8inv_sqrtf>
 8010ac6:	eef0 8a40 	vmov.f32	s17, s0

    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
 8010aca:	edd4 0a28 	vldr	s1, [r4, #160]	; 0xa0
 8010ace:	ed94 0a27 	vldr	s0, [r4, #156]	; 0x9c
 8010ad2:	f004 fe7b 	bl	80157cc <atan2f>
 8010ad6:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
 8010ada:	ed94 9a26 	vldr	s18, [r4, #152]	; 0x98
 8010ade:	eeb0 0a48 	vmov.f32	s0, s16
 8010ae2:	f003 f855 	bl	8013b90 <_Z8inv_sqrtf>
 8010ae6:	ee68 0a00 	vmul.f32	s1, s16, s0
 8010aea:	eeb1 0a49 	vneg.f32	s0, s18
 8010aee:	f004 fe6d 	bl	80157cc <atan2f>
 8010af2:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8010af6:	ed94 7a2b 	vldr	s14, [r4, #172]	; 0xac
 8010afa:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8010afe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8010b02:	ed94 6a2a 	vldr	s12, [r4, #168]	; 0xa8
 8010b06:	edd4 0a28 	vldr	s1, [r4, #160]	; 0xa0
 8010b0a:	ee66 5a20 	vmul.f32	s11, s12, s1
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8010b0e:	edd4 6a29 	vldr	s13, [r4, #164]	; 0xa4
 8010b12:	ee68 6aa6 	vmul.f32	s13, s17, s13
 8010b16:	ee28 8a26 	vmul.f32	s16, s16, s13
 8010b1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010b1e:	ee67 0a20 	vmul.f32	s1, s14, s1
 8010b22:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8010b26:	ee68 8aa0 	vmul.f32	s17, s17, s1
 8010b2a:	edd4 0a26 	vldr	s1, [r4, #152]	; 0x98
 8010b2e:	ee68 0aa0 	vmul.f32	s1, s17, s1
    float sq_g_y_sq_g_z = est_g_v_.y * est_g_v_.y + est_g_v_.z * est_g_v_.z;
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_v_.y * est_g_v_.y);

    rpy_.x = atan2f(est_g_v_.y , est_g_v_.z);
    rpy_.y = atan2f(-est_g_v_.x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
    rpy_.z = atan2f( est_m_v_.z * est_g_v_.y - est_m_v_.y * est_g_v_.z,
 8010b32:	ee78 0a60 	vsub.f32	s1, s16, s1
 8010b36:	ee30 0a65 	vsub.f32	s0, s0, s11
 8010b3a:	f004 fe47 	bl	80157cc <atan2f>
                      est_m_v_.x * invG * sq_g_y_sq_g_z  - (est_m_v_.y * est_g_v_.y + est_m_v_.z * est_g_v_.z) * invG * est_g_v_.x ) ;//+ MAG_DECLINIATION;
 8010b3e:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
     //********************************************************************************:
     //** refrence1: https://sites.google.com/site/myimuestimationexperience/sensors/magnetometer
     //** refrence2: http://uav.xenocross.net/hdg.html
     //********************************************************************************
    /* update */
    if(valid_acc) cnt++;
 8010b42:	b11f      	cbz	r7, 8010b4c <_ZN17ComplementaryAHRS10estimationEv+0x244>
 8010b44:	4a0a      	ldr	r2, [pc, #40]	; (8010b70 <_ZN17ComplementaryAHRS10estimationEv+0x268>)
 8010b46:	6813      	ldr	r3, [r2, #0]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	6013      	str	r3, [r2, #0]
    if(cnt == PRESCLAER_ACC) cnt = 0;
 8010b4c:	4b08      	ldr	r3, [pc, #32]	; (8010b70 <_ZN17ComplementaryAHRS10estimationEv+0x268>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b03      	cmp	r3, #3
 8010b52:	d102      	bne.n	8010b5a <_ZN17ComplementaryAHRS10estimationEv+0x252>
 8010b54:	2200      	movs	r2, #0
 8010b56:	4b06      	ldr	r3, [pc, #24]	; (8010b70 <_ZN17ComplementaryAHRS10estimationEv+0x268>)
 8010b58:	601a      	str	r2, [r3, #0]
  }
 8010b5a:	b01e      	add	sp, #120	; 0x78
 8010b5c:	ecbd 8b04 	vpop	{d8-d9}
 8010b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b64:	3a955b47 	.word	0x3a955b47
 8010b68:	42900000 	.word	0x42900000
 8010b6c:	43050000 	.word	0x43050000
 8010b70:	20003efc 	.word	0x20003efc
 8010b74:	44160000 	.word	0x44160000
 8010b78:	3ada1700 	.word	0x3ada1700
 8010b7c:	437a0000 	.word	0x437a0000
 8010b80:	3b828cc0 	.word	0x3b828cc0

08010b84 <_Z41__static_initialization_and_destruction_0ii>:

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 2, 0);
}
 8010b84:	2801      	cmp	r0, #1
 8010b86:	f040 815e 	bne.w	8010e46 <_Z41__static_initialization_and_destruction_0ii+0x2c2>
 8010b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b8e:	4299      	cmp	r1, r3
 8010b90:	f040 8159 	bne.w	8010e46 <_Z41__static_initialization_and_destruction_0ii+0x2c2>
 8010b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8010b98:	4dab      	ldr	r5, [pc, #684]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010b9a:	2400      	movs	r4, #0
 8010b9c:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 8010ba0:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
 8010ba4:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8
namespace encoder
{
  class ENCODER_ : public SENSOR_<Enctype>  //the data is uint16_t
  {
  public:
    ENCODER_(){};
 8010ba8:	f247 5a30 	movw	sl, #30000	; 0x7530
 8010bac:	f8a5 a0cc 	strh.w	sl, [r5, #204]	; 0xcc
 8010bb0:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8010e80 <_Z41__static_initialization_and_destruction_0ii+0x2fc>
 8010bb4:	f8c5 90d0 	str.w	r9, [r5, #208]	; 0xd0
 8010bb8:	f8c5 40d4 	str.w	r4, [r5, #212]	; 0xd4
 8010bbc:	f8c5 40d8 	str.w	r4, [r5, #216]	; 0xd8
 8010bc0:	f8c5 40dc 	str.w	r4, [r5, #220]	; 0xdc
 8010bc4:	f8c5 40e0 	str.w	r4, [r5, #224]	; 0xe0
 8010bc8:	f8c5 40e4 	str.w	r4, [r5, #228]	; 0xe4
 8010bcc:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
 8010bd0:	2600      	movs	r6, #0
 8010bd2:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
 8010bd6:	f8c5 60f0 	str.w	r6, [r5, #240]	; 0xf0
/* State Estimate, including attitude, altitude and pos */
#if ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG
#include "state_estimate/state_estimate.h"
#endif
/* encoder related */
encoder::ENCODER_ Enc_handle_left;
 8010bda:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8010e58 <_Z41__static_initialization_and_destruction_0ii+0x2d4>
 8010bde:	4f9b      	ldr	r7, [pc, #620]	; (8010e4c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8010be0:	4642      	mov	r2, r8
 8010be2:	4639      	mov	r1, r7
 8010be4:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
 8010be8:	f003 fd7a 	bl	80146e0 <__aeabi_atexit>
 8010bec:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
 8010bf0:	f8c5 40f8 	str.w	r4, [r5, #248]	; 0xf8
 8010bf4:	f8c5 40fc 	str.w	r4, [r5, #252]	; 0xfc
 8010bf8:	f8a5 a100 	strh.w	sl, [r5, #256]	; 0x100
 8010bfc:	f8c5 9104 	str.w	r9, [r5, #260]	; 0x104
 8010c00:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
 8010c04:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
 8010c08:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
 8010c0c:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
 8010c10:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
 8010c14:	f8c5 411c 	str.w	r4, [r5, #284]	; 0x11c
 8010c18:	f8c5 6120 	str.w	r6, [r5, #288]	; 0x120
 8010c1c:	f8c5 6124 	str.w	r6, [r5, #292]	; 0x124
encoder::ENCODER_ Enc_handle_right;
 8010c20:	4642      	mov	r2, r8
 8010c22:	4639      	mov	r1, r7
 8010c24:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8010c28:	f003 fd5a 	bl	80146e0 <__aeabi_atexit>

    /*
     * Setup Functions
     */
  public:
    NodeHandle_() : configured_(false) {
 8010c2c:	4b88      	ldr	r3, [pc, #544]	; (8010e50 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8010c2e:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
public:
  typedef UART_HandleTypeDef serial_class;


  STMF7Hardware(){ // hard coding
    baud_ = 921600;
 8010c32:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8010c36:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
 8010c3a:	f885 43f8 	strb.w	r4, [r5, #1016]	; 0x3f8
      char* * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8010c3e:	4b85      	ldr	r3, [pc, #532]	; (8010e54 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8010c40:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
 8010c44:	f885 4410 	strb.w	r4, [r5, #1040]	; 0x410
 8010c48:	f8c5 4418 	str.w	r4, [r5, #1048]	; 0x418
 8010c4c:	f885 441c 	strb.w	r4, [r5, #1052]	; 0x41c
 8010c50:	f8c5 4424 	str.w	r4, [r5, #1060]	; 0x424
 8010c54:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
 8010c58:	f8c5 4430 	str.w	r4, [r5, #1072]	; 0x430

      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8010c5c:	4623      	mov	r3, r4
 8010c5e:	2b13      	cmp	r3, #19
 8010c60:	d809      	bhi.n	8010c76 <_Z41__static_initialization_and_destruction_0ii+0xf2>
        publishers[i] = 0;
 8010c62:	f103 0186 	add.w	r1, r3, #134	; 0x86
 8010c66:	4a78      	ldr	r2, [pc, #480]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010c68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
     * Setup Functions
     */
  public:
    NodeHandle_() : configured_(false) {

      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8010c72:	3301      	adds	r3, #1
 8010c74:	e7f3      	b.n	8010c5e <_Z41__static_initialization_and_destruction_0ii+0xda>
 8010c76:	2300      	movs	r3, #0
        publishers[i] = 0;

      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8010c78:	2b13      	cmp	r3, #19
 8010c7a:	d809      	bhi.n	8010c90 <_Z41__static_initialization_and_destruction_0ii+0x10c>
        subscribers[i] = 0;
 8010c7c:	f103 019a 	add.w	r1, r3, #154	; 0x9a
 8010c80:	4a71      	ldr	r2, [pc, #452]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010c82:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010c86:	2100      	movs	r1, #0
 8010c88:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
    NodeHandle_() : configured_(false) {

      for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
        publishers[i] = 0;

      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	e7f3      	b.n	8010c78 <_Z41__static_initialization_and_destruction_0ii+0xf4>
 8010c90:	2300      	movs	r3, #0
        subscribers[i] = 0;

      for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010c92:	2bfe      	cmp	r3, #254	; 0xfe
 8010c94:	d806      	bhi.n	8010ca4 <_Z41__static_initialization_and_destruction_0ii+0x120>
        message_in[i] = 0;
 8010c96:	4a6c      	ldr	r2, [pc, #432]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010c98:	441a      	add	r2, r3
 8010c9a:	2100      	movs	r1, #0
 8010c9c:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
        publishers[i] = 0;

      for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
        subscribers[i] = 0;

      for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	e7f6      	b.n	8010c92 <_Z41__static_initialization_and_destruction_0ii+0x10e>
 8010ca4:	2300      	movs	r3, #0
        message_in[i] = 0;

      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010ca6:	2bfe      	cmp	r3, #254	; 0xfe
 8010ca8:	d806      	bhi.n	8010cb8 <_Z41__static_initialization_and_destruction_0ii+0x134>
        message_out[i] = 0;
 8010caa:	4a67      	ldr	r2, [pc, #412]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010cac:	441a      	add	r2, r3
 8010cae:	2100      	movs	r1, #0
 8010cb0:	f882 1243 	strb.w	r1, [r2, #579]	; 0x243
        subscribers[i] = 0;

      for(unsigned int i=0; i< INPUT_SIZE; i++)
        message_in[i] = 0;

      for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	e7f6      	b.n	8010ca6 <_Z41__static_initialization_and_destruction_0ii+0x122>
 8010cb8:	4c63      	ldr	r4, [pc, #396]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010cba:	2500      	movs	r5, #0
 8010cbc:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
 8010cc0:	f8c4 5438 	str.w	r5, [r4, #1080]	; 0x438
 8010cc4:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
 8010cc8:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 8010ccc:	f8c4 5444 	str.w	r5, [r4, #1092]	; 0x444
 8010cd0:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
public:
    T        x, y, z;

    // trivial ctor
    Vector3<T>() {
        x = y = z = 0;
 8010cd4:	f204 4034 	addw	r0, r4, #1076	; 0x434
 8010cd8:	2300      	movs	r3, #0
 8010cda:	6203      	str	r3, [r0, #32]
 8010cdc:	61c3      	str	r3, [r0, #28]
 8010cde:	6183      	str	r3, [r0, #24]
 8010ce0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8010ce2:	6283      	str	r3, [r0, #40]	; 0x28
 8010ce4:	6243      	str	r3, [r0, #36]	; 0x24
 8010ce6:	6483      	str	r3, [r0, #72]	; 0x48
 8010ce8:	6443      	str	r3, [r0, #68]	; 0x44
 8010cea:	6403      	str	r3, [r0, #64]	; 0x40
 8010cec:	6543      	str	r3, [r0, #84]	; 0x54
 8010cee:	6503      	str	r3, [r0, #80]	; 0x50
 8010cf0:	64c3      	str	r3, [r0, #76]	; 0x4c
 8010cf2:	6603      	str	r3, [r0, #96]	; 0x60
 8010cf4:	65c3      	str	r3, [r0, #92]	; 0x5c
 8010cf6:	6583      	str	r3, [r0, #88]	; 0x58
 8010cf8:	66c3      	str	r3, [r0, #108]	; 0x6c
 8010cfa:	6683      	str	r3, [r0, #104]	; 0x68
 8010cfc:	6643      	str	r3, [r0, #100]	; 0x64
 8010cfe:	6783      	str	r3, [r0, #120]	; 0x78
 8010d00:	6743      	str	r3, [r0, #116]	; 0x74
 8010d02:	6703      	str	r3, [r0, #112]	; 0x70
 8010d04:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8010d08:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8010d0c:	67c3      	str	r3, [r0, #124]	; 0x7c
 8010d0e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8010d12:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8010d16:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8010d1a:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 8010d1e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8010d22:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8010d26:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8010d2a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8010d2e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8010d32:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8010d36:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 8010d3a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
 8010d3e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
 8010d42:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 8010d46:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8010d4a:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8010d4e:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
 8010d52:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 8010d56:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
 8010d5a:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8010d5e:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8010d62:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
 8010d66:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
 8010d6a:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
 8010d6e:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
 8010d72:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
 8010d76:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
 8010d7a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8010d7e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8010d82:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
//ros node  ugvnode
static RosNode *ugvnode;

/* sensors */
#if IMU_FLAG
IMU imu_;
 8010d86:	4a34      	ldr	r2, [pc, #208]	; (8010e58 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8010d88:	4934      	ldr	r1, [pc, #208]	; (8010e5c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8010d8a:	f003 fca9 	bl	80146e0 <__aeabi_atexit>
    Imu():
      stamp(),
      acc_data(),
      gyro_data(),
      mag_data(),
      angles()
 8010d8e:	4b34      	ldr	r3, [pc, #208]	; (8010e60 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8010d90:	61a3      	str	r3, [r4, #24]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 8010d92:	61e5      	str	r5, [r4, #28]
 8010d94:	6225      	str	r5, [r4, #32]
 8010d96:	2302      	movs	r3, #2
 8010d98:	3424      	adds	r4, #36	; 0x24
 8010d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9e:	d004      	beq.n	8010daa <_Z41__static_initialization_and_destruction_0ii+0x226>
 8010da0:	2200      	movs	r2, #0
 8010da2:	f844 2b04 	str.w	r2, [r4], #4
 8010da6:	3b01      	subs	r3, #1
 8010da8:	e7f7      	b.n	8010d9a <_Z41__static_initialization_and_destruction_0ii+0x216>
 8010daa:	2302      	movs	r3, #2
 8010dac:	4a2d      	ldr	r2, [pc, #180]	; (8010e64 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8010dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010db2:	d004      	beq.n	8010dbe <_Z41__static_initialization_and_destruction_0ii+0x23a>
 8010db4:	2100      	movs	r1, #0
 8010db6:	f842 1b04 	str.w	r1, [r2], #4
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	e7f7      	b.n	8010dae <_Z41__static_initialization_and_destruction_0ii+0x22a>
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	4a29      	ldr	r2, [pc, #164]	; (8010e68 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc6:	d004      	beq.n	8010dd2 <_Z41__static_initialization_and_destruction_0ii+0x24e>
 8010dc8:	2100      	movs	r1, #0
 8010dca:	f842 1b04 	str.w	r1, [r2], #4
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	e7f7      	b.n	8010dc2 <_Z41__static_initialization_and_destruction_0ii+0x23e>
 8010dd2:	2302      	movs	r3, #2
 8010dd4:	4a25      	ldr	r2, [pc, #148]	; (8010e6c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8010dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dda:	d004      	beq.n	8010de6 <_Z41__static_initialization_and_destruction_0ii+0x262>
 8010ddc:	2100      	movs	r1, #0
 8010dde:	f842 1b04 	str.w	r1, [r2], #4
 8010de2:	3b01      	subs	r3, #1
 8010de4:	e7f7      	b.n	8010dd6 <_Z41__static_initialization_and_destruction_0ii+0x252>
#include <stdint.h>

namespace ros {

/* Base Message Type */
class Msg
 8010de6:	4b18      	ldr	r3, [pc, #96]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)

    Barometer():
      stamp(),
      altitude(0),
      pressure(0),
      temperature(0)
 8010de8:	4a21      	ldr	r2, [pc, #132]	; (8010e70 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010dea:	66da      	str	r2, [r3, #108]	; 0x6c
 8010dec:	2200      	movs	r2, #0
 8010dee:	671a      	str	r2, [r3, #112]	; 0x70
 8010df0:	675a      	str	r2, [r3, #116]	; 0x74
 8010df2:	2100      	movs	r1, #0
 8010df4:	6799      	str	r1, [r3, #120]	; 0x78
 8010df6:	67d9      	str	r1, [r3, #124]	; 0x7c
 8010df8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

    Gps():
      stamp(),
      location(),
      velocity(),
      sat_num(0)
 8010dfc:	491d      	ldr	r1, [pc, #116]	; (8010e74 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8010dfe:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 8010e02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8010e06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	33a0      	adds	r3, #160	; 0xa0
 8010e0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e12:	d004      	beq.n	8010e1e <_Z41__static_initialization_and_destruction_0ii+0x29a>
 8010e14:	2100      	movs	r1, #0
 8010e16:	f843 1b04 	str.w	r1, [r3], #4
 8010e1a:	3a01      	subs	r2, #1
 8010e1c:	e7f7      	b.n	8010e0e <_Z41__static_initialization_and_destruction_0ii+0x28a>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	4a15      	ldr	r2, [pc, #84]	; (8010e78 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8010e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e26:	d004      	beq.n	8010e32 <_Z41__static_initialization_and_destruction_0ii+0x2ae>
 8010e28:	2100      	movs	r1, #0
 8010e2a:	f842 1b04 	str.w	r1, [r2], #4
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	e7f7      	b.n	8010e22 <_Z41__static_initialization_and_destruction_0ii+0x29e>
 8010e32:	4805      	ldr	r0, [pc, #20]	; (8010e48 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010e34:	2300      	movs	r3, #0
 8010e36:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
#if GPS_FLAG
GPS gps_;
#endif

#if ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG
StateEstimate estimator_;
 8010e3a:	4a07      	ldr	r2, [pc, #28]	; (8010e58 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8010e3c:	490f      	ldr	r1, [pc, #60]	; (8010e7c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8010e3e:	f003 fc4f 	bl	80146e0 <__aeabi_atexit>
 8010e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e46:	4770      	bx	lr
 8010e48:	20000578 	.word	0x20000578
 8010e4c:	080108ad 	.word	0x080108ad
 8010e50:	0801b164 	.word	0x0801b164
 8010e54:	0801b104 	.word	0x0801b104
 8010e58:	20000000 	.word	0x20000000
 8010e5c:	080108cd 	.word	0x080108cd
 8010e60:	0801b190 	.word	0x0801b190
 8010e64:	200005a8 	.word	0x200005a8
 8010e68:	200005b4 	.word	0x200005b4
 8010e6c:	200005c0 	.word	0x200005c0
 8010e70:	0801b1e4 	.word	0x0801b1e4
 8010e74:	0801b1fc 	.word	0x0801b1fc
 8010e78:	20000620 	.word	0x20000620
 8010e7c:	0800fc2d 	.word	0x0800fc2d
 8010e80:	3903126f 	.word	0x3903126f

08010e84 <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE8callbackEPh>:
      {
        //std::binder1st t  = std::bind1st(std::mem_fun1_t())
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 8010e84:	b510      	push	{r4, lr}
 8010e86:	460b      	mov	r3, r1
        msg.deserialize(data);
 8010e88:	f100 010c 	add.w	r1, r0, #12
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.base = 0;
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010e8c:	781a      	ldrb	r2, [r3, #0]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010e8e:	785c      	ldrb	r4, [r3, #1]
 8010e90:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010e94:	789c      	ldrb	r4, [r3, #2]
 8010e96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010e9a:	78dc      	ldrb	r4, [r3, #3]
      this->roll = u_roll.real;
 8010e9c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8010ea0:	604a      	str	r2, [r1, #4]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.base = 0;
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010ea2:	791a      	ldrb	r2, [r3, #4]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010ea4:	795c      	ldrb	r4, [r3, #5]
 8010ea6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010eaa:	799c      	ldrb	r4, [r3, #6]
 8010eac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010eb0:	79dc      	ldrb	r4, [r3, #7]
      this->pitch = u_pitch.real;
 8010eb2:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8010eb6:	608a      	str	r2, [r1, #8]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.base = 0;
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010eb8:	7a1a      	ldrb	r2, [r3, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010eba:	7a5c      	ldrb	r4, [r3, #9]
 8010ebc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010ec0:	7a9c      	ldrb	r4, [r3, #10]
 8010ec2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010ec6:	7adc      	ldrb	r4, [r3, #11]
      this->yaw = u_yaw.real;
 8010ec8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8010ecc:	60ca      	str	r2, [r1, #12]
      offset += sizeof(this->yaw);
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
 8010ece:	7b1b      	ldrb	r3, [r3, #12]
 8010ed0:	740b      	strb	r3, [r1, #16]
        this->fun_obj_(obj_, msg);
 8010ed2:	6a02      	ldr	r2, [r0, #32]

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }
 8010ed4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010ed6:	f013 0f01 	tst.w	r3, #1
 8010eda:	d101      	bne.n	8010ee0 <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE8callbackEPh+0x5c>
 8010edc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010ede:	e003      	b.n	8010ee8 <_ZN3ros11Subscriber2IN17aerial_robot_base11DesireCoordE16AttitudeEstimateE8callbackEPh+0x64>
 8010ee0:	105c      	asrs	r4, r3, #1
 8010ee2:	5914      	ldr	r4, [r2, r4]
 8010ee4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010ee6:	5824      	ldr	r4, [r4, r0]
 8010ee8:	eb02 0063 	add.w	r0, r2, r3, asr #1
 8010eec:	47a0      	blx	r4
 8010eee:	bd10      	pop	{r4, pc}

08010ef0 <_ZNK13geometry_msgs5Twist9serializeEPh>:
      linear(),
      angular()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8010ef0:	b430      	push	{r4, r5}
 8010ef2:	6902      	ldr	r2, [r0, #16]
 8010ef4:	6943      	ldr	r3, [r0, #20]
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8010ef6:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8010ef8:	0a15      	lsrs	r5, r2, #8
 8010efa:	704d      	strb	r5, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8010efc:	0c15      	lsrs	r5, r2, #16
 8010efe:	708d      	strb	r5, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8010f00:	0e12      	lsrs	r2, r2, #24
 8010f02:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8010f04:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8010f06:	0a1a      	lsrs	r2, r3, #8
 8010f08:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8010f0a:	0c1a      	lsrs	r2, r3, #16
 8010f0c:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8010f0e:	0e1b      	lsrs	r3, r3, #24
 8010f10:	71cb      	strb	r3, [r1, #7]
 8010f12:	6982      	ldr	r2, [r0, #24]
 8010f14:	69c3      	ldr	r3, [r0, #28]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8010f16:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8010f18:	0a15      	lsrs	r5, r2, #8
 8010f1a:	724d      	strb	r5, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8010f1c:	0c15      	lsrs	r5, r2, #16
 8010f1e:	728d      	strb	r5, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8010f20:	0e12      	lsrs	r2, r2, #24
 8010f22:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8010f24:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8010f26:	0a1a      	lsrs	r2, r3, #8
 8010f28:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8010f2a:	0c1a      	lsrs	r2, r3, #16
 8010f2c:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8010f2e:	0e1b      	lsrs	r3, r3, #24
 8010f30:	73cb      	strb	r3, [r1, #15]
      offset += sizeof(this->y);
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8010f32:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8010f36:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8010f38:	0a14      	lsrs	r4, r2, #8
 8010f3a:	744c      	strb	r4, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8010f3c:	0c14      	lsrs	r4, r2, #16
 8010f3e:	748c      	strb	r4, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8010f40:	0e12      	lsrs	r2, r2, #24
 8010f42:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8010f44:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8010f46:	0a1a      	lsrs	r2, r3, #8
 8010f48:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8010f4a:	0c1a      	lsrs	r2, r3, #16
 8010f4c:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8010f4e:	0e1b      	lsrs	r3, r3, #24
 8010f50:	75cb      	strb	r3, [r1, #23]
 8010f52:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010f54:	6b43      	ldr	r3, [r0, #52]	; 0x34
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8010f56:	760a      	strb	r2, [r1, #24]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8010f58:	0a14      	lsrs	r4, r2, #8
 8010f5a:	764c      	strb	r4, [r1, #25]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8010f5c:	0c14      	lsrs	r4, r2, #16
 8010f5e:	768c      	strb	r4, [r1, #26]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8010f60:	0e12      	lsrs	r2, r2, #24
 8010f62:	76ca      	strb	r2, [r1, #27]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8010f64:	770b      	strb	r3, [r1, #28]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8010f66:	0a1a      	lsrs	r2, r3, #8
 8010f68:	774a      	strb	r2, [r1, #29]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8010f6a:	0c1a      	lsrs	r2, r3, #16
 8010f6c:	778a      	strb	r2, [r1, #30]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8010f6e:	0e1b      	lsrs	r3, r3, #24
 8010f70:	77cb      	strb	r3, [r1, #31]
 8010f72:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010f74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8010f76:	f881 2020 	strb.w	r2, [r1, #32]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8010f7a:	0a14      	lsrs	r4, r2, #8
 8010f7c:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8010f80:	0c14      	lsrs	r4, r2, #16
 8010f82:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8010f86:	0e12      	lsrs	r2, r2, #24
 8010f88:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8010f8c:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8010f90:	0a1a      	lsrs	r2, r3, #8
 8010f92:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8010f96:	0c1a      	lsrs	r2, r3, #16
 8010f98:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8010f9c:	0e1b      	lsrs	r3, r3, #24
 8010f9e:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
      offset += sizeof(this->y);
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8010fa2:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8010fa6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8010faa:	0a10      	lsrs	r0, r2, #8
 8010fac:	f881 0029 	strb.w	r0, [r1, #41]	; 0x29
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8010fb0:	0c10      	lsrs	r0, r2, #16
 8010fb2:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8010fb6:	0e12      	lsrs	r2, r2, #24
 8010fb8:	f881 202b 	strb.w	r2, [r1, #43]	; 0x2b
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8010fbc:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8010fc0:	0a1a      	lsrs	r2, r3, #8
 8010fc2:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8010fc6:	0c1a      	lsrs	r2, r3, #16
 8010fc8:	f881 202e 	strb.w	r2, [r1, #46]	; 0x2e
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8010fcc:	0e1b      	lsrs	r3, r3, #24
 8010fce:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    {
      int offset = 0;
      offset += this->linear.serialize(outbuffer + offset);
      offset += this->angular.serialize(outbuffer + offset);
      return offset;
    }
 8010fd2:	2030      	movs	r0, #48	; 0x30
 8010fd4:	bc30      	pop	{r4, r5}
 8010fd6:	4770      	bx	lr

08010fd8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8010fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      int offset = 0;
      offset += this->linear.deserialize(inbuffer + offset);
 8010fdc:	f100 0e08 	add.w	lr, r0, #8
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8010fe0:	780c      	ldrb	r4, [r1, #0]
 8010fe2:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8010fe4:	784e      	ldrb	r6, [r1, #1]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	0232      	lsls	r2, r6, #8
 8010fea:	4314      	orrs	r4, r2
 8010fec:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8010fee:	788e      	ldrb	r6, [r1, #2]
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	0432      	lsls	r2, r6, #16
 8010ff4:	4314      	orrs	r4, r2
 8010ff6:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8010ff8:	78ce      	ldrb	r6, [r1, #3]
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	0632      	lsls	r2, r6, #24
 8010ffe:	4314      	orrs	r4, r2
 8011000:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8011002:	2200      	movs	r2, #0
 8011004:	790b      	ldrb	r3, [r1, #4]
 8011006:	4314      	orrs	r4, r2
 8011008:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 801100a:	f891 8005 	ldrb.w	r8, [r1, #5]
 801100e:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8011012:	ea44 0802 	orr.w	r8, r4, r2
 8011016:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801101a:	798e      	ldrb	r6, [r1, #6]
 801101c:	0435      	lsls	r5, r6, #16
 801101e:	ea48 0802 	orr.w	r8, r8, r2
 8011022:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8011026:	79ce      	ldrb	r6, [r1, #7]
 8011028:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 801102a:	ea42 0408 	orr.w	r4, r2, r8
 801102e:	ea45 0509 	orr.w	r5, r5, r9
 8011032:	e9c0 4504 	strd	r4, r5, [r0, #16]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011036:	f891 8008 	ldrb.w	r8, [r1, #8]
 801103a:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801103e:	7a4e      	ldrb	r6, [r1, #9]
 8011040:	2500      	movs	r5, #0
 8011042:	0234      	lsls	r4, r6, #8
 8011044:	ea48 0804 	orr.w	r8, r8, r4
 8011048:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801104c:	7a8e      	ldrb	r6, [r1, #10]
 801104e:	2500      	movs	r5, #0
 8011050:	0434      	lsls	r4, r6, #16
 8011052:	ea48 0804 	orr.w	r8, r8, r4
 8011056:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801105a:	7ace      	ldrb	r6, [r1, #11]
 801105c:	2500      	movs	r5, #0
 801105e:	0634      	lsls	r4, r6, #24
 8011060:	ea48 0804 	orr.w	r8, r8, r4
 8011064:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8011068:	7b0f      	ldrb	r7, [r1, #12]
 801106a:	ea48 0802 	orr.w	r8, r8, r2
 801106e:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011072:	7b4e      	ldrb	r6, [r1, #13]
 8011074:	0235      	lsls	r5, r6, #8
 8011076:	ea48 0802 	orr.w	r8, r8, r2
 801107a:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801107e:	7b8e      	ldrb	r6, [r1, #14]
 8011080:	0435      	lsls	r5, r6, #16
 8011082:	ea48 0802 	orr.w	r8, r8, r2
 8011086:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801108a:	7bce      	ldrb	r6, [r1, #15]
 801108c:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 801108e:	ea42 0408 	orr.w	r4, r2, r8
 8011092:	ea45 0509 	orr.w	r5, r5, r9
 8011096:	e9c0 4506 	strd	r4, r5, [r0, #24]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801109a:	f891 8010 	ldrb.w	r8, [r1, #16]
 801109e:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80110a2:	7c4e      	ldrb	r6, [r1, #17]
 80110a4:	2500      	movs	r5, #0
 80110a6:	0234      	lsls	r4, r6, #8
 80110a8:	ea48 0804 	orr.w	r8, r8, r4
 80110ac:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80110b0:	7c8e      	ldrb	r6, [r1, #18]
 80110b2:	2500      	movs	r5, #0
 80110b4:	0434      	lsls	r4, r6, #16
 80110b6:	ea48 0804 	orr.w	r8, r8, r4
 80110ba:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80110be:	7cce      	ldrb	r6, [r1, #19]
 80110c0:	2500      	movs	r5, #0
 80110c2:	0634      	lsls	r4, r6, #24
 80110c4:	ea48 0804 	orr.w	r8, r8, r4
 80110c8:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80110cc:	7d0f      	ldrb	r7, [r1, #20]
 80110ce:	ea48 0802 	orr.w	r8, r8, r2
 80110d2:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80110d6:	7d4e      	ldrb	r6, [r1, #21]
 80110d8:	0235      	lsls	r5, r6, #8
 80110da:	ea48 0802 	orr.w	r8, r8, r2
 80110de:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80110e2:	7d8e      	ldrb	r6, [r1, #22]
 80110e4:	0435      	lsls	r5, r6, #16
 80110e6:	ea48 0802 	orr.w	r8, r8, r2
 80110ea:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80110ee:	7dce      	ldrb	r6, [r1, #23]
 80110f0:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 80110f2:	ea42 0408 	orr.w	r4, r2, r8
 80110f6:	ea45 0509 	orr.w	r5, r5, r9
 80110fa:	e9c0 4508 	strd	r4, r5, [r0, #32]
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80110fe:	7e0e      	ldrb	r6, [r1, #24]
 8011100:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011102:	f891 8019 	ldrb.w	r8, [r1, #25]
 8011106:	2500      	movs	r5, #0
 8011108:	ea4f 2408 	mov.w	r4, r8, lsl #8
 801110c:	4334      	orrs	r4, r6
 801110e:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011110:	f891 801a 	ldrb.w	r8, [r1, #26]
 8011114:	2700      	movs	r7, #0
 8011116:	ea4f 4608 	mov.w	r6, r8, lsl #16
 801111a:	4334      	orrs	r4, r6
 801111c:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801111e:	f891 801b 	ldrb.w	r8, [r1, #27]
 8011122:	2700      	movs	r7, #0
 8011124:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8011128:	4334      	orrs	r4, r6
 801112a:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 801112c:	7f0f      	ldrb	r7, [r1, #28]
 801112e:	4314      	orrs	r4, r2
 8011130:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011132:	f891 801d 	ldrb.w	r8, [r1, #29]
 8011136:	ea4f 2708 	mov.w	r7, r8, lsl #8
 801113a:	4314      	orrs	r4, r2
 801113c:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801113e:	f891 801e 	ldrb.w	r8, [r1, #30]
 8011142:	ea4f 4708 	mov.w	r7, r8, lsl #16
 8011146:	4314      	orrs	r4, r2
 8011148:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801114a:	f891 801f 	ldrb.w	r8, [r1, #31]
 801114e:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
 8011152:	4314      	orrs	r4, r2
 8011154:	433d      	orrs	r5, r7
 8011156:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801115a:	f891 6020 	ldrb.w	r6, [r1, #32]
 801115e:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011160:	f891 8021 	ldrb.w	r8, [r1, #33]	; 0x21
 8011164:	2500      	movs	r5, #0
 8011166:	ea4f 2408 	mov.w	r4, r8, lsl #8
 801116a:	4334      	orrs	r4, r6
 801116c:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801116e:	f891 8022 	ldrb.w	r8, [r1, #34]	; 0x22
 8011172:	2700      	movs	r7, #0
 8011174:	ea4f 4608 	mov.w	r6, r8, lsl #16
 8011178:	4334      	orrs	r4, r6
 801117a:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801117c:	f891 8023 	ldrb.w	r8, [r1, #35]	; 0x23
 8011180:	2700      	movs	r7, #0
 8011182:	ea4f 6608 	mov.w	r6, r8, lsl #24
 8011186:	4326      	orrs	r6, r4
 8011188:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 801118a:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
 801118e:	4316      	orrs	r6, r2
 8011190:	432f      	orrs	r7, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011192:	f891 8025 	ldrb.w	r8, [r1, #37]	; 0x25
 8011196:	ea4f 2508 	mov.w	r5, r8, lsl #8
 801119a:	4614      	mov	r4, r2
 801119c:	4334      	orrs	r4, r6
 801119e:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80111a0:	f891 8026 	ldrb.w	r8, [r1, #38]	; 0x26
 80111a4:	ea4f 4708 	mov.w	r7, r8, lsl #16
 80111a8:	4314      	orrs	r4, r2
 80111aa:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80111ac:	f891 8027 	ldrb.w	r8, [r1, #39]	; 0x27
 80111b0:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
 80111b4:	4314      	orrs	r4, r2
 80111b6:	433d      	orrs	r5, r7
 80111b8:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80111bc:	f891 6028 	ldrb.w	r6, [r1, #40]	; 0x28
 80111c0:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80111c2:	f891 8029 	ldrb.w	r8, [r1, #41]	; 0x29
 80111c6:	2500      	movs	r5, #0
 80111c8:	ea4f 2408 	mov.w	r4, r8, lsl #8
 80111cc:	4334      	orrs	r4, r6
 80111ce:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80111d0:	f891 802a 	ldrb.w	r8, [r1, #42]	; 0x2a
 80111d4:	2700      	movs	r7, #0
 80111d6:	ea4f 4608 	mov.w	r6, r8, lsl #16
 80111da:	4334      	orrs	r4, r6
 80111dc:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80111de:	f891 802b 	ldrb.w	r8, [r1, #43]	; 0x2b
 80111e2:	2700      	movs	r7, #0
 80111e4:	ea4f 6608 	mov.w	r6, r8, lsl #24
 80111e8:	4326      	orrs	r6, r4
 80111ea:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80111ec:	f891 502c 	ldrb.w	r5, [r1, #44]	; 0x2c
 80111f0:	4316      	orrs	r6, r2
 80111f2:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80111f4:	f891 802d 	ldrb.w	r8, [r1, #45]	; 0x2d
 80111f8:	ea4f 2508 	mov.w	r5, r8, lsl #8
 80111fc:	4316      	orrs	r6, r2
 80111fe:	432f      	orrs	r7, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011200:	f891 802e 	ldrb.w	r8, [r1, #46]	; 0x2e
 8011204:	ea4f 4508 	mov.w	r5, r8, lsl #16
 8011208:	4614      	mov	r4, r2
 801120a:	4334      	orrs	r4, r6
 801120c:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801120e:	f891 802f 	ldrb.w	r8, [r1, #47]	; 0x2f
 8011212:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 8011216:	4322      	orrs	r2, r4
 8011218:	ea45 0307 	orr.w	r3, r5, r7
 801121c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
      offset += this->angular.deserialize(inbuffer + offset);
     return offset;
    }
 8011220:	2030      	movs	r0, #48	; 0x30
 8011222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011226:	bf00      	nop

08011228 <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE8callbackEPh>:
      {
        //std::binder1st t  = std::bind1st(std::mem_fun1_t())
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 8011228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        msg.deserialize(data);
 801122c:	f100 0c10 	add.w	ip, r0, #16
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011230:	780c      	ldrb	r4, [r1, #0]
 8011232:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011234:	784e      	ldrb	r6, [r1, #1]
 8011236:	2300      	movs	r3, #0
 8011238:	0232      	lsls	r2, r6, #8
 801123a:	4322      	orrs	r2, r4
 801123c:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801123e:	788e      	ldrb	r6, [r1, #2]
 8011240:	2500      	movs	r5, #0
 8011242:	0434      	lsls	r4, r6, #16
 8011244:	4322      	orrs	r2, r4
 8011246:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8011248:	78ce      	ldrb	r6, [r1, #3]
 801124a:	2500      	movs	r5, #0
 801124c:	0634      	lsls	r4, r6, #24
 801124e:	4314      	orrs	r4, r2
 8011250:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8011252:	2200      	movs	r2, #0
 8011254:	790b      	ldrb	r3, [r1, #4]
 8011256:	4314      	orrs	r4, r2
 8011258:	431d      	orrs	r5, r3
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 801125a:	f891 8005 	ldrb.w	r8, [r1, #5]
 801125e:	ea4f 2708 	mov.w	r7, r8, lsl #8
 8011262:	ea44 0802 	orr.w	r8, r4, r2
 8011266:	ea45 0907 	orr.w	r9, r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 801126a:	798e      	ldrb	r6, [r1, #6]
 801126c:	0435      	lsls	r5, r6, #16
 801126e:	ea48 0802 	orr.w	r8, r8, r2
 8011272:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8011276:	79ce      	ldrb	r6, [r1, #7]
 8011278:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 801127a:	ea42 0408 	orr.w	r4, r2, r8
 801127e:	ea45 0509 	orr.w	r5, r5, r9
 8011282:	e9c0 4508 	strd	r4, r5, [r0, #32]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011286:	f891 8008 	ldrb.w	r8, [r1, #8]
 801128a:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801128e:	7a4e      	ldrb	r6, [r1, #9]
 8011290:	2500      	movs	r5, #0
 8011292:	0234      	lsls	r4, r6, #8
 8011294:	ea48 0804 	orr.w	r8, r8, r4
 8011298:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801129c:	7a8e      	ldrb	r6, [r1, #10]
 801129e:	2500      	movs	r5, #0
 80112a0:	0434      	lsls	r4, r6, #16
 80112a2:	ea48 0804 	orr.w	r8, r8, r4
 80112a6:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80112aa:	7ace      	ldrb	r6, [r1, #11]
 80112ac:	2500      	movs	r5, #0
 80112ae:	0634      	lsls	r4, r6, #24
 80112b0:	ea48 0804 	orr.w	r8, r8, r4
 80112b4:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80112b8:	7b0f      	ldrb	r7, [r1, #12]
 80112ba:	ea48 0802 	orr.w	r8, r8, r2
 80112be:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80112c2:	7b4e      	ldrb	r6, [r1, #13]
 80112c4:	0235      	lsls	r5, r6, #8
 80112c6:	ea48 0802 	orr.w	r8, r8, r2
 80112ca:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80112ce:	7b8e      	ldrb	r6, [r1, #14]
 80112d0:	0435      	lsls	r5, r6, #16
 80112d2:	ea48 0802 	orr.w	r8, r8, r2
 80112d6:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80112da:	7bce      	ldrb	r6, [r1, #15]
 80112dc:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 80112de:	ea42 0408 	orr.w	r4, r2, r8
 80112e2:	ea45 0509 	orr.w	r5, r5, r9
 80112e6:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80112ea:	f891 8010 	ldrb.w	r8, [r1, #16]
 80112ee:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80112f2:	7c4e      	ldrb	r6, [r1, #17]
 80112f4:	2500      	movs	r5, #0
 80112f6:	0234      	lsls	r4, r6, #8
 80112f8:	ea48 0804 	orr.w	r8, r8, r4
 80112fc:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011300:	7c8e      	ldrb	r6, [r1, #18]
 8011302:	2500      	movs	r5, #0
 8011304:	0434      	lsls	r4, r6, #16
 8011306:	ea48 0804 	orr.w	r8, r8, r4
 801130a:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801130e:	7cce      	ldrb	r6, [r1, #19]
 8011310:	2500      	movs	r5, #0
 8011312:	0634      	lsls	r4, r6, #24
 8011314:	ea48 0804 	orr.w	r8, r8, r4
 8011318:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 801131c:	7d0f      	ldrb	r7, [r1, #20]
 801131e:	ea48 0802 	orr.w	r8, r8, r2
 8011322:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8011326:	7d4e      	ldrb	r6, [r1, #21]
 8011328:	0235      	lsls	r5, r6, #8
 801132a:	ea48 0802 	orr.w	r8, r8, r2
 801132e:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011332:	7d8e      	ldrb	r6, [r1, #22]
 8011334:	0435      	lsls	r5, r6, #16
 8011336:	ea48 0802 	orr.w	r8, r8, r2
 801133a:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 801133e:	7dce      	ldrb	r6, [r1, #23]
 8011340:	0635      	lsls	r5, r6, #24
      this->z = u_z.real;
 8011342:	ea42 0408 	orr.w	r4, r2, r8
 8011346:	ea45 0509 	orr.w	r5, r5, r9
 801134a:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 801134e:	7e0e      	ldrb	r6, [r1, #24]
 8011350:	2700      	movs	r7, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011352:	f891 8019 	ldrb.w	r8, [r1, #25]
 8011356:	2500      	movs	r5, #0
 8011358:	ea4f 2408 	mov.w	r4, r8, lsl #8
 801135c:	ea46 0804 	orr.w	r8, r6, r4
 8011360:	ea47 0905 	orr.w	r9, r7, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011364:	7e8e      	ldrb	r6, [r1, #26]
 8011366:	2500      	movs	r5, #0
 8011368:	0434      	lsls	r4, r6, #16
 801136a:	ea48 0804 	orr.w	r8, r8, r4
 801136e:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8011372:	7ece      	ldrb	r6, [r1, #27]
 8011374:	2500      	movs	r5, #0
 8011376:	0634      	lsls	r4, r6, #24
 8011378:	ea48 0804 	orr.w	r8, r8, r4
 801137c:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8011380:	f891 b01c 	ldrb.w	fp, [r1, #28]
 8011384:	ea48 0802 	orr.w	r8, r8, r2
 8011388:	ea49 090b 	orr.w	r9, r9, fp
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 801138c:	7f4e      	ldrb	r6, [r1, #29]
 801138e:	0235      	lsls	r5, r6, #8
 8011390:	ea48 0802 	orr.w	r8, r8, r2
 8011394:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011398:	7f8e      	ldrb	r6, [r1, #30]
 801139a:	0435      	lsls	r5, r6, #16
 801139c:	ea48 0802 	orr.w	r8, r8, r2
 80113a0:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80113a4:	7fce      	ldrb	r6, [r1, #31]
 80113a6:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
 80113a8:	ea42 0408 	orr.w	r4, r2, r8
 80113ac:	ea45 0509 	orr.w	r5, r5, r9
 80113b0:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80113b4:	f891 8020 	ldrb.w	r8, [r1, #32]
 80113b8:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80113bc:	f891 6021 	ldrb.w	r6, [r1, #33]	; 0x21
 80113c0:	2500      	movs	r5, #0
 80113c2:	0234      	lsls	r4, r6, #8
 80113c4:	ea48 0804 	orr.w	r8, r8, r4
 80113c8:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80113cc:	f891 6022 	ldrb.w	r6, [r1, #34]	; 0x22
 80113d0:	2500      	movs	r5, #0
 80113d2:	0434      	lsls	r4, r6, #16
 80113d4:	ea48 0804 	orr.w	r8, r8, r4
 80113d8:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80113dc:	f891 6023 	ldrb.w	r6, [r1, #35]	; 0x23
 80113e0:	2500      	movs	r5, #0
 80113e2:	0634      	lsls	r4, r6, #24
 80113e4:	ea48 0804 	orr.w	r8, r8, r4
 80113e8:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80113ec:	f891 7024 	ldrb.w	r7, [r1, #36]	; 0x24
 80113f0:	ea48 0802 	orr.w	r8, r8, r2
 80113f4:	ea49 0907 	orr.w	r9, r9, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80113f8:	f891 6025 	ldrb.w	r6, [r1, #37]	; 0x25
 80113fc:	0235      	lsls	r5, r6, #8
 80113fe:	ea48 0802 	orr.w	r8, r8, r2
 8011402:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011406:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 801140a:	0435      	lsls	r5, r6, #16
 801140c:	ea48 0802 	orr.w	r8, r8, r2
 8011410:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8011414:	f891 6027 	ldrb.w	r6, [r1, #39]	; 0x27
 8011418:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
 801141a:	ea42 0408 	orr.w	r4, r2, r8
 801141e:	ea45 0509 	orr.w	r5, r5, r9
 8011422:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011426:	f891 8028 	ldrb.w	r8, [r1, #40]	; 0x28
 801142a:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801142e:	f891 6029 	ldrb.w	r6, [r1, #41]	; 0x29
 8011432:	2500      	movs	r5, #0
 8011434:	0234      	lsls	r4, r6, #8
 8011436:	ea48 0804 	orr.w	r8, r8, r4
 801143a:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801143e:	f891 602a 	ldrb.w	r6, [r1, #42]	; 0x2a
 8011442:	2500      	movs	r5, #0
 8011444:	0434      	lsls	r4, r6, #16
 8011446:	ea48 0804 	orr.w	r8, r8, r4
 801144a:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801144e:	f891 602b 	ldrb.w	r6, [r1, #43]	; 0x2b
 8011452:	2500      	movs	r5, #0
 8011454:	0634      	lsls	r4, r6, #24
 8011456:	ea48 0804 	orr.w	r8, r8, r4
 801145a:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 801145e:	f891 702c 	ldrb.w	r7, [r1, #44]	; 0x2c
 8011462:	ea48 0802 	orr.w	r8, r8, r2
 8011466:	ea49 0907 	orr.w	r9, r9, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 801146a:	f891 602d 	ldrb.w	r6, [r1, #45]	; 0x2d
 801146e:	0235      	lsls	r5, r6, #8
 8011470:	ea48 0802 	orr.w	r8, r8, r2
 8011474:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8011478:	f891 602e 	ldrb.w	r6, [r1, #46]	; 0x2e
 801147c:	0435      	lsls	r5, r6, #16
 801147e:	ea42 0408 	orr.w	r4, r2, r8
 8011482:	ea45 0509 	orr.w	r5, r5, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8011486:	f891 802f 	ldrb.w	r8, [r1, #47]	; 0x2f
 801148a:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
 801148e:	4314      	orrs	r4, r2
 8011490:	433d      	orrs	r5, r7
 8011492:	e9c0 4514 	strd	r4, r5, [r0, #80]	; 0x50
        this->fun_obj_(obj_, msg);
 8011496:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8011498:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801149a:	f013 0f01 	tst.w	r3, #1
 801149e:	d101      	bne.n	80114a4 <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE8callbackEPh+0x27c>
 80114a0:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80114a2:	e003      	b.n	80114ac <_ZN3ros11Subscriber2IN13geometry_msgs5TwistE7RosNodeE8callbackEPh+0x284>
 80114a4:	1059      	asrs	r1, r3, #1
 80114a6:	5854      	ldr	r4, [r2, r1]
 80114a8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80114aa:	5864      	ldr	r4, [r4, r1]
 80114ac:	4661      	mov	r1, ip
 80114ae:	eb02 0063 	add.w	r0, r2, r3, asr #1
 80114b2:	47a0      	blx	r4
 80114b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114b8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>:
    /* This function goes in your loop() function, it handles
     *  serial input and callbacks for subscribers.
     */


    virtual int spinOnce(){
 80114b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114bc:	b086      	sub	sp, #24
 80114be:	4604      	mov	r4, r0

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}
 80114c0:	f7fc fac6 	bl	800da50 <HAL_GetTick>
 80114c4:	4606      	mov	r6, r0

      /* restart if timed out */
      uint32_t c_time = hardware_.time();
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 80114c6:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 80114ca:	1ac3      	subs	r3, r0, r3
 80114cc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d902      	bls.n	80114da <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x22>
        configured_ = false;
 80114d4:	2300      	movs	r3, #0
 80114d6:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
      }

      /* reset if message has timed out */
      if ( mode_ != MODE_FIRST_FF){
 80114da:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80114de:	b133      	cbz	r3, 80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
        if (c_time > last_msg_timeout_time){
 80114e0:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 80114e4:	42b3      	cmp	r3, r6
 80114e6:	d202      	bcs.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
          mode_ = MODE_FIRST_FF;
 80114e8:	2300      	movs	r3, #0
 80114ea:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    uint8_t r_data;
    ring_buf_->pop(r_data);
    return  r_data;
  }

  bool available() { return ring_buf_->length(); }
 80114ee:	4ba3      	ldr	r3, [pc, #652]	; (801177c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2c4>)
 80114f0:	681a      	ldr	r2, [r3, #0]
    return true;
  }

  uint16_t length()
  {
    if(byte_to_add_ - byte_in_progress_ >= 0)
 80114f2:	f9b2 0192 	ldrsh.w	r0, [r2, #402]	; 0x192
 80114f6:	f9b2 3190 	ldrsh.w	r3, [r2, #400]	; 0x190
 80114fa:	1ac1      	subs	r1, r0, r3
 80114fc:	2900      	cmp	r1, #0
 80114fe:	db01      	blt.n	8011504 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4c>
      return (byte_to_add_ - byte_in_progress_);
 8011500:	b289      	uxth	r1, r1
 8011502:	e004      	b.n	801150e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x56>
    else 
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 8011504:	f8b2 1194 	ldrh.w	r1, [r2, #404]	; 0x194
 8011508:	1a59      	subs	r1, r3, r1
 801150a:	4401      	add	r1, r0
 801150c:	b289      	uxth	r1, r1
    return true;
  }

  int read()
  {
    if(!available()) return -1;
 801150e:	b179      	cbz	r1, 8011530 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x78>
  }
  ~RingBuffer(){  }

  bool pop(T& pop_value)
  {
    if (byte_in_progress_ != byte_to_add_)
 8011510:	4298      	cmp	r0, r3
 8011512:	d00b      	beq.n	801152c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x74>
      {
        pop_value =  buf_[byte_in_progress_];
 8011514:	5cd5      	ldrb	r5, [r2, r3]

        byte_in_progress_++;
 8011516:	3301      	adds	r3, #1
 8011518:	b21b      	sxth	r3, r3
 801151a:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
        if (byte_in_progress_ == buffer_length_)
 801151e:	f8b2 1194 	ldrh.w	r1, [r2, #404]	; 0x194
 8011522:	428b      	cmp	r3, r1
 8011524:	d102      	bne.n	801152c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x74>
          byte_in_progress_ = 0;
 8011526:	2300      	movs	r3, #0
 8011528:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
  {
    if(!available()) return -1;

    uint8_t r_data;
    ring_buf_->pop(r_data);
    return  r_data;
 801152c:	462a      	mov	r2, r5
 801152e:	e001      	b.n	8011534 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x7c>
    return true;
  }

  int read()
  {
    if(!available()) return -1;
 8011530:	f04f 32ff 	mov.w	r2, #4294967295

      /* while available buffer, read data */
      while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
 8011534:	2a00      	cmp	r2, #0
 8011536:	f2c0 823e 	blt.w	80119b6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4fe>
            break;
          checksum_ += data;
 801153a:	f8d4 12cc 	ldr.w	r1, [r4, #716]	; 0x2cc
 801153e:	4411      	add	r1, r2
 8011540:	f8c4 12cc 	str.w	r1, [r4, #716]	; 0x2cc
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8011544:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8011548:	2b07      	cmp	r3, #7
 801154a:	d111      	bne.n	8011570 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xb8>
            message_in[index_++] = data;
 801154c:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
 8011550:	1c59      	adds	r1, r3, #1
 8011552:	f8c4 12c8 	str.w	r1, [r4, #712]	; 0x2c8
 8011556:	4423      	add	r3, r4
 8011558:	771a      	strb	r2, [r3, #28]
            bytes_--;
 801155a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801155e:	3b01      	subs	r3, #1
 8011560:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 8011564:	2b00      	cmp	r3, #0
 8011566:	d1c2      	bne.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
              mode_ = MODE_MSG_CHECKSUM;
 8011568:	2308      	movs	r3, #8
 801156a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 801156e:	e7be      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
          }else if( mode_ == MODE_FIRST_FF ){
 8011570:	b9a3      	cbnz	r3, 801159c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xe4>
            if(data == 0xff){
 8011572:	2aff      	cmp	r2, #255	; 0xff
 8011574:	d107      	bne.n	8011586 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xce>
              mode_++;
 8011576:	3301      	adds	r3, #1
 8011578:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 801157c:	f106 0314 	add.w	r3, r6, #20
 8011580:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 8011584:	e7b3      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}
 8011586:	f7fc fa63 	bl	800da50 <HAL_GetTick>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 801158a:	1b80      	subs	r0, r0, r6
 801158c:	2805      	cmp	r0, #5
 801158e:	d9ae      	bls.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
 8011590:	2300      	movs	r3, #0
 8011592:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
              return -2;
 8011596:	f06f 0001 	mvn.w	r0, #1
 801159a:	e22b      	b.n	80119f4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x53c>
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
 801159c:	2b01      	cmp	r3, #1
 801159e:	d11b      	bne.n	80115d8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x120>
            if(data == PROTOCOL_VER){
 80115a0:	2afe      	cmp	r2, #254	; 0xfe
 80115a2:	d103      	bne.n	80115ac <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xf4>
              mode_++;
 80115a4:	3301      	adds	r3, #1
 80115a6:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 80115aa:	e7a0      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
            }else{
              mode_ = MODE_FIRST_FF;
 80115ac:	2300      	movs	r3, #0
 80115ae:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
              if (configured_ == false)
 80115b2:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d199      	bne.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
  {
    public:
      ros::Time data;

    Time():
      data()
 80115ba:	4b71      	ldr	r3, [pc, #452]	; (8011780 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2c8>)
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	2300      	movs	r3, #0
 80115c0:	9301      	str	r3, [sp, #4]
 80115c2:	9302      	str	r3, [sp, #8]
     */

    void requestSyncTime()
    {
      std_msgs::Time t;
      publish(TopicInfo::ID_TIME, &t);
 80115c4:	6823      	ldr	r3, [r4, #0]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	466a      	mov	r2, sp
 80115ca:	210a      	movs	r1, #10
 80115cc:	4620      	mov	r0, r4
 80115ce:	4798      	blx	r3
 80115d0:	f7fc fa3e 	bl	800da50 <HAL_GetTick>
      rt_time = hardware_.time();
 80115d4:	6120      	str	r0, [r4, #16]
 80115d6:	e78a      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
            }else{
              mode_ = MODE_FIRST_FF;
              if (configured_ == false)
                requestSyncTime(); 	/* send a msg back showing our protocol version */
            }
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 80115d8:	2b02      	cmp	r3, #2
 80115da:	d10a      	bne.n	80115f2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x13a>
            bytes_ = data;
 80115dc:	f8c4 22c0 	str.w	r2, [r4, #704]	; 0x2c0
            index_ = 0;
 80115e0:	2100      	movs	r1, #0
 80115e2:	f8c4 12c8 	str.w	r1, [r4, #712]	; 0x2c8
            mode_++;
 80115e6:	3301      	adds	r3, #1
 80115e8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            checksum_ = data;               /* first byte for calculating size checksum */
 80115ec:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 80115f0:	e77d      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 80115f2:	2b03      	cmp	r3, #3
 80115f4:	d109      	bne.n	801160a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x152>
            bytes_ += data<<8;
 80115f6:	f8d4 12c0 	ldr.w	r1, [r4, #704]	; 0x2c0
 80115fa:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 80115fe:	f8c4 22c0 	str.w	r2, [r4, #704]	; 0x2c0
            mode_++;
 8011602:	3301      	adds	r3, #1
 8011604:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 8011608:	e771      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 801160a:	2b04      	cmp	r3, #4
 801160c:	d111      	bne.n	8011632 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x17a>
            if( (checksum_%256) == 255)
 801160e:	4a5d      	ldr	r2, [pc, #372]	; (8011784 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2cc>)
 8011610:	400a      	ands	r2, r1
 8011612:	2a00      	cmp	r2, #0
 8011614:	da03      	bge.n	801161e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x166>
 8011616:	3a01      	subs	r2, #1
 8011618:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801161c:	3201      	adds	r2, #1
 801161e:	2aff      	cmp	r2, #255	; 0xff
 8011620:	d103      	bne.n	801162a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x172>
              mode_++;
 8011622:	3301      	adds	r3, #1
 8011624:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 8011628:	e761      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
            else
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 801162a:	2300      	movs	r3, #0
 801162c:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 8011630:	e75d      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 8011632:	2b05      	cmp	r3, #5
 8011634:	d107      	bne.n	8011646 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x18e>
            topic_ = data;
 8011636:	f8c4 22c4 	str.w	r2, [r4, #708]	; 0x2c4
            mode_++;
 801163a:	3301      	adds	r3, #1
 801163c:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            checksum_ = data;               /* first byte included in checksum */
 8011640:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 8011644:	e753      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8011646:	2b06      	cmp	r3, #6
 8011648:	d111      	bne.n	801166e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1b6>
            topic_ += data<<8;
 801164a:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 801164e:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8011652:	f8c4 22c4 	str.w	r2, [r4, #708]	; 0x2c4
            mode_ = MODE_MESSAGE;
 8011656:	2307      	movs	r3, #7
 8011658:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            if(bytes_ == 0)
 801165c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8011660:	2b00      	cmp	r3, #0
 8011662:	f47f af44 	bne.w	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
              mode_ = MODE_MSG_CHECKSUM;
 8011666:	2308      	movs	r3, #8
 8011668:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 801166c:	e73f      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 801166e:	2b08      	cmp	r3, #8
 8011670:	f47f af3d 	bne.w	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
            mode_ = MODE_FIRST_FF;
 8011674:	2300      	movs	r3, #0
 8011676:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
            if( (checksum_%256) == 255){
 801167a:	4b42      	ldr	r3, [pc, #264]	; (8011784 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2cc>)
 801167c:	400b      	ands	r3, r1
 801167e:	2b00      	cmp	r3, #0
 8011680:	da03      	bge.n	801168a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1d2>
 8011682:	3b01      	subs	r3, #1
 8011684:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8011688:	3301      	adds	r3, #1
 801168a:	2bff      	cmp	r3, #255	; 0xff
 801168c:	f47f af2f 	bne.w	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 8011690:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
 8011694:	2b00      	cmp	r3, #0
 8011696:	d17b      	bne.n	8011790 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2d8>
 8011698:	4b39      	ldr	r3, [pc, #228]	; (8011780 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2c8>)
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	2500      	movs	r5, #0
 801169e:	9501      	str	r5, [sp, #4]
 80116a0:	9502      	str	r5, [sp, #8]
     */

    void requestSyncTime()
    {
      std_msgs::Time t;
      publish(TopicInfo::ID_TIME, &t);
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	466a      	mov	r2, sp
 80116a8:	210a      	movs	r1, #10
 80116aa:	4620      	mov	r0, r4
 80116ac:	4798      	blx	r3
 80116ae:	f7fc f9cf 	bl	800da50 <HAL_GetTick>
      rt_time = hardware_.time();
 80116b2:	6120      	str	r0, [r4, #16]
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80116b4:	4b34      	ldr	r3, [pc, #208]	; (8011788 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2d0>)
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	f8ad 5004 	strh.w	r5, [sp, #4]
 80116bc:	4b33      	ldr	r3, [pc, #204]	; (801178c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2d4>)
 80116be:	9302      	str	r3, [sp, #8]
 80116c0:	9303      	str	r3, [sp, #12]
 80116c2:	9304      	str	r3, [sp, #16]
 80116c4:	9505      	str	r5, [sp, #20]

    void negotiateTopics()
    {
      rosserial_msgs::TopicInfo ti;
      int i;
      for(i = 0; i < MAX_PUBLISHERS; i++)
 80116c6:	2d13      	cmp	r5, #19
 80116c8:	dc24      	bgt.n	8011714 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x25c>
        {
          if(publishers[i] != 0) // non-empty slot
 80116ca:	f105 0386 	add.w	r3, r5, #134	; 0x86
 80116ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	b1e3      	cbz	r3, 8011710 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x258>
            {
              ti.topic_id = publishers[i]->id_;
 80116d6:	689a      	ldr	r2, [r3, #8]
 80116d8:	f8ad 2004 	strh.w	r2, [sp, #4]
              ti.topic_name = (char *) publishers[i]->topic_;
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	9202      	str	r2, [sp, #8]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 80116e0:	6858      	ldr	r0, [r3, #4]
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	4798      	blx	r3
 80116e8:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80116ea:	f105 0786 	add.w	r7, r5, #134	; 0x86
 80116ee:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6858      	ldr	r0, [r3, #4]
 80116f6:	6803      	ldr	r3, [r0, #0]
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	4798      	blx	r3
 80116fc:	9004      	str	r0, [sp, #16]
              ti.buffer_size = OUTPUT_SIZE;
 80116fe:	23ff      	movs	r3, #255	; 0xff
 8011700:	9305      	str	r3, [sp, #20]
              publish( publishers[i]->getEndpointType(), &ti );
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	6879      	ldr	r1, [r7, #4]
 8011708:	466a      	mov	r2, sp
 801170a:	6909      	ldr	r1, [r1, #16]
 801170c:	4620      	mov	r0, r4
 801170e:	4798      	blx	r3

    void negotiateTopics()
    {
      rosserial_msgs::TopicInfo ti;
      int i;
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8011710:	3501      	adds	r5, #1
 8011712:	e7d8      	b.n	80116c6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x20e>
 8011714:	2500      	movs	r5, #0
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
              ti.buffer_size = OUTPUT_SIZE;
              publish( publishers[i]->getEndpointType(), &ti );
            }
        }
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8011716:	2d13      	cmp	r5, #19
 8011718:	dc26      	bgt.n	8011768 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2b0>
        {
          if(subscribers[i] != 0) // non-empty slot
 801171a:	f105 039a 	add.w	r3, r5, #154	; 0x9a
 801171e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011722:	6858      	ldr	r0, [r3, #4]
 8011724:	b1f0      	cbz	r0, 8011764 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2ac>
            {
              ti.topic_id = subscribers[i]->id_;
 8011726:	6843      	ldr	r3, [r0, #4]
 8011728:	f8ad 3004 	strh.w	r3, [sp, #4]
              ti.topic_name = (char *) subscribers[i]->topic_;
 801172c:	6883      	ldr	r3, [r0, #8]
 801172e:	9302      	str	r3, [sp, #8]
              ti.message_type = (char *) subscribers[i]->getMsgType();
 8011730:	6803      	ldr	r3, [r0, #0]
 8011732:	689b      	ldr	r3, [r3, #8]
 8011734:	4798      	blx	r3
 8011736:	9003      	str	r0, [sp, #12]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8011738:	f105 079a 	add.w	r7, r5, #154	; 0x9a
 801173c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	6803      	ldr	r3, [r0, #0]
 8011744:	68db      	ldr	r3, [r3, #12]
 8011746:	4798      	blx	r3
 8011748:	9004      	str	r0, [sp, #16]
              ti.buffer_size = INPUT_SIZE;
 801174a:	23ff      	movs	r3, #255	; 0xff
 801174c:	9305      	str	r3, [sp, #20]
              publish( subscribers[i]->getEndpointType(), &ti );
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	f8d3 8000 	ldr.w	r8, [r3]
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	6803      	ldr	r3, [r0, #0]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	4798      	blx	r3
 801175c:	466a      	mov	r2, sp
 801175e:	4601      	mov	r1, r0
 8011760:	4620      	mov	r0, r4
 8011762:	47c0      	blx	r8
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
              ti.buffer_size = OUTPUT_SIZE;
              publish( publishers[i]->getEndpointType(), &ti );
            }
        }
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 8011764:	3501      	adds	r5, #1
 8011766:	e7d6      	b.n	8011716 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x25e>
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
              ti.buffer_size = INPUT_SIZE;
              publish( subscribers[i]->getEndpointType(), &ti );
            }
        }
      configured_ = true;
 8011768:	2301      	movs	r3, #1
 801176a:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
              if(topic_ == TopicInfo::ID_PUBLISHER){
                requestSyncTime();
                negotiateTopics();
                last_sync_time = c_time;
 801176e:	f8c4 62d4 	str.w	r6, [r4, #724]	; 0x2d4
                last_sync_receive_time = c_time;
 8011772:	f8c4 62d8 	str.w	r6, [r4, #728]	; 0x2d8
                return -1;
 8011776:	f04f 30ff 	mov.w	r0, #4294967295
 801177a:	e13b      	b.n	80119f4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x53c>
 801177c:	20003ef8 	.word	0x20003ef8
 8011780:	0801b0bc 	.word	0x0801b0bc
 8011784:	800000ff 	.word	0x800000ff
 8011788:	0801b0d4 	.word	0x0801b0d4
 801178c:	0801bea4 	.word	0x0801bea4
              }else if(topic_ == TopicInfo::ID_TIME){
 8011790:	2b0a      	cmp	r3, #10
 8011792:	d148      	bne.n	8011826 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36e>
 8011794:	f7fc f95c 	bl	800da50 <HAL_GetTick>
    }

    void syncTime(uint8_t * data)
    {
      std_msgs::Time t;
      uint32_t offset = hardware_.time() - rt_time;
 8011798:	6923      	ldr	r3, [r4, #16]
 801179a:	1ac0      	subs	r0, r0, r3
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 801179c:	7f23      	ldrb	r3, [r4, #28]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801179e:	7f62      	ldrb	r2, [r4, #29]
 80117a0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80117a4:	7fa3      	ldrb	r3, [r4, #30]
 80117a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80117aa:	f894 e01f 	ldrb.w	lr, [r4, #31]
 80117ae:	ea42 6e0e 	orr.w	lr, r2, lr, lsl #24
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80117b2:	f894 2020 	ldrb.w	r2, [r4, #32]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80117b6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80117ba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80117be:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
 80117c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80117c6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80117ca:	ea42 6103 	orr.w	r1, r2, r3, lsl #24

      t.deserialize(data);
      t.data.sec += offset/1000;
 80117ce:	4f8b      	ldr	r7, [pc, #556]	; (80119fc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x544>)
 80117d0:	fba7 3200 	umull	r3, r2, r7, r0
 80117d4:	0993      	lsrs	r3, r2, #6
 80117d6:	eb0e 0203 	add.w	r2, lr, r3
 80117da:	9201      	str	r2, [sp, #4]
      t.data.nsec += (offset%1000)*1000000UL;
 80117dc:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 80117e0:	fb09 0313 	mls	r3, r9, r3, r0
 80117e4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8011a08 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x550>
 80117e8:	fb08 1303 	mla	r3, r8, r3, r1
 80117ec:	9302      	str	r3, [sp, #8]
 80117ee:	f7fc f92f 	bl	800da50 <HAL_GetTick>
    }

    void setNow( Time & new_now )
    {
      uint32_t ms = hardware_.time();
      sec_offset = new_now.sec - ms/1000 - 1;
 80117f2:	fba7 3700 	umull	r3, r7, r7, r0
 80117f6:	09bb      	lsrs	r3, r7, #6
 80117f8:	9a01      	ldr	r2, [sp, #4]
 80117fa:	1ad2      	subs	r2, r2, r3
 80117fc:	3a01      	subs	r2, #1
 80117fe:	6162      	str	r2, [r4, #20]
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8011800:	fb09 0313 	mls	r3, r9, r3, r0
 8011804:	9a02      	ldr	r2, [sp, #8]
 8011806:	fb08 2313 	mls	r3, r8, r3, r2
 801180a:	4a7d      	ldr	r2, [pc, #500]	; (8011a00 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x548>)
 801180c:	441a      	add	r2, r3
 801180e:	61a2      	str	r2, [r4, #24]
      normalizeSecNSec(sec_offset, nsec_offset);
 8011810:	f104 0118 	add.w	r1, r4, #24
 8011814:	f104 0014 	add.w	r0, r4, #20
 8011818:	f7fc fab8 	bl	800dd8c <_ZN3ros16normalizeSecNSecERmS0_>
 801181c:	f7fc f918 	bl	800da50 <HAL_GetTick>
      t.deserialize(data);
      t.data.sec += offset/1000;
      t.data.nsec += (offset%1000)*1000000UL;

      this->setNow(t.data);
      last_sync_receive_time = hardware_.time();
 8011820:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
 8011824:	e663      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
                last_sync_time = c_time;
                last_sync_receive_time = c_time;
                return -1;
              }else if(topic_ == TopicInfo::ID_TIME){
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 8011826:	2b06      	cmp	r3, #6
 8011828:	f040 80ab 	bne.w	8011982 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4ca>
                req_param_resp.deserialize(message_in);
 801182c:	f504 7839 	add.w	r8, r4, #740	; 0x2e4
 8011830:	f104 071c 	add.w	r7, r4, #28
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8011834:	f894 901c 	ldrb.w	r9, [r4, #28]
      if(ints_lengthT > ints_length)
 8011838:	f898 3004 	ldrb.w	r3, [r8, #4]
 801183c:	4599      	cmp	r9, r3
 801183e:	d907      	bls.n	8011850 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x398>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8011840:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8011844:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8011848:	f005 fb8e 	bl	8016f68 <realloc>
 801184c:	f8c8 000c 	str.w	r0, [r8, #12]
      offset += 3;
      ints_length = ints_lengthT;
 8011850:	f888 9004 	strb.w	r9, [r8, #4]
      for( uint8_t i = 0; i < ints_length; i++){
 8011854:	2200      	movs	r2, #0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
 8011856:	f04f 0904 	mov.w	r9, #4
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 801185a:	f898 3004 	ldrb.w	r3, [r8, #4]
 801185e:	4293      	cmp	r3, r2
 8011860:	d91d      	bls.n	801189e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3e6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8011862:	f817 3009 	ldrb.w	r3, [r7, r9]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8011866:	f109 0101 	add.w	r1, r9, #1
 801186a:	5c79      	ldrb	r1, [r7, r1]
 801186c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8011870:	f109 0102 	add.w	r1, r9, #2
 8011874:	5c79      	ldrb	r1, [r7, r1]
 8011876:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 801187a:	f109 0103 	add.w	r1, r9, #3
 801187e:	5c79      	ldrb	r1, [r7, r1]
 8011880:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8011884:	f8c8 3008 	str.w	r3, [r8, #8]
      offset += sizeof(this->st_ints);
 8011888:	f109 0904 	add.w	r9, r9, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 801188c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011890:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 8011898:	3201      	adds	r2, #1
 801189a:	b2d2      	uxtb	r2, r2
 801189c:	e7dd      	b.n	801185a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3a2>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 801189e:	f817 a009 	ldrb.w	sl, [r7, r9]
      if(floats_lengthT > floats_length)
 80118a2:	f898 3010 	ldrb.w	r3, [r8, #16]
 80118a6:	459a      	cmp	sl, r3
 80118a8:	d907      	bls.n	80118ba <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x402>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80118aa:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80118ae:	f8d8 0018 	ldr.w	r0, [r8, #24]
 80118b2:	f005 fb59 	bl	8016f68 <realloc>
 80118b6:	f8c8 0018 	str.w	r0, [r8, #24]
      offset += 3;
 80118ba:	f109 0904 	add.w	r9, r9, #4
      floats_length = floats_lengthT;
 80118be:	f888 a010 	strb.w	sl, [r8, #16]
      for( uint8_t i = 0; i < floats_length; i++){
 80118c2:	2200      	movs	r2, #0
 80118c4:	f898 3010 	ldrb.w	r3, [r8, #16]
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d91d      	bls.n	8011908 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x450>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80118cc:	f817 3009 	ldrb.w	r3, [r7, r9]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80118d0:	f109 0101 	add.w	r1, r9, #1
 80118d4:	5c79      	ldrb	r1, [r7, r1]
 80118d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80118da:	f109 0102 	add.w	r1, r9, #2
 80118de:	5c79      	ldrb	r1, [r7, r1]
 80118e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80118e4:	f109 0103 	add.w	r1, r9, #3
 80118e8:	5c79      	ldrb	r1, [r7, r1]
      this->st_floats = u_st_floats.real;
 80118ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80118ee:	f8c8 3014 	str.w	r3, [r8, #20]
      offset += sizeof(this->st_floats);
 80118f2:	f109 0904 	add.w	r9, r9, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80118f6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80118fa:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80118fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 8011902:	3201      	adds	r2, #1
 8011904:	b2d2      	uxtb	r2, r2
 8011906:	e7dd      	b.n	80118c4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x40c>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8011908:	f817 a009 	ldrb.w	sl, [r7, r9]
      if(strings_lengthT > strings_length)
 801190c:	f898 301c 	ldrb.w	r3, [r8, #28]
 8011910:	459a      	cmp	sl, r3
 8011912:	d907      	bls.n	8011924 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x46c>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8011914:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8011918:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 801191c:	f005 fb24 	bl	8016f68 <realloc>
 8011920:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
      offset += 3;
 8011924:	f109 0104 	add.w	r1, r9, #4
      strings_length = strings_lengthT;
 8011928:	f888 a01c 	strb.w	sl, [r8, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 801192c:	f04f 0e00 	mov.w	lr, #0
 8011930:	f898 301c 	ldrb.w	r3, [r8, #28]
 8011934:	4573      	cmp	r3, lr
 8011936:	d920      	bls.n	801197a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4c2>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 8011938:	5878      	ldr	r0, [r7, r1]
 801193a:	9000      	str	r0, [sp, #0]
      offset += 4;
 801193c:	3104      	adds	r1, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 801193e:	460b      	mov	r3, r1
 8011940:	9a00      	ldr	r2, [sp, #0]
 8011942:	440a      	add	r2, r1
 8011944:	429a      	cmp	r2, r3
 8011946:	d904      	bls.n	8011952 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x49a>
          inbuffer[k-1]=inbuffer[k];
 8011948:	1e5a      	subs	r2, r3, #1
 801194a:	5cf8      	ldrb	r0, [r7, r3]
 801194c:	54b8      	strb	r0, [r7, r2]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 801194e:	3301      	adds	r3, #1
 8011950:	e7f6      	b.n	8011940 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x488>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 8011952:	3a01      	subs	r2, #1
 8011954:	2300      	movs	r3, #0
 8011956:	54bb      	strb	r3, [r7, r2]
      this->st_strings = (char *)(inbuffer + offset-1);
 8011958:	1e4b      	subs	r3, r1, #1
 801195a:	443b      	add	r3, r7
 801195c:	f8c8 3020 	str.w	r3, [r8, #32]
      offset += length_st_strings;
 8011960:	9b00      	ldr	r3, [sp, #0]
 8011962:	4419      	add	r1, r3
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8011964:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8011968:	f8d8 2020 	ldr.w	r2, [r8, #32]
 801196c:	f843 202e 	str.w	r2, [r3, lr, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 8011970:	f10e 0e01 	add.w	lr, lr, #1
 8011974:	fa5f fe8e 	uxtb.w	lr, lr
 8011978:	e7da      	b.n	8011930 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x478>
                param_recieved= true;
 801197a:	2301      	movs	r3, #1
 801197c:	f884 32e0 	strb.w	r3, [r4, #736]	; 0x2e0
 8011980:	e5b5      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8011982:	2b0b      	cmp	r3, #11
 8011984:	d103      	bne.n	801198e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4d6>
                configured_ = false;
 8011986:	2300      	movs	r3, #0
 8011988:	f884 32d0 	strb.w	r3, [r4, #720]	; 0x2d0
 801198c:	e5af      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
              }else{
                if(subscribers[topic_-100])
 801198e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8011992:	3336      	adds	r3, #54	; 0x36
 8011994:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011998:	6858      	ldr	r0, [r3, #4]
 801199a:	2800      	cmp	r0, #0
 801199c:	f43f ada7 	beq.w	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
                  subscribers[topic_-100]->callback( message_in );
 80119a0:	f102 039a 	add.w	r3, r2, #154	; 0x9a
 80119a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80119a8:	685b      	ldr	r3, [r3, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f104 011c 	add.w	r1, r4, #28
 80119b2:	4798      	blx	r3
 80119b4:	e59b      	b.n	80114ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
            }
          }
        }

      /* occasionally sync time */
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 80119b6:	f894 32d0 	ldrb.w	r3, [r4, #720]	; 0x2d0
 80119ba:	b1c3      	cbz	r3, 80119ee <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x536>
 80119bc:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80119c0:	1af3      	subs	r3, r6, r3
 80119c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d913      	bls.n	80119f2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x53a>
  {
    public:
      ros::Time data;

    Time():
      data()
 80119ca:	4b0e      	ldr	r3, [pc, #56]	; (8011a04 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x54c>)
 80119cc:	9300      	str	r3, [sp, #0]
 80119ce:	2500      	movs	r5, #0
 80119d0:	9501      	str	r5, [sp, #4]
 80119d2:	9502      	str	r5, [sp, #8]
     */

    void requestSyncTime()
    {
      std_msgs::Time t;
      publish(TopicInfo::ID_TIME, &t);
 80119d4:	6823      	ldr	r3, [r4, #0]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	466a      	mov	r2, sp
 80119da:	210a      	movs	r1, #10
 80119dc:	4620      	mov	r0, r4
 80119de:	4798      	blx	r3
 80119e0:	f7fc f836 	bl	800da50 <HAL_GetTick>
      rt_time = hardware_.time();
 80119e4:	6120      	str	r0, [r4, #16]
        }

      /* occasionally sync time */
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
        requestSyncTime();
        last_sync_time = c_time;
 80119e6:	f8c4 62d4 	str.w	r6, [r4, #724]	; 0x2d4
      }

      return 0;
 80119ea:	4628      	mov	r0, r5
 80119ec:	e002      	b.n	80119f4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x53c>
 80119ee:	2000      	movs	r0, #0
 80119f0:	e000      	b.n	80119f4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x53c>
 80119f2:	2000      	movs	r0, #0
    }
 80119f4:	b006      	add	sp, #24
 80119f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119fa:	bf00      	nop
 80119fc:	10624dd3 	.word	0x10624dd3
 8011a00:	3b9aca00 	.word	0x3b9aca00
 8011a04:	0801b0bc 	.word	0x0801b0bc
 8011a08:	000f4240 	.word	0x000f4240

08011a0c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
  static const uint8_t PUB_PRESCALER = 1;
  //This is hHard coding, 1000Hz /2 = 500Hz

  static const uint8_t PUB_HZ = 2; // 500Hz

  void init(IMU* imu, ros::NodeHandle* nh)
 8011a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a0e:	b087      	sub	sp, #28
 8011a10:	4604      	mov	r4, r0
 8011a12:	460d      	mov	r5, r1
  {
    nh_ = nh;
 8011a14:	4606      	mov	r6, r0
 8011a16:	f846 2b08 	str.w	r2, [r6], #8

    imu_pub_  = new ros::Publisher("imu", &imu_msg_);
 8011a1a:	2014      	movs	r0, #20
 8011a1c:	f002 fce8 	bl	80143f0 <_Znwj>
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 8011a20:	4b51      	ldr	r3, [pc, #324]	; (8011b68 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x15c>)
 8011a22:	6003      	str	r3, [r0, #0]
 8011a24:	6046      	str	r6, [r0, #4]
 8011a26:	2300      	movs	r3, #0
 8011a28:	6103      	str	r3, [r0, #16]
 8011a2a:	6060      	str	r0, [r4, #4]
    nh_->advertise(*imu_pub_);
 8011a2c:	6821      	ldr	r1, [r4, #0]
     */

    /* Register a new publisher */
    bool advertise(Publisher & p)
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8011a2e:	2b13      	cmp	r3, #19
 8011a30:	dc10      	bgt.n	8011a54 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x48>
        if(publishers[i] == 0){ // empty slot
 8011a32:	f103 0286 	add.w	r2, r3, #134	; 0x86
 8011a36:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011a3a:	6852      	ldr	r2, [r2, #4]
 8011a3c:	b942      	cbnz	r2, 8011a50 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x44>
          publishers[i] = &p;
 8011a3e:	f103 0286 	add.w	r2, r3, #134	; 0x86
 8011a42:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011a46:	6050      	str	r0, [r2, #4]
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8011a48:	3378      	adds	r3, #120	; 0x78
 8011a4a:	6083      	str	r3, [r0, #8]
          p.nh_ = this;
 8011a4c:	60c1      	str	r1, [r0, #12]
 8011a4e:	e001      	b.n	8011a54 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x48>
     */

    /* Register a new publisher */
    bool advertise(Publisher & p)
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8011a50:	3301      	adds	r3, #1
 8011a52:	e7ec      	b.n	8011a2e <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x22>

    desire_coord_sub_ = new ros::Subscriber2<aerial_robot_base::DesireCoord, AttitudeEstimate> ("/desire_coordinate", &AttitudeEstimate::desireCoordCallback, this );
 8011a54:	2030      	movs	r0, #48	; 0x30
 8011a56:	f002 fccb 	bl	80143f0 <_Znwj>
 8011a5a:	4606      	mov	r6, r0
 8011a5c:	4b43      	ldr	r3, [pc, #268]	; (8011b6c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x160>)
 8011a5e:	9304      	str	r3, [sp, #16]
 8011a60:	2300      	movs	r3, #0
 8011a62:	9305      	str	r3, [sp, #20]
 8011a64:	aa06      	add	r2, sp, #24
 8011a66:	e912 0003 	ldmdb	r2, {r0, r1}
 8011a6a:	e88d 0003 	stmia.w	sp, {r0, r1}
    public:
      typedef void(T::*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber2(const char * topic_name, CallbackT cb, T *obj,  int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8011a6e:	4a40      	ldr	r2, [pc, #256]	; (8011b70 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x164>)
 8011a70:	6032      	str	r2, [r6, #0]

    DesireCoord():
      roll(0),
      pitch(0),
      yaw(0),
      coord_type(0)
 8011a72:	4a40      	ldr	r2, [pc, #256]	; (8011b74 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x168>)
 8011a74:	60f2      	str	r2, [r6, #12]
 8011a76:	2200      	movs	r2, #0
 8011a78:	6132      	str	r2, [r6, #16]
 8011a7a:	6172      	str	r2, [r6, #20]
 8011a7c:	61b2      	str	r2, [r6, #24]
 8011a7e:	7733      	strb	r3, [r6, #28]
 8011a80:	6234      	str	r4, [r6, #32]
 8011a82:	aa02      	add	r2, sp, #8
 8011a84:	e882 0003 	stmia.w	r2, {r0, r1}
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }
 8011a88:	f106 0724 	add.w	r7, r6, #36	; 0x24
 8011a8c:	e887 0003 	stmia.w	r7, {r0, r1}
 8011a90:	2201      	movs	r2, #1
 8011a92:	62f2      	str	r2, [r6, #44]	; 0x2c
      {
        //std::binder1st t  = std::bind1st(std::mem_fun1_t())
        topic_ = topic_name;
 8011a94:	4a38      	ldr	r2, [pc, #224]	; (8011b78 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x16c>)
 8011a96:	60b2      	str	r2, [r6, #8]
 8011a98:	6466      	str	r6, [r4, #68]	; 0x44
    nh_->subscribe<aerial_robot_base::DesireCoord, AttitudeEstimate>(*desire_coord_sub_);
 8011a9a:	6821      	ldr	r1, [r4, #0]
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8011a9c:	2b13      	cmp	r3, #19
 8011a9e:	dc0f      	bgt.n	8011ac0 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xb4>
        if(subscribers[i] == 0){ // empty slot
 8011aa0:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 8011aa4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011aa8:	6852      	ldr	r2, [r2, #4]
 8011aaa:	b93a      	cbnz	r2, 8011abc <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xb0>
          subscribers[i] = (Subscriber_*) &s;
 8011aac:	f103 029a 	add.w	r2, r3, #154	; 0x9a
 8011ab0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011ab4:	604e      	str	r6, [r1, #4]
          s.id_ = i+100;
 8011ab6:	3364      	adds	r3, #100	; 0x64
 8011ab8:	6073      	str	r3, [r6, #4]
 8011aba:	e001      	b.n	8011ac0 <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xb4>
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8011abc:	3301      	adds	r3, #1
 8011abe:	e7ed      	b.n	8011a9c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x90>

    imu_ = imu;
 8011ac0:	64e5      	str	r5, [r4, #76]	; 0x4c

    last_pub_time_ = HAL_GetTick();
 8011ac2:	f7fb ffc5 	bl	800da50 <HAL_GetTick>
 8011ac6:	6520      	str	r0, [r4, #80]	; 0x50

#if ESTIMATE_TYPE == COMPLEMENTARY
    estimator_ = new ComplementaryAHRS();
 8011ac8:	20c8      	movs	r0, #200	; 0xc8
 8011aca:	f002 fc91 	bl	80143f0 <_Znwj>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	60c3      	str	r3, [r0, #12]
 8011ad2:	6083      	str	r3, [r0, #8]
 8011ad4:	6043      	str	r3, [r0, #4]
 8011ad6:	6183      	str	r3, [r0, #24]
 8011ad8:	6143      	str	r3, [r0, #20]
 8011ada:	6103      	str	r3, [r0, #16]
 8011adc:	6243      	str	r3, [r0, #36]	; 0x24
 8011ade:	6203      	str	r3, [r0, #32]
 8011ae0:	61c3      	str	r3, [r0, #28]
 8011ae2:	6303      	str	r3, [r0, #48]	; 0x30
 8011ae4:	62c3      	str	r3, [r0, #44]	; 0x2c
 8011ae6:	6283      	str	r3, [r0, #40]	; 0x28
 8011ae8:	63c3      	str	r3, [r0, #60]	; 0x3c
 8011aea:	6383      	str	r3, [r0, #56]	; 0x38
 8011aec:	6343      	str	r3, [r0, #52]	; 0x34
 8011aee:	6483      	str	r3, [r0, #72]	; 0x48
 8011af0:	6443      	str	r3, [r0, #68]	; 0x44
 8011af2:	6403      	str	r3, [r0, #64]	; 0x40
 8011af4:	6543      	str	r3, [r0, #84]	; 0x54
 8011af6:	6503      	str	r3, [r0, #80]	; 0x50
 8011af8:	6603      	str	r3, [r0, #96]	; 0x60
 8011afa:	6583      	str	r3, [r0, #88]	; 0x58
 8011afc:	6683      	str	r3, [r0, #104]	; 0x68
 8011afe:	6643      	str	r3, [r0, #100]	; 0x64
 8011b00:	6783      	str	r3, [r0, #120]	; 0x78
 8011b02:	6743      	str	r3, [r0, #116]	; 0x74
 8011b04:	6703      	str	r3, [r0, #112]	; 0x70
    float        q1, q2, q3, q4;

    // constructor creates a quaternion equivalent
    // to roll=0, pitch=0, yaw=0
    Quaternion() {
        q1 = 1; q2 = q3 = q4 = 0;
 8011b06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011b0a:	67c2      	str	r2, [r0, #124]	; 0x7c
 8011b0c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8011b10:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8011b14:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
{
public:
  EstimatorAlgorithm():
    acc_b_(), acc_v_(), gyro_b_(), gyro_v_(), mag_b_(), mag_v_(),q_(),
    desire_attitude_roll_(0), desire_attitude_pitch_(0),
    abs_rel_(ABSOLUTE_COORD)
 8011b18:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8011b1c:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8011b20:	2100      	movs	r1, #0
 8011b22:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
    // zero the matrix
    void        zero(void);

    // setup the identity matrix
    void        identity(void) {
        a.x = b.y = c.z = 1;
 8011b26:	66c2      	str	r2, [r0, #108]	; 0x6c
 8011b28:	65c2      	str	r2, [r0, #92]	; 0x5c
 8011b2a:	64c2      	str	r2, [r0, #76]	; 0x4c
class ComplementaryAHRS: public EstimatorAlgorithm
{
public:
  ComplementaryAHRS():EstimatorAlgorithm(),
                      est_g_v_(),  est_m_v_(),
                       est_g_b_(), est_m_b_()
 8011b2c:	4a13      	ldr	r2, [pc, #76]	; (8011b7c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x170>)
 8011b2e:	6002      	str	r2, [r0, #0]
 8011b30:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8011b34:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
 8011b38:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8011b3c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
 8011b40:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8011b44:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8011b48:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8011b4c:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8011b50:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 8011b54:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8011b58:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
 8011b5c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 8011b60:	64a0      	str	r0, [r4, #72]	; 0x48
#elif ESTIMATE_TYPE == MADWICK
    estimator_ = new MadgwickAHRS();
#else 
#error "no instance for estimator"
#endif
  }
 8011b62:	b007      	add	sp, #28
 8011b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b66:	bf00      	nop
 8011b68:	0801b4bc 	.word	0x0801b4bc
 8011b6c:	080108e5 	.word	0x080108e5
 8011b70:	0801b1cc 	.word	0x0801b1cc
 8011b74:	0801b1a8 	.word	0x0801b1a8
 8011b78:	0801b4c0 	.word	0x0801b4c0
 8011b7c:	0801b1c0 	.word	0x0801b1c0

08011b80 <_ZN11PosEstimate7publishEv>:

  IMU* imu_;
  GPS* gps_;
  //nav-ekf2

  void publish()
 8011b80:	b570      	push	{r4, r5, r6, lr}
 8011b82:	b094      	sub	sp, #80	; 0x50
 8011b84:	4604      	mov	r4, r0
  {
    gps_msg_.stamp = nh_->now();
 8011b86:	4605      	mov	r5, r0
 8011b88:	f855 6b0c 	ldr.w	r6, [r5], #12
 8011b8c:	f7fb ff60 	bl	800da50 <HAL_GetTick>

    Time now()
    {
      uint32_t ms = hardware_.time();
      Time current_time;
      current_time.sec = ms/1000 + sec_offset;
 8011b90:	6971      	ldr	r1, [r6, #20]
 8011b92:	4a2b      	ldr	r2, [pc, #172]	; (8011c40 <_ZN11PosEstimate7publishEv+0xc0>)
 8011b94:	fba2 3200 	umull	r3, r2, r2, r0
 8011b98:	0993      	lsrs	r3, r2, #6
 8011b9a:	4419      	add	r1, r3
 8011b9c:	9112      	str	r1, [sp, #72]	; 0x48
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 8011b9e:	69b2      	ldr	r2, [r6, #24]
 8011ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011ba4:	fb01 0013 	mls	r0, r1, r3, r0
 8011ba8:	4b26      	ldr	r3, [pc, #152]	; (8011c44 <_ZN11PosEstimate7publishEv+0xc4>)
 8011baa:	fb03 2300 	mla	r3, r3, r0, r2
 8011bae:	9313      	str	r3, [sp, #76]	; 0x4c
      normalizeSecNSec(current_time.sec, current_time.nsec);
 8011bb0:	ae12      	add	r6, sp, #72	; 0x48
 8011bb2:	a913      	add	r1, sp, #76	; 0x4c
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	f7fc f8e9 	bl	800dd8c <_ZN3ros16normalizeSecNSecERmS0_>
 8011bba:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011bbe:	e885 0003 	stmia.w	r5, {r0, r1}

    gps_msg_.location[0] = gps_->getGosState().location.lat; // lat
 8011bc2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  virtual bool is_configured(void) { return true; }
  virtual void inject_data(uint8_t *data, uint8_t len) { return; }

  GPS_State getGosState()
  {
    return state;
 8011bc4:	3510      	adds	r5, #16
 8011bc6:	2648      	movs	r6, #72	; 0x48
 8011bc8:	4632      	mov	r2, r6
 8011bca:	4629      	mov	r1, r5
 8011bcc:	4668      	mov	r0, sp
 8011bce:	f005 f964 	bl	8016e9a <memcpy>
 8011bd2:	f8dd 300e 	ldr.w	r3, [sp, #14]
 8011bd6:	ee07 3a90 	vmov	s15, r3
 8011bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bde:	edc4 7a05 	vstr	s15, [r4, #20]
 8011be2:	4632      	mov	r2, r6
 8011be4:	4629      	mov	r1, r5
 8011be6:	4668      	mov	r0, sp
 8011be8:	f005 f957 	bl	8016e9a <memcpy>
    gps_msg_.location[1] = gps_->getGosState().location.lng; // lng
 8011bec:	f8dd 3012 	ldr.w	r3, [sp, #18]
 8011bf0:	ee07 3a90 	vmov	s15, r3
 8011bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bf8:	edc4 7a06 	vstr	s15, [r4, #24]
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	4629      	mov	r1, r5
 8011c00:	4668      	mov	r0, sp
 8011c02:	f005 f94a 	bl	8016e9a <memcpy>

    gps_msg_.velocity[0] = gps_->getGosState().velocity.x;
 8011c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c08:	61e3      	str	r3, [r4, #28]
 8011c0a:	4632      	mov	r2, r6
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	4668      	mov	r0, sp
 8011c10:	f005 f943 	bl	8016e9a <memcpy>
    gps_msg_.velocity[1] = gps_->getGosState().velocity.y;
 8011c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c16:	6223      	str	r3, [r4, #32]
 8011c18:	4632      	mov	r2, r6
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	4668      	mov	r0, sp
 8011c1e:	f005 f93c 	bl	8016e9a <memcpy>

    gps_msg_.sat_num = gps_->getGosState().num_sats;
 8011c22:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011c26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    gps_pub_->publish(&gps_msg_);
 8011c2a:	6863      	ldr	r3, [r4, #4]

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 8011c2c:	68d8      	ldr	r0, [r3, #12]
 8011c2e:	6802      	ldr	r2, [r0, #0]
 8011c30:	6815      	ldr	r5, [r2, #0]
 8011c32:	f104 0208 	add.w	r2, r4, #8
 8011c36:	6899      	ldr	r1, [r3, #8]
 8011c38:	47a8      	blx	r5
  }
 8011c3a:	b014      	add	sp, #80	; 0x50
 8011c3c:	bd70      	pop	{r4, r5, r6, pc}
 8011c3e:	bf00      	nop
 8011c40:	10624dd3 	.word	0x10624dd3
 8011c44:	000f4240 	.word	0x000f4240

08011c48 <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{
 8011c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c4a:	b0b5      	sub	sp, #212	; 0xd4

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8011c4c:	2400      	movs	r4, #0
 8011c4e:	9400      	str	r4, [sp, #0]
 8011c50:	4b2a      	ldr	r3, [pc, #168]	; (8011cfc <_Z18SystemClock_Configv+0xb4>)
 8011c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011c58:	641a      	str	r2, [r3, #64]	; 0x40
 8011c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c60:	9300      	str	r3, [sp, #0]
 8011c62:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011c64:	9401      	str	r4, [sp, #4]
 8011c66:	4b26      	ldr	r3, [pc, #152]	; (8011d00 <_Z18SystemClock_Configv+0xb8>)
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8011c6e:	601a      	str	r2, [r3, #0]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011c76:	9301      	str	r3, [sp, #4]
 8011c78:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011c7a:	2701      	movs	r7, #1
 8011c7c:	9728      	str	r7, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011c82:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011c84:	2502      	movs	r5, #2
 8011c86:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011c88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011c8c:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8011c8e:	2604      	movs	r6, #4
 8011c90:	9630      	str	r6, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8011c92:	23d8      	movs	r3, #216	; 0xd8
 8011c94:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011c96:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8011c98:	9533      	str	r5, [sp, #204]	; 0xcc
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8011c9a:	a828      	add	r0, sp, #160	; 0xa0
 8011c9c:	f7fa fb5c 	bl	800c358 <HAL_RCC_OscConfig>

  HAL_PWREx_EnableOverDrive();
 8011ca0:	f7fa ff58 	bl	800cb54 <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8011ca4:	230f      	movs	r3, #15
 8011ca6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011ca8:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011caa:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8011cac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011cb0:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8011cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cb6:	9327      	str	r3, [sp, #156]	; 0x9c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8011cb8:	2107      	movs	r1, #7
 8011cba:	a823      	add	r0, sp, #140	; 0x8c
 8011cbc:	f7fa fd96 	bl	800c7ec <HAL_RCC_ClockConfig>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
      |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
 8011cc0:	f24c 1340 	movw	r3, #49472	; 0xc140
 8011cc4:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8011cc6:	9713      	str	r7, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8011cc8:	2310      	movs	r3, #16
 8011cca:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8011ccc:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8011cce:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8011cd0:	a802      	add	r0, sp, #8
 8011cd2:	f7f9 ff5f 	bl	800bb94 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8011cd6:	f7fa fef3 	bl	800cac0 <HAL_RCC_GetHCLKFreq>
 8011cda:	4b0a      	ldr	r3, [pc, #40]	; (8011d04 <_Z18SystemClock_Configv+0xbc>)
 8011cdc:	fba3 3000 	umull	r3, r0, r3, r0
 8011ce0:	0980      	lsrs	r0, r0, #6
 8011ce2:	f7fb fcbb 	bl	800d65c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	f7fb fcce 	bl	800d688 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 2, 0);
 8011cec:	4622      	mov	r2, r4
 8011cee:	4629      	mov	r1, r5
 8011cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8011cf4:	f7fb fc76 	bl	800d5e4 <HAL_NVIC_SetPriority>
}
 8011cf8:	b035      	add	sp, #212	; 0xd4
 8011cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cfc:	40023800 	.word	0x40023800
 8011d00:	40007000 	.word	0x40007000
 8011d04:	10624dd3 	.word	0x10624dd3

08011d08 <main>:

}
/* USER CODE END 0 */

int main(void)
{
 8011d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d0a:	b087      	sub	sp, #28
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011d0c:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8011d10:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011d14:	4bab      	ldr	r3, [pc, #684]	; (8011fc4 <main+0x2bc>)
 8011d16:	2100      	movs	r1, #0
 8011d18:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011d1c:	695a      	ldr	r2, [r3, #20]
 8011d1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011d22:	615a      	str	r2, [r3, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011d24:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8011d28:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8011d2c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011d30:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8011d34:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011d38:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8011d3c:	e000      	b.n	8011d40 <main+0x38>
    do {
 8011d3e:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011d40:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8011d44:	e000      	b.n	8011d48 <main+0x40>
      do {
 8011d46:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011d48:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011d4c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8011d50:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011d54:	499b      	ldr	r1, [pc, #620]	; (8011fc4 <main+0x2bc>)
 8011d56:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
 8011d5a:	1e53      	subs	r3, r2, #1
 8011d5c:	2a00      	cmp	r2, #0
 8011d5e:	d1f2      	bne.n	8011d46 <main+0x3e>

    ccsidr = SCB->CCSIDR;

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
 8011d60:	1e43      	subs	r3, r0, #1
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d1eb      	bne.n	8011d3e <main+0x36>
 8011d66:	f3bf 8f4f 	dsb	sy
        #endif
      } while (ways--);
    } while(sets--);
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8011d6a:	694b      	ldr	r3, [r1, #20]
 8011d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d70:	614b      	str	r3, [r1, #20]
 8011d72:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8011d76:	f3bf 8f6f 	isb	sy
  SCB_EnableDCache();

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011d7a:	f7fb fe4f 	bl	800da1c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8011d7e:	f7ff ff63 	bl	8011c48 <_Z18SystemClock_Configv>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8011d82:	f001 f9c5 	bl	8013110 <MX_GPIO_Init>
  MX_DMA_Init();
 8011d86:	f001 fa95 	bl	80132b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8011d8a:	f001 fab7 	bl	80132fc <MX_ADC1_Init>
  MX_ADC2_Init();
 8011d8e:	f001 fad7 	bl	8013340 <MX_ADC2_Init>
  MX_ADC3_Init();
 8011d92:	f001 faf7 	bl	8013384 <MX_ADC3_Init>
  MX_I2C1_Init();
 8011d96:	f001 f933 	bl	8013000 <MX_I2C1_Init>
  MX_SPI1_Init();
 8011d9a:	f7fd fb6f 	bl	800f47c <MX_SPI1_Init>
  MX_TIM4_Init();
 8011d9e:	f7fd fa8f 	bl	800f2c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8011da2:	f7fd f9c7 	bl	800f134 <MX_TIM5_Init>
  MX_TIM8_Init();
 8011da6:	f7fd fac7 	bl	800f338 <MX_TIM8_Init>
  MX_TIM3_Init();
 8011daa:	f7fd f99b 	bl	800f0e4 <MX_TIM3_Init>
  MX_I2C2_Init();
 8011dae:	f001 f945 	bl	801303c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8011db2:	f7fd f8d5 	bl	800ef60 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8011db6:	f7fd f8eb 	bl	800ef90 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  {
	  // initialize timer setting
	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8011dba:	2100      	movs	r1, #0
 8011dbc:	4882      	ldr	r0, [pc, #520]	; (8011fc8 <main+0x2c0>)
 8011dbe:	f7f9 f97b 	bl	800b0b8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8011dc2:	4c82      	ldr	r4, [pc, #520]	; (8011fcc <main+0x2c4>)
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	f7f9 f976 	bl	800b0b8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8011dcc:	2104      	movs	r1, #4
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f7f9 f972 	bl	800b0b8 <HAL_TIM_PWM_Start>
	  // initialize encoder setting
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8011dd4:	213c      	movs	r1, #60	; 0x3c
 8011dd6:	487e      	ldr	r0, [pc, #504]	; (8011fd0 <main+0x2c8>)
 8011dd8:	f7f9 f98e 	bl	800b0f8 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 8011ddc:	213c      	movs	r1, #60	; 0x3c
 8011dde:	487d      	ldr	r0, [pc, #500]	; (8011fd4 <main+0x2cc>)
 8011de0:	f7f9 f98a 	bl	800b0f8 <HAL_TIM_Encoder_Start>
  }

  int getBaud(){return baud_;}

  void init(serial_class* huart){
    iostream_ = new UartDriver<serial_class>(huart);
 8011de4:	200c      	movs	r0, #12
 8011de6:	f002 fb03 	bl	80143f0 <_Znwj>
 8011dea:	4604      	mov	r4, r0
         int MAX_RX_BUFFER=400,
			int RX_BURST_SIZE=RX_BURST_MODE>
class UartDriver{
public:

  UartDriver(Hardware *huart): huart_(huart)
 8011dec:	4b7a      	ldr	r3, [pc, #488]	; (8011fd8 <main+0x2d0>)
 8011dee:	6003      	str	r3, [r0, #0]
  {
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8011df0:	2004      	movs	r0, #4
 8011df2:	f002 fafd 	bl	80143f0 <_Znwj>
 8011df6:	4605      	mov	r5, r0
 8011df8:	6823      	ldr	r3, [r4, #0]

template<class Hardware, int RX_SIZE, int RX_BURST_SIZE>
class RxBuffer
{
public:
  RxBuffer(Hardware *huart):huart_(huart)
 8011dfa:	6003      	str	r3, [r0, #0]
  {
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8011dfc:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8011e00:	f002 faf6 	bl	80143f0 <_Znwj>
class RingBuffer
{
public:
  RingBuffer()
  {
    byte_in_progress_ = 0;
 8011e04:	2300      	movs	r3, #0
 8011e06:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
    byte_to_add_ = 0;
 8011e0a:	f8a0 3192 	strh.w	r3, [r0, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
 8011e0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011e12:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
class RxBuffer
{
public:
  RxBuffer(Hardware *huart):huart_(huart)
  {
    ring_buf_ = new RingBuffer<uint8_t, RX_SIZE>();
 8011e16:	4b71      	ldr	r3, [pc, #452]	; (8011fdc <main+0x2d4>)
 8011e18:	6018      	str	r0, [r3, #0]
    //RX
    HAL_UART_Receive_DMA(huart_, rx_value_, RX_BURST_SIZE); //1byte receive protocal
 8011e1a:	2208      	movs	r2, #8
 8011e1c:	4970      	ldr	r1, [pc, #448]	; (8011fe0 <main+0x2d8>)
 8011e1e:	6828      	ldr	r0, [r5, #0]
 8011e20:	f7f8 f9c2 	bl	800a1a8 <HAL_UART_Receive_DMA>
    huart_->hdmarx->XferCpltCallback = ReceiveCplt;
 8011e24:	682b      	ldr	r3, [r5, #0]
 8011e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e28:	4a6e      	ldr	r2, [pc, #440]	; (8011fe4 <main+0x2dc>)
 8011e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UART_DISABLE_IT(huart_, UART_IT_RXNE);
 8011e2c:	682b      	ldr	r3, [r5, #0]
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	6813      	ldr	r3, [r2, #0]
 8011e32:	f023 0320 	bic.w	r3, r3, #32
 8011e36:	6013      	str	r3, [r2, #0]
class UartDriver{
public:

  UartDriver(Hardware *huart): huart_(huart)
  {
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8011e38:	6065      	str	r5, [r4, #4]
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8011e3a:	2004      	movs	r0, #4
 8011e3c:	f002 fad8 	bl	80143f0 <_Znwj>
 8011e40:	4605      	mov	r5, r0
 8011e42:	6823      	ldr	r3, [r4, #0]

template<class Hardware, int TX_SIZE, int BUFFER_LENGTH>
class TxBuffer
{
public:
  TxBuffer(Hardware *huart): huart_(huart)
 8011e44:	6003      	str	r3, [r0, #0]
  {
    idle_flag_ = true;
 8011e46:	2201      	movs	r2, #1
 8011e48:	4b67      	ldr	r3, [pc, #412]	; (8011fe8 <main+0x2e0>)
 8011e4a:	701a      	strb	r2, [r3, #0]
    subscript_in_progress_ = 0;
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	4b67      	ldr	r3, [pc, #412]	; (8011fec <main+0x2e4>)
 8011e50:	7019      	strb	r1, [r3, #0]
    subscript_to_add_ = 0;
 8011e52:	4b67      	ldr	r3, [pc, #412]	; (8011ff0 <main+0x2e8>)
 8011e54:	7019      	strb	r1, [r3, #0]

    for(int i = 0; i < TX_SIZE; i++) 
 8011e56:	2931      	cmp	r1, #49	; 0x31
 8011e58:	dc17      	bgt.n	8011e8a <main+0x182>
      {
        tx_buffer_unit_[i].tx_len_ = 1;
 8011e5a:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8011e5e:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8011e62:	4a64      	ldr	r2, [pc, #400]	; (8011ff4 <main+0x2ec>)
 8011e64:	4413      	add	r3, r2
 8011e66:	2201      	movs	r2, #1
 8011e68:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	2af9      	cmp	r2, #249	; 0xf9
 8011e70:	dc09      	bgt.n	8011e86 <main+0x17e>
          tx_buffer_unit_[i].tx_data_[j]  = 1;
 8011e72:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8011e76:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8011e7a:	485e      	ldr	r0, [pc, #376]	; (8011ff4 <main+0x2ec>)
 8011e7c:	4403      	add	r3, r0
 8011e7e:	2001      	movs	r0, #1
 8011e80:	5498      	strb	r0, [r3, r2]
    subscript_to_add_ = 0;

    for(int i = 0; i < TX_SIZE; i++) 
      {
        tx_buffer_unit_[i].tx_len_ = 1;
        for(int j = 0; j < BUFFER_LENGTH; j++)
 8011e82:	4402      	add	r2, r0
 8011e84:	e7f3      	b.n	8011e6e <main+0x166>
  {
    idle_flag_ = true;
    subscript_in_progress_ = 0;
    subscript_to_add_ = 0;

    for(int i = 0; i < TX_SIZE; i++) 
 8011e86:	3101      	adds	r1, #1
 8011e88:	e7e5      	b.n	8011e56 <main+0x14e>
        for(int j = 0; j < BUFFER_LENGTH; j++)
          tx_buffer_unit_[i].tx_data_[j]  = 1;
      }

    //TX
    HAL_UART_Transmit_DMA(huart_, (uint8_t*)tx_buffer_unit_[0].tx_data_, tx_buffer_unit_[0].tx_len_);
 8011e8a:	495a      	ldr	r1, [pc, #360]	; (8011ff4 <main+0x2ec>)
 8011e8c:	f891 20fa 	ldrb.w	r2, [r1, #250]	; 0xfa
 8011e90:	6828      	ldr	r0, [r5, #0]
 8011e92:	f7f8 f931 	bl	800a0f8 <HAL_UART_Transmit_DMA>

    huart_->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8011e96:	682b      	ldr	r3, [r5, #0]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	6893      	ldr	r3, [r2, #8]
 8011e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ea0:	6093      	str	r3, [r2, #8]
    huart_->hdmatx->XferCpltCallback = TransmitCplt;
 8011ea2:	682b      	ldr	r3, [r5, #0]
 8011ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ea6:	4a54      	ldr	r2, [pc, #336]	; (8011ff8 <main+0x2f0>)
 8011ea8:	63da      	str	r2, [r3, #60]	; 0x3c
public:

  UartDriver(Hardware *huart): huart_(huart)
  {
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8011eaa:	60a5      	str	r5, [r4, #8]
  }

  int getBaud(){return baud_;}

  void init(serial_class* huart){
    iostream_ = new UartDriver<serial_class>(huart);
 8011eac:	4d53      	ldr	r5, [pc, #332]	; (8011ffc <main+0x2f4>)
 8011eae:	f8c5 4130 	str.w	r4, [r5, #304]	; 0x130
    iostream_->begin(baud_);
 8011eb2:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  }
  ~UartDriver(){}

  void begin(uint32_t baud_rate)
  {
    huart_->Init.BaudRate = baud_rate;
 8011eb6:	6823      	ldr	r3, [r4, #0]
 8011eb8:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(huart_);
 8011eba:	6820      	ldr	r0, [r4, #0]
 8011ebc:	f7f8 fcd0 	bl	800a860 <HAL_UART_Init>
    }

    /* Start a named seiral port */
    void initNode(typename Hardware::serial_class* port){
      hardware_.init(port);
      mode_ = 0;
 8011ec0:	2600      	movs	r6, #0
 8011ec2:	f8c5 63e4 	str.w	r6, [r5, #996]	; 0x3e4
      bytes_ = 0;
 8011ec6:	f8c5 63e8 	str.w	r6, [r5, #1000]	; 0x3e8
      index_ = 0;
 8011eca:	f8c5 63f0 	str.w	r6, [r5, #1008]	; 0x3f0
      topic_ = 0;
 8011ece:	f8c5 63ec 	str.w	r6, [r5, #1004]	; 0x3ec

  /**********************************/
  {
	  nh_.initNode(&huart1);
	  /* ugv ros node */
	  ugvnode = new RosNode(&nh_);
 8011ed2:	2078      	movs	r0, #120	; 0x78
 8011ed4:	f002 fa8c 	bl	80143f0 <_Znwj>
 8011ed8:	4604      	mov	r4, r0
  {
    public:
      int8_t data;

    Int8():
      data(0)
 8011eda:	4b49      	ldr	r3, [pc, #292]	; (8012000 <main+0x2f8>)
 8011edc:	60c3      	str	r3, [r0, #12]
 8011ede:	7406      	strb	r6, [r0, #16]
      geometry_msgs::Vector3 linear;
      geometry_msgs::Vector3 angular;

    Twist():
      linear(),
      angular()
 8011ee0:	4b48      	ldr	r3, [pc, #288]	; (8012004 <main+0x2fc>)
 8011ee2:	6183      	str	r3, [r0, #24]
      double z;

    Vector3():
      x(0),
      y(0),
      z(0)
 8011ee4:	4948      	ldr	r1, [pc, #288]	; (8012008 <main+0x300>)
 8011ee6:	6201      	str	r1, [r0, #32]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	2300      	movs	r3, #0
 8011eec:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
 8011ef0:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
 8011ef4:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
 8011ef8:	6401      	str	r1, [r0, #64]	; 0x40
 8011efa:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8011efe:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
 8011f02:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58

class RosNode
{
public:
	RosNode(ros::NodeHandle* nh)
{
 8011f06:	2300      	movs	r3, #0
 8011f08:	6603      	str	r3, [r0, #96]	; 0x60
 8011f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8011f0c:	f649 6334 	movw	r3, #40500	; 0x9e34
 8011f10:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8011f14:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 8011f18:	4b3c      	ldr	r3, [pc, #240]	; (801200c <main+0x304>)
 8011f1a:	66c3      	str	r3, [r0, #108]	; 0x6c
 8011f1c:	4b3c      	ldr	r3, [pc, #240]	; (8012010 <main+0x308>)
 8011f1e:	6703      	str	r3, [r0, #112]	; 0x70
		/* ros node initialize */
		nh_ = nh;
 8011f20:	f505 7594 	add.w	r5, r5, #296	; 0x128
 8011f24:	6005      	str	r5, [r0, #0]

		/* ros publisher initialize */
		radioflag_pub_ = new ros::Publisher("radioflag",&radioflag_msg);
 8011f26:	2014      	movs	r0, #20
 8011f28:	f002 fa62 	bl	80143f0 <_Znwj>
 8011f2c:	f104 030c 	add.w	r3, r4, #12
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 8011f30:	4a38      	ldr	r2, [pc, #224]	; (8012014 <main+0x30c>)
 8011f32:	6002      	str	r2, [r0, #0]
 8011f34:	6043      	str	r3, [r0, #4]
 8011f36:	6106      	str	r6, [r0, #16]
 8011f38:	6060      	str	r0, [r4, #4]
		odom_pub_ = new ros::Publisher("odometry/raw",&odom_msg);
 8011f3a:	2014      	movs	r0, #20
 8011f3c:	f002 fa58 	bl	80143f0 <_Znwj>
 8011f40:	e00c      	b.n	8011f5c <main+0x254>
class UartDriver{
public:

  UartDriver(Hardware *huart): huart_(huart)
  {
    rx_ = new RxBuffer<Hardware, MAX_RX_BUFFER, RX_BURST_SIZE>(huart_);
 8011f42:	4628      	mov	r0, r5
 8011f44:	f002 fc80 	bl	8014848 <_ZdlPv>
 8011f48:	e003      	b.n	8011f52 <main+0x24a>
    tx_ = new TxBuffer<Hardware, MAX_TX_BUFFER, MAX_TX_BUFFER_LENGTH>(huart_);
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	f002 fc7c 	bl	8014848 <_ZdlPv>
 8011f50:	e7ff      	b.n	8011f52 <main+0x24a>
  }

  int getBaud(){return baud_;}

  void init(serial_class* huart){
    iostream_ = new UartDriver<serial_class>(huart);
 8011f52:	4620      	mov	r0, r4
 8011f54:	f002 fc78 	bl	8014848 <_ZdlPv>
 8011f58:	f001 fe56 	bl	8013c08 <__cxa_end_cleanup>
 8011f5c:	f104 0318 	add.w	r3, r4, #24
 8011f60:	4a2d      	ldr	r2, [pc, #180]	; (8012018 <main+0x310>)
 8011f62:	6002      	str	r2, [r0, #0]
 8011f64:	6043      	str	r3, [r0, #4]
 8011f66:	2300      	movs	r3, #0
 8011f68:	6103      	str	r3, [r0, #16]
 8011f6a:	60a0      	str	r0, [r4, #8]
		//publish the msgs
		nh_->advertise(*radioflag_pub_);
 8011f6c:	6821      	ldr	r1, [r4, #0]
 8011f6e:	6862      	ldr	r2, [r4, #4]
     */

    /* Register a new publisher */
    bool advertise(Publisher & p)
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8011f70:	2b13      	cmp	r3, #19
 8011f72:	dc10      	bgt.n	8011f96 <main+0x28e>
        if(publishers[i] == 0){ // empty slot
 8011f74:	f103 0086 	add.w	r0, r3, #134	; 0x86
 8011f78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011f7c:	6840      	ldr	r0, [r0, #4]
 8011f7e:	b940      	cbnz	r0, 8011f92 <main+0x28a>
          publishers[i] = &p;
 8011f80:	f103 0086 	add.w	r0, r3, #134	; 0x86
 8011f84:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011f88:	6042      	str	r2, [r0, #4]
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8011f8a:	3378      	adds	r3, #120	; 0x78
 8011f8c:	6093      	str	r3, [r2, #8]
          p.nh_ = this;
 8011f8e:	60d1      	str	r1, [r2, #12]
 8011f90:	e001      	b.n	8011f96 <main+0x28e>
     */

    /* Register a new publisher */
    bool advertise(Publisher & p)
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8011f92:	3301      	adds	r3, #1
 8011f94:	e7ec      	b.n	8011f70 <main+0x268>
		nh_->advertise(*odom_pub_);
 8011f96:	6821      	ldr	r1, [r4, #0]
 8011f98:	68a2      	ldr	r2, [r4, #8]
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	2b13      	cmp	r3, #19
 8011f9e:	dc3d      	bgt.n	801201c <main+0x314>
        if(publishers[i] == 0){ // empty slot
 8011fa0:	f103 0086 	add.w	r0, r3, #134	; 0x86
 8011fa4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011fa8:	6840      	ldr	r0, [r0, #4]
 8011faa:	b940      	cbnz	r0, 8011fbe <main+0x2b6>
          publishers[i] = &p;
 8011fac:	f103 0086 	add.w	r0, r3, #134	; 0x86
 8011fb0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8011fb4:	6042      	str	r2, [r0, #4]
          p.id_ = i+100+MAX_SUBSCRIBERS;
 8011fb6:	3378      	adds	r3, #120	; 0x78
 8011fb8:	6093      	str	r3, [r2, #8]
          p.nh_ = this;
 8011fba:	60d1      	str	r1, [r2, #12]
 8011fbc:	e02e      	b.n	801201c <main+0x314>
     */

    /* Register a new publisher */
    bool advertise(Publisher & p)
    {
      for(int i = 0; i < MAX_PUBLISHERS; i++){
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	e7ec      	b.n	8011f9c <main+0x294>
 8011fc2:	bf00      	nop
 8011fc4:	e000ed00 	.word	0xe000ed00
 8011fc8:	20003e4c 	.word	0x20003e4c
 8011fcc:	20003dd4 	.word	0x20003dd4
 8011fd0:	20003d98 	.word	0x20003d98
 8011fd4:	20003e10 	.word	0x20003e10
 8011fd8:	20003cb8 	.word	0x20003cb8
 8011fdc:	20003ef8 	.word	0x20003ef8
 8011fe0:	20003ef0 	.word	0x20003ef0
 8011fe4:	0800fc95 	.word	0x0800fc95
 8011fe8:	20000afd 	.word	0x20000afd
 8011fec:	20000afe 	.word	0x20000afe
 8011ff0:	20003eec 	.word	0x20003eec
 8011ff4:	20000b00 	.word	0x20000b00
 8011ff8:	0800fd05 	.word	0x0800fd05
 8011ffc:	20000578 	.word	0x20000578
 8012000:	0801b11c 	.word	0x0801b11c
 8012004:	0801b14c 	.word	0x0801b14c
 8012008:	0801b134 	.word	0x0801b134
 801200c:	41a00000 	.word	0x41a00000
 8012010:	459c4000 	.word	0x459c4000
 8012014:	0801b4d4 	.word	0x0801b4d4
 8012018:	0801b4e0 	.word	0x0801b4e0

		/* ros subscriber initialize */
		cmd_vel_sub_ = new ros::Subscriber2<geometry_msgs::Twist, RosNode>
		("cmd_vel", &RosNode::Cmd_Vel_Callback, this);
 801201c:	2068      	movs	r0, #104	; 0x68
 801201e:	f002 f9e7 	bl	80143f0 <_Znwj>
 8012022:	4603      	mov	r3, r0
 8012024:	4a34      	ldr	r2, [pc, #208]	; (80120f8 <main+0x3f0>)
 8012026:	9204      	str	r2, [sp, #16]
 8012028:	2200      	movs	r2, #0
 801202a:	9205      	str	r2, [sp, #20]
 801202c:	a906      	add	r1, sp, #24
 801202e:	e911 0003 	ldmdb	r1, {r0, r1}
 8012032:	e88d 0003 	stmia.w	sp, {r0, r1}
    public:
      typedef void(T::*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber2(const char * topic_name, CallbackT cb, T *obj,  int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        obj_(obj), fun_obj_(cb), endpoint_(endpoint)
 8012036:	4931      	ldr	r1, [pc, #196]	; (80120fc <main+0x3f4>)
 8012038:	6019      	str	r1, [r3, #0]
 801203a:	4931      	ldr	r1, [pc, #196]	; (8012100 <main+0x3f8>)
 801203c:	6119      	str	r1, [r3, #16]
 801203e:	4d31      	ldr	r5, [pc, #196]	; (8012104 <main+0x3fc>)
 8012040:	619d      	str	r5, [r3, #24]
 8012042:	2000      	movs	r0, #0
 8012044:	2100      	movs	r1, #0
 8012046:	e9c3 0108 	strd	r0, r1, [r3, #32]
 801204a:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 801204e:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
 8012052:	639d      	str	r5, [r3, #56]	; 0x38
 8012054:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
 8012058:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
 801205c:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
 8012060:	659c      	str	r4, [r3, #88]	; 0x58
 8012062:	ad02      	add	r5, sp, #8
 8012064:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8012068:	e885 0003 	stmia.w	r5, {r0, r1}
 801206c:	f103 065c 	add.w	r6, r3, #92	; 0x5c
 8012070:	e886 0003 	stmia.w	r6, {r0, r1}
 8012074:	2101      	movs	r1, #1
 8012076:	6659      	str	r1, [r3, #100]	; 0x64
      {
        //std::binder1st t  = std::bind1st(std::mem_fun1_t())
        topic_ = topic_name;
 8012078:	4923      	ldr	r1, [pc, #140]	; (8012108 <main+0x400>)
 801207a:	6099      	str	r1, [r3, #8]
 801207c:	6763      	str	r3, [r4, #116]	; 0x74
		nh_->subscribe<geometry_msgs::Twist, RosNode>(*cmd_vel_sub_);
 801207e:	6821      	ldr	r1, [r4, #0]
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8012080:	2a13      	cmp	r2, #19
 8012082:	dc0f      	bgt.n	80120a4 <main+0x39c>
        if(subscribers[i] == 0){ // empty slot
 8012084:	f102 009a 	add.w	r0, r2, #154	; 0x9a
 8012088:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801208c:	6840      	ldr	r0, [r0, #4]
 801208e:	b938      	cbnz	r0, 80120a0 <main+0x398>
          subscribers[i] = (Subscriber_*) &s;
 8012090:	f102 009a 	add.w	r0, r2, #154	; 0x9a
 8012094:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8012098:	604b      	str	r3, [r1, #4]
          s.id_ = i+100;
 801209a:	3264      	adds	r2, #100	; 0x64
 801209c:	605a      	str	r2, [r3, #4]
 801209e:	e001      	b.n	80120a4 <main+0x39c>
      return false;
    }
    /* Register a new subscriber, which is a member of class*/
    template<typename MsgT, class T>
    bool subscribe(Subscriber2< MsgT, T> & s){
      for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 80120a0:	3201      	adds	r2, #1
 80120a2:	e7ed      	b.n	8012080 <main+0x378>
 80120a4:	4d19      	ldr	r5, [pc, #100]	; (801210c <main+0x404>)
 80120a6:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
	  /* Sensors */
#if IMU_FLAG
	  imu_.init(&hspi1, &nh_);
 80120aa:	f505 7694 	add.w	r6, r5, #296	; 0x128
 80120ae:	f205 4434 	addw	r4, r5, #1076	; 0x434
 80120b2:	4632      	mov	r2, r6
 80120b4:	4916      	ldr	r1, [pc, #88]	; (8012110 <main+0x408>)
 80120b6:	4620      	mov	r0, r4
 80120b8:	f7fc f842 	bl	800e140 <_ZN3IMU4initEP19__SPI_HandleTypeDefPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>

void  init(IMU* imu, Baro* baro, GPS* gps, ros::NodeHandle* nh)
  {
    nh_ = nh;
 80120bc:	602e      	str	r6, [r5, #0]
      {
        attitude_estimate_flag_ = false;
      }
    else
      {
        attitude_estimate_flag_ = true;
 80120be:	2701      	movs	r7, #1
 80120c0:	f885 70bc 	strb.w	r7, [r5, #188]	; 0xbc
        imu_ = imu;
 80120c4:	606c      	str	r4, [r5, #4]
        attitude_estimator_.init(imu_, nh_);
 80120c6:	4632      	mov	r2, r6
 80120c8:	4621      	mov	r1, r4
 80120ca:	f105 0010 	add.w	r0, r5, #16
 80120ce:	f7ff fc9d 	bl	8011a0c <_ZN16AttitudeEstimate4initEP3IMUPN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
      }

    if(baro == NULL)
      {
        altitude_estimate_flag_ = false;
 80120d2:	2300      	movs	r3, #0
 80120d4:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
        altitude_estimator_.init(imu_, baro_, nh_);
      }

    if(gps == NULL)
      {
        pos_estimate_flag_ = false;
 80120d8:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe

#endif  // baro condition

#endif // imu condition
	  /* all process can start right now! */
	  start_process_flag_ = true;
 80120dc:	f885 754c 	strb.w	r7, [r5, #1356]	; 0x54c
  while (1)
    {
      /* USER CODE END WHILE */
			
      /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 80120e0:	2064      	movs	r0, #100	; 0x64
 80120e2:	f7fb fcbb 	bl	800da5c <HAL_Delay>
#if IMU_FLAG
	  imu_.ledOutput();
 80120e6:	480b      	ldr	r0, [pc, #44]	; (8012114 <main+0x40c>)
 80120e8:	f7fb feb6 	bl	800de58 <_ZN3IMU9ledOutputEv>
 80120ec:	e7f8      	b.n	80120e0 <main+0x3d8>

  /**********************************/
  {
	  nh_.initNode(&huart1);
	  /* ugv ros node */
	  ugvnode = new RosNode(&nh_);
 80120ee:	4620      	mov	r0, r4
 80120f0:	f002 fbaa 	bl	8014848 <_ZdlPv>
 80120f4:	f001 fd88 	bl	8013c08 <__cxa_end_cleanup>
 80120f8:	0800fc31 	.word	0x0800fc31
 80120fc:	0801b178 	.word	0x0801b178
 8012100:	0801b14c 	.word	0x0801b14c
 8012104:	0801b134 	.word	0x0801b134
 8012108:	0801b4f0 	.word	0x0801b4f0
 801210c:	20000578 	.word	0x20000578
 8012110:	20003e88 	.word	0x20003e88
 8012114:	200009ac 	.word	0x200009ac

08012118 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8012118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801211a:	b083      	sub	sp, #12
 801211c:	4604      	mov	r4, r0
 801211e:	460d      	mov	r5, r1
 8012120:	2301      	movs	r3, #1
 8012122:	9300      	str	r3, [sp, #0]

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012124:	6842      	ldr	r2, [r0, #4]
 8012126:	6803      	ldr	r3, [r0, #0]
 8012128:	1ad3      	subs	r3, r2, r3
 801212a:	109b      	asrs	r3, r3, #2
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
 801212c:	9301      	str	r3, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 801212e:	b90b      	cbnz	r3, 8012134 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x1c>
	return __b;
 8012130:	4669      	mov	r1, sp
 8012132:	e000      	b.n	8012136 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x1e>
      return __a;
 8012134:	a901      	add	r1, sp, #4
 8012136:	680e      	ldr	r6, [r1, #0]
 8012138:	441e      	add	r6, r3

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	1ad2      	subs	r2, r2, r3
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801213e:	ebb6 0fa2 	cmp.w	r6, r2, asr #2
 8012142:	d303      	bcc.n	801214c <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x34>
 8012144:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8012148:	d203      	bcs.n	8012152 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x3a>
 801214a:	e004      	b.n	8012156 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x3e>
 801214c:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8012150:	e001      	b.n	8012156 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x3e>
 8012152:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012156:	b14e      	cbz	r6, 801216c <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x54>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 8012158:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 801215c:	d301      	bcc.n	8012162 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x4a>
	  std::__throw_bad_alloc();
 801215e:	f002 fb75 	bl	801484c <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012162:	00b0      	lsls	r0, r6, #2
 8012164:	f002 f944 	bl	80143f0 <_Znwj>
 8012168:	4607      	mov	r7, r0
 801216a:	e000      	b.n	801216e <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x56>
 801216c:	2700      	movs	r7, #0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801216e:	6863      	ldr	r3, [r4, #4]
 8012170:	6822      	ldr	r2, [r4, #0]
 8012172:	1a9b      	subs	r3, r3, r2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012174:	682a      	ldr	r2, [r5, #0]
 8012176:	42df      	cmn	r7, r3
 8012178:	d000      	beq.n	801217c <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x64>
 801217a:	50fa      	str	r2, [r7, r3]
				     std::forward<_Args>(__args)...);
	    __new_finish = pointer();

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
 801217c:	6821      	ldr	r1, [r4, #0]
 801217e:	6865      	ldr	r5, [r4, #4]
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8012180:	1a6d      	subs	r5, r5, r1
	  if (_Num)
 8012182:	08ab      	lsrs	r3, r5, #2
 8012184:	d003      	beq.n	801218e <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8012186:	462a      	mov	r2, r5
 8012188:	4638      	mov	r0, r7
 801218a:	f004 fe91 	bl	8016eb0 <memmove>
	  return __result + _Num;
 801218e:	443d      	add	r5, r7
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
 8012190:	3504      	adds	r5, #4
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
 8012192:	6820      	ldr	r0, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8012194:	b108      	cbz	r0, 801219a <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_+0x82>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8012196:	f002 fb57 	bl	8014848 <_ZdlPv>
	this->_M_impl._M_start = __new_start;
 801219a:	6027      	str	r7, [r4, #0]
	this->_M_impl._M_finish = __new_finish;
 801219c:	6065      	str	r5, [r4, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
 801219e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 80121a2:	60a6      	str	r6, [r4, #8]
      }
 80121a4:	b003      	add	sp, #12
 80121a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121a8 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 80121a8:	b538      	push	{r3, r4, r5, lr}
 80121aa:	4604      	mov	r4, r0
 80121ac:	460d      	mov	r5, r1
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
 80121ae:	3104      	adds	r1, #4
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 80121b0:	6842      	ldr	r2, [r0, #4]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 80121b2:	428a      	cmp	r2, r1
 80121b4:	d005      	beq.n	80121c2 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE+0x1a>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80121b6:	1a52      	subs	r2, r2, r1
	  if (_Num)
 80121b8:	0893      	lsrs	r3, r2, #2
 80121ba:	d002      	beq.n	80121c2 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE+0x1a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80121bc:	4628      	mov	r0, r5
 80121be:	f004 fe77 	bl	8016eb0 <memmove>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
 80121c2:	6863      	ldr	r3, [r4, #4]
 80121c4:	3b04      	subs	r3, #4
 80121c6:	6063      	str	r3, [r4, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }
 80121c8:	4628      	mov	r0, r5
 80121ca:	bd38      	pop	{r3, r4, r5, pc}

080121cc <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80121cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ce:	b083      	sub	sp, #12
 80121d0:	4604      	mov	r4, r0
 80121d2:	460d      	mov	r5, r1
 80121d4:	2301      	movs	r3, #1
 80121d6:	9300      	str	r3, [sp, #0]

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80121d8:	6842      	ldr	r2, [r0, #4]
 80121da:	6803      	ldr	r3, [r0, #0]
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	109b      	asrs	r3, r3, #2
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
 80121e0:	9301      	str	r3, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80121e2:	b90b      	cbnz	r3, 80121e8 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x1c>
	return __b;
 80121e4:	4669      	mov	r1, sp
 80121e6:	e000      	b.n	80121ea <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x1e>
      return __a;
 80121e8:	a901      	add	r1, sp, #4
 80121ea:	680e      	ldr	r6, [r1, #0]
 80121ec:	441e      	add	r6, r3

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	1ad2      	subs	r2, r2, r3
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80121f2:	ebb6 0fa2 	cmp.w	r6, r2, asr #2
 80121f6:	d303      	bcc.n	8012200 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x34>
 80121f8:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80121fc:	d203      	bcs.n	8012206 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x3a>
 80121fe:	e004      	b.n	801220a <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x3e>
 8012200:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 8012204:	e001      	b.n	801220a <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x3e>
 8012206:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801220a:	b14e      	cbz	r6, 8012220 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x54>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 801220c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8012210:	d301      	bcc.n	8012216 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x4a>
	  std::__throw_bad_alloc();
 8012212:	f002 fb1b 	bl	801484c <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012216:	00b0      	lsls	r0, r6, #2
 8012218:	f002 f8ea 	bl	80143f0 <_Znwj>
 801221c:	4607      	mov	r7, r0
 801221e:	e000      	b.n	8012222 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x56>
 8012220:	2700      	movs	r7, #0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012222:	6863      	ldr	r3, [r4, #4]
 8012224:	6822      	ldr	r2, [r4, #0]
 8012226:	1a9b      	subs	r3, r3, r2

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012228:	682a      	ldr	r2, [r5, #0]
 801222a:	42df      	cmn	r7, r3
 801222c:	d000      	beq.n	8012230 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x64>
 801222e:	50fa      	str	r2, [r7, r3]
				     std::forward<_Args>(__args)...);
	    __new_finish = pointer();

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
 8012230:	6821      	ldr	r1, [r4, #0]
 8012232:	6865      	ldr	r5, [r4, #4]
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8012234:	1a6d      	subs	r5, r5, r1
	  if (_Num)
 8012236:	08ab      	lsrs	r3, r5, #2
 8012238:	d003      	beq.n	8012242 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x76>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801223a:	462a      	mov	r2, r5
 801223c:	4638      	mov	r0, r7
 801223e:	f004 fe37 	bl	8016eb0 <memmove>
	  return __result + _Num;
 8012242:	443d      	add	r5, r7
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
 8012244:	3504      	adds	r5, #4
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
 8012246:	6820      	ldr	r0, [r4, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8012248:	b108      	cbz	r0, 801224e <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_+0x82>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 801224a:	f002 fafd 	bl	8014848 <_ZdlPv>
	this->_M_impl._M_start = __new_start;
 801224e:	6027      	str	r7, [r4, #0]
	this->_M_impl._M_finish = __new_finish;
 8012250:	6065      	str	r5, [r4, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
 8012252:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8012256:	60a6      	str	r6, [r4, #8]
      }
 8012258:	b003      	add	sp, #12
 801225a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801225c <_ZNSt6vectorIiSaIiEE12emplace_backIIiEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 801225c:	b508      	push	{r3, lr}
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801225e:	6843      	ldr	r3, [r0, #4]
 8012260:	6882      	ldr	r2, [r0, #8]
 8012262:	4293      	cmp	r3, r2
 8012264:	d006      	beq.n	8012274 <_ZNSt6vectorIiSaIiEE12emplace_backIIiEEEvDpOT_+0x18>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012266:	680a      	ldr	r2, [r1, #0]
 8012268:	b103      	cbz	r3, 801226c <_ZNSt6vectorIiSaIiEE12emplace_backIIiEEEvDpOT_+0x10>
 801226a:	601a      	str	r2, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 801226c:	6843      	ldr	r3, [r0, #4]
 801226e:	3304      	adds	r3, #4
 8012270:	6043      	str	r3, [r0, #4]
 8012272:	bd08      	pop	{r3, pc}
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 8012274:	f7ff ffaa 	bl	80121cc <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIiEEEvDpOT_>
 8012278:	bd08      	pop	{r3, pc}
 801227a:	bf00      	nop

0801227c <HAL_SYSTICK_Callback>:
static int counter = 0;

// attitude estimate and  control is at sys timer it callback
// update interrupt
void HAL_SYSTICK_Callback(void)
{
 801227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012280:	b0ce      	sub	sp, #312	; 0x138
	static uint32_t last_time = HAL_GetTick();
 8012282:	4bb0      	ldr	r3, [pc, #704]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012284:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8012288:	f013 0f01 	tst.w	r3, #1
 801228c:	d105      	bne.n	801229a <HAL_SYSTICK_Callback+0x1e>
 801228e:	f7fb fbdf 	bl	800da50 <HAL_GetTick>
 8012292:	2201      	movs	r2, #1
 8012294:	4bab      	ldr	r3, [pc, #684]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012296:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
	uint32_t now_time = HAL_GetTick();
 801229a:	f7fb fbd9 	bl	800da50 <HAL_GetTick>

	if(!start_process_flag_)
 801229e:	4ba9      	ldr	r3, [pc, #676]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80122a0:	f893 654c 	ldrb.w	r6, [r3, #1356]	; 0x54c
 80122a4:	2e00      	cmp	r6, #0
 80122a6:	f000 8697 	beq.w	8012fd8 <HAL_SYSTICK_Callback+0xd5c>

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}
 80122aa:	f7fb fbd1 	bl	800da50 <HAL_GetTick>
 80122ae:	4605      	mov	r5, r0

    virtual int spinOnce(){

      /* restart if timed out */
      uint32_t c_time = hardware_.time();
      if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 80122b0:	4ba4      	ldr	r3, [pc, #656]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80122b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80122b6:	1ac3      	subs	r3, r0, r3
 80122b8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80122bc:	4293      	cmp	r3, r2
 80122be:	d903      	bls.n	80122c8 <HAL_SYSTICK_Callback+0x4c>
        configured_ = false;
 80122c0:	2200      	movs	r2, #0
 80122c2:	4ba0      	ldr	r3, [pc, #640]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80122c4:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
      }

      /* reset if message has timed out */
      if ( mode_ != MODE_FIRST_FF){
 80122c8:	4b9e      	ldr	r3, [pc, #632]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80122ca:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 80122ce:	b143      	cbz	r3, 80122e2 <HAL_SYSTICK_Callback+0x66>
        if (c_time > last_msg_timeout_time){
 80122d0:	4b9c      	ldr	r3, [pc, #624]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80122d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80122d6:	429d      	cmp	r5, r3
 80122d8:	d903      	bls.n	80122e2 <HAL_SYSTICK_Callback+0x66>
          mode_ = MODE_FIRST_FF;
 80122da:	2200      	movs	r2, #0
 80122dc:	4b99      	ldr	r3, [pc, #612]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80122de:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
    uint8_t r_data;
    ring_buf_->pop(r_data);
    return  r_data;
  }

  bool available() { return ring_buf_->length(); }
 80122e2:	4b99      	ldr	r3, [pc, #612]	; (8012548 <HAL_SYSTICK_Callback+0x2cc>)
 80122e4:	681a      	ldr	r2, [r3, #0]
    return true;
  }

  uint16_t length()
  {
    if(byte_to_add_ - byte_in_progress_ >= 0)
 80122e6:	f9b2 0192 	ldrsh.w	r0, [r2, #402]	; 0x192
 80122ea:	f9b2 3190 	ldrsh.w	r3, [r2, #400]	; 0x190
 80122ee:	1ac1      	subs	r1, r0, r3
 80122f0:	2900      	cmp	r1, #0
 80122f2:	db01      	blt.n	80122f8 <HAL_SYSTICK_Callback+0x7c>
      return (byte_to_add_ - byte_in_progress_);
 80122f4:	b289      	uxth	r1, r1
 80122f6:	e004      	b.n	8012302 <HAL_SYSTICK_Callback+0x86>
    else 
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
 80122f8:	f8b2 1194 	ldrh.w	r1, [r2, #404]	; 0x194
 80122fc:	1a59      	subs	r1, r3, r1
 80122fe:	4401      	add	r1, r0
 8012300:	b289      	uxth	r1, r1
    return true;
  }

  int read()
  {
    if(!available()) return -1;
 8012302:	b179      	cbz	r1, 8012324 <HAL_SYSTICK_Callback+0xa8>
  }
  ~RingBuffer(){  }

  bool pop(T& pop_value)
  {
    if (byte_in_progress_ != byte_to_add_)
 8012304:	4298      	cmp	r0, r3
 8012306:	d00b      	beq.n	8012320 <HAL_SYSTICK_Callback+0xa4>
      {
        pop_value =  buf_[byte_in_progress_];
 8012308:	5cd4      	ldrb	r4, [r2, r3]

        byte_in_progress_++;
 801230a:	3301      	adds	r3, #1
 801230c:	b21b      	sxth	r3, r3
 801230e:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
        if (byte_in_progress_ == buffer_length_)
 8012312:	f8b2 1194 	ldrh.w	r1, [r2, #404]	; 0x194
 8012316:	428b      	cmp	r3, r1
 8012318:	d102      	bne.n	8012320 <HAL_SYSTICK_Callback+0xa4>
          byte_in_progress_ = 0;
 801231a:	2300      	movs	r3, #0
 801231c:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
  {
    if(!available()) return -1;

    uint8_t r_data;
    ring_buf_->pop(r_data);
    return  r_data;
 8012320:	4622      	mov	r2, r4
 8012322:	e001      	b.n	8012328 <HAL_SYSTICK_Callback+0xac>
    return true;
  }

  int read()
  {
    if(!available()) return -1;
 8012324:	f04f 32ff 	mov.w	r2, #4294967295

      /* while available buffer, read data */
      while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
 8012328:	2a00      	cmp	r2, #0
 801232a:	f2c0 829b 	blt.w	8012864 <HAL_SYSTICK_Callback+0x5e8>
            break;
          checksum_ += data;
 801232e:	4b85      	ldr	r3, [pc, #532]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012330:	f8d3 13f4 	ldr.w	r1, [r3, #1012]	; 0x3f4
 8012334:	4411      	add	r1, r2
 8012336:	f8c3 13f4 	str.w	r1, [r3, #1012]	; 0x3f4
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 801233a:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 801233e:	2b07      	cmp	r3, #7
 8012340:	d113      	bne.n	801236a <HAL_SYSTICK_Callback+0xee>
            message_in[index_++] = data;
 8012342:	4b80      	ldr	r3, [pc, #512]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012344:	f8d3 13f0 	ldr.w	r1, [r3, #1008]	; 0x3f0
 8012348:	1c48      	adds	r0, r1, #1
 801234a:	f8c3 03f0 	str.w	r0, [r3, #1008]	; 0x3f0
 801234e:	4419      	add	r1, r3
 8012350:	f881 2144 	strb.w	r2, [r1, #324]	; 0x144
            bytes_--;
 8012354:	f8d3 23e8 	ldr.w	r2, [r3, #1000]	; 0x3e8
 8012358:	3a01      	subs	r2, #1
 801235a:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 801235e:	2a00      	cmp	r2, #0
 8012360:	d1bf      	bne.n	80122e2 <HAL_SYSTICK_Callback+0x66>
              mode_ = MODE_MSG_CHECKSUM;
 8012362:	2208      	movs	r2, #8
 8012364:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 8012368:	e7bb      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
          }else if( mode_ == MODE_FIRST_FF ){
 801236a:	b9a3      	cbnz	r3, 8012396 <HAL_SYSTICK_Callback+0x11a>
            if(data == 0xff){
 801236c:	2aff      	cmp	r2, #255	; 0xff
 801236e:	d108      	bne.n	8012382 <HAL_SYSTICK_Callback+0x106>
              mode_++;
 8012370:	4a74      	ldr	r2, [pc, #464]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012372:	3301      	adds	r3, #1
 8012374:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 8012378:	f105 0314 	add.w	r3, r5, #20
 801237c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8012380:	e7af      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>

  void write(uint8_t* data, int length){
    iostream_->write(data, length);
  }

  uint32_t time(){return HAL_GetTick();}
 8012382:	f7fb fb65 	bl	800da50 <HAL_GetTick>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 8012386:	1b40      	subs	r0, r0, r5
 8012388:	2805      	cmp	r0, #5
 801238a:	d9aa      	bls.n	80122e2 <HAL_SYSTICK_Callback+0x66>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
 801238c:	2200      	movs	r2, #0
 801238e:	4b6d      	ldr	r3, [pc, #436]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012390:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 8012394:	e286      	b.n	80128a4 <HAL_SYSTICK_Callback+0x628>
              return -2;
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
 8012396:	2b01      	cmp	r3, #1
 8012398:	d120      	bne.n	80123dc <HAL_SYSTICK_Callback+0x160>
            if(data == PROTOCOL_VER){
 801239a:	2afe      	cmp	r2, #254	; 0xfe
 801239c:	d104      	bne.n	80123a8 <HAL_SYSTICK_Callback+0x12c>
              mode_++;
 801239e:	3301      	adds	r3, #1
 80123a0:	4a68      	ldr	r2, [pc, #416]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80123a2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
 80123a6:	e79c      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
            }else{
              mode_ = MODE_FIRST_FF;
 80123a8:	4b66      	ldr	r3, [pc, #408]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80123aa:	2200      	movs	r2, #0
 80123ac:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
              if (configured_ == false)
 80123b0:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d194      	bne.n	80122e2 <HAL_SYSTICK_Callback+0x66>
 80123b8:	4b64      	ldr	r3, [pc, #400]	; (801254c <HAL_SYSTICK_Callback+0x2d0>)
 80123ba:	9303      	str	r3, [sp, #12]
 80123bc:	9204      	str	r2, [sp, #16]
 80123be:	9205      	str	r2, [sp, #20]
     */

    void requestSyncTime()
    {
      std_msgs::Time t;
      publish(TopicInfo::ID_TIME, &t);
 80123c0:	4f60      	ldr	r7, [pc, #384]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80123c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	aa03      	add	r2, sp, #12
 80123ca:	210a      	movs	r1, #10
 80123cc:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80123d0:	4798      	blx	r3
 80123d2:	f7fb fb3d 	bl	800da50 <HAL_GetTick>
      rt_time = hardware_.time();
 80123d6:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 80123da:	e782      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
            }else{
              mode_ = MODE_FIRST_FF;
              if (configured_ == false)
                requestSyncTime(); 	/* send a msg back showing our protocol version */
            }
          }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 80123dc:	2b02      	cmp	r3, #2
 80123de:	d10b      	bne.n	80123f8 <HAL_SYSTICK_Callback+0x17c>
            bytes_ = data;
 80123e0:	4958      	ldr	r1, [pc, #352]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80123e2:	f8c1 23e8 	str.w	r2, [r1, #1000]	; 0x3e8
            index_ = 0;
 80123e6:	2000      	movs	r0, #0
 80123e8:	f8c1 03f0 	str.w	r0, [r1, #1008]	; 0x3f0
            mode_++;
 80123ec:	3301      	adds	r3, #1
 80123ee:	f8c1 33e4 	str.w	r3, [r1, #996]	; 0x3e4
            checksum_ = data;               /* first byte for calculating size checksum */
 80123f2:	f8c1 23f4 	str.w	r2, [r1, #1012]	; 0x3f4
 80123f6:	e774      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 80123f8:	2b03      	cmp	r3, #3
 80123fa:	d10a      	bne.n	8012412 <HAL_SYSTICK_Callback+0x196>
            bytes_ += data<<8;
 80123fc:	4951      	ldr	r1, [pc, #324]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80123fe:	f8d1 03e8 	ldr.w	r0, [r1, #1000]	; 0x3e8
 8012402:	eb00 2202 	add.w	r2, r0, r2, lsl #8
 8012406:	f8c1 23e8 	str.w	r2, [r1, #1000]	; 0x3e8
            mode_++;
 801240a:	3301      	adds	r3, #1
 801240c:	f8c1 33e4 	str.w	r3, [r1, #996]	; 0x3e4
 8012410:	e767      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 8012412:	2b04      	cmp	r3, #4
 8012414:	d113      	bne.n	801243e <HAL_SYSTICK_Callback+0x1c2>
            if( (checksum_%256) == 255)
 8012416:	4a4e      	ldr	r2, [pc, #312]	; (8012550 <HAL_SYSTICK_Callback+0x2d4>)
 8012418:	400a      	ands	r2, r1
 801241a:	2a00      	cmp	r2, #0
 801241c:	da03      	bge.n	8012426 <HAL_SYSTICK_Callback+0x1aa>
 801241e:	3a01      	subs	r2, #1
 8012420:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8012424:	3201      	adds	r2, #1
 8012426:	2aff      	cmp	r2, #255	; 0xff
 8012428:	d104      	bne.n	8012434 <HAL_SYSTICK_Callback+0x1b8>
              mode_++;
 801242a:	3301      	adds	r3, #1
 801242c:	4a45      	ldr	r2, [pc, #276]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 801242e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
 8012432:	e756      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
            else
              mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8012434:	2200      	movs	r2, #0
 8012436:	4b43      	ldr	r3, [pc, #268]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012438:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 801243c:	e751      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
          }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 801243e:	2b05      	cmp	r3, #5
 8012440:	d108      	bne.n	8012454 <HAL_SYSTICK_Callback+0x1d8>
            topic_ = data;
 8012442:	4940      	ldr	r1, [pc, #256]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 8012444:	f8c1 23ec 	str.w	r2, [r1, #1004]	; 0x3ec
            mode_++;
 8012448:	3301      	adds	r3, #1
 801244a:	f8c1 33e4 	str.w	r3, [r1, #996]	; 0x3e4
            checksum_ = data;               /* first byte included in checksum */
 801244e:	f8c1 23f4 	str.w	r2, [r1, #1012]	; 0x3f4
 8012452:	e746      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8012454:	2b06      	cmp	r3, #6
 8012456:	d113      	bne.n	8012480 <HAL_SYSTICK_Callback+0x204>
            topic_ += data<<8;
 8012458:	4b3a      	ldr	r3, [pc, #232]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 801245a:	f8d3 13ec 	ldr.w	r1, [r3, #1004]	; 0x3ec
 801245e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 8012462:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
            mode_ = MODE_MESSAGE;
 8012466:	2207      	movs	r2, #7
 8012468:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
            if(bytes_ == 0)
 801246c:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8012470:	2b00      	cmp	r3, #0
 8012472:	f47f af36 	bne.w	80122e2 <HAL_SYSTICK_Callback+0x66>
              mode_ = MODE_MSG_CHECKSUM;
 8012476:	2208      	movs	r2, #8
 8012478:	4b32      	ldr	r3, [pc, #200]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 801247a:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 801247e:	e730      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 8012480:	2b08      	cmp	r3, #8
 8012482:	f47f af2e 	bne.w	80122e2 <HAL_SYSTICK_Callback+0x66>
            mode_ = MODE_FIRST_FF;
 8012486:	2200      	movs	r2, #0
 8012488:	4b2e      	ldr	r3, [pc, #184]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 801248a:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
            if( (checksum_%256) == 255){
 801248e:	4b30      	ldr	r3, [pc, #192]	; (8012550 <HAL_SYSTICK_Callback+0x2d4>)
 8012490:	400b      	ands	r3, r1
 8012492:	4293      	cmp	r3, r2
 8012494:	da03      	bge.n	801249e <HAL_SYSTICK_Callback+0x222>
 8012496:	3b01      	subs	r3, #1
 8012498:	f063 03ff 	orn	r3, r3, #255	; 0xff
 801249c:	3301      	adds	r3, #1
 801249e:	2bff      	cmp	r3, #255	; 0xff
 80124a0:	f47f af1f 	bne.w	80122e2 <HAL_SYSTICK_Callback+0x66>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 80124a4:	4b27      	ldr	r3, [pc, #156]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80124a6:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f040 8091 	bne.w	80125d2 <HAL_SYSTICK_Callback+0x356>
 80124b0:	4b26      	ldr	r3, [pc, #152]	; (801254c <HAL_SYSTICK_Callback+0x2d0>)
 80124b2:	9303      	str	r3, [sp, #12]
 80124b4:	2400      	movs	r4, #0
 80124b6:	9404      	str	r4, [sp, #16]
 80124b8:	9405      	str	r4, [sp, #20]
     */

    void requestSyncTime()
    {
      std_msgs::Time t;
      publish(TopicInfo::ID_TIME, &t);
 80124ba:	4f22      	ldr	r7, [pc, #136]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80124bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	aa03      	add	r2, sp, #12
 80124c4:	210a      	movs	r1, #10
 80124c6:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80124ca:	4798      	blx	r3
 80124cc:	f7fb fac0 	bl	800da50 <HAL_GetTick>
      rt_time = hardware_.time();
 80124d0:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
 80124d4:	4b1f      	ldr	r3, [pc, #124]	; (8012554 <HAL_SYSTICK_Callback+0x2d8>)
 80124d6:	9303      	str	r3, [sp, #12]
 80124d8:	f8ad 4010 	strh.w	r4, [sp, #16]
 80124dc:	4b1e      	ldr	r3, [pc, #120]	; (8012558 <HAL_SYSTICK_Callback+0x2dc>)
 80124de:	9305      	str	r3, [sp, #20]
 80124e0:	9306      	str	r3, [sp, #24]
 80124e2:	9307      	str	r3, [sp, #28]
 80124e4:	9408      	str	r4, [sp, #32]

    void negotiateTopics()
    {
      rosserial_msgs::TopicInfo ti;
      int i;
      for(i = 0; i < MAX_PUBLISHERS; i++)
 80124e6:	2c13      	cmp	r4, #19
 80124e8:	dc38      	bgt.n	801255c <HAL_SYSTICK_Callback+0x2e0>
        {
          if(publishers[i] != 0) // non-empty slot
 80124ea:	f104 0386 	add.w	r3, r4, #134	; 0x86
 80124ee:	4a15      	ldr	r2, [pc, #84]	; (8012544 <HAL_SYSTICK_Callback+0x2c8>)
 80124f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80124f4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80124f8:	b313      	cbz	r3, 8012540 <HAL_SYSTICK_Callback+0x2c4>
            {
              ti.topic_id = publishers[i]->id_;
 80124fa:	689a      	ldr	r2, [r3, #8]
 80124fc:	f8ad 2010 	strh.w	r2, [sp, #16]
              ti.topic_name = (char *) publishers[i]->topic_;
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	9205      	str	r2, [sp, #20]
              ti.message_type = (char *) publishers[i]->msg_->getType();
 8012504:	6858      	ldr	r0, [r3, #4]
 8012506:	6803      	ldr	r3, [r0, #0]
 8012508:	689b      	ldr	r3, [r3, #8]
 801250a:	4798      	blx	r3
 801250c:	9006      	str	r0, [sp, #24]
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 801250e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8012544 <HAL_SYSTICK_Callback+0x2c8>
 8012512:	f104 0786 	add.w	r7, r4, #134	; 0x86
 8012516:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 801251a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801251e:	6858      	ldr	r0, [r3, #4]
 8012520:	6803      	ldr	r3, [r0, #0]
 8012522:	68db      	ldr	r3, [r3, #12]
 8012524:	4798      	blx	r3
 8012526:	9007      	str	r0, [sp, #28]
              ti.buffer_size = OUTPUT_SIZE;
 8012528:	23ff      	movs	r3, #255	; 0xff
 801252a:	9308      	str	r3, [sp, #32]
              publish( publishers[i]->getEndpointType(), &ti );
 801252c:	f8d8 3128 	ldr.w	r3, [r8, #296]	; 0x128
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012536:	aa03      	add	r2, sp, #12
 8012538:	6909      	ldr	r1, [r1, #16]
 801253a:	f508 7094 	add.w	r0, r8, #296	; 0x128
 801253e:	4798      	blx	r3

    void negotiateTopics()
    {
      rosserial_msgs::TopicInfo ti;
      int i;
      for(i = 0; i < MAX_PUBLISHERS; i++)
 8012540:	3401      	adds	r4, #1
 8012542:	e7d0      	b.n	80124e6 <HAL_SYSTICK_Callback+0x26a>
 8012544:	20000578 	.word	0x20000578
 8012548:	20003ef8 	.word	0x20003ef8
 801254c:	0801b0bc 	.word	0x0801b0bc
 8012550:	800000ff 	.word	0x800000ff
 8012554:	0801b0d4 	.word	0x0801b0d4
 8012558:	0801bea4 	.word	0x0801bea4
 801255c:	2400      	movs	r4, #0
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
              ti.buffer_size = OUTPUT_SIZE;
              publish( publishers[i]->getEndpointType(), &ti );
            }
        }
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 801255e:	2c13      	cmp	r4, #19
 8012560:	dc2e      	bgt.n	80125c0 <HAL_SYSTICK_Callback+0x344>
        {
          if(subscribers[i] != 0) // non-empty slot
 8012562:	f104 039a 	add.w	r3, r4, #154	; 0x9a
 8012566:	4aba      	ldr	r2, [pc, #744]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 8012568:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801256c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 8012570:	b320      	cbz	r0, 80125bc <HAL_SYSTICK_Callback+0x340>
            {
              ti.topic_id = subscribers[i]->id_;
 8012572:	6843      	ldr	r3, [r0, #4]
 8012574:	f8ad 3010 	strh.w	r3, [sp, #16]
              ti.topic_name = (char *) subscribers[i]->topic_;
 8012578:	6883      	ldr	r3, [r0, #8]
 801257a:	9305      	str	r3, [sp, #20]
              ti.message_type = (char *) subscribers[i]->getMsgType();
 801257c:	6803      	ldr	r3, [r0, #0]
 801257e:	689b      	ldr	r3, [r3, #8]
 8012580:	4798      	blx	r3
 8012582:	9006      	str	r0, [sp, #24]
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8012584:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8012850 <HAL_SYSTICK_Callback+0x5d4>
 8012588:	f104 079a 	add.w	r7, r4, #154	; 0x9a
 801258c:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8012590:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012594:	6803      	ldr	r3, [r0, #0]
 8012596:	68db      	ldr	r3, [r3, #12]
 8012598:	4798      	blx	r3
 801259a:	9007      	str	r0, [sp, #28]
              ti.buffer_size = INPUT_SIZE;
 801259c:	23ff      	movs	r3, #255	; 0xff
 801259e:	9308      	str	r3, [sp, #32]
              publish( subscribers[i]->getEndpointType(), &ti );
 80125a0:	f8d8 3128 	ldr.w	r3, [r8, #296]	; 0x128
 80125a4:	f8d3 9000 	ldr.w	r9, [r3]
 80125a8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80125ac:	6803      	ldr	r3, [r0, #0]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	4798      	blx	r3
 80125b2:	aa03      	add	r2, sp, #12
 80125b4:	4601      	mov	r1, r0
 80125b6:	f508 7094 	add.w	r0, r8, #296	; 0x128
 80125ba:	47c8      	blx	r9
              ti.md5sum = (char *) publishers[i]->msg_->getMD5();
              ti.buffer_size = OUTPUT_SIZE;
              publish( publishers[i]->getEndpointType(), &ti );
            }
        }
      for(i = 0; i < MAX_SUBSCRIBERS; i++)
 80125bc:	3401      	adds	r4, #1
 80125be:	e7ce      	b.n	801255e <HAL_SYSTICK_Callback+0x2e2>
              ti.md5sum = (char *) subscribers[i]->getMsgMD5();
              ti.buffer_size = INPUT_SIZE;
              publish( subscribers[i]->getEndpointType(), &ti );
            }
        }
      configured_ = true;
 80125c0:	4ba3      	ldr	r3, [pc, #652]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80125c2:	2201      	movs	r2, #1
 80125c4:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
              if(topic_ == TopicInfo::ID_PUBLISHER){
                requestSyncTime();
                negotiateTopics();
                last_sync_time = c_time;
 80125c8:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
                last_sync_receive_time = c_time;
 80125cc:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
 80125d0:	e168      	b.n	80128a4 <HAL_SYSTICK_Callback+0x628>
                return -1;
              }else if(topic_ == TopicInfo::ID_TIME){
 80125d2:	2b0a      	cmp	r3, #10
 80125d4:	d151      	bne.n	801267a <HAL_SYSTICK_Callback+0x3fe>
 80125d6:	f7fb fa3b 	bl	800da50 <HAL_GetTick>
    }

    void syncTime(uint8_t * data)
    {
      std_msgs::Time t;
      uint32_t offset = hardware_.time() - rt_time;
 80125da:	4f9d      	ldr	r7, [pc, #628]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80125dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80125e0:	1ac0      	subs	r0, r0, r3
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80125e2:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80125e6:	f897 2145 	ldrb.w	r2, [r7, #325]	; 0x145
 80125ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80125ee:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 80125f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80125f6:	f897 e147 	ldrb.w	lr, [r7, #327]	; 0x147
 80125fa:	ea42 6e0e 	orr.w	lr, r2, lr, lsl #24
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80125fe:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8012602:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8012606:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 801260a:	f897 114a 	ldrb.w	r1, [r7, #330]	; 0x14a
 801260e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8012612:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8012616:	ea42 6103 	orr.w	r1, r2, r3, lsl #24

      t.deserialize(data);
      t.data.sec += offset/1000;
 801261a:	f8df 8240 	ldr.w	r8, [pc, #576]	; 801285c <HAL_SYSTICK_Callback+0x5e0>
 801261e:	fba8 3200 	umull	r3, r2, r8, r0
 8012622:	0993      	lsrs	r3, r2, #6
 8012624:	eb0e 0203 	add.w	r2, lr, r3
 8012628:	9204      	str	r2, [sp, #16]
      t.data.nsec += (offset%1000)*1000000UL;
 801262a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 801262e:	fb0a 0313 	mls	r3, sl, r3, r0
 8012632:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8012860 <HAL_SYSTICK_Callback+0x5e4>
 8012636:	fb09 1303 	mla	r3, r9, r3, r1
 801263a:	9305      	str	r3, [sp, #20]
 801263c:	f7fb fa08 	bl	800da50 <HAL_GetTick>
    }

    void setNow( Time & new_now )
    {
      uint32_t ms = hardware_.time();
      sec_offset = new_now.sec - ms/1000 - 1;
 8012640:	9a04      	ldr	r2, [sp, #16]
 8012642:	fba8 3800 	umull	r3, r8, r8, r0
 8012646:	ea4f 1398 	mov.w	r3, r8, lsr #6
 801264a:	1ad2      	subs	r2, r2, r3
 801264c:	3a01      	subs	r2, #1
 801264e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
      nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8012652:	9a05      	ldr	r2, [sp, #20]
 8012654:	fb0a 0313 	mls	r3, sl, r3, r0
 8012658:	fb09 2313 	mls	r3, r9, r3, r2
 801265c:	4a7d      	ldr	r2, [pc, #500]	; (8012854 <HAL_SYSTICK_Callback+0x5d8>)
 801265e:	441a      	add	r2, r3
 8012660:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
      normalizeSecNSec(sec_offset, nsec_offset);
 8012664:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8012668:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 801266c:	f7fb fb8e 	bl	800dd8c <_ZN3ros16normalizeSecNSecERmS0_>
 8012670:	f7fb f9ee 	bl	800da50 <HAL_GetTick>
      t.deserialize(data);
      t.data.sec += offset/1000;
      t.data.nsec += (offset%1000)*1000000UL;

      this->setNow(t.data);
      last_sync_receive_time = hardware_.time();
 8012674:	f8c7 0400 	str.w	r0, [r7, #1024]	; 0x400
 8012678:	e633      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
                last_sync_time = c_time;
                last_sync_receive_time = c_time;
                return -1;
              }else if(topic_ == TopicInfo::ID_TIME){
                syncTime(message_in);
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 801267a:	2b06      	cmp	r3, #6
 801267c:	f040 80c9 	bne.w	8012812 <HAL_SYSTICK_Callback+0x596>
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 8012680:	4b73      	ldr	r3, [pc, #460]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 8012682:	f893 7144 	ldrb.w	r7, [r3, #324]	; 0x144
      if(ints_lengthT > ints_length)
 8012686:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801268a:	429f      	cmp	r7, r3
 801268c:	d908      	bls.n	80126a0 <HAL_SYSTICK_Callback+0x424>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 801268e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012850 <HAL_SYSTICK_Callback+0x5d4>
 8012692:	00b9      	lsls	r1, r7, #2
 8012694:	f8d8 0418 	ldr.w	r0, [r8, #1048]	; 0x418
 8012698:	f004 fc66 	bl	8016f68 <realloc>
 801269c:	f8c8 0418 	str.w	r0, [r8, #1048]	; 0x418
      offset += 3;
      ints_length = ints_lengthT;
 80126a0:	4b6b      	ldr	r3, [pc, #428]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80126a2:	f883 7410 	strb.w	r7, [r3, #1040]	; 0x410
      for( uint8_t i = 0; i < ints_length; i++){
 80126a6:	2200      	movs	r2, #0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
 80126a8:	2704      	movs	r7, #4
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 80126aa:	4b69      	ldr	r3, [pc, #420]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80126ac:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80126b0:	4293      	cmp	r3, r2
 80126b2:	d921      	bls.n	80126f8 <HAL_SYSTICK_Callback+0x47c>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80126b4:	4966      	ldr	r1, [pc, #408]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80126b6:	f501 70a2 	add.w	r0, r1, #324	; 0x144
 80126ba:	5dc3      	ldrb	r3, [r0, r7]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80126bc:	f107 0e01 	add.w	lr, r7, #1
 80126c0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80126c4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80126c8:	f107 0e02 	add.w	lr, r7, #2
 80126cc:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80126d0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80126d4:	f107 0e03 	add.w	lr, r7, #3
 80126d8:	f810 000e 	ldrb.w	r0, [r0, lr]
 80126dc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
      this->st_ints = u_st_ints.real;
 80126e0:	f8c1 3414 	str.w	r3, [r1, #1044]	; 0x414
      offset += sizeof(this->st_ints);
 80126e4:	3704      	adds	r7, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80126e6:	f8d1 3418 	ldr.w	r3, [r1, #1048]	; 0x418
 80126ea:	f8d1 0414 	ldr.w	r0, [r1, #1044]	; 0x414
 80126ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 80126f2:	3201      	adds	r2, #1
 80126f4:	b2d2      	uxtb	r2, r2
 80126f6:	e7d8      	b.n	80126aa <HAL_SYSTICK_Callback+0x42e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 80126f8:	4b55      	ldr	r3, [pc, #340]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80126fa:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 80126fe:	f812 8007 	ldrb.w	r8, [r2, r7]
      if(floats_lengthT > floats_length)
 8012702:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8012706:	4598      	cmp	r8, r3
 8012708:	d909      	bls.n	801271e <HAL_SYSTICK_Callback+0x4a2>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 801270a:	f5a2 79a2 	sub.w	r9, r2, #324	; 0x144
 801270e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8012712:	f8d9 0424 	ldr.w	r0, [r9, #1060]	; 0x424
 8012716:	f004 fc27 	bl	8016f68 <realloc>
 801271a:	f8c9 0424 	str.w	r0, [r9, #1060]	; 0x424
      offset += 3;
 801271e:	3704      	adds	r7, #4
      floats_length = floats_lengthT;
 8012720:	4b4b      	ldr	r3, [pc, #300]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 8012722:	f883 841c 	strb.w	r8, [r3, #1052]	; 0x41c
      for( uint8_t i = 0; i < floats_length; i++){
 8012726:	2200      	movs	r2, #0
 8012728:	4b49      	ldr	r3, [pc, #292]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 801272a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 801272e:	4293      	cmp	r3, r2
 8012730:	d922      	bls.n	8012778 <HAL_SYSTICK_Callback+0x4fc>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8012732:	4847      	ldr	r0, [pc, #284]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 8012734:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 8012738:	5dcb      	ldrb	r3, [r1, r7]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 801273a:	f107 0e01 	add.w	lr, r7, #1
 801273e:	f811 e00e 	ldrb.w	lr, [r1, lr]
 8012742:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8012746:	f107 0e02 	add.w	lr, r7, #2
 801274a:	f811 e00e 	ldrb.w	lr, [r1, lr]
 801274e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8012752:	f107 0e03 	add.w	lr, r7, #3
 8012756:	f811 e00e 	ldrb.w	lr, [r1, lr]
      this->st_floats = u_st_floats.real;
 801275a:	f500 6184 	add.w	r1, r0, #1056	; 0x420
 801275e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8012762:	600b      	str	r3, [r1, #0]
      offset += sizeof(this->st_floats);
 8012764:	3704      	adds	r7, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8012766:	f8d0 3424 	ldr.w	r3, [r0, #1060]	; 0x424
 801276a:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
 801276e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 8012772:	3201      	adds	r2, #1
 8012774:	b2d2      	uxtb	r2, r2
 8012776:	e7d7      	b.n	8012728 <HAL_SYSTICK_Callback+0x4ac>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8012778:	4b35      	ldr	r3, [pc, #212]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 801277a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 801277e:	f812 8007 	ldrb.w	r8, [r2, r7]
      if(strings_lengthT > strings_length)
 8012782:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8012786:	4598      	cmp	r8, r3
 8012788:	d909      	bls.n	801279e <HAL_SYSTICK_Callback+0x522>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 801278a:	f5a2 79a2 	sub.w	r9, r2, #324	; 0x144
 801278e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8012792:	f8d9 0430 	ldr.w	r0, [r9, #1072]	; 0x430
 8012796:	f004 fbe7 	bl	8016f68 <realloc>
 801279a:	f8c9 0430 	str.w	r0, [r9, #1072]	; 0x430
      offset += 3;
 801279e:	1d39      	adds	r1, r7, #4
      strings_length = strings_lengthT;
 80127a0:	4b2b      	ldr	r3, [pc, #172]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80127a2:	f883 8428 	strb.w	r8, [r3, #1064]	; 0x428
      for( uint8_t i = 0; i < strings_length; i++){
 80127a6:	f04f 0e00 	mov.w	lr, #0
 80127aa:	4b29      	ldr	r3, [pc, #164]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80127ac:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80127b0:	4573      	cmp	r3, lr
 80127b2:	d929      	bls.n	8012808 <HAL_SYSTICK_Callback+0x58c>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 80127b4:	4b28      	ldr	r3, [pc, #160]	; (8012858 <HAL_SYSTICK_Callback+0x5dc>)
 80127b6:	5858      	ldr	r0, [r3, r1]
 80127b8:	9003      	str	r0, [sp, #12]
      offset += 4;
 80127ba:	3104      	adds	r1, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80127bc:	460b      	mov	r3, r1
 80127be:	9a03      	ldr	r2, [sp, #12]
 80127c0:	440a      	add	r2, r1
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d909      	bls.n	80127da <HAL_SYSTICK_Callback+0x55e>
          inbuffer[k-1]=inbuffer[k];
 80127c6:	4a22      	ldr	r2, [pc, #136]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80127c8:	f502 77a2 	add.w	r7, r2, #324	; 0x144
 80127cc:	1e58      	subs	r0, r3, #1
 80127ce:	441a      	add	r2, r3
 80127d0:	f892 2144 	ldrb.w	r2, [r2, #324]	; 0x144
 80127d4:	543a      	strb	r2, [r7, r0]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80127d6:	3301      	adds	r3, #1
 80127d8:	e7f1      	b.n	80127be <HAL_SYSTICK_Callback+0x542>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 80127da:	4b1d      	ldr	r3, [pc, #116]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 80127dc:	f503 70a2 	add.w	r0, r3, #324	; 0x144
 80127e0:	3a01      	subs	r2, #1
 80127e2:	2700      	movs	r7, #0
 80127e4:	5487      	strb	r7, [r0, r2]
      this->st_strings = (char *)(inbuffer + offset-1);
 80127e6:	1e4a      	subs	r2, r1, #1
 80127e8:	4402      	add	r2, r0
 80127ea:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
      offset += length_st_strings;
 80127ee:	9f03      	ldr	r7, [sp, #12]
 80127f0:	4439      	add	r1, r7
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80127f2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80127f6:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
 80127fa:	f842 002e 	str.w	r0, [r2, lr, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 80127fe:	f10e 0e01 	add.w	lr, lr, #1
 8012802:	fa5f fe8e 	uxtb.w	lr, lr
 8012806:	e7d0      	b.n	80127aa <HAL_SYSTICK_Callback+0x52e>
                req_param_resp.deserialize(message_in);
                param_recieved= true;
 8012808:	2201      	movs	r2, #1
 801280a:	4b11      	ldr	r3, [pc, #68]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 801280c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8012810:	e567      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8012812:	2b0b      	cmp	r3, #11
 8012814:	d104      	bne.n	8012820 <HAL_SYSTICK_Callback+0x5a4>
                configured_ = false;
 8012816:	2200      	movs	r2, #0
 8012818:	4b0d      	ldr	r3, [pc, #52]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 801281a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 801281e:	e560      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
              }else{
                if(subscribers[topic_-100])
 8012820:	f1a3 0764 	sub.w	r7, r3, #100	; 0x64
 8012824:	3336      	adds	r3, #54	; 0x36
 8012826:	4a0a      	ldr	r2, [pc, #40]	; (8012850 <HAL_SYSTICK_Callback+0x5d4>)
 8012828:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801282c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 8012830:	2800      	cmp	r0, #0
 8012832:	f43f ad56 	beq.w	80122e2 <HAL_SYSTICK_Callback+0x66>
                  subscribers[topic_-100]->callback( message_in );
 8012836:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 801283a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801283e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f502 71a2 	add.w	r1, r2, #324	; 0x144
 801284a:	4798      	blx	r3
 801284c:	e549      	b.n	80122e2 <HAL_SYSTICK_Callback+0x66>
 801284e:	bf00      	nop
 8012850:	20000578 	.word	0x20000578
 8012854:	3b9aca00 	.word	0x3b9aca00
 8012858:	200006bc 	.word	0x200006bc
 801285c:	10624dd3 	.word	0x10624dd3
 8012860:	000f4240 	.word	0x000f4240
            }
          }
        }

      /* occasionally sync time */
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 8012864:	4bba      	ldr	r3, [pc, #744]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012866:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
 801286a:	b1db      	cbz	r3, 80128a4 <HAL_SYSTICK_Callback+0x628>
 801286c:	4bb8      	ldr	r3, [pc, #736]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 801286e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8012872:	1aeb      	subs	r3, r5, r3
 8012874:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8012878:	4293      	cmp	r3, r2
 801287a:	d913      	bls.n	80128a4 <HAL_SYSTICK_Callback+0x628>
  {
    public:
      ros::Time data;

    Time():
      data()
 801287c:	4bb5      	ldr	r3, [pc, #724]	; (8012b54 <HAL_SYSTICK_Callback+0x8d8>)
 801287e:	9303      	str	r3, [sp, #12]
 8012880:	2300      	movs	r3, #0
 8012882:	9304      	str	r3, [sp, #16]
 8012884:	9305      	str	r3, [sp, #20]
     */

    void requestSyncTime()
    {
      std_msgs::Time t;
      publish(TopicInfo::ID_TIME, &t);
 8012886:	4cb2      	ldr	r4, [pc, #712]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012888:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	aa03      	add	r2, sp, #12
 8012890:	210a      	movs	r1, #10
 8012892:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8012896:	4798      	blx	r3
 8012898:	f7fb f8da 	bl	800da50 <HAL_GetTick>
      rt_time = hardware_.time();
 801289c:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
        }

      /* occasionally sync time */
      if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
        requestSyncTime();
        last_sync_time = c_time;
 80128a0:	f8c4 53fc 	str.w	r5, [r4, #1020]	; 0x3fc
    }


    /* Are we connected to the PC? */
    virtual bool connected() {
      return configured_;
 80128a4:	4baa      	ldr	r3, [pc, #680]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80128a6:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
		return;

	/* ros spin func, mainly subscribing  data from ROS network */
	nh_.spinOnce();
	/* please check whether connection between ros and mcu is build */
	if(nh_.connected())
 80128aa:	b373      	cbz	r3, 801290a <HAL_SYSTICK_Callback+0x68e>
	{
		/* publish message */
		if(counter++>10)
 80128ac:	4aa8      	ldr	r2, [pc, #672]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80128ae:	f8d2 3554 	ldr.w	r3, [r2, #1364]	; 0x554
 80128b2:	1c59      	adds	r1, r3, #1
 80128b4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
 80128b8:	2b0a      	cmp	r3, #10
 80128ba:	dd15      	ble.n	80128e8 <HAL_SYSTICK_Callback+0x66c>
		{
			ugvnode->odom_pub_->publish(&ugvnode->odom_msg);
 80128bc:	4614      	mov	r4, r2
 80128be:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
 80128c2:	6893      	ldr	r3, [r2, #8]

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 80128c4:	68d8      	ldr	r0, [r3, #12]
 80128c6:	6801      	ldr	r1, [r0, #0]
 80128c8:	680d      	ldr	r5, [r1, #0]
 80128ca:	3218      	adds	r2, #24
 80128cc:	6899      	ldr	r1, [r3, #8]
 80128ce:	47a8      	blx	r5
			ugvnode->radioflag_pub_->publish(&ugvnode->radioflag_msg);
 80128d0:	f8d4 2548 	ldr.w	r2, [r4, #1352]	; 0x548
 80128d4:	6853      	ldr	r3, [r2, #4]
 80128d6:	68d8      	ldr	r0, [r3, #12]
 80128d8:	6801      	ldr	r1, [r0, #0]
 80128da:	680d      	ldr	r5, [r1, #0]
 80128dc:	320c      	adds	r2, #12
 80128de:	6899      	ldr	r1, [r3, #8]
 80128e0:	47a8      	blx	r5
			counter = 0;
 80128e2:	2300      	movs	r3, #0
 80128e4:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		}
		if(counter%2) //2ms control once...... become more and more accurate
 80128e8:	4b99      	ldr	r3, [pc, #612]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80128ea:	f8d3 3554 	ldr.w	r3, [r3, #1364]	; 0x554
 80128ee:	f013 0f01 	tst.w	r3, #1
 80128f2:	d00a      	beq.n	801290a <HAL_SYSTICK_Callback+0x68e>
			ugvnode->Ros_Pid_controller(&Enc_handle_left,&Enc_handle_right,&imu_);
 80128f4:	4896      	ldr	r0, [pc, #600]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80128f6:	f200 4334 	addw	r3, r0, #1076	; 0x434
 80128fa:	f100 02f4 	add.w	r2, r0, #244	; 0xf4
 80128fe:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
 8012902:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
 8012906:	f7fb f8df 	bl	800dac8 <_ZN7RosNode18Ros_Pid_controllerEPN7encoder8ENCODER_ES2_P3IMU>
	}

	//enough data in the data buffer, velocity and accdata accessible.
	if((Enc_handle_right.update(TIM3->CNT) ==
 801290a:	4b93      	ldr	r3, [pc, #588]	; (8012b58 <HAL_SYSTICK_Callback+0x8dc>)
 801290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801290e:	9301      	str	r3, [sp, #4]

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012910:	4b8f      	ldr	r3, [pc, #572]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012912:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801291a:	1ad3      	subs	r3, r2, r3
    float ave_velo = 0;
    float ave_acc = 0;
    uint16_t update(Enctype new_data, uint16_t queue_size = DEFAULT_DATA_SIZE) //update data queue
    {
      //acc data
      if(data_queue.size())
 801291c:	089b      	lsrs	r3, r3, #2
 801291e:	d038      	beq.n	8012992 <HAL_SYSTICK_Callback+0x716>
        {
          Enctype tmpvelo = new_data - data_queue.back();
 8012920:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012924:	9b01      	ldr	r3, [sp, #4]
 8012926:	1a9b      	subs	r3, r3, r2
          tmpvelo = tmpvelo>(ENC_OVE/2)?tmpvelo-ENC_OVE:tmpvelo;
 8012928:	4a89      	ldr	r2, [pc, #548]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 801292a:	f8b2 2100 	ldrh.w	r2, [r2, #256]	; 0x100
 801292e:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8012932:	dd00      	ble.n	8012936 <HAL_SYSTICK_Callback+0x6ba>
 8012934:	1a9b      	subs	r3, r3, r2
          tmpvelo = tmpvelo<(-ENC_OVE/2)?tmpvelo+ENC_OVE:tmpvelo;
 8012936:	4251      	negs	r1, r2
 8012938:	2900      	cmp	r1, #0
 801293a:	da00      	bge.n	801293e <HAL_SYSTICK_Callback+0x6c2>
 801293c:	3101      	adds	r1, #1
 801293e:	ebb3 0f61 	cmp.w	r3, r1, asr #1
 8012942:	da00      	bge.n	8012946 <HAL_SYSTICK_Callback+0x6ca>
 8012944:	4413      	add	r3, r2
 8012946:	9303      	str	r3, [sp, #12]
 8012948:	4a81      	ldr	r2, [pc, #516]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 801294a:	f8d2 110c 	ldr.w	r1, [r2, #268]	; 0x10c
 801294e:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 8012952:	1a8a      	subs	r2, r1, r2
          //push in acc data
          if(velo_queue.size())
 8012954:	0892      	lsrs	r2, r2, #2
 8012956:	d007      	beq.n	8012968 <HAL_SYSTICK_Callback+0x6ec>
            acc_queue.push_back(tmpvelo-velo_queue.back());
 8012958:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801295c:	1a9b      	subs	r3, r3, r2
 801295e:	9309      	str	r3, [sp, #36]	; 0x24
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }
 8012960:	a909      	add	r1, sp, #36	; 0x24
 8012962:	487e      	ldr	r0, [pc, #504]	; (8012b5c <HAL_SYSTICK_Callback+0x8e0>)
 8012964:	f7ff fc7a 	bl	801225c <_ZNSt6vectorIiSaIiEE12emplace_backIIiEEEvDpOT_>
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012968:	4a79      	ldr	r2, [pc, #484]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 801296a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 801296e:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8012972:	4293      	cmp	r3, r2
 8012974:	d009      	beq.n	801298a <HAL_SYSTICK_Callback+0x70e>
 8012976:	9a03      	ldr	r2, [sp, #12]
 8012978:	b103      	cbz	r3, 801297c <HAL_SYSTICK_Callback+0x700>
 801297a:	601a      	str	r2, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
 801297c:	4a74      	ldr	r2, [pc, #464]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 801297e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8012982:	3304      	adds	r3, #4
 8012984:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8012988:	e003      	b.n	8012992 <HAL_SYSTICK_Callback+0x716>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
 801298a:	a903      	add	r1, sp, #12
 801298c:	4874      	ldr	r0, [pc, #464]	; (8012b60 <HAL_SYSTICK_Callback+0x8e4>)
 801298e:	f7ff fbc3 	bl	8012118 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_>
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012992:	4a6f      	ldr	r2, [pc, #444]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012994:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 8012998:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 801299c:	4293      	cmp	r3, r2
 801299e:	d009      	beq.n	80129b4 <HAL_SYSTICK_Callback+0x738>
 80129a0:	9a01      	ldr	r2, [sp, #4]
 80129a2:	b103      	cbz	r3, 80129a6 <HAL_SYSTICK_Callback+0x72a>
 80129a4:	601a      	str	r2, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
 80129a6:	4a6a      	ldr	r2, [pc, #424]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80129a8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 80129ac:	3304      	adds	r3, #4
 80129ae:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
 80129b2:	e003      	b.n	80129bc <HAL_SYSTICK_Callback+0x740>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
 80129b4:	a901      	add	r1, sp, #4
 80129b6:	486b      	ldr	r0, [pc, #428]	; (8012b64 <HAL_SYSTICK_Callback+0x8e8>)
 80129b8:	f7ff fbae 	bl	8012118 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129bc:	4a64      	ldr	r2, [pc, #400]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80129be:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 80129c2:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
 80129c6:	1a5b      	subs	r3, r3, r1
          //push in velo data
          velo_queue.push_back(tmpvelo);
        }
      //push in sensor data.
      data_queue.push_back(new_data);
      if(data_queue.size() > queue_size)
 80129c8:	2b2b      	cmp	r3, #43	; 0x2b
 80129ca:	d903      	bls.n	80129d4 <HAL_SYSTICK_Callback+0x758>
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 80129cc:	f102 00f4 	add.w	r0, r2, #244	; 0xf4
 80129d0:	f7ff fbea 	bl	80121a8 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129d4:	4a5e      	ldr	r2, [pc, #376]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80129d6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 80129da:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
 80129de:	1a5b      	subs	r3, r3, r1
        data_queue.erase(data_queue.begin());
      if(velo_queue.size() > queue_size)
 80129e0:	2b2b      	cmp	r3, #43	; 0x2b
 80129e2:	d92f      	bls.n	8012a44 <HAL_SYSTICK_Callback+0x7c8>
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 80129e4:	f502 7084 	add.w	r0, r2, #264	; 0x108
 80129e8:	f7ff fbde 	bl	80121a8 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE>

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 80129ec:	2300      	movs	r3, #0


  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
 80129ee:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8012b68 <HAL_SYSTICK_Callback+0x8ec>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129f2:	4957      	ldr	r1, [pc, #348]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 80129f4:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 80129f8:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 80129fc:	1a12      	subs	r2, r2, r0
 80129fe:	1092      	asrs	r2, r2, #2
    	for(int i = 0; i < data->size(); i++)
 8012a00:	4619      	mov	r1, r3
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d90d      	bls.n	8012a22 <HAL_SYSTICK_Callback+0x7a6>
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 8012a06:	d802      	bhi.n	8012a0e <HAL_SYSTICK_Callback+0x792>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8012a08:	4858      	ldr	r0, [pc, #352]	; (8012b6c <HAL_SYSTICK_Callback+0x8f0>)
 8012a0a:	f001 ff5f 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
    		sum += data->at(i);
 8012a0e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8012a12:	ee07 2a90 	vmov	s15, r2
 8012a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a1a:	ee37 7a27 	vadd.f32	s14, s14, s15

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 8012a1e:	3301      	adds	r3, #1
 8012a20:	e7e7      	b.n	80129f2 <HAL_SYSTICK_Callback+0x776>
    		sum += data->at(i);

    	return SYSFREQ*ENC_UNI_LEN*sum/data->size();
 8012a22:	4b4b      	ldr	r3, [pc, #300]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012a24:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8012a28:	eddf 6a51 	vldr	s13, [pc, #324]	; 8012b70 <HAL_SYSTICK_Callback+0x8f4>
 8012a2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a34:	ee07 2a90 	vmov	s15, r2
 8012a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
      if(data_queue.size() > queue_size)
        data_queue.erase(data_queue.begin());
      if(velo_queue.size() > queue_size)
        {
          velo_queue.erase(velo_queue.begin());
          ave_velo = Average_vec(&velo_queue);
 8012a40:	edc3 6a48 	vstr	s13, [r3, #288]	; 0x120

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a44:	4a42      	ldr	r2, [pc, #264]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012a46:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8012a4a:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
 8012a4e:	1a5b      	subs	r3, r3, r1
        }
      if(acc_queue.size() > queue_size)
 8012a50:	2b2b      	cmp	r3, #43	; 0x2b
 8012a52:	d92f      	bls.n	8012ab4 <HAL_SYSTICK_Callback+0x838>
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 8012a54:	f502 708a 	add.w	r0, r2, #276	; 0x114
 8012a58:	f7ff fba6 	bl	80121a8 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE>

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 8012a5c:	2300      	movs	r3, #0


  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
 8012a5e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8012b68 <HAL_SYSTICK_Callback+0x8ec>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a62:	493b      	ldr	r1, [pc, #236]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012a64:	f8d1 2118 	ldr.w	r2, [r1, #280]	; 0x118
 8012a68:	f8d1 0114 	ldr.w	r0, [r1, #276]	; 0x114
 8012a6c:	1a12      	subs	r2, r2, r0
 8012a6e:	1092      	asrs	r2, r2, #2
    	for(int i = 0; i < data->size(); i++)
 8012a70:	4619      	mov	r1, r3
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d90d      	bls.n	8012a92 <HAL_SYSTICK_Callback+0x816>
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 8012a76:	d802      	bhi.n	8012a7e <HAL_SYSTICK_Callback+0x802>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8012a78:	483c      	ldr	r0, [pc, #240]	; (8012b6c <HAL_SYSTICK_Callback+0x8f0>)
 8012a7a:	f001 ff27 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
    		sum += data->at(i);
 8012a7e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8012a82:	ee07 2a90 	vmov	s15, r2
 8012a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a8a:	ee37 7a27 	vadd.f32	s14, s14, s15

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 8012a8e:	3301      	adds	r3, #1
 8012a90:	e7e7      	b.n	8012a62 <HAL_SYSTICK_Callback+0x7e6>
    		sum += data->at(i);

    	return SYSFREQ*ENC_UNI_LEN*sum/data->size();
 8012a92:	4b2f      	ldr	r3, [pc, #188]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012a94:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8012a98:	eddf 6a35 	vldr	s13, [pc, #212]	; 8012b70 <HAL_SYSTICK_Callback+0x8f4>
 8012a9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012aa4:	ee07 2a90 	vmov	s15, r2
 8012aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012aac:	eec7 6a27 	vdiv.f32	s13, s14, s15
          ave_velo = Average_vec(&velo_queue);
        }
      if(acc_queue.size() > queue_size)
        {
          acc_queue.erase(acc_queue.begin());
          ave_acc = Average_vec(&acc_queue);
 8012ab0:	edc3 6a49 	vstr	s13, [r3, #292]	; 0x124

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012ab4:	4a26      	ldr	r2, [pc, #152]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012ab6:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 8012aba:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 8012abe:	1a9b      	subs	r3, r3, r2
        }

      return data_queue.size();
 8012ac0:	f3c3 038f 	ubfx	r3, r3, #2, #16
			Enc_handle_right.DEFAULT_DATA_SIZE) &&
 8012ac4:	2b0a      	cmp	r3, #10
 8012ac6:	f040 80f9 	bne.w	8012cbc <HAL_SYSTICK_Callback+0xa40>
			(Enc_handle_left.update(Enc_handle_left.ENC_OVE - TIM5->CNT)
 8012aca:	4b21      	ldr	r3, [pc, #132]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012acc:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
 8012ad0:	4928      	ldr	r1, [pc, #160]	; (8012b74 <HAL_SYSTICK_Callback+0x8f8>)
 8012ad2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8012ad4:	1a52      	subs	r2, r2, r1
 8012ad6:	9202      	str	r2, [sp, #8]
 8012ad8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8012adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012ae0:	1ad3      	subs	r3, r2, r3
    float ave_velo = 0;
    float ave_acc = 0;
    uint16_t update(Enctype new_data, uint16_t queue_size = DEFAULT_DATA_SIZE) //update data queue
    {
      //acc data
      if(data_queue.size())
 8012ae2:	089b      	lsrs	r3, r3, #2
 8012ae4:	d04e      	beq.n	8012b84 <HAL_SYSTICK_Callback+0x908>
        {
          Enctype tmpvelo = new_data - data_queue.back();
 8012ae6:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8012aea:	9b02      	ldr	r3, [sp, #8]
 8012aec:	1a9b      	subs	r3, r3, r2
          tmpvelo = tmpvelo>(ENC_OVE/2)?tmpvelo-ENC_OVE:tmpvelo;
 8012aee:	4a18      	ldr	r2, [pc, #96]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012af0:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	; 0xcc
 8012af4:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8012af8:	dd00      	ble.n	8012afc <HAL_SYSTICK_Callback+0x880>
 8012afa:	1a9b      	subs	r3, r3, r2
          tmpvelo = tmpvelo<(-ENC_OVE/2)?tmpvelo+ENC_OVE:tmpvelo;
 8012afc:	4251      	negs	r1, r2
 8012afe:	2900      	cmp	r1, #0
 8012b00:	da00      	bge.n	8012b04 <HAL_SYSTICK_Callback+0x888>
 8012b02:	3101      	adds	r1, #1
 8012b04:	ebb3 0f61 	cmp.w	r3, r1, asr #1
 8012b08:	da00      	bge.n	8012b0c <HAL_SYSTICK_Callback+0x890>
 8012b0a:	4413      	add	r3, r2
 8012b0c:	9303      	str	r3, [sp, #12]
 8012b0e:	4a10      	ldr	r2, [pc, #64]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012b10:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
 8012b14:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8012b18:	1a8a      	subs	r2, r1, r2
          //push in acc data
          if(velo_queue.size())
 8012b1a:	0892      	lsrs	r2, r2, #2
 8012b1c:	d007      	beq.n	8012b2e <HAL_SYSTICK_Callback+0x8b2>
            acc_queue.push_back(tmpvelo-velo_queue.back());
 8012b1e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012b22:	1a9b      	subs	r3, r3, r2
 8012b24:	930a      	str	r3, [sp, #40]	; 0x28
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }
 8012b26:	a90a      	add	r1, sp, #40	; 0x28
 8012b28:	4813      	ldr	r0, [pc, #76]	; (8012b78 <HAL_SYSTICK_Callback+0x8fc>)
 8012b2a:	f7ff fb97 	bl	801225c <_ZNSt6vectorIiSaIiEE12emplace_backIIiEEEvDpOT_>
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012b2e:	4a08      	ldr	r2, [pc, #32]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012b30:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 8012b34:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d01f      	beq.n	8012b7c <HAL_SYSTICK_Callback+0x900>
 8012b3c:	9a03      	ldr	r2, [sp, #12]
 8012b3e:	b103      	cbz	r3, 8012b42 <HAL_SYSTICK_Callback+0x8c6>
 8012b40:	601a      	str	r2, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
 8012b42:	4a03      	ldr	r2, [pc, #12]	; (8012b50 <HAL_SYSTICK_Callback+0x8d4>)
 8012b44:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 8012b48:	3304      	adds	r3, #4
 8012b4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012b4e:	e019      	b.n	8012b84 <HAL_SYSTICK_Callback+0x908>
 8012b50:	20000578 	.word	0x20000578
 8012b54:	0801b0bc 	.word	0x0801b0bc
 8012b58:	40000400 	.word	0x40000400
 8012b5c:	2000068c 	.word	0x2000068c
 8012b60:	20000680 	.word	0x20000680
 8012b64:	2000066c 	.word	0x2000066c
 8012b68:	00000000 	.word	0x00000000
 8012b6c:	0801ad64 	.word	0x0801ad64
 8012b70:	447a0000 	.word	0x447a0000
 8012b74:	40000c00 	.word	0x40000c00
 8012b78:	20000658 	.word	0x20000658
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
 8012b7c:	a903      	add	r1, sp, #12
 8012b7e:	4850      	ldr	r0, [pc, #320]	; (8012cc0 <HAL_SYSTICK_Callback+0xa44>)
 8012b80:	f7ff faca 	bl	8012118 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_>
       *  available.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012b84:	4a4f      	ldr	r2, [pc, #316]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012b86:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8012b8a:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d009      	beq.n	8012ba6 <HAL_SYSTICK_Callback+0x92a>
 8012b92:	9a02      	ldr	r2, [sp, #8]
 8012b94:	b103      	cbz	r3, 8012b98 <HAL_SYSTICK_Callback+0x91c>
 8012b96:	601a      	str	r2, [r3, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
	    ++this->_M_impl._M_finish;
 8012b98:	4a4a      	ldr	r2, [pc, #296]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012b9a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8012b9e:	3304      	adds	r3, #4
 8012ba0:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
 8012ba4:	e003      	b.n	8012bae <HAL_SYSTICK_Callback+0x932>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
 8012ba6:	a902      	add	r1, sp, #8
 8012ba8:	4847      	ldr	r0, [pc, #284]	; (8012cc8 <HAL_SYSTICK_Callback+0xa4c>)
 8012baa:	f7ff fab5 	bl	8012118 <_ZNSt6vectorIiSaIiEE19_M_emplace_back_auxIIRKiEEEvDpOT_>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012bae:	4a45      	ldr	r2, [pc, #276]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012bb0:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8012bb4:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
 8012bb8:	1a5b      	subs	r3, r3, r1
          //push in velo data
          velo_queue.push_back(tmpvelo);
        }
      //push in sensor data.
      data_queue.push_back(new_data);
      if(data_queue.size() > queue_size)
 8012bba:	2b2b      	cmp	r3, #43	; 0x2b
 8012bbc:	d903      	bls.n	8012bc6 <HAL_SYSTICK_Callback+0x94a>
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 8012bbe:	f102 00c0 	add.w	r0, r2, #192	; 0xc0
 8012bc2:	f7ff faf1 	bl	80121a8 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012bc6:	4a3f      	ldr	r2, [pc, #252]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012bc8:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 8012bcc:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
 8012bd0:	1a5b      	subs	r3, r3, r1
        data_queue.erase(data_queue.begin());
      if(velo_queue.size() > queue_size)
 8012bd2:	2b2b      	cmp	r3, #43	; 0x2b
 8012bd4:	d92f      	bls.n	8012c36 <HAL_SYSTICK_Callback+0x9ba>
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 8012bd6:	f102 00d4 	add.w	r0, r2, #212	; 0xd4
 8012bda:	f7ff fae5 	bl	80121a8 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE>

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 8012bde:	2300      	movs	r3, #0


  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
 8012be0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8012ccc <HAL_SYSTICK_Callback+0xa50>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012be4:	4937      	ldr	r1, [pc, #220]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012be6:	f8d1 20d8 	ldr.w	r2, [r1, #216]	; 0xd8
 8012bea:	f8d1 00d4 	ldr.w	r0, [r1, #212]	; 0xd4
 8012bee:	1a12      	subs	r2, r2, r0
 8012bf0:	1092      	asrs	r2, r2, #2
    	for(int i = 0; i < data->size(); i++)
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d90d      	bls.n	8012c14 <HAL_SYSTICK_Callback+0x998>
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 8012bf8:	d802      	bhi.n	8012c00 <HAL_SYSTICK_Callback+0x984>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8012bfa:	4835      	ldr	r0, [pc, #212]	; (8012cd0 <HAL_SYSTICK_Callback+0xa54>)
 8012bfc:	f001 fe66 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
    		sum += data->at(i);
 8012c00:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8012c04:	ee07 2a90 	vmov	s15, r2
 8012c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c0c:	ee37 7a27 	vadd.f32	s14, s14, s15

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 8012c10:	3301      	adds	r3, #1
 8012c12:	e7e7      	b.n	8012be4 <HAL_SYSTICK_Callback+0x968>
    		sum += data->at(i);

    	return SYSFREQ*ENC_UNI_LEN*sum/data->size();
 8012c14:	4b2b      	ldr	r3, [pc, #172]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012c16:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8012c1a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8012cd4 <HAL_SYSTICK_Callback+0xa58>
 8012c1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c26:	ee07 2a90 	vmov	s15, r2
 8012c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
      if(data_queue.size() > queue_size)
        data_queue.erase(data_queue.begin());
      if(velo_queue.size() > queue_size)
        {
          velo_queue.erase(velo_queue.begin());
          ave_velo = Average_vec(&velo_queue);
 8012c32:	edc3 6a3b 	vstr	s13, [r3, #236]	; 0xec

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012c36:	4a23      	ldr	r2, [pc, #140]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012c38:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8012c3c:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
 8012c40:	1a5b      	subs	r3, r3, r1
        }
      if(acc_queue.size() > queue_size)
 8012c42:	2b2b      	cmp	r3, #43	; 0x2b
 8012c44:	d92f      	bls.n	8012ca6 <HAL_SYSTICK_Callback+0xa2a>
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
 8012c46:	f102 00e0 	add.w	r0, r2, #224	; 0xe0
 8012c4a:	f7ff faad 	bl	80121a8 <_ZNSt6vectorIiSaIiEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EE>

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 8012c4e:	2300      	movs	r3, #0


  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
 8012c50:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8012ccc <HAL_SYSTICK_Callback+0xa50>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012c54:	491b      	ldr	r1, [pc, #108]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012c56:	f8d1 20e4 	ldr.w	r2, [r1, #228]	; 0xe4
 8012c5a:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 8012c5e:	1a12      	subs	r2, r2, r0
 8012c60:	1092      	asrs	r2, r2, #2
    	for(int i = 0; i < data->size(); i++)
 8012c62:	4619      	mov	r1, r3
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d90d      	bls.n	8012c84 <HAL_SYSTICK_Callback+0xa08>
    protected:
      /// Safety check used only from at().
      void
      _M_range_check(size_type __n) const
      {
	if (__n >= this->size())
 8012c68:	d802      	bhi.n	8012c70 <HAL_SYSTICK_Callback+0x9f4>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8012c6a:	4819      	ldr	r0, [pc, #100]	; (8012cd0 <HAL_SYSTICK_Callback+0xa54>)
 8012c6c:	f001 fe2e 	bl	80148cc <_ZSt24__throw_out_of_range_fmtPKcz>
    		sum += data->at(i);
 8012c70:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8012c74:	ee07 2a90 	vmov	s15, r2
 8012c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c7c:	ee37 7a27 	vadd.f32	s14, s14, s15

  private:
    float Average_vec(std::vector<Enctype> *data)
    {
    	float sum = 0;
    	for(int i = 0; i < data->size(); i++)
 8012c80:	3301      	adds	r3, #1
 8012c82:	e7e7      	b.n	8012c54 <HAL_SYSTICK_Callback+0x9d8>
    		sum += data->at(i);

    	return SYSFREQ*ENC_UNI_LEN*sum/data->size();
 8012c84:	4b0f      	ldr	r3, [pc, #60]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012c86:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8012c8a:	eddf 6a12 	vldr	s13, [pc, #72]	; 8012cd4 <HAL_SYSTICK_Callback+0xa58>
 8012c8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c96:	ee07 2a90 	vmov	s15, r2
 8012c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
          ave_velo = Average_vec(&velo_queue);
        }
      if(acc_queue.size() > queue_size)
        {
          acc_queue.erase(acc_queue.begin());
          ave_acc = Average_vec(&acc_queue);
 8012ca2:	edc3 6a3c 	vstr	s13, [r3, #240]	; 0xf0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012ca6:	4a07      	ldr	r2, [pc, #28]	; (8012cc4 <HAL_SYSTICK_Callback+0xa48>)
 8012ca8:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8012cac:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8012cb0:	1a9b      	subs	r3, r3, r2
        }

      return data_queue.size();
 8012cb2:	f3c3 038f 	ubfx	r3, r3, #2, #16
			ugvnode->Ros_Pid_controller(&Enc_handle_left,&Enc_handle_right,&imu_);
	}

	//enough data in the data buffer, velocity and accdata accessible.
	if((Enc_handle_right.update(TIM3->CNT) ==
			Enc_handle_right.DEFAULT_DATA_SIZE) &&
 8012cb6:	2b0a      	cmp	r3, #10
 8012cb8:	d10e      	bne.n	8012cd8 <HAL_SYSTICK_Callback+0xa5c>
 8012cba:	e00e      	b.n	8012cda <HAL_SYSTICK_Callback+0xa5e>
 8012cbc:	2600      	movs	r6, #0
 8012cbe:	e00c      	b.n	8012cda <HAL_SYSTICK_Callback+0xa5e>
 8012cc0:	2000064c 	.word	0x2000064c
 8012cc4:	20000578 	.word	0x20000578
 8012cc8:	20000638 	.word	0x20000638
 8012ccc:	00000000 	.word	0x00000000
 8012cd0:	0801ad64 	.word	0x0801ad64
 8012cd4:	447a0000 	.word	0x447a0000
 8012cd8:	2600      	movs	r6, #0
		if(counter%2) //2ms control once...... become more and more accurate
			ugvnode->Ros_Pid_controller(&Enc_handle_left,&Enc_handle_right,&imu_);
	}

	//enough data in the data buffer, velocity and accdata accessible.
	if((Enc_handle_right.update(TIM3->CNT) ==
 8012cda:	b176      	cbz	r6, 8012cfa <HAL_SYSTICK_Callback+0xa7e>
			(Enc_handle_left.update(Enc_handle_left.ENC_OVE - TIM5->CNT)
					== Enc_handle_right.DEFAULT_DATA_SIZE))
	{
		//fail to set now timestamp...
		//odom_msg.header.stamp = nh_.now();
		ugvnode->odom_msg.linear.x = Enc_handle_left.ave_velo;
 8012cdc:	4cc0      	ldr	r4, [pc, #768]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012cde:	f8d4 5548 	ldr.w	r5, [r4, #1352]	; 0x548
 8012ce2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8012ce6:	f7f5 fd91 	bl	800880c <__aeabi_f2d>
 8012cea:	e9c5 010a 	strd	r0, r1, [r5, #40]	; 0x28
		ugvnode->odom_msg.linear.y = Enc_handle_right.ave_velo;
 8012cee:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 8012cf2:	f7f5 fd8b 	bl	800880c <__aeabi_f2d>
 8012cf6:	e9c5 010c 	strd	r0, r1, [r5, #48]	; 0x30
	}
	//so as the imu
	if(imu_.update()==imu_.DEFAULT_DATA_SIZE)
 8012cfa:	210a      	movs	r1, #10
 8012cfc:	48b9      	ldr	r0, [pc, #740]	; (8012fe4 <HAL_SYSTICK_Callback+0xd68>)
 8012cfe:	f7fb fe95 	bl	800ea2c <_ZN3IMU6updateEt>
 8012d02:	280a      	cmp	r0, #10
 8012d04:	d10e      	bne.n	8012d24 <HAL_SYSTICK_Callback+0xaa8>
	{
		ugvnode->odom_msg.angular.z = imu_.ave_gyro.z;
 8012d06:	4cb6      	ldr	r4, [pc, #728]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012d08:	f8d4 5548 	ldr.w	r5, [r4, #1352]	; 0x548
 8012d0c:	f204 4434 	addw	r4, r4, #1076	; 0x434
 8012d10:	6a20      	ldr	r0, [r4, #32]
 8012d12:	f7f5 fd7b 	bl	800880c <__aeabi_f2d>
 8012d16:	e9c5 0116 	strd	r0, r1, [r5, #88]	; 0x58
		ugvnode->odom_msg.linear.z = imu_.ave_gyroacc.z;
 8012d1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012d1c:	f7f5 fd76 	bl	800880c <__aeabi_f2d>
 8012d20:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
      }
  }

  void update()
  {
    if(attitude_estimate_flag_) attitude_estimator_.update();
 8012d24:	4bae      	ldr	r3, [pc, #696]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012d26:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f000 80ff 	beq.w	8012f2e <HAL_SYSTICK_Callback+0xcb2>

  void update()
  {

    if(imu_->getUpdate())
 8012d30:	4bab      	ldr	r3, [pc, #684]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012d32:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
	//chen 0526 change update function
	//void update();
	uint16_t update(uint16_t queue_size = DEFAULT_DATA_SIZE);
	void ledOutput();

	bool getUpdate() { return update_; }
 8012d34:	f890 3110 	ldrb.w	r3, [r0, #272]	; 0x110
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	f000 80f8 	beq.w	8012f2e <HAL_SYSTICK_Callback+0xcb2>
      {
        /* attitude estimation */
        if(!imu_->getCalibrated()) return;
 8012d3e:	f7fb f8a3 	bl	800de88 <_ZN3IMU13getCalibratedEv>
 8012d42:	2800      	cmp	r0, #0
 8012d44:	f000 80f3 	beq.w	8012f2e <HAL_SYSTICK_Callback+0xcb2>
        estimator_->update(imu_->getGyro(), imu_->getAcc(), imu_->getMag());
 8012d48:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8012fe0 <HAL_SYSTICK_Callback+0xd64>
 8012d4c:	f8d8 4058 	ldr.w	r4, [r8, #88]	; 0x58
 8012d50:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
	Vector3f  getGyro(){return gyro_;}
 8012d54:	ae0b      	add	r6, sp, #44	; 0x2c
 8012d56:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8012d5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d5c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012d60:	ad0e      	add	r5, sp, #56	; 0x38
 8012d62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012d66:	f10d 0e8c 	add.w	lr, sp, #140	; 0x8c
 8012d6a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
	/* calibration cmd form ROS */
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
 8012d6e:	ad11      	add	r5, sp, #68	; 0x44
 8012d70:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8012d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012d7a:	ae14      	add	r6, sp, #80	; 0x50
 8012d7c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012d80:	ad20      	add	r5, sp, #128	; 0x80
 8012d82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	Vector3f  getGyro(){return gyro_;}
	Vector3f  getMag(){return mag_;}
 8012d86:	af17      	add	r7, sp, #92	; 0x5c
 8012d88:	33a0      	adds	r3, #160	; 0xa0
 8012d8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d8e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012d92:	ae1a      	add	r6, sp, #104	; 0x68
 8012d94:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012d98:	ab1d      	add	r3, sp, #116	; 0x74
 8012d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}


  void update(const Vector3f& gyro, const Vector3f& acc, const Vector3f& mag)
  {
    /* the sensor data in body frame */
    acc_b_ = acc;
 8012d9e:	1d27      	adds	r7, r4, #4
 8012da0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012da4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    gyro_b_ = gyro;
 8012da8:	f104 061c 	add.w	r6, r4, #28
 8012dac:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8012db0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    mag_b_ = mag;
 8012db4:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8012db8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012dbc:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    /* the sensor data in virtual frame */
    acc_v_ = r_* acc_b_;
 8012dc0:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8012dc4:	4639      	mov	r1, r7
 8012dc6:	4648      	mov	r0, r9
 8012dc8:	f000 fe64 	bl	8013a94 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8012dcc:	ed84 0a04 	vstr	s0, [r4, #16]
 8012dd0:	edc4 0a05 	vstr	s1, [r4, #20]
 8012dd4:	ed84 1a06 	vstr	s2, [r4, #24]
    gyro_v_ = r_*  gyro_b_;
 8012dd8:	4631      	mov	r1, r6
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f000 fe5a 	bl	8013a94 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8012de0:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
 8012de4:	edc4 0a0b 	vstr	s1, [r4, #44]	; 0x2c
 8012de8:	ed84 1a0c 	vstr	s2, [r4, #48]	; 0x30
    mag_v_ = r_ * mag_b_;
 8012dec:	4629      	mov	r1, r5
 8012dee:	4648      	mov	r0, r9
 8012df0:	f000 fe50 	bl	8013a94 <_ZNK7Matrix3IfEmlERK7Vector3IfE>
 8012df4:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
 8012df8:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
 8012dfc:	ed84 1a12 	vstr	s2, [r4, #72]	; 0x48
    arm_mat_mult_f32(&desire_attitude_R_, &acc_b_vec_, &acc_v_vec_);
    arm_mat_mult_f32(&desire_attitude_R_, &gyro_b_vec_, &gyro_v_vec_);
    arm_mat_mult_f32(&desire_attitude_R_, &mag_b_vec_, &mag_v_vec_);
    */

    estimation();
 8012e00:	6823      	ldr	r3, [r4, #0]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4620      	mov	r0, r4
 8012e06:	4798      	blx	r3

        /* send message to ros*/
        if(nh_->connected())  publish();
 8012e08:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012e0c:	6803      	ldr	r3, [r0, #0]
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	4798      	blx	r3
 8012e12:	2800      	cmp	r0, #0
 8012e14:	f000 8086 	beq.w	8012f24 <HAL_SYSTICK_Callback+0xca8>
  }

  /* send message via ros protocal */
  void publish()
  {
    uint32_t now_time = HAL_GetTick();
 8012e18:	f7fa fe1a 	bl	800da50 <HAL_GetTick>
    if( now_time - last_pub_time_ >= PUB_INTERVAL)
 8012e1c:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8012e20:	1ac3      	subs	r3, r0, r3
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d97e      	bls.n	8012f24 <HAL_SYSTICK_Callback+0xca8>
      {
        last_pub_time_ = now_time;
 8012e26:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
        imu_msg_.stamp = nh_->now();
 8012e2a:	f8d8 5010 	ldr.w	r5, [r8, #16]
 8012e2e:	f7fa fe0f 	bl	800da50 <HAL_GetTick>

    Time now()
    {
      uint32_t ms = hardware_.time();
      Time current_time;
      current_time.sec = ms/1000 + sec_offset;
 8012e32:	6969      	ldr	r1, [r5, #20]
 8012e34:	4a6c      	ldr	r2, [pc, #432]	; (8012fe8 <HAL_SYSTICK_Callback+0xd6c>)
 8012e36:	fba2 3200 	umull	r3, r2, r2, r0
 8012e3a:	0993      	lsrs	r3, r2, #6
 8012e3c:	4419      	add	r1, r3
 8012e3e:	914a      	str	r1, [sp, #296]	; 0x128
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 8012e40:	69aa      	ldr	r2, [r5, #24]
 8012e42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012e46:	fb01 0313 	mls	r3, r1, r3, r0
 8012e4a:	4968      	ldr	r1, [pc, #416]	; (8012fec <HAL_SYSTICK_Callback+0xd70>)
 8012e4c:	fb01 2303 	mla	r3, r1, r3, r2
 8012e50:	934b      	str	r3, [sp, #300]	; 0x12c
      normalizeSecNSec(current_time.sec, current_time.nsec);
 8012e52:	ad4a      	add	r5, sp, #296	; 0x128
 8012e54:	a94b      	add	r1, sp, #300	; 0x12c
 8012e56:	4628      	mov	r0, r5
 8012e58:	f7fa ff98 	bl	800dd8c <_ZN3ros16normalizeSecNSecERmS0_>
 8012e5c:	f108 031c 	add.w	r3, r8, #28
 8012e60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012e64:	e883 0003 	stmia.w	r3, {r0, r1}
        for(int i = 0; i < 3 ; i ++)
 8012e68:	2300      	movs	r3, #0
 8012e6a:	2b02      	cmp	r3, #2
 8012e6c:	dc52      	bgt.n	8012f14 <HAL_SYSTICK_Callback+0xc98>
#if 0 //virtual coord
            imu_msg_.gyro_data[i] = estimator_->getGyroV()[i];
            imu_msg_.mag_data[i] = estimator_->getMagV()[i];
            imu_msg_.acc_data[i] = estimator_->getAccV()[i];
#else //raw data
imu_msg_.gyro_data[i] = imu_->getGyro()[i];
 8012e6e:	4c5c      	ldr	r4, [pc, #368]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012e70:	6de6      	ldr	r6, [r4, #92]	; 0x5c
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
	Vector3f  getGyro(){return gyro_;}
 8012e72:	af26      	add	r7, sp, #152	; 0x98
 8012e74:	f106 0294 	add.w	r2, r6, #148	; 0x94
 8012e78:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e7a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012e7e:	ad29      	add	r5, sp, #164	; 0xa4
 8012e80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012e84:	af47      	add	r7, sp, #284	; 0x11c
 8012e86:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    T & operator[](uint8_t i) {
        T *_v = &x;
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
 8012e8a:	b2dd      	uxtb	r5, r3
 8012e8c:	00ad      	lsls	r5, r5, #2
 8012e8e:	442f      	add	r7, r5
 8012e90:	6839      	ldr	r1, [r7, #0]
 8012e92:	f103 0208 	add.w	r2, r3, #8
 8012e96:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012e9a:	6111      	str	r1, [r2, #16]
	Vector3f  getMag(){return mag_;}
 8012e9c:	af2c      	add	r7, sp, #176	; 0xb0
 8012e9e:	f106 02a0 	add.w	r2, r6, #160	; 0xa0
 8012ea2:	ca07      	ldmia	r2, {r0, r1, r2}
 8012ea4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012ea8:	f10d 0ebc 	add.w	lr, sp, #188	; 0xbc
 8012eac:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
            imu_msg_.mag_data[i] = imu_->getMag()[i];
 8012eb0:	af44      	add	r7, sp, #272	; 0x110
 8012eb2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012eb6:	442f      	add	r7, r5
 8012eb8:	6839      	ldr	r1, [r7, #0]
 8012eba:	f103 020a 	add.w	r2, r3, #10
 8012ebe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012ec2:	6151      	str	r1, [r2, #20]
	/* calibration cmd form ROS */
	static const uint8_t RESET_CALIB_CMD = 0x00;
	static const uint8_t MPU_ACC_GYRO_CALIB_CMD = 0x01;
	static const uint8_t MPU_MAG_CALIB_CMD = 0x02;

	Vector3f  getAcc(){return acc_;}
 8012ec4:	f10d 0ec8 	add.w	lr, sp, #200	; 0xc8
 8012ec8:	3688      	adds	r6, #136	; 0x88
 8012eca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012ece:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8012ed2:	af35      	add	r7, sp, #212	; 0xd4
 8012ed4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
            imu_msg_.acc_data[i] = imu_->getAcc()[i];
 8012ed8:	ae41      	add	r6, sp, #260	; 0x104
 8012eda:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012ede:	442e      	add	r6, r5
 8012ee0:	6831      	ldr	r1, [r6, #0]
 8012ee2:	1d1a      	adds	r2, r3, #4
 8012ee4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012ee8:	6151      	str	r1, [r2, #20]
#endif
            imu_msg_.angles[i] = estimator_->getAngles()[i];
 8012eea:	6da2      	ldr	r2, [r4, #88]	; 0x58
  static const uint8_t RELATIVE_COORD = 1;
  static const uint8_t X = 0;
  static const uint8_t Y = 1;
  static const uint8_t Z = 2;

  Vector3f getAngles(){return rpy_;}
 8012eec:	af38      	add	r7, sp, #224	; 0xe0
 8012eee:	3270      	adds	r2, #112	; 0x70
 8012ef0:	ca07      	ldmia	r2, {r0, r1, r2}
 8012ef2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012ef6:	ae3b      	add	r6, sp, #236	; 0xec
 8012ef8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012efc:	af3e      	add	r7, sp, #248	; 0xf8
 8012efe:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8012f02:	443d      	add	r5, r7
 8012f04:	682a      	ldr	r2, [r5, #0]
 8012f06:	f103 010e 	add.w	r1, r3, #14
 8012f0a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8012f0e:	6122      	str	r2, [r4, #16]
    uint32_t now_time = HAL_GetTick();
    if( now_time - last_pub_time_ >= PUB_INTERVAL)
      {
        last_pub_time_ = now_time;
        imu_msg_.stamp = nh_->now();
        for(int i = 0; i < 3 ; i ++)
 8012f10:	3301      	adds	r3, #1
 8012f12:	e7aa      	b.n	8012e6a <HAL_SYSTICK_Callback+0xbee>
            imu_msg_.acc_data[i] = imu_->getAcc()[i];
#endif
            imu_msg_.angles[i] = estimator_->getAngles()[i];
          }

        imu_pub_->publish(&imu_msg_);
 8012f14:	4a32      	ldr	r2, [pc, #200]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012f16:	6953      	ldr	r3, [r2, #20]
 8012f18:	68d8      	ldr	r0, [r3, #12]
 8012f1a:	6801      	ldr	r1, [r0, #0]
 8012f1c:	680c      	ldr	r4, [r1, #0]
 8012f1e:	3218      	adds	r2, #24
 8012f20:	6899      	ldr	r1, [r3, #8]
 8012f22:	47a0      	blx	r4

        /* send message to ros*/
        if(nh_->connected())  publish();

        /* reset update status of imu*/
        imu_->setUpdate(false);
 8012f24:	4b2e      	ldr	r3, [pc, #184]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
	//void update();
	uint16_t update(uint16_t queue_size = DEFAULT_DATA_SIZE);
	void ledOutput();

	bool getUpdate() { return update_; }
	void setUpdate(bool update) { update_ = update; }
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
    if(altitude_estimate_flag_) altitude_estimator_.update();
 8012f2e:	4b2c      	ldr	r3, [pc, #176]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012f30:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d03b      	beq.n	8012fb0 <HAL_SYSTICK_Callback+0xd34>
    baro_= baro;
  }

  void update()
  {
    if(baro_->getUpdate())
 8012f38:	4b29      	ldr	r3, [pc, #164]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  // get current climb rate in meters/s. A positive number means
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
 8012f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d034      	beq.n	8012fb0 <HAL_SYSTICK_Callback+0xd34>
  //nav-ekf


  void publish()
  {
    baro_msg_.stamp = nh_->now();
 8012f46:	4c26      	ldr	r4, [pc, #152]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012f48:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8012f4a:	f7fa fd81 	bl	800da50 <HAL_GetTick>

    Time now()
    {
      uint32_t ms = hardware_.time();
      Time current_time;
      current_time.sec = ms/1000 + sec_offset;
 8012f4e:	6969      	ldr	r1, [r5, #20]
 8012f50:	4a25      	ldr	r2, [pc, #148]	; (8012fe8 <HAL_SYSTICK_Callback+0xd6c>)
 8012f52:	fba2 3200 	umull	r3, r2, r2, r0
 8012f56:	0993      	lsrs	r3, r2, #6
 8012f58:	4419      	add	r1, r3
 8012f5a:	914c      	str	r1, [sp, #304]	; 0x130
      current_time.nsec = (ms%1000)*1000000UL + nsec_offset;
 8012f5c:	69aa      	ldr	r2, [r5, #24]
 8012f5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012f62:	fb01 0313 	mls	r3, r1, r3, r0
 8012f66:	4921      	ldr	r1, [pc, #132]	; (8012fec <HAL_SYSTICK_Callback+0xd70>)
 8012f68:	fb01 2303 	mla	r3, r1, r3, r2
 8012f6c:	934d      	str	r3, [sp, #308]	; 0x134
      normalizeSecNSec(current_time.sec, current_time.nsec);
 8012f6e:	ad4c      	add	r5, sp, #304	; 0x130
 8012f70:	a94d      	add	r1, sp, #308	; 0x134
 8012f72:	4628      	mov	r0, r5
 8012f74:	f7fa ff0a 	bl	800dd8c <_ZN3ros16normalizeSecNSecERmS0_>
 8012f78:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8012f7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012f80:	e883 0003 	stmia.w	r3, {r0, r1}
    baro_msg_.pressure = baro_->getPressure();
 8012f84:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  void setUpdate(bool update) { update_ = update; }

  inline float getPressure(){return pressure_;}
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	67e2      	str	r2, [r4, #124]	; 0x7c
  inline float getTemperature(){return temperature_;}
 8012f8c:	689a      	ldr	r2, [r3, #8]
    baro_msg_.temperature = baro_->getTemperature();
 8012f8e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  inline float getAltitude(){return altitude_;}
 8012f92:	68db      	ldr	r3, [r3, #12]
    baro_msg_.altitude = baro_->getAltitude();
 8012f94:	67a3      	str	r3, [r4, #120]	; 0x78
    baro_pub_->publish(&baro_msg_);
 8012f96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012f98:	68d8      	ldr	r0, [r3, #12]
 8012f9a:	6802      	ldr	r2, [r0, #0]
 8012f9c:	6815      	ldr	r5, [r2, #0]
 8012f9e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8012fa2:	6899      	ldr	r1, [r3, #8]
 8012fa4:	47a8      	blx	r5
        //nav-ekf

        /* send message */
       publish();

        baro_->setUpdate(false);
 8012fa6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
  void setUpdate(bool update) { update_ = update; }
 8012faa:	2200      	movs	r2, #0
 8012fac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if(pos_estimate_flag_) pos_estimator_.update();
 8012fb0:	4b0b      	ldr	r3, [pc, #44]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012fb2:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8012fb6:	b17b      	cbz	r3, 8012fd8 <HAL_SYSTICK_Callback+0xd5c>
    gps_ = gps;
  }

  void update()
  {
    if(gps_->getUpdate())
 8012fb8:	4b09      	ldr	r3, [pc, #36]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012fba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
  uint16_t getRxSize()
  {
    return (uint16_t)GPS_RX_SIZE;
  }

  bool getUpdate() { return update_; }
 8012fbe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8012fc2:	b14b      	cbz	r3, 8012fd8 <HAL_SYSTICK_Callback+0xd5c>
      {
        /* altitude estimation */
        //nav-ekf2

        /* send message */
        publish();
 8012fc4:	4c06      	ldr	r4, [pc, #24]	; (8012fe0 <HAL_SYSTICK_Callback+0xd64>)
 8012fc6:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8012fca:	f7fe fdd9 	bl	8011b80 <_ZN11PosEstimate7publishEv>
        gps_->setUpdate(false);
 8012fce:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
  void setUpdate(bool update) { update_ = update; }
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
#if (ATTITUDE_ESTIMATE_FLAG || HEIGHT_ESTIMATE_FLAG || POS_ESTIMATE_FLAG)
	estimator_.update();
#endif


}
 8012fd8:	b04e      	add	sp, #312	; 0x138
 8012fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fde:	bf00      	nop
 8012fe0:	20000578 	.word	0x20000578
 8012fe4:	200009ac 	.word	0x200009ac
 8012fe8:	10624dd3 	.word	0x10624dd3
 8012fec:	000f4240 	.word	0x000f4240

08012ff0 <_GLOBAL__sub_I_Enc_handle_left>:

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 2, 0);
}
 8012ff0:	b508      	push	{r3, lr}
 8012ff2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ff6:	2001      	movs	r0, #1
 8012ff8:	f7fd fdc4 	bl	8010b84 <_Z41__static_initialization_and_destruction_0ii>
 8012ffc:	bd08      	pop	{r3, pc}
 8012ffe:	bf00      	nop

08013000 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013000:	b538      	push	{r3, r4, r5, lr}

  hi2c1.Instance = I2C1;
 8013002:	4c0b      	ldr	r4, [pc, #44]	; (8013030 <MX_I2C1_Init+0x30>)
 8013004:	4b0b      	ldr	r3, [pc, #44]	; (8013034 <MX_I2C1_Init+0x34>)
 8013006:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8013008:	4b0b      	ldr	r3, [pc, #44]	; (8013038 <MX_I2C1_Init+0x38>)
 801300a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 801300c:	2500      	movs	r5, #0
 801300e:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013010:	2301      	movs	r3, #1
 8013012:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013014:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8013016:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013018:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801301a:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801301c:	6225      	str	r5, [r4, #32]
  HAL_I2C_Init(&hi2c1);
 801301e:	4620      	mov	r0, r4
 8013020:	f7f9 fe28 	bl	800cc74 <HAL_I2C_Init>

    /**Configure Analogue filter 
    */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8013024:	4629      	mov	r1, r5
 8013026:	4620      	mov	r0, r4
 8013028:	f7f9 fdd4 	bl	800cbd4 <HAL_I2CEx_ConfigAnalogFilter>
 801302c:	bd38      	pop	{r3, r4, r5, pc}
 801302e:	bf00      	nop
 8013030:	20003f3c 	.word	0x20003f3c
 8013034:	40005400 	.word	0x40005400
 8013038:	6000030d 	.word	0x6000030d

0801303c <MX_I2C2_Init>:

}
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 801303c:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
 801303e:	4c0b      	ldr	r4, [pc, #44]	; (801306c <MX_I2C2_Init+0x30>)
 8013040:	4b0b      	ldr	r3, [pc, #44]	; (8013070 <MX_I2C2_Init+0x34>)
 8013042:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x20404768;
 8013044:	4b0b      	ldr	r3, [pc, #44]	; (8013074 <MX_I2C2_Init+0x38>)
 8013046:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8013048:	2500      	movs	r5, #0
 801304a:	60a5      	str	r5, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801304c:	2301      	movs	r3, #1
 801304e:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013050:	6125      	str	r5, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8013052:	6165      	str	r5, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013054:	61a5      	str	r5, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013056:	61e5      	str	r5, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013058:	6225      	str	r5, [r4, #32]
  HAL_I2C_Init(&hi2c2);
 801305a:	4620      	mov	r0, r4
 801305c:	f7f9 fe0a 	bl	800cc74 <HAL_I2C_Init>

    /**Configure Analogue filter 
    */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 8013060:	4629      	mov	r1, r5
 8013062:	4620      	mov	r0, r4
 8013064:	f7f9 fdb6 	bl	800cbd4 <HAL_I2CEx_ConfigAnalogFilter>
 8013068:	bd38      	pop	{r3, r4, r5, pc}
 801306a:	bf00      	nop
 801306c:	20003f00 	.word	0x20003f00
 8013070:	40005800 	.word	0x40005800
 8013074:	20404768 	.word	0x20404768

08013078 <HAL_I2C_MspInit>:

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8013078:	b500      	push	{lr}
 801307a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 801307c:	6803      	ldr	r3, [r0, #0]
 801307e:	4a20      	ldr	r2, [pc, #128]	; (8013100 <HAL_I2C_MspInit+0x88>)
 8013080:	4293      	cmp	r3, r2
 8013082:	d11b      	bne.n	80130bc <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8013084:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013088:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801308a:	2312      	movs	r3, #18
 801308c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801308e:	2301      	movs	r3, #1
 8013090:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013092:	2303      	movs	r3, #3
 8013094:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013096:	2304      	movs	r3, #4
 8013098:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801309a:	a903      	add	r1, sp, #12
 801309c:	4819      	ldr	r0, [pc, #100]	; (8013104 <HAL_I2C_MspInit+0x8c>)
 801309e:	f7f9 fe3f 	bl	800cd20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80130a2:	2300      	movs	r3, #0
 80130a4:	9301      	str	r3, [sp, #4]
 80130a6:	4b18      	ldr	r3, [pc, #96]	; (8013108 <HAL_I2C_MspInit+0x90>)
 80130a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80130aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80130ae:	641a      	str	r2, [r3, #64]	; 0x40
 80130b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80130b6:	9301      	str	r3, [sp, #4]
 80130b8:	9b01      	ldr	r3, [sp, #4]
 80130ba:	e01d      	b.n	80130f8 <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 80130bc:	4a13      	ldr	r2, [pc, #76]	; (801310c <HAL_I2C_MspInit+0x94>)
 80130be:	4293      	cmp	r3, r2
 80130c0:	d11a      	bne.n	80130f8 <HAL_I2C_MspInit+0x80>
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80130c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80130c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80130c8:	2312      	movs	r3, #18
 80130ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80130cc:	2301      	movs	r3, #1
 80130ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130d0:	2303      	movs	r3, #3
 80130d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80130d4:	2304      	movs	r3, #4
 80130d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80130d8:	a903      	add	r1, sp, #12
 80130da:	480a      	ldr	r0, [pc, #40]	; (8013104 <HAL_I2C_MspInit+0x8c>)
 80130dc:	f7f9 fe20 	bl	800cd20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80130e0:	2300      	movs	r3, #0
 80130e2:	9302      	str	r3, [sp, #8]
 80130e4:	4b08      	ldr	r3, [pc, #32]	; (8013108 <HAL_I2C_MspInit+0x90>)
 80130e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80130e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80130ec:	641a      	str	r2, [r3, #64]	; 0x40
 80130ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80130f4:	9302      	str	r3, [sp, #8]
 80130f6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80130f8:	b009      	add	sp, #36	; 0x24
 80130fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80130fe:	bf00      	nop
 8013100:	40005400 	.word	0x40005400
 8013104:	40020400 	.word	0x40020400
 8013108:	40023800 	.word	0x40023800
 801310c:	40005800 	.word	0x40005800

08013110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8013110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013114:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013116:	2400      	movs	r4, #0
 8013118:	9401      	str	r4, [sp, #4]
 801311a:	4b5f      	ldr	r3, [pc, #380]	; (8013298 <MX_GPIO_Init+0x188>)
 801311c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801311e:	f042 0210 	orr.w	r2, r2, #16
 8013122:	631a      	str	r2, [r3, #48]	; 0x30
 8013124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013126:	f002 0210 	and.w	r2, r2, #16
 801312a:	9201      	str	r2, [sp, #4]
 801312c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801312e:	9402      	str	r4, [sp, #8]
 8013130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013136:	631a      	str	r2, [r3, #48]	; 0x30
 8013138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801313a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801313e:	9202      	str	r2, [sp, #8]
 8013140:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013142:	9403      	str	r4, [sp, #12]
 8013144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013146:	f042 0204 	orr.w	r2, r2, #4
 801314a:	631a      	str	r2, [r3, #48]	; 0x30
 801314c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801314e:	f002 0204 	and.w	r2, r2, #4
 8013152:	9203      	str	r2, [sp, #12]
 8013154:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013156:	9404      	str	r4, [sp, #16]
 8013158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801315a:	f042 0201 	orr.w	r2, r2, #1
 801315e:	631a      	str	r2, [r3, #48]	; 0x30
 8013160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013162:	f002 0201 	and.w	r2, r2, #1
 8013166:	9204      	str	r2, [sp, #16]
 8013168:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801316a:	9405      	str	r4, [sp, #20]
 801316c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801316e:	f042 0202 	orr.w	r2, r2, #2
 8013172:	631a      	str	r2, [r3, #48]	; 0x30
 8013174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013176:	f002 0202 	and.w	r2, r2, #2
 801317a:	9205      	str	r2, [sp, #20]
 801317c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801317e:	9406      	str	r4, [sp, #24]
 8013180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013182:	f042 0208 	orr.w	r2, r2, #8
 8013186:	631a      	str	r2, [r3, #48]	; 0x30
 8013188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801318a:	f003 0308 	and.w	r3, r3, #8
 801318e:	9306      	str	r3, [sp, #24]
 8013190:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin|BAROCS_Pin, GPIO_PIN_RESET);
 8013192:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80132a8 <MX_GPIO_Init+0x198>
 8013196:	4622      	mov	r2, r4
 8013198:	210e      	movs	r1, #14
 801319a:	4640      	mov	r0, r8
 801319c:	f7f9 feb6 	bl	800cf0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80131a0:	4f3e      	ldr	r7, [pc, #248]	; (801329c <MX_GPIO_Init+0x18c>)
 80131a2:	4622      	mov	r2, r4
 80131a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80131a8:	4638      	mov	r0, r7
 80131aa:	f7f9 feaf 	bl	800cf0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 80131ae:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 80132ac <MX_GPIO_Init+0x19c>
 80131b2:	4622      	mov	r2, r4
 80131b4:	2140      	movs	r1, #64	; 0x40
 80131b6:	4650      	mov	r0, sl
 80131b8:	f7f9 fea8 	bl	800cf0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80131bc:	230c      	movs	r3, #12
 80131be:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80131c0:	2311      	movs	r3, #17
 80131c2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131c4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80131c6:	2501      	movs	r5, #1
 80131c8:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80131ca:	a907      	add	r1, sp, #28
 80131cc:	4640      	mov	r0, r8
 80131ce:	f7f9 fda7 	bl	800cd20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80131d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131d6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80131d8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131da:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131dc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131de:	a907      	add	r1, sp, #28
 80131e0:	4638      	mov	r0, r7
 80131e2:	f7f9 fd9d 	bl	800cd20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHANNEL5_Pin;
 80131e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80131ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80131ec:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80132b0 <MX_GPIO_Init+0x1a0>
 80131f0:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131f4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(CHANNEL5_GPIO_Port, &GPIO_InitStruct);
 80131f6:	a907      	add	r1, sp, #28
 80131f8:	4829      	ldr	r0, [pc, #164]	; (80132a0 <MX_GPIO_Init+0x190>)
 80131fa:	f7f9 fd91 	bl	800cd20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHANNEL6_Pin;
 80131fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013202:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013204:	2602      	movs	r6, #2
 8013206:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013208:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801320a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF15_EVENTOUT;
 801320c:	230f      	movs	r3, #15
 801320e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CHANNEL6_GPIO_Port, &GPIO_InitStruct);
 8013210:	a907      	add	r1, sp, #28
 8013212:	4638      	mov	r0, r7
 8013214:	f7f9 fd84 	bl	800cd20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHANNEL1_Pin|CHANNEL2_Pin;
 8013218:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801321c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801321e:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013222:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013224:	a907      	add	r1, sp, #28
 8013226:	4638      	mov	r0, r7
 8013228:	f7f9 fd7a 	bl	800cd20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CHANNEL3_Pin|CHANNEL4_Pin;
 801322c:	2303      	movs	r3, #3
 801322e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8013230:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013234:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013236:	a907      	add	r1, sp, #28
 8013238:	481a      	ldr	r0, [pc, #104]	; (80132a4 <MX_GPIO_Init+0x194>)
 801323a:	f7f9 fd71 	bl	800cd20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 801323e:	2340      	movs	r3, #64	; 0x40
 8013240:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013242:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013244:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8013246:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8013248:	a907      	add	r1, sp, #28
 801324a:	4650      	mov	r0, sl
 801324c:	f7f9 fd68 	bl	800cd20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAROCS_Pin;
 8013250:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013252:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013254:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013256:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(BAROCS_GPIO_Port, &GPIO_InitStruct);
 8013258:	a907      	add	r1, sp, #28
 801325a:	4640      	mov	r0, r8
 801325c:	f7f9 fd60 	bl	800cd20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 1);
 8013260:	462a      	mov	r2, r5
 8013262:	4629      	mov	r1, r5
 8013264:	2006      	movs	r0, #6
 8013266:	f7fa f9bd 	bl	800d5e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 801326a:	2006      	movs	r0, #6
 801326c:	f7fa f9ea 	bl	800d644 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8013270:	462a      	mov	r2, r5
 8013272:	4629      	mov	r1, r5
 8013274:	2007      	movs	r0, #7
 8013276:	f7fa f9b5 	bl	800d5e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 801327a:	2007      	movs	r0, #7
 801327c:	f7fa f9e2 	bl	800d644 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8013280:	4622      	mov	r2, r4
 8013282:	4629      	mov	r1, r5
 8013284:	2028      	movs	r0, #40	; 0x28
 8013286:	f7fa f9ad 	bl	800d5e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801328a:	2028      	movs	r0, #40	; 0x28
 801328c:	f7fa f9da 	bl	800d644 <HAL_NVIC_EnableIRQ>

}
 8013290:	b00c      	add	sp, #48	; 0x30
 8013292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013296:	bf00      	nop
 8013298:	40023800 	.word	0x40023800
 801329c:	40020800 	.word	0x40020800
 80132a0:	40020000 	.word	0x40020000
 80132a4:	40020c00 	.word	0x40020c00
 80132a8:	40021000 	.word	0x40021000
 80132ac:	40020400 	.word	0x40020400
 80132b0:	10310000 	.word	0x10310000

080132b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80132b4:	b500      	push	{lr}
 80132b6:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80132b8:	2300      	movs	r3, #0
 80132ba:	9301      	str	r3, [sp, #4]
 80132bc:	4b0e      	ldr	r3, [pc, #56]	; (80132f8 <MX_DMA_Init+0x44>)
 80132be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132c0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80132c4:	631a      	str	r2, [r3, #48]	; 0x30
 80132c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132cc:	9301      	str	r3, [sp, #4]
 80132ce:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 1);
 80132d0:	2201      	movs	r2, #1
 80132d2:	2102      	movs	r1, #2
 80132d4:	203a      	movs	r0, #58	; 0x3a
 80132d6:	f7fa f985 	bl	800d5e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80132da:	203a      	movs	r0, #58	; 0x3a
 80132dc:	f7fa f9b2 	bl	800d644 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 1);
 80132e0:	2201      	movs	r2, #1
 80132e2:	2102      	movs	r1, #2
 80132e4:	2046      	movs	r0, #70	; 0x46
 80132e6:	f7fa f97d 	bl	800d5e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80132ea:	2046      	movs	r0, #70	; 0x46
 80132ec:	f7fa f9aa 	bl	800d644 <HAL_NVIC_EnableIRQ>

}
 80132f0:	b003      	add	sp, #12
 80132f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80132f6:	bf00      	nop
 80132f8:	40023800 	.word	0x40023800

080132fc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80132fc:	b570      	push	{r4, r5, r6, lr}
 80132fe:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8013300:	4c0d      	ldr	r4, [pc, #52]	; (8013338 <MX_ADC1_Init+0x3c>)
 8013302:	4b0e      	ldr	r3, [pc, #56]	; (801333c <MX_ADC1_Init+0x40>)
 8013304:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8013306:	2500      	movs	r5, #0
 8013308:	6065      	str	r5, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801330a:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 801330c:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801330e:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8013310:	6225      	str	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8013312:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8013314:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8013316:	2601      	movs	r6, #1
 8013318:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801331a:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801331c:	6166      	str	r6, [r4, #20]
  HAL_ADC_Init(&hadc1);
 801331e:	4620      	mov	r0, r4
 8013320:	f7fa fa66 	bl	800d7f0 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 8013324:	2304      	movs	r3, #4
 8013326:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8013328:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801332a:	9502      	str	r5, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 801332c:	4669      	mov	r1, sp
 801332e:	4620      	mov	r0, r4
 8013330:	f7fa fa88 	bl	800d844 <HAL_ADC_ConfigChannel>

}
 8013334:	b004      	add	sp, #16
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	20003f78 	.word	0x20003f78
 801333c:	40012000 	.word	0x40012000

08013340 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8013340:	b570      	push	{r4, r5, r6, lr}
 8013342:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8013344:	4c0d      	ldr	r4, [pc, #52]	; (801337c <MX_ADC2_Init+0x3c>)
 8013346:	4b0e      	ldr	r3, [pc, #56]	; (8013380 <MX_ADC2_Init+0x40>)
 8013348:	6023      	str	r3, [r4, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801334a:	2500      	movs	r5, #0
 801334c:	6065      	str	r5, [r4, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 801334e:	60a5      	str	r5, [r4, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8013350:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8013352:	61a5      	str	r5, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8013354:	6225      	str	r5, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8013356:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8013358:	60e5      	str	r5, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 801335a:	2601      	movs	r6, #1
 801335c:	61e6      	str	r6, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 801335e:	6325      	str	r5, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8013360:	6166      	str	r6, [r4, #20]
  HAL_ADC_Init(&hadc2);
 8013362:	4620      	mov	r0, r4
 8013364:	f7fa fa44 	bl	800d7f0 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8013368:	2305      	movs	r3, #5
 801336a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 801336c:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801336e:	9502      	str	r5, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8013370:	4669      	mov	r1, sp
 8013372:	4620      	mov	r0, r4
 8013374:	f7fa fa66 	bl	800d844 <HAL_ADC_ConfigChannel>

}
 8013378:	b004      	add	sp, #16
 801337a:	bd70      	pop	{r4, r5, r6, pc}
 801337c:	20003fc0 	.word	0x20003fc0
 8013380:	40012100 	.word	0x40012100

08013384 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
 8013388:	4c0d      	ldr	r4, [pc, #52]	; (80133c0 <MX_ADC3_Init+0x3c>)
 801338a:	4b0e      	ldr	r3, [pc, #56]	; (80133c4 <MX_ADC3_Init+0x40>)
 801338c:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801338e:	2500      	movs	r5, #0
 8013390:	6065      	str	r5, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8013392:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8013394:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8013396:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8013398:	6225      	str	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801339a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801339c:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
 801339e:	2601      	movs	r6, #1
 80133a0:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80133a2:	6325      	str	r5, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80133a4:	6166      	str	r6, [r4, #20]
  HAL_ADC_Init(&hadc3);
 80133a6:	4620      	mov	r0, r4
 80133a8:	f7fa fa22 	bl	800d7f0 <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
 80133ac:	230a      	movs	r3, #10
 80133ae:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80133b0:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80133b2:	9502      	str	r5, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80133b4:	4669      	mov	r1, sp
 80133b6:	4620      	mov	r0, r4
 80133b8:	f7fa fa44 	bl	800d844 <HAL_ADC_ConfigChannel>

}
 80133bc:	b004      	add	sp, #16
 80133be:	bd70      	pop	{r4, r5, r6, pc}
 80133c0:	20004008 	.word	0x20004008
 80133c4:	40012200 	.word	0x40012200

080133c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80133c8:	b500      	push	{lr}
 80133ca:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80133cc:	6803      	ldr	r3, [r0, #0]
 80133ce:	4a26      	ldr	r2, [pc, #152]	; (8013468 <HAL_ADC_MspInit+0xa0>)
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d115      	bne.n	8013400 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80133d4:	2100      	movs	r1, #0
 80133d6:	9100      	str	r1, [sp, #0]
 80133d8:	4b24      	ldr	r3, [pc, #144]	; (801346c <HAL_ADC_MspInit+0xa4>)
 80133da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80133dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80133e0:	645a      	str	r2, [r3, #68]	; 0x44
 80133e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133e8:	9300      	str	r3, [sp, #0]
 80133ea:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80133ec:	2318      	movs	r3, #24
 80133ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80133f0:	2303      	movs	r3, #3
 80133f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133f4:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80133f6:	a903      	add	r1, sp, #12
 80133f8:	481d      	ldr	r0, [pc, #116]	; (8013470 <HAL_ADC_MspInit+0xa8>)
 80133fa:	f7f9 fc91 	bl	800cd20 <HAL_GPIO_Init>
 80133fe:	e030      	b.n	8013462 <HAL_ADC_MspInit+0x9a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8013400:	4a1c      	ldr	r2, [pc, #112]	; (8013474 <HAL_ADC_MspInit+0xac>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d115      	bne.n	8013432 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8013406:	2100      	movs	r1, #0
 8013408:	9101      	str	r1, [sp, #4]
 801340a:	4b18      	ldr	r3, [pc, #96]	; (801346c <HAL_ADC_MspInit+0xa4>)
 801340c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013412:	645a      	str	r2, [r3, #68]	; 0x44
 8013414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801341a:	9301      	str	r3, [sp, #4]
 801341c:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC2 GPIO Configuration    
    PA5     ------> ADC2_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801341e:	2320      	movs	r3, #32
 8013420:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013422:	2303      	movs	r3, #3
 8013424:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013426:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013428:	a903      	add	r1, sp, #12
 801342a:	4811      	ldr	r0, [pc, #68]	; (8013470 <HAL_ADC_MspInit+0xa8>)
 801342c:	f7f9 fc78 	bl	800cd20 <HAL_GPIO_Init>
 8013430:	e017      	b.n	8013462 <HAL_ADC_MspInit+0x9a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8013432:	4a11      	ldr	r2, [pc, #68]	; (8013478 <HAL_ADC_MspInit+0xb0>)
 8013434:	4293      	cmp	r3, r2
 8013436:	d114      	bne.n	8013462 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8013438:	2100      	movs	r1, #0
 801343a:	9102      	str	r1, [sp, #8]
 801343c:	4b0b      	ldr	r3, [pc, #44]	; (801346c <HAL_ADC_MspInit+0xa4>)
 801343e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013444:	645a      	str	r2, [r3, #68]	; 0x44
 8013446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801344c:	9302      	str	r3, [sp, #8]
 801344e:	9b02      	ldr	r3, [sp, #8]
  
    /**ADC3 GPIO Configuration    
    PC0     ------> ADC3_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8013450:	2301      	movs	r3, #1
 8013452:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013454:	2303      	movs	r3, #3
 8013456:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013458:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801345a:	a903      	add	r1, sp, #12
 801345c:	4807      	ldr	r0, [pc, #28]	; (801347c <HAL_ADC_MspInit+0xb4>)
 801345e:	f7f9 fc5f 	bl	800cd20 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8013462:	b009      	add	sp, #36	; 0x24
 8013464:	f85d fb04 	ldr.w	pc, [sp], #4
 8013468:	40012000 	.word	0x40012000
 801346c:	40023800 	.word	0x40023800
 8013470:	40020000 	.word	0x40020000
 8013474:	40012100 	.word	0x40012100
 8013478:	40012200 	.word	0x40012200
 801347c:	40020800 	.word	0x40020800

08013480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8013480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80134b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013486:	e003      	b.n	8013490 <LoopCopyDataInit>

08013488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013488:	4b0c      	ldr	r3, [pc, #48]	; (80134bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801348a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801348c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801348e:	3104      	adds	r1, #4

08013490 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013490:	480b      	ldr	r0, [pc, #44]	; (80134c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013492:	4b0c      	ldr	r3, [pc, #48]	; (80134c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013498:	d3f6      	bcc.n	8013488 <CopyDataInit>
  ldr  r2, =_sbss
 801349a:	4a0b      	ldr	r2, [pc, #44]	; (80134c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801349c:	e002      	b.n	80134a4 <LoopFillZerobss>

0801349e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801349e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80134a0:	f842 3b04 	str.w	r3, [r2], #4

080134a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80134a4:	4b09      	ldr	r3, [pc, #36]	; (80134cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80134a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80134a8:	d3f9      	bcc.n	801349e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80134aa:	f7fa fae5 	bl	800da78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80134ae:	f003 fa23 	bl	80168f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80134b2:	f7fe fc29 	bl	8011d08 <main>
  bx  lr    
 80134b6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80134b8:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80134bc:	0801da0c 	.word	0x0801da0c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80134c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80134c4:	20000558 	.word	0x20000558
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80134c8:	20000558 	.word	0x20000558
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80134cc:	20004268 	.word	0x20004268

080134d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80134d0:	e7fe      	b.n	80134d0 <ADC_IRQHandler>
	...

080134d4 <_ZNK7Vector3IfErmERKS0_>:
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b08c      	sub	sp, #48	; 0x30
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6178      	str	r0, [r7, #20]
 80134dc:	6139      	str	r1, [r7, #16]
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80134ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80134fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134fe:	ee37 6a67 	vsub.f32	s12, s14, s15
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	ed93 7a02 	vldr	s14, [r3, #8]
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	edd3 7a00 	vldr	s15, [r3]
 801350e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	edd3 6a00 	vldr	s13, [r3]
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	edd3 7a02 	vldr	s15, [r3, #8]
 801351e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013522:	ee77 5a67 	vsub.f32	s11, s14, s15
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	ed93 7a00 	vldr	s14, [r3]
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013532:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	edd3 6a01 	vldr	s13, [r3, #4]
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	edd3 7a00 	vldr	s15, [r3]
 8013542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013546:	ee77 7a67 	vsub.f32	s15, s14, s15
 801354a:	f107 0318 	add.w	r3, r7, #24
 801354e:	eeb0 1a67 	vmov.f32	s2, s15
 8013552:	eef0 0a65 	vmov.f32	s1, s11
 8013556:	eeb0 0a46 	vmov.f32	s0, s12
 801355a:	4618      	mov	r0, r3
 801355c:	f000 f9ce 	bl	80138fc <_ZN7Vector3IfEC1Efff>
 8013560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013564:	f107 0218 	add.w	r2, r7, #24
 8013568:	ca07      	ldmia	r2, {r0, r1, r2}
 801356a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801356e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013574:	ee06 1a90 	vmov	s13, r1
 8013578:	ee07 2a10 	vmov	s14, r2
 801357c:	ee07 3a90 	vmov	s15, r3
 8013580:	eeb0 0a66 	vmov.f32	s0, s13
 8013584:	eef0 0a47 	vmov.f32	s1, s14
 8013588:	eeb0 1a67 	vmov.f32	s2, s15
 801358c:	3730      	adds	r7, #48	; 0x30
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop

08013594 <_ZNK7Vector3IfEmlERKS0_>:
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	ed93 7a00 	vldr	s14, [r3]
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	edd3 7a00 	vldr	s15, [r3]
 80135aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80135ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80135ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80135d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135d6:	eeb0 0a67 	vmov.f32	s0, s15
 80135da:	370c      	adds	r7, #12
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <_ZN7Vector3IfEdVEf>:
 80135e4:	b480      	push	{r7}
 80135e6:	b083      	sub	sp, #12
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	ed87 0a00 	vstr	s0, [r7]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	edd3 6a00 	vldr	s13, [r3]
 80135f6:	ed97 7a00 	vldr	s14, [r7]
 80135fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	edc3 7a00 	vstr	s15, [r3]
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	edd3 6a01 	vldr	s13, [r3, #4]
 801360a:	ed97 7a00 	vldr	s14, [r7]
 801360e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	edc3 7a01 	vstr	s15, [r3, #4]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	edd3 6a02 	vldr	s13, [r3, #8]
 801361e:	ed97 7a00 	vldr	s14, [r7]
 8013622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	edc3 7a02 	vstr	s15, [r3, #8]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	4618      	mov	r0, r3
 8013630:	370c      	adds	r7, #12
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr
 801363a:	bf00      	nop

0801363c <_ZN7Vector3IfEmIERKS0_>:
 801363c:	b480      	push	{r7}
 801363e:	b083      	sub	sp, #12
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	ed93 7a00 	vldr	s14, [r3]
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	edd3 7a00 	vldr	s15, [r3]
 8013652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	edc3 7a00 	vstr	s15, [r3]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	ed93 7a01 	vldr	s14, [r3, #4]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	edd3 7a01 	vldr	s15, [r3, #4]
 8013668:	ee77 7a67 	vsub.f32	s15, s14, s15
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	edc3 7a01 	vstr	s15, [r3, #4]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	ed93 7a02 	vldr	s14, [r3, #8]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	edd3 7a02 	vldr	s15, [r3, #8]
 801367e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	edc3 7a02 	vstr	s15, [r3, #8]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	4618      	mov	r0, r3
 801368c:	370c      	adds	r7, #12
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop

08013698 <_ZN7Vector3IfEpLERKS0_>:
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	ed93 7a00 	vldr	s14, [r3]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	edd3 7a00 	vldr	s15, [r3]
 80136ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	edc3 7a00 	vstr	s15, [r3]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80136c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	edc3 7a01 	vstr	s15, [r3, #4]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80136da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	edc3 7a02 	vstr	s15, [r3, #8]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	4618      	mov	r0, r3
 80136e8:	370c      	adds	r7, #12
 80136ea:	46bd      	mov	sp, r7
 80136ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f0:	4770      	bx	lr
 80136f2:	bf00      	nop

080136f4 <_ZNK7Vector3IfEdvEf>:
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b08c      	sub	sp, #48	; 0x30
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6178      	str	r0, [r7, #20]
 80136fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	ed93 7a00 	vldr	s14, [r3]
 8013706:	edd7 7a04 	vldr	s15, [r7, #16]
 801370a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	ed93 7a01 	vldr	s14, [r3, #4]
 8013714:	edd7 7a04 	vldr	s15, [r7, #16]
 8013718:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	ed93 7a02 	vldr	s14, [r3, #8]
 8013722:	edd7 7a04 	vldr	s15, [r7, #16]
 8013726:	eec7 5a27 	vdiv.f32	s11, s14, s15
 801372a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801372e:	eeb0 1a65 	vmov.f32	s2, s11
 8013732:	eef0 0a46 	vmov.f32	s1, s12
 8013736:	eeb0 0a66 	vmov.f32	s0, s13
 801373a:	4618      	mov	r0, r3
 801373c:	f000 f8de 	bl	80138fc <_ZN7Vector3IfEC1Efff>
 8013740:	f107 0318 	add.w	r3, r7, #24
 8013744:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013748:	ca07      	ldmia	r2, {r0, r1, r2}
 801374a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801374e:	69b9      	ldr	r1, [r7, #24]
 8013750:	69fa      	ldr	r2, [r7, #28]
 8013752:	6a3b      	ldr	r3, [r7, #32]
 8013754:	ee06 1a90 	vmov	s13, r1
 8013758:	ee07 2a10 	vmov	s14, r2
 801375c:	ee07 3a90 	vmov	s15, r3
 8013760:	eeb0 0a66 	vmov.f32	s0, s13
 8013764:	eef0 0a47 	vmov.f32	s1, s14
 8013768:	eeb0 1a67 	vmov.f32	s2, s15
 801376c:	3730      	adds	r7, #48	; 0x30
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop

08013774 <_ZNK7Vector3IfEmlEf>:
 8013774:	b580      	push	{r7, lr}
 8013776:	b08c      	sub	sp, #48	; 0x30
 8013778:	af00      	add	r7, sp, #0
 801377a:	6178      	str	r0, [r7, #20]
 801377c:	ed87 0a04 	vstr	s0, [r7, #16]
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	ed93 7a00 	vldr	s14, [r3]
 8013786:	edd7 7a04 	vldr	s15, [r7, #16]
 801378a:	ee67 6a27 	vmul.f32	s13, s14, s15
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	ed93 7a01 	vldr	s14, [r3, #4]
 8013794:	edd7 7a04 	vldr	s15, [r7, #16]
 8013798:	ee27 6a27 	vmul.f32	s12, s14, s15
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	ed93 7a02 	vldr	s14, [r3, #8]
 80137a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80137a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137ae:	eeb0 1a67 	vmov.f32	s2, s15
 80137b2:	eef0 0a46 	vmov.f32	s1, s12
 80137b6:	eeb0 0a66 	vmov.f32	s0, s13
 80137ba:	4618      	mov	r0, r3
 80137bc:	f000 f89e 	bl	80138fc <_ZN7Vector3IfEC1Efff>
 80137c0:	f107 0318 	add.w	r3, r7, #24
 80137c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80137c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80137ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80137ce:	69b9      	ldr	r1, [r7, #24]
 80137d0:	69fa      	ldr	r2, [r7, #28]
 80137d2:	6a3b      	ldr	r3, [r7, #32]
 80137d4:	ee06 1a90 	vmov	s13, r1
 80137d8:	ee07 2a10 	vmov	s14, r2
 80137dc:	ee07 3a90 	vmov	s15, r3
 80137e0:	eeb0 0a66 	vmov.f32	s0, s13
 80137e4:	eef0 0a47 	vmov.f32	s1, s14
 80137e8:	eeb0 1a67 	vmov.f32	s2, s15
 80137ec:	3730      	adds	r7, #48	; 0x30
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop

080137f4 <_ZNK7Vector3IfEplERKS0_>:
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b08c      	sub	sp, #48	; 0x30
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6178      	str	r0, [r7, #20]
 80137fc:	6139      	str	r1, [r7, #16]
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	ed93 7a00 	vldr	s14, [r3]
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	edd3 7a00 	vldr	s15, [r3]
 801380a:	ee77 6a27 	vadd.f32	s13, s14, s15
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	ed93 7a01 	vldr	s14, [r3, #4]
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	edd3 7a01 	vldr	s15, [r3, #4]
 801381a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	ed93 7a02 	vldr	s14, [r3, #8]
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	edd3 7a02 	vldr	s15, [r3, #8]
 801382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801382e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013832:	eeb0 1a67 	vmov.f32	s2, s15
 8013836:	eef0 0a46 	vmov.f32	s1, s12
 801383a:	eeb0 0a66 	vmov.f32	s0, s13
 801383e:	4618      	mov	r0, r3
 8013840:	f000 f85c 	bl	80138fc <_ZN7Vector3IfEC1Efff>
 8013844:	f107 0318 	add.w	r3, r7, #24
 8013848:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801384c:	ca07      	ldmia	r2, {r0, r1, r2}
 801384e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013852:	69b9      	ldr	r1, [r7, #24]
 8013854:	69fa      	ldr	r2, [r7, #28]
 8013856:	6a3b      	ldr	r3, [r7, #32]
 8013858:	ee06 1a90 	vmov	s13, r1
 801385c:	ee07 2a10 	vmov	s14, r2
 8013860:	ee07 3a90 	vmov	s15, r3
 8013864:	eeb0 0a66 	vmov.f32	s0, s13
 8013868:	eef0 0a47 	vmov.f32	s1, s14
 801386c:	eeb0 1a67 	vmov.f32	s2, s15
 8013870:	3730      	adds	r7, #48	; 0x30
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop

08013878 <_ZNK7Vector3IfEmiERKS0_>:
 8013878:	b580      	push	{r7, lr}
 801387a:	b08c      	sub	sp, #48	; 0x30
 801387c:	af00      	add	r7, sp, #0
 801387e:	6178      	str	r0, [r7, #20]
 8013880:	6139      	str	r1, [r7, #16]
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	ed93 7a00 	vldr	s14, [r3]
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	edd3 7a00 	vldr	s15, [r3]
 801388e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	ed93 7a01 	vldr	s14, [r3, #4]
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	edd3 7a01 	vldr	s15, [r3, #4]
 801389e:	ee37 6a67 	vsub.f32	s12, s14, s15
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80138ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138b6:	eeb0 1a67 	vmov.f32	s2, s15
 80138ba:	eef0 0a46 	vmov.f32	s1, s12
 80138be:	eeb0 0a66 	vmov.f32	s0, s13
 80138c2:	4618      	mov	r0, r3
 80138c4:	f000 f81a 	bl	80138fc <_ZN7Vector3IfEC1Efff>
 80138c8:	f107 0318 	add.w	r3, r7, #24
 80138cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80138d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80138d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80138d6:	69b9      	ldr	r1, [r7, #24]
 80138d8:	69fa      	ldr	r2, [r7, #28]
 80138da:	6a3b      	ldr	r3, [r7, #32]
 80138dc:	ee06 1a90 	vmov	s13, r1
 80138e0:	ee07 2a10 	vmov	s14, r2
 80138e4:	ee07 3a90 	vmov	s15, r3
 80138e8:	eeb0 0a66 	vmov.f32	s0, s13
 80138ec:	eef0 0a47 	vmov.f32	s1, s14
 80138f0:	eeb0 1a67 	vmov.f32	s2, s15
 80138f4:	3730      	adds	r7, #48	; 0x30
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
 80138fa:	bf00      	nop

080138fc <_ZN7Vector3IfEC1Efff>:
 80138fc:	b480      	push	{r7}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	60f8      	str	r0, [r7, #12]
 8013904:	ed87 0a02 	vstr	s0, [r7, #8]
 8013908:	edc7 0a01 	vstr	s1, [r7, #4]
 801390c:	ed87 1a00 	vstr	s2, [r7]
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	68ba      	ldr	r2, [r7, #8]
 8013914:	601a      	str	r2, [r3, #0]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	605a      	str	r2, [r3, #4]
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	683a      	ldr	r2, [r7, #0]
 8013920:	609a      	str	r2, [r3, #8]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	4618      	mov	r0, r3
 8013926:	3714      	adds	r7, #20
 8013928:	46bd      	mov	sp, r7
 801392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392e:	4770      	bx	lr

08013930 <_ZN7Matrix3IfE10from_eulerEfff>:
 8013930:	b580      	push	{r7, lr}
 8013932:	b08a      	sub	sp, #40	; 0x28
 8013934:	af00      	add	r7, sp, #0
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	ed87 0a02 	vstr	s0, [r7, #8]
 801393c:	edc7 0a01 	vstr	s1, [r7, #4]
 8013940:	ed87 1a00 	vstr	s2, [r7]
 8013944:	ed97 0a01 	vldr	s0, [r7, #4]
 8013948:	f001 febe 	bl	80156c8 <cosf>
 801394c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8013950:	ed97 0a01 	vldr	s0, [r7, #4]
 8013954:	f001 fef8 	bl	8015748 <sinf>
 8013958:	ed87 0a08 	vstr	s0, [r7, #32]
 801395c:	ed97 0a02 	vldr	s0, [r7, #8]
 8013960:	f001 fef2 	bl	8015748 <sinf>
 8013964:	ed87 0a07 	vstr	s0, [r7, #28]
 8013968:	ed97 0a02 	vldr	s0, [r7, #8]
 801396c:	f001 feac 	bl	80156c8 <cosf>
 8013970:	ed87 0a06 	vstr	s0, [r7, #24]
 8013974:	ed97 0a00 	vldr	s0, [r7]
 8013978:	f001 fee6 	bl	8015748 <sinf>
 801397c:	ed87 0a05 	vstr	s0, [r7, #20]
 8013980:	ed97 0a00 	vldr	s0, [r7]
 8013984:	f001 fea0 	bl	80156c8 <cosf>
 8013988:	ed87 0a04 	vstr	s0, [r7, #16]
 801398c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013990:	edd7 7a04 	vldr	s15, [r7, #16]
 8013994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	edc3 7a00 	vstr	s15, [r3]
 801399e:	ed97 7a07 	vldr	s14, [r7, #28]
 80139a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80139a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80139ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80139b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80139ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80139be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	edc3 7a01 	vstr	s15, [r3, #4]
 80139c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80139cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80139d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80139d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80139e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80139e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80139e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	edc3 7a02 	vstr	s15, [r3, #8]
 80139f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80139f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80139fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	edc3 7a03 	vstr	s15, [r3, #12]
 8013a04:	ed97 7a07 	vldr	s14, [r7, #28]
 8013a08:	edd7 7a08 	vldr	s15, [r7, #32]
 8013a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a10:	edd7 7a05 	vldr	s15, [r7, #20]
 8013a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a18:	edd7 6a06 	vldr	s13, [r7, #24]
 8013a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	edc3 7a04 	vstr	s15, [r3, #16]
 8013a2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8013a32:	edd7 7a08 	vldr	s15, [r7, #32]
 8013a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8013a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8013a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	edc3 7a05 	vstr	s15, [r3, #20]
 8013a58:	edd7 7a08 	vldr	s15, [r7, #32]
 8013a5c:	eef1 7a67 	vneg.f32	s15, s15
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	edc3 7a06 	vstr	s15, [r3, #24]
 8013a66:	ed97 7a07 	vldr	s14, [r7, #28]
 8013a6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	edc3 7a07 	vstr	s15, [r3, #28]
 8013a78:	ed97 7a06 	vldr	s14, [r7, #24]
 8013a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	edc3 7a08 	vstr	s15, [r3, #32]
 8013a8a:	bf00      	nop
 8013a8c:	3728      	adds	r7, #40	; 0x28
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop

08013a94 <_ZNK7Matrix3IfEmlERK7Vector3IfE>:
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b08c      	sub	sp, #48	; 0x30
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6178      	str	r0, [r7, #20]
 8013a9c:	6139      	str	r1, [r7, #16]
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	ed93 7a00 	vldr	s14, [r3]
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	edd3 7a00 	vldr	s15, [r3]
 8013aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	edd3 6a01 	vldr	s13, [r3, #4]
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	edd3 7a01 	vldr	s15, [r3, #4]
 8013aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	edd3 6a02 	vldr	s13, [r3, #8]
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	edd3 7a02 	vldr	s15, [r3, #8]
 8013ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013ad2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	ed93 7a03 	vldr	s14, [r3, #12]
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	edd3 7a00 	vldr	s15, [r3]
 8013ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	edd3 6a04 	vldr	s13, [r3, #16]
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	edd3 7a01 	vldr	s15, [r3, #4]
 8013af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	edd3 6a05 	vldr	s13, [r3, #20]
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013b0a:	ee77 5a27 	vadd.f32	s11, s14, s15
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	ed93 7a06 	vldr	s14, [r3, #24]
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	edd3 7a00 	vldr	s15, [r3]
 8013b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	edd3 6a07 	vldr	s13, [r3, #28]
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	edd3 7a01 	vldr	s15, [r3, #4]
 8013b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	edd3 6a08 	vldr	s13, [r3, #32]
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b4a:	eeb0 1a67 	vmov.f32	s2, s15
 8013b4e:	eef0 0a65 	vmov.f32	s1, s11
 8013b52:	eeb0 0a46 	vmov.f32	s0, s12
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7ff fed0 	bl	80138fc <_ZN7Vector3IfEC1Efff>
 8013b5c:	f107 0318 	add.w	r3, r7, #24
 8013b60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8013b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013b6a:	69b9      	ldr	r1, [r7, #24]
 8013b6c:	69fa      	ldr	r2, [r7, #28]
 8013b6e:	6a3b      	ldr	r3, [r7, #32]
 8013b70:	ee06 1a90 	vmov	s13, r1
 8013b74:	ee07 2a10 	vmov	s14, r2
 8013b78:	ee07 3a90 	vmov	s15, r3
 8013b7c:	eeb0 0a66 	vmov.f32	s0, s13
 8013b80:	eef0 0a47 	vmov.f32	s1, s14
 8013b84:	eeb0 1a67 	vmov.f32	s2, s15
 8013b88:	3730      	adds	r7, #48	; 0x30
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop

08013b90 <_Z8inv_sqrtf>:
 8013b90:	b480      	push	{r7}
 8013b92:	b087      	sub	sp, #28
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8013b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8013b9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ba6:	edc7 7a05 	vstr	s15, [r7, #20]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	613b      	str	r3, [r7, #16]
 8013bae:	f107 0310 	add.w	r3, r7, #16
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	60fb      	str	r3, [r7, #12]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	105a      	asrs	r2, r3, #1
 8013bba:	4b12      	ldr	r3, [pc, #72]	; (8013c04 <_Z8inv_sqrtf+0x74>)
 8013bbc:	1a9b      	subs	r3, r3, r2
 8013bbe:	60fb      	str	r3, [r7, #12]
 8013bc0:	f107 030c 	add.w	r3, r7, #12
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	613b      	str	r3, [r7, #16]
 8013bc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8013bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8013bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8013bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bdc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013be0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013be4:	edd7 7a04 	vldr	s15, [r7, #16]
 8013be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bec:	edc7 7a04 	vstr	s15, [r7, #16]
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	ee07 3a90 	vmov	s15, r3
 8013bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8013bfa:	371c      	adds	r7, #28
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr
 8013c04:	5f3759df 	.word	0x5f3759df

08013c08 <__cxa_end_cleanup>:
 8013c08:	b41e      	push	{r1, r2, r3, r4}
 8013c0a:	f000 f88d 	bl	8013d28 <__gnu_end_cleanup>
 8013c0e:	bc1e      	pop	{r1, r2, r3, r4}
 8013c10:	f7f6 f87e 	bl	8009d10 <_Unwind_Resume>

08013c14 <__cxa_type_match>:
 8013c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c16:	7802      	ldrb	r2, [r0, #0]
 8013c18:	2a47      	cmp	r2, #71	; 0x47
 8013c1a:	b083      	sub	sp, #12
 8013c1c:	460e      	mov	r6, r1
 8013c1e:	461f      	mov	r7, r3
 8013c20:	d01a      	beq.n	8013c58 <__cxa_type_match+0x44>
 8013c22:	2300      	movs	r3, #0
 8013c24:	4c25      	ldr	r4, [pc, #148]	; (8013cbc <__cxa_type_match+0xa8>)
 8013c26:	9301      	str	r3, [sp, #4]
 8013c28:	6823      	ldr	r3, [r4, #0]
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	4798      	blx	r3
 8013c30:	b180      	cbz	r0, 8013c54 <__cxa_type_match+0x40>
 8013c32:	9b01      	ldr	r3, [sp, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	9301      	str	r3, [sp, #4]
 8013c38:	2502      	movs	r5, #2
 8013c3a:	6833      	ldr	r3, [r6, #0]
 8013c3c:	4621      	mov	r1, r4
 8013c3e:	4630      	mov	r0, r6
 8013c40:	691c      	ldr	r4, [r3, #16]
 8013c42:	aa01      	add	r2, sp, #4
 8013c44:	2301      	movs	r3, #1
 8013c46:	47a0      	blx	r4
 8013c48:	b110      	cbz	r0, 8013c50 <__cxa_type_match+0x3c>
 8013c4a:	9b01      	ldr	r3, [sp, #4]
 8013c4c:	603b      	str	r3, [r7, #0]
 8013c4e:	4628      	mov	r0, r5
 8013c50:	b003      	add	sp, #12
 8013c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c54:	2501      	movs	r5, #1
 8013c56:	e7f0      	b.n	8013c3a <__cxa_type_match+0x26>
 8013c58:	7843      	ldrb	r3, [r0, #1]
 8013c5a:	2b4e      	cmp	r3, #78	; 0x4e
 8013c5c:	d1e1      	bne.n	8013c22 <__cxa_type_match+0xe>
 8013c5e:	7883      	ldrb	r3, [r0, #2]
 8013c60:	2b55      	cmp	r3, #85	; 0x55
 8013c62:	d1de      	bne.n	8013c22 <__cxa_type_match+0xe>
 8013c64:	78c3      	ldrb	r3, [r0, #3]
 8013c66:	2b43      	cmp	r3, #67	; 0x43
 8013c68:	d019      	beq.n	8013c9e <__cxa_type_match+0x8a>
 8013c6a:	78c3      	ldrb	r3, [r0, #3]
 8013c6c:	2b43      	cmp	r3, #67	; 0x43
 8013c6e:	d1d8      	bne.n	8013c22 <__cxa_type_match+0xe>
 8013c70:	7903      	ldrb	r3, [r0, #4]
 8013c72:	2b43      	cmp	r3, #67	; 0x43
 8013c74:	d1d5      	bne.n	8013c22 <__cxa_type_match+0xe>
 8013c76:	7943      	ldrb	r3, [r0, #5]
 8013c78:	2b2b      	cmp	r3, #43	; 0x2b
 8013c7a:	d1d2      	bne.n	8013c22 <__cxa_type_match+0xe>
 8013c7c:	7983      	ldrb	r3, [r0, #6]
 8013c7e:	2b2b      	cmp	r3, #43	; 0x2b
 8013c80:	d1cf      	bne.n	8013c22 <__cxa_type_match+0xe>
 8013c82:	79c3      	ldrb	r3, [r0, #7]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d8cc      	bhi.n	8013c22 <__cxa_type_match+0xe>
 8013c88:	d004      	beq.n	8013c94 <__cxa_type_match+0x80>
 8013c8a:	f850 4c20 	ldr.w	r4, [r0, #-32]
 8013c8e:	3058      	adds	r0, #88	; 0x58
 8013c90:	9001      	str	r0, [sp, #4]
 8013c92:	e7c9      	b.n	8013c28 <__cxa_type_match+0x14>
 8013c94:	f850 0c20 	ldr.w	r0, [r0, #-32]
 8013c98:	f850 4c78 	ldr.w	r4, [r0, #-120]
 8013c9c:	e7f8      	b.n	8013c90 <__cxa_type_match+0x7c>
 8013c9e:	7903      	ldrb	r3, [r0, #4]
 8013ca0:	2b46      	cmp	r3, #70	; 0x46
 8013ca2:	d1e2      	bne.n	8013c6a <__cxa_type_match+0x56>
 8013ca4:	7943      	ldrb	r3, [r0, #5]
 8013ca6:	2b4f      	cmp	r3, #79	; 0x4f
 8013ca8:	d1df      	bne.n	8013c6a <__cxa_type_match+0x56>
 8013caa:	7983      	ldrb	r3, [r0, #6]
 8013cac:	2b52      	cmp	r3, #82	; 0x52
 8013cae:	d1dc      	bne.n	8013c6a <__cxa_type_match+0x56>
 8013cb0:	79c3      	ldrb	r3, [r0, #7]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d1d9      	bne.n	8013c6a <__cxa_type_match+0x56>
 8013cb6:	9301      	str	r3, [sp, #4]
 8013cb8:	4c01      	ldr	r4, [pc, #4]	; (8013cc0 <__cxa_type_match+0xac>)
 8013cba:	e7b5      	b.n	8013c28 <__cxa_type_match+0x14>
 8013cbc:	0801b5cc 	.word	0x0801b5cc
 8013cc0:	0801b574 	.word	0x0801b574

08013cc4 <__cxa_begin_cleanup>:
 8013cc4:	b510      	push	{r4, lr}
 8013cc6:	4604      	mov	r4, r0
 8013cc8:	f000 fc3e 	bl	8014548 <__cxa_get_globals>
 8013ccc:	7823      	ldrb	r3, [r4, #0]
 8013cce:	2b47      	cmp	r3, #71	; 0x47
 8013cd0:	f1a4 0220 	sub.w	r2, r4, #32
 8013cd4:	d004      	beq.n	8013ce0 <__cxa_begin_cleanup+0x1c>
 8013cd6:	6883      	ldr	r3, [r0, #8]
 8013cd8:	bb23      	cbnz	r3, 8013d24 <__cxa_begin_cleanup+0x60>
 8013cda:	6082      	str	r2, [r0, #8]
 8013cdc:	2001      	movs	r0, #1
 8013cde:	bd10      	pop	{r4, pc}
 8013ce0:	7863      	ldrb	r3, [r4, #1]
 8013ce2:	2b4e      	cmp	r3, #78	; 0x4e
 8013ce4:	d1f7      	bne.n	8013cd6 <__cxa_begin_cleanup+0x12>
 8013ce6:	78a3      	ldrb	r3, [r4, #2]
 8013ce8:	2b55      	cmp	r3, #85	; 0x55
 8013cea:	d1f4      	bne.n	8013cd6 <__cxa_begin_cleanup+0x12>
 8013cec:	78e3      	ldrb	r3, [r4, #3]
 8013cee:	2b43      	cmp	r3, #67	; 0x43
 8013cf0:	d1f1      	bne.n	8013cd6 <__cxa_begin_cleanup+0x12>
 8013cf2:	7923      	ldrb	r3, [r4, #4]
 8013cf4:	2b43      	cmp	r3, #67	; 0x43
 8013cf6:	d1ee      	bne.n	8013cd6 <__cxa_begin_cleanup+0x12>
 8013cf8:	7963      	ldrb	r3, [r4, #5]
 8013cfa:	2b2b      	cmp	r3, #43	; 0x2b
 8013cfc:	d1eb      	bne.n	8013cd6 <__cxa_begin_cleanup+0x12>
 8013cfe:	79a3      	ldrb	r3, [r4, #6]
 8013d00:	2b2b      	cmp	r3, #43	; 0x2b
 8013d02:	d1e8      	bne.n	8013cd6 <__cxa_begin_cleanup+0x12>
 8013d04:	79e3      	ldrb	r3, [r4, #7]
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d8e5      	bhi.n	8013cd6 <__cxa_begin_cleanup+0x12>
 8013d0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013d0e:	3301      	adds	r3, #1
 8013d10:	2b01      	cmp	r3, #1
 8013d12:	f844 3c04 	str.w	r3, [r4, #-4]
 8013d16:	d1e1      	bne.n	8013cdc <__cxa_begin_cleanup+0x18>
 8013d18:	6883      	ldr	r3, [r0, #8]
 8013d1a:	f844 3c08 	str.w	r3, [r4, #-8]
 8013d1e:	6082      	str	r2, [r0, #8]
 8013d20:	2001      	movs	r0, #1
 8013d22:	bd10      	pop	{r4, pc}
 8013d24:	f000 fcb4 	bl	8014690 <_ZSt9terminatev>

08013d28 <__gnu_end_cleanup>:
 8013d28:	b508      	push	{r3, lr}
 8013d2a:	f000 fc0d 	bl	8014548 <__cxa_get_globals>
 8013d2e:	6883      	ldr	r3, [r0, #8]
 8013d30:	b383      	cbz	r3, 8013d94 <__gnu_end_cleanup+0x6c>
 8013d32:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013d36:	2a47      	cmp	r2, #71	; 0x47
 8013d38:	d004      	beq.n	8013d44 <__gnu_end_cleanup+0x1c>
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	6082      	str	r2, [r0, #8]
 8013d3e:	f103 0020 	add.w	r0, r3, #32
 8013d42:	bd08      	pop	{r3, pc}
 8013d44:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8013d48:	2a4e      	cmp	r2, #78	; 0x4e
 8013d4a:	d1f6      	bne.n	8013d3a <__gnu_end_cleanup+0x12>
 8013d4c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013d50:	2a55      	cmp	r2, #85	; 0x55
 8013d52:	d1f2      	bne.n	8013d3a <__gnu_end_cleanup+0x12>
 8013d54:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013d58:	2a43      	cmp	r2, #67	; 0x43
 8013d5a:	d1ee      	bne.n	8013d3a <__gnu_end_cleanup+0x12>
 8013d5c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013d60:	2a43      	cmp	r2, #67	; 0x43
 8013d62:	d1ea      	bne.n	8013d3a <__gnu_end_cleanup+0x12>
 8013d64:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8013d68:	2a2b      	cmp	r2, #43	; 0x2b
 8013d6a:	d1e6      	bne.n	8013d3a <__gnu_end_cleanup+0x12>
 8013d6c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8013d70:	2a2b      	cmp	r2, #43	; 0x2b
 8013d72:	d1e2      	bne.n	8013d3a <__gnu_end_cleanup+0x12>
 8013d74:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8013d78:	2a01      	cmp	r2, #1
 8013d7a:	d8de      	bhi.n	8013d3a <__gnu_end_cleanup+0x12>
 8013d7c:	69da      	ldr	r2, [r3, #28]
 8013d7e:	3a01      	subs	r2, #1
 8013d80:	61da      	str	r2, [r3, #28]
 8013d82:	2a00      	cmp	r2, #0
 8013d84:	d1db      	bne.n	8013d3e <__gnu_end_cleanup+0x16>
 8013d86:	699a      	ldr	r2, [r3, #24]
 8013d88:	6082      	str	r2, [r0, #8]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	619a      	str	r2, [r3, #24]
 8013d8e:	f103 0020 	add.w	r0, r3, #32
 8013d92:	bd08      	pop	{r3, pc}
 8013d94:	f000 fc7c 	bl	8014690 <_ZSt9terminatev>

08013d98 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8013d98:	2850      	cmp	r0, #80	; 0x50
 8013d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9c:	d054      	beq.n	8013e48 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 8013d9e:	f000 040f 	and.w	r4, r0, #15
 8013da2:	2c0c      	cmp	r4, #12
 8013da4:	d84e      	bhi.n	8013e44 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 8013da6:	e8df f004 	tbb	[pc, r4]
 8013daa:	3907      	.short	0x3907
 8013dac:	4d170749 	.word	0x4d170749
 8013db0:	1f4d4d4d 	.word	0x1f4d4d4d
 8013db4:	071b      	.short	0x071b
 8013db6:	17          	.byte	0x17
 8013db7:	00          	.byte	0x00
 8013db8:	4615      	mov	r5, r2
 8013dba:	f855 4b04 	ldr.w	r4, [r5], #4
 8013dbe:	b144      	cbz	r4, 8013dd2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 8013dc0:	f000 0670 	and.w	r6, r0, #112	; 0x70
 8013dc4:	2e10      	cmp	r6, #16
 8013dc6:	bf18      	it	ne
 8013dc8:	460a      	movne	r2, r1
 8013dca:	4414      	add	r4, r2
 8013dcc:	0602      	lsls	r2, r0, #24
 8013dce:	bf48      	it	mi
 8013dd0:	6824      	ldrmi	r4, [r4, #0]
 8013dd2:	601c      	str	r4, [r3, #0]
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dd8:	4615      	mov	r5, r2
 8013dda:	f855 4b08 	ldr.w	r4, [r5], #8
 8013dde:	e7ee      	b.n	8013dbe <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013de0:	4615      	mov	r5, r2
 8013de2:	f935 4b02 	ldrsh.w	r4, [r5], #2
 8013de6:	e7ea      	b.n	8013dbe <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013de8:	2400      	movs	r4, #0
 8013dea:	4627      	mov	r7, r4
 8013dec:	4615      	mov	r5, r2
 8013dee:	f815 eb01 	ldrb.w	lr, [r5], #1
 8013df2:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8013df6:	40be      	lsls	r6, r7
 8013df8:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8013dfc:	ea44 0406 	orr.w	r4, r4, r6
 8013e00:	f107 0707 	add.w	r7, r7, #7
 8013e04:	d1f3      	bne.n	8013dee <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 8013e06:	2f1f      	cmp	r7, #31
 8013e08:	d8d9      	bhi.n	8013dbe <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013e0a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8013e0e:	d0d6      	beq.n	8013dbe <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013e10:	f04f 36ff 	mov.w	r6, #4294967295
 8013e14:	fa06 f707 	lsl.w	r7, r6, r7
 8013e18:	433c      	orrs	r4, r7
 8013e1a:	e7d1      	b.n	8013dc0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 8013e1c:	2400      	movs	r4, #0
 8013e1e:	4627      	mov	r7, r4
 8013e20:	4615      	mov	r5, r2
 8013e22:	f815 eb01 	ldrb.w	lr, [r5], #1
 8013e26:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 8013e2a:	40be      	lsls	r6, r7
 8013e2c:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8013e30:	ea44 0406 	orr.w	r4, r4, r6
 8013e34:	f107 0707 	add.w	r7, r7, #7
 8013e38:	d1f3      	bne.n	8013e22 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 8013e3a:	e7c0      	b.n	8013dbe <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013e3c:	4615      	mov	r5, r2
 8013e3e:	f835 4b02 	ldrh.w	r4, [r5], #2
 8013e42:	e7bc      	b.n	8013dbe <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 8013e44:	f002 fb2e 	bl	80164a4 <abort>
 8013e48:	3203      	adds	r2, #3
 8013e4a:	f022 0503 	bic.w	r5, r2, #3
 8013e4e:	f855 4b04 	ldr.w	r4, [r5], #4
 8013e52:	601c      	str	r4, [r3, #0]
 8013e54:	4628      	mov	r0, r5
 8013e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8013e58:	28ff      	cmp	r0, #255	; 0xff
 8013e5a:	d015      	beq.n	8013e88 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8013e5c:	b508      	push	{r3, lr}
 8013e5e:	f000 0370 	and.w	r3, r0, #112	; 0x70
 8013e62:	2b20      	cmp	r3, #32
 8013e64:	d012      	beq.n	8013e8c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
 8013e66:	d90a      	bls.n	8013e7e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8013e68:	2b40      	cmp	r3, #64	; 0x40
 8013e6a:	d014      	beq.n	8013e96 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8013e6c:	2b50      	cmp	r3, #80	; 0x50
 8013e6e:	d017      	beq.n	8013ea0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8013e70:	2b30      	cmp	r3, #48	; 0x30
 8013e72:	d107      	bne.n	8013e84 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8013e74:	4608      	mov	r0, r1
 8013e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e7a:	f7f6 b937 	b.w	800a0ec <_Unwind_GetDataRelBase>
 8013e7e:	b17b      	cbz	r3, 8013ea0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8013e80:	2b10      	cmp	r3, #16
 8013e82:	d00d      	beq.n	8013ea0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8013e84:	f002 fb0e 	bl	80164a4 <abort>
 8013e88:	2000      	movs	r0, #0
 8013e8a:	4770      	bx	lr
 8013e8c:	4608      	mov	r0, r1
 8013e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e92:	f7f6 b927 	b.w	800a0e4 <_Unwind_GetTextRelBase>
 8013e96:	4608      	mov	r0, r1
 8013e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e9c:	f7f6 b912 	b.w	800a0c4 <_Unwind_GetRegionStart>
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	bd08      	pop	{r3, pc}

08013ea4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8013ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ea6:	460c      	mov	r4, r1
 8013ea8:	4615      	mov	r5, r2
 8013eaa:	4607      	mov	r7, r0
 8013eac:	2800      	cmp	r0, #0
 8013eae:	d044      	beq.n	8013f3a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
 8013eb0:	f7f6 f908 	bl	800a0c4 <_Unwind_GetRegionStart>
 8013eb4:	6028      	str	r0, [r5, #0]
 8013eb6:	7826      	ldrb	r6, [r4, #0]
 8013eb8:	2eff      	cmp	r6, #255	; 0xff
 8013eba:	f104 0401 	add.w	r4, r4, #1
 8013ebe:	d032      	beq.n	8013f26 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 8013ec0:	4639      	mov	r1, r7
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	f7ff ffc8 	bl	8013e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8013ec8:	4622      	mov	r2, r4
 8013eca:	4601      	mov	r1, r0
 8013ecc:	1d2b      	adds	r3, r5, #4
 8013ece:	4630      	mov	r0, r6
 8013ed0:	f7ff ff62 	bl	8013d98 <_ZL28read_encoded_value_with_basehjPKhPj>
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	1c60      	adds	r0, r4, #1
 8013ed8:	7823      	ldrb	r3, [r4, #0]
 8013eda:	752b      	strb	r3, [r5, #20]
 8013edc:	2bff      	cmp	r3, #255	; 0xff
 8013ede:	d029      	beq.n	8013f34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 8013ee0:	2310      	movs	r3, #16
 8013ee2:	2400      	movs	r4, #0
 8013ee4:	752b      	strb	r3, [r5, #20]
 8013ee6:	4622      	mov	r2, r4
 8013ee8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013eec:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8013ef0:	4093      	lsls	r3, r2
 8013ef2:	0609      	lsls	r1, r1, #24
 8013ef4:	ea44 0403 	orr.w	r4, r4, r3
 8013ef8:	f102 0207 	add.w	r2, r2, #7
 8013efc:	d4f4      	bmi.n	8013ee8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
 8013efe:	4404      	add	r4, r0
 8013f00:	60ec      	str	r4, [r5, #12]
 8013f02:	7803      	ldrb	r3, [r0, #0]
 8013f04:	756b      	strb	r3, [r5, #21]
 8013f06:	2400      	movs	r4, #0
 8013f08:	3001      	adds	r0, #1
 8013f0a:	4622      	mov	r2, r4
 8013f0c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013f10:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8013f14:	4093      	lsls	r3, r2
 8013f16:	431c      	orrs	r4, r3
 8013f18:	060b      	lsls	r3, r1, #24
 8013f1a:	f102 0207 	add.w	r2, r2, #7
 8013f1e:	d4f5      	bmi.n	8013f0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
 8013f20:	4404      	add	r4, r0
 8013f22:	612c      	str	r4, [r5, #16]
 8013f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f26:	6068      	str	r0, [r5, #4]
 8013f28:	7823      	ldrb	r3, [r4, #0]
 8013f2a:	752b      	strb	r3, [r5, #20]
 8013f2c:	2bff      	cmp	r3, #255	; 0xff
 8013f2e:	f104 0001 	add.w	r0, r4, #1
 8013f32:	d1d5      	bne.n	8013ee0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
 8013f34:	2300      	movs	r3, #0
 8013f36:	60eb      	str	r3, [r5, #12]
 8013f38:	e7e3      	b.n	8013f02 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8013f3a:	e7bb      	b.n	8013eb4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

08013f3c <__gxx_personality_v0>:
 8013f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f40:	f000 0403 	and.w	r4, r0, #3
 8013f44:	b097      	sub	sp, #92	; 0x5c
 8013f46:	2300      	movs	r3, #0
 8013f48:	2c01      	cmp	r4, #1
 8013f4a:	4689      	mov	r9, r1
 8013f4c:	4690      	mov	r8, r2
 8013f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8013f50:	d021      	beq.n	8013f96 <__gxx_personality_v0+0x5a>
 8013f52:	d30e      	bcc.n	8013f72 <__gxx_personality_v0+0x36>
 8013f54:	2c02      	cmp	r4, #2
 8013f56:	d10a      	bne.n	8013f6e <__gxx_personality_v0+0x32>
 8013f58:	4641      	mov	r1, r8
 8013f5a:	4648      	mov	r0, r9
 8013f5c:	f7f6 f89e 	bl	800a09c <__gnu_unwind_frame>
 8013f60:	2800      	cmp	r0, #0
 8013f62:	f000 80d4 	beq.w	801410e <__gxx_personality_v0+0x1d2>
 8013f66:	2009      	movs	r0, #9
 8013f68:	b017      	add	sp, #92	; 0x5c
 8013f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f6e:	f002 fa99 	bl	80164a4 <abort>
 8013f72:	f000 0008 	and.w	r0, r0, #8
 8013f76:	f000 03ff 	and.w	r3, r0, #255	; 0xff
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	d1ec      	bne.n	8013f58 <__gxx_personality_v0+0x1c>
 8013f7e:	aa16      	add	r2, sp, #88	; 0x58
 8013f80:	4640      	mov	r0, r8
 8013f82:	f842 1d2c 	str.w	r1, [r2, #-44]!
 8013f86:	4619      	mov	r1, r3
 8013f88:	9200      	str	r2, [sp, #0]
 8013f8a:	220c      	movs	r2, #12
 8013f8c:	f7f5 fb36 	bl	80095fc <_Unwind_VRS_Set>
 8013f90:	2301      	movs	r3, #1
 8013f92:	9304      	str	r3, [sp, #16]
 8013f94:	e013      	b.n	8013fbe <__gxx_personality_v0+0x82>
 8013f96:	f000 0008 	and.w	r0, r0, #8
 8013f9a:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 8013f9e:	2800      	cmp	r0, #0
 8013fa0:	f000 80b9 	beq.w	8014116 <__gxx_personality_v0+0x1da>
 8013fa4:	aa16      	add	r2, sp, #88	; 0x58
 8013fa6:	f044 0402 	orr.w	r4, r4, #2
 8013faa:	f842 1d2c 	str.w	r1, [r2, #-44]!
 8013fae:	b2e4      	uxtb	r4, r4
 8013fb0:	9200      	str	r2, [sp, #0]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	220c      	movs	r2, #12
 8013fb6:	4640      	mov	r0, r8
 8013fb8:	9404      	str	r4, [sp, #16]
 8013fba:	f7f5 fb1f 	bl	80095fc <_Unwind_VRS_Set>
 8013fbe:	4640      	mov	r0, r8
 8013fc0:	f7f6 f886 	bl	800a0d0 <_Unwind_GetLanguageSpecificData>
 8013fc4:	9005      	str	r0, [sp, #20]
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d0c6      	beq.n	8013f58 <__gxx_personality_v0+0x1c>
 8013fca:	ab10      	add	r3, sp, #64	; 0x40
 8013fcc:	461a      	mov	r2, r3
 8013fce:	9905      	ldr	r1, [sp, #20]
 8013fd0:	9306      	str	r3, [sp, #24]
 8013fd2:	4640      	mov	r0, r8
 8013fd4:	f7ff ff66 	bl	8013ea4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8013fd8:	4641      	mov	r1, r8
 8013fda:	4604      	mov	r4, r0
 8013fdc:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 8013fe0:	f7ff ff3a 	bl	8013e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8013fe4:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8013fe8:	2300      	movs	r3, #0
 8013fea:	9012      	str	r0, [sp, #72]	; 0x48
 8013fec:	4619      	mov	r1, r3
 8013fee:	220f      	movs	r2, #15
 8013ff0:	f8cd b000 	str.w	fp, [sp]
 8013ff4:	4640      	mov	r0, r8
 8013ff6:	f7f5 fadb 	bl	80095b0 <_Unwind_VRS_Get>
 8013ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ffe:	f023 0301 	bic.w	r3, r3, #1
 8014002:	4294      	cmp	r4, r2
 8014004:	f103 36ff 	add.w	r6, r3, #4294967295
 8014008:	d243      	bcs.n	8014092 <__gxx_personality_v0+0x156>
 801400a:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 801400e:	af0e      	add	r7, sp, #56	; 0x38
 8014010:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 8014014:	2100      	movs	r1, #0
 8014016:	4628      	mov	r0, r5
 8014018:	f7ff ff1e 	bl	8013e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 801401c:	4622      	mov	r2, r4
 801401e:	4653      	mov	r3, sl
 8014020:	4601      	mov	r1, r0
 8014022:	4628      	mov	r0, r5
 8014024:	f7ff feb8 	bl	8013d98 <_ZL28read_encoded_value_with_basehjPKhPj>
 8014028:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 801402c:	4605      	mov	r5, r0
 801402e:	2100      	movs	r1, #0
 8014030:	4620      	mov	r0, r4
 8014032:	f7ff ff11 	bl	8013e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8014036:	462a      	mov	r2, r5
 8014038:	463b      	mov	r3, r7
 801403a:	4601      	mov	r1, r0
 801403c:	4620      	mov	r0, r4
 801403e:	f7ff feab 	bl	8013d98 <_ZL28read_encoded_value_with_basehjPKhPj>
 8014042:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 8014046:	4605      	mov	r5, r0
 8014048:	2100      	movs	r1, #0
 801404a:	4620      	mov	r0, r4
 801404c:	f7ff ff04 	bl	8013e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8014050:	462a      	mov	r2, r5
 8014052:	4601      	mov	r1, r0
 8014054:	465b      	mov	r3, fp
 8014056:	4620      	mov	r0, r4
 8014058:	f7ff fe9e 	bl	8013d98 <_ZL28read_encoded_value_with_basehjPKhPj>
 801405c:	4604      	mov	r4, r0
 801405e:	2000      	movs	r0, #0
 8014060:	4602      	mov	r2, r0
 8014062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014066:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801406a:	4093      	lsls	r3, r2
 801406c:	060d      	lsls	r5, r1, #24
 801406e:	ea40 0003 	orr.w	r0, r0, r3
 8014072:	f102 0207 	add.w	r2, r2, #7
 8014076:	d4f4      	bmi.n	8014062 <__gxx_personality_v0+0x126>
 8014078:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801407a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801407c:	4413      	add	r3, r2
 801407e:	429e      	cmp	r6, r3
 8014080:	d307      	bcc.n	8014092 <__gxx_personality_v0+0x156>
 8014082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014084:	4413      	add	r3, r2
 8014086:	429e      	cmp	r6, r3
 8014088:	f0c0 80ba 	bcc.w	8014200 <__gxx_personality_v0+0x2c4>
 801408c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801408e:	42a3      	cmp	r3, r4
 8014090:	d8be      	bhi.n	8014010 <__gxx_personality_v0+0xd4>
 8014092:	2500      	movs	r5, #0
 8014094:	9503      	str	r5, [sp, #12]
 8014096:	2401      	movs	r4, #1
 8014098:	9b04      	ldr	r3, [sp, #16]
 801409a:	07db      	lsls	r3, r3, #31
 801409c:	d456      	bmi.n	801414c <__gxx_personality_v0+0x210>
 801409e:	9b04      	ldr	r3, [sp, #16]
 80140a0:	0719      	lsls	r1, r3, #28
 80140a2:	f140 80a8 	bpl.w	80141f6 <__gxx_personality_v0+0x2ba>
 80140a6:	2c01      	cmp	r4, #1
 80140a8:	f000 819d 	beq.w	80143e6 <__gxx_personality_v0+0x4aa>
 80140ac:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 80140b0:	af0e      	add	r7, sp, #56	; 0x38
 80140b2:	a916      	add	r1, sp, #88	; 0x58
 80140b4:	2300      	movs	r3, #0
 80140b6:	f841 9d28 	str.w	r9, [r1, #-40]!
 80140ba:	461a      	mov	r2, r3
 80140bc:	9100      	str	r1, [sp, #0]
 80140be:	4640      	mov	r0, r8
 80140c0:	4619      	mov	r1, r3
 80140c2:	f7f5 fa9b 	bl	80095fc <_Unwind_VRS_Set>
 80140c6:	2300      	movs	r3, #0
 80140c8:	4619      	mov	r1, r3
 80140ca:	2201      	movs	r2, #1
 80140cc:	f8cd a000 	str.w	sl, [sp]
 80140d0:	4640      	mov	r0, r8
 80140d2:	950d      	str	r5, [sp, #52]	; 0x34
 80140d4:	f7f5 fa92 	bl	80095fc <_Unwind_VRS_Set>
 80140d8:	2300      	movs	r3, #0
 80140da:	4619      	mov	r1, r3
 80140dc:	220f      	movs	r2, #15
 80140de:	9700      	str	r7, [sp, #0]
 80140e0:	4640      	mov	r0, r8
 80140e2:	f7f5 fa65 	bl	80095b0 <_Unwind_VRS_Get>
 80140e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140e8:	9a03      	ldr	r2, [sp, #12]
 80140ea:	9700      	str	r7, [sp, #0]
 80140ec:	f003 0501 	and.w	r5, r3, #1
 80140f0:	2300      	movs	r3, #0
 80140f2:	4315      	orrs	r5, r2
 80140f4:	4640      	mov	r0, r8
 80140f6:	4619      	mov	r1, r3
 80140f8:	220f      	movs	r2, #15
 80140fa:	950e      	str	r5, [sp, #56]	; 0x38
 80140fc:	f7f5 fa7e 	bl	80095fc <_Unwind_VRS_Set>
 8014100:	2c02      	cmp	r4, #2
 8014102:	f000 80f5 	beq.w	80142f0 <__gxx_personality_v0+0x3b4>
 8014106:	2007      	movs	r0, #7
 8014108:	b017      	add	sp, #92	; 0x5c
 801410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801410e:	2008      	movs	r0, #8
 8014110:	b017      	add	sp, #92	; 0x5c
 8014112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014116:	ab10      	add	r3, sp, #64	; 0x40
 8014118:	9300      	str	r3, [sp, #0]
 801411a:	9306      	str	r3, [sp, #24]
 801411c:	220d      	movs	r2, #13
 801411e:	4623      	mov	r3, r4
 8014120:	4621      	mov	r1, r4
 8014122:	4640      	mov	r0, r8
 8014124:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8014128:	f7f5 fa42 	bl	80095b0 <_Unwind_VRS_Get>
 801412c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801412e:	429d      	cmp	r5, r3
 8014130:	d024      	beq.n	801417c <__gxx_personality_v0+0x240>
 8014132:	aa16      	add	r2, sp, #88	; 0x58
 8014134:	4623      	mov	r3, r4
 8014136:	f842 9d2c 	str.w	r9, [r2, #-44]!
 801413a:	4621      	mov	r1, r4
 801413c:	9200      	str	r2, [sp, #0]
 801413e:	4640      	mov	r0, r8
 8014140:	220c      	movs	r2, #12
 8014142:	f7f5 fa5b 	bl	80095fc <_Unwind_VRS_Set>
 8014146:	2302      	movs	r3, #2
 8014148:	9304      	str	r3, [sp, #16]
 801414a:	e738      	b.n	8013fbe <__gxx_personality_v0+0x82>
 801414c:	af0e      	add	r7, sp, #56	; 0x38
 801414e:	2300      	movs	r3, #0
 8014150:	4619      	mov	r1, r3
 8014152:	220d      	movs	r2, #13
 8014154:	9700      	str	r7, [sp, #0]
 8014156:	4640      	mov	r0, r8
 8014158:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801415a:	f7f5 fa29 	bl	80095b0 <_Unwind_VRS_Get>
 801415e:	9a05      	ldr	r2, [sp, #20]
 8014160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014162:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 8014166:	9a03      	ldr	r2, [sp, #12]
 8014168:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 801416c:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 8014170:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 8014174:	f8c9 3020 	str.w	r3, [r9, #32]
 8014178:	2006      	movs	r0, #6
 801417a:	e6f5      	b.n	8013f68 <__gxx_personality_v0+0x2c>
 801417c:	aa16      	add	r2, sp, #88	; 0x58
 801417e:	4623      	mov	r3, r4
 8014180:	f842 9d2c 	str.w	r9, [r2, #-44]!
 8014184:	4621      	mov	r1, r4
 8014186:	9200      	str	r2, [sp, #0]
 8014188:	4640      	mov	r0, r8
 801418a:	220c      	movs	r2, #12
 801418c:	f7f5 fa36 	bl	80095fc <_Unwind_VRS_Set>
 8014190:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8014194:	9303      	str	r3, [sp, #12]
 8014196:	b383      	cbz	r3, 80141fa <__gxx_personality_v0+0x2be>
 8014198:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 801419c:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 80141a0:	9305      	str	r3, [sp, #20]
 80141a2:	2403      	movs	r4, #3
 80141a4:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 80141a8:	af0e      	add	r7, sp, #56	; 0x38
 80141aa:	2d00      	cmp	r5, #0
 80141ac:	da81      	bge.n	80140b2 <__gxx_personality_v0+0x176>
 80141ae:	9a06      	ldr	r2, [sp, #24]
 80141b0:	9905      	ldr	r1, [sp, #20]
 80141b2:	4640      	mov	r0, r8
 80141b4:	f7ff fe76 	bl	8013ea4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80141b8:	4641      	mov	r1, r8
 80141ba:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 80141be:	f7ff fe4b 	bl	8013e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80141c2:	00aa      	lsls	r2, r5, #2
 80141c4:	f082 0203 	eor.w	r2, r2, #3
 80141c8:	43d2      	mvns	r2, r2
 80141ca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80141cc:	9012      	str	r0, [sp, #72]	; 0x48
 80141ce:	58b3      	ldr	r3, [r6, r2]
 80141d0:	4416      	add	r6, r2
 80141d2:	b133      	cbz	r3, 80141e2 <__gxx_personality_v0+0x2a6>
 80141d4:	4632      	mov	r2, r6
 80141d6:	2300      	movs	r3, #0
 80141d8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80141dc:	3301      	adds	r3, #1
 80141de:	2900      	cmp	r1, #0
 80141e0:	d1fa      	bne.n	80141d8 <__gxx_personality_v0+0x29c>
 80141e2:	2204      	movs	r2, #4
 80141e4:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 80141e8:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80141ec:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 80141f0:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 80141f4:	e75d      	b.n	80140b2 <__gxx_personality_v0+0x176>
 80141f6:	2c01      	cmp	r4, #1
 80141f8:	d1d4      	bne.n	80141a4 <__gxx_personality_v0+0x268>
 80141fa:	4648      	mov	r0, r9
 80141fc:	f000 fc08 	bl	8014a10 <__cxa_call_terminate>
 8014200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014202:	2b00      	cmp	r3, #0
 8014204:	f43f aea8 	beq.w	8013f58 <__gxx_personality_v0+0x1c>
 8014208:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801420a:	4413      	add	r3, r2
 801420c:	9303      	str	r3, [sp, #12]
 801420e:	2800      	cmp	r0, #0
 8014210:	f000 80d6 	beq.w	80143c0 <__gxx_personality_v0+0x484>
 8014214:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014216:	3801      	subs	r0, #1
 8014218:	4404      	add	r4, r0
 801421a:	2b00      	cmp	r3, #0
 801421c:	f43f ae9c 	beq.w	8013f58 <__gxx_personality_v0+0x1c>
 8014220:	2c00      	cmp	r4, #0
 8014222:	f000 80d1 	beq.w	80143c8 <__gxx_personality_v0+0x48c>
 8014226:	9b04      	ldr	r3, [sp, #16]
 8014228:	f013 0308 	ands.w	r3, r3, #8
 801422c:	9309      	str	r3, [sp, #36]	; 0x24
 801422e:	f000 80bd 	beq.w	80143ac <__gxx_personality_v0+0x470>
 8014232:	2247      	movs	r2, #71	; 0x47
 8014234:	234e      	movs	r3, #78	; 0x4e
 8014236:	f889 2000 	strb.w	r2, [r9]
 801423a:	f889 3001 	strb.w	r3, [r9, #1]
 801423e:	2255      	movs	r2, #85	; 0x55
 8014240:	2343      	movs	r3, #67	; 0x43
 8014242:	f889 2002 	strb.w	r2, [r9, #2]
 8014246:	f889 3003 	strb.w	r3, [r9, #3]
 801424a:	2246      	movs	r2, #70	; 0x46
 801424c:	234f      	movs	r3, #79	; 0x4f
 801424e:	f889 2004 	strb.w	r2, [r9, #4]
 8014252:	f889 3005 	strb.w	r3, [r9, #5]
 8014256:	2252      	movs	r2, #82	; 0x52
 8014258:	2300      	movs	r3, #0
 801425a:	f889 2006 	strb.w	r2, [r9, #6]
 801425e:	f889 3007 	strb.w	r3, [r9, #7]
 8014262:	2300      	movs	r3, #0
 8014264:	9307      	str	r3, [sp, #28]
 8014266:	f8cd 8020 	str.w	r8, [sp, #32]
 801426a:	2500      	movs	r5, #0
 801426c:	462a      	mov	r2, r5
 801426e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014272:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014276:	4093      	lsls	r3, r2
 8014278:	0608      	lsls	r0, r1, #24
 801427a:	ea45 0503 	orr.w	r5, r5, r3
 801427e:	f102 0207 	add.w	r2, r2, #7
 8014282:	d4f4      	bmi.n	801426e <__gxx_personality_v0+0x332>
 8014284:	2a1f      	cmp	r2, #31
 8014286:	d805      	bhi.n	8014294 <__gxx_personality_v0+0x358>
 8014288:	0649      	lsls	r1, r1, #25
 801428a:	d503      	bpl.n	8014294 <__gxx_personality_v0+0x358>
 801428c:	2301      	movs	r3, #1
 801428e:	4093      	lsls	r3, r2
 8014290:	425b      	negs	r3, r3
 8014292:	431d      	orrs	r5, r3
 8014294:	2600      	movs	r6, #0
 8014296:	4632      	mov	r2, r6
 8014298:	4620      	mov	r0, r4
 801429a:	f810 1b01 	ldrb.w	r1, [r0], #1
 801429e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80142a2:	4093      	lsls	r3, r2
 80142a4:	431e      	orrs	r6, r3
 80142a6:	060b      	lsls	r3, r1, #24
 80142a8:	f102 0207 	add.w	r2, r2, #7
 80142ac:	d4f5      	bmi.n	801429a <__gxx_personality_v0+0x35e>
 80142ae:	2a1f      	cmp	r2, #31
 80142b0:	d805      	bhi.n	80142be <__gxx_personality_v0+0x382>
 80142b2:	0648      	lsls	r0, r1, #25
 80142b4:	d503      	bpl.n	80142be <__gxx_personality_v0+0x382>
 80142b6:	2301      	movs	r3, #1
 80142b8:	4093      	lsls	r3, r2
 80142ba:	425b      	negs	r3, r3
 80142bc:	431e      	orrs	r6, r3
 80142be:	2d00      	cmp	r5, #0
 80142c0:	d03d      	beq.n	801433e <__gxx_personality_v0+0x402>
 80142c2:	dd3f      	ble.n	8014344 <__gxx_personality_v0+0x408>
 80142c4:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 80142c8:	28ff      	cmp	r0, #255	; 0xff
 80142ca:	d06d      	beq.n	80143a8 <__gxx_personality_v0+0x46c>
 80142cc:	f000 0307 	and.w	r3, r0, #7
 80142d0:	2b04      	cmp	r3, #4
 80142d2:	f63f ae4c 	bhi.w	8013f6e <__gxx_personality_v0+0x32>
 80142d6:	a201      	add	r2, pc, #4	; (adr r2, 80142dc <__gxx_personality_v0+0x3a0>)
 80142d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142dc:	08014323 	.word	0x08014323
 80142e0:	08013f6f 	.word	0x08013f6f
 80142e4:	0801431d 	.word	0x0801431d
 80142e8:	08014323 	.word	0x08014323
 80142ec:	080142fb 	.word	0x080142fb
 80142f0:	4648      	mov	r0, r9
 80142f2:	f7ff fce7 	bl	8013cc4 <__cxa_begin_cleanup>
 80142f6:	2007      	movs	r0, #7
 80142f8:	e636      	b.n	8013f68 <__gxx_personality_v0+0x2c>
 80142fa:	00eb      	lsls	r3, r5, #3
 80142fc:	425b      	negs	r3, r3
 80142fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014300:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014302:	441a      	add	r2, r3
 8014304:	463b      	mov	r3, r7
 8014306:	f7ff fd47 	bl	8013d98 <_ZL28read_encoded_value_with_basehjPKhPj>
 801430a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801430c:	b199      	cbz	r1, 8014336 <__gxx_personality_v0+0x3fa>
 801430e:	f1b9 0f00 	cmp.w	r9, #0
 8014312:	d109      	bne.n	8014328 <__gxx_personality_v0+0x3ec>
 8014314:	2e00      	cmp	r6, #0
 8014316:	d05e      	beq.n	80143d6 <__gxx_personality_v0+0x49a>
 8014318:	4434      	add	r4, r6
 801431a:	e7a6      	b.n	801426a <__gxx_personality_v0+0x32e>
 801431c:	006b      	lsls	r3, r5, #1
 801431e:	425b      	negs	r3, r3
 8014320:	e7ed      	b.n	80142fe <__gxx_personality_v0+0x3c2>
 8014322:	00ab      	lsls	r3, r5, #2
 8014324:	425b      	negs	r3, r3
 8014326:	e7ea      	b.n	80142fe <__gxx_personality_v0+0x3c2>
 8014328:	ab0a      	add	r3, sp, #40	; 0x28
 801432a:	2200      	movs	r2, #0
 801432c:	4648      	mov	r0, r9
 801432e:	f7ff fc71 	bl	8013c14 <__cxa_type_match>
 8014332:	2800      	cmp	r0, #0
 8014334:	d0ee      	beq.n	8014314 <__gxx_personality_v0+0x3d8>
 8014336:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801433a:	2403      	movs	r4, #3
 801433c:	e6ac      	b.n	8014098 <__gxx_personality_v0+0x15c>
 801433e:	2301      	movs	r3, #1
 8014340:	9307      	str	r3, [sp, #28]
 8014342:	e7e7      	b.n	8014314 <__gxx_personality_v0+0x3d8>
 8014344:	f1b9 0f00 	cmp.w	r9, #0
 8014348:	d001      	beq.n	801434e <__gxx_personality_v0+0x412>
 801434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434c:	b193      	cbz	r3, 8014374 <__gxx_personality_v0+0x438>
 801434e:	1c6b      	adds	r3, r5, #1
 8014350:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 8014354:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d1da      	bne.n	8014314 <__gxx_personality_v0+0x3d8>
 801435e:	9b04      	ldr	r3, [sp, #16]
 8014360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014364:	07da      	lsls	r2, r3, #31
 8014366:	f53f aef2 	bmi.w	801414e <__gxx_personality_v0+0x212>
 801436a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801436c:	2b00      	cmp	r3, #0
 801436e:	d03c      	beq.n	80143ea <__gxx_personality_v0+0x4ae>
 8014370:	f000 f99c 	bl	80146ac <_ZSt10unexpectedv>
 8014374:	f105 0801 	add.w	r8, r5, #1
 8014378:	ebc8 7388 	rsb	r3, r8, r8, lsl #30
 801437c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801437e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014380:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014384:	900f      	str	r0, [sp, #60]	; 0x3c
 8014386:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 801438a:	b921      	cbnz	r1, 8014396 <__gxx_personality_v0+0x45a>
 801438c:	e7e7      	b.n	801435e <__gxx_personality_v0+0x422>
 801438e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8014392:	2900      	cmp	r1, #0
 8014394:	d0e3      	beq.n	801435e <__gxx_personality_v0+0x422>
 8014396:	4441      	add	r1, r8
 8014398:	465b      	mov	r3, fp
 801439a:	2200      	movs	r2, #0
 801439c:	4648      	mov	r0, r9
 801439e:	f7ff fc39 	bl	8013c14 <__cxa_type_match>
 80143a2:	2800      	cmp	r0, #0
 80143a4:	d0f3      	beq.n	801438e <__gxx_personality_v0+0x452>
 80143a6:	e7b5      	b.n	8014314 <__gxx_personality_v0+0x3d8>
 80143a8:	2300      	movs	r3, #0
 80143aa:	e7a8      	b.n	80142fe <__gxx_personality_v0+0x3c2>
 80143ac:	f899 3007 	ldrb.w	r3, [r9, #7]
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	bf0c      	ite	eq
 80143b4:	f859 3c20 	ldreq.w	r3, [r9, #-32]
 80143b8:	f109 0358 	addne.w	r3, r9, #88	; 0x58
 80143bc:	930a      	str	r3, [sp, #40]	; 0x28
 80143be:	e750      	b.n	8014262 <__gxx_personality_v0+0x326>
 80143c0:	9b03      	ldr	r3, [sp, #12]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	f43f adc8 	beq.w	8013f58 <__gxx_personality_v0+0x1c>
 80143c8:	9b04      	ldr	r3, [sp, #16]
 80143ca:	f013 0501 	ands.w	r5, r3, #1
 80143ce:	f47f adc3 	bne.w	8013f58 <__gxx_personality_v0+0x1c>
 80143d2:	2402      	movs	r4, #2
 80143d4:	e663      	b.n	801409e <__gxx_personality_v0+0x162>
 80143d6:	9b07      	ldr	r3, [sp, #28]
 80143d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d1f3      	bne.n	80143c8 <__gxx_personality_v0+0x48c>
 80143e0:	e5ba      	b.n	8013f58 <__gxx_personality_v0+0x1c>
 80143e2:	f000 f8b5 	bl	8014550 <__cxa_begin_catch>
 80143e6:	f000 f953 	bl	8014690 <_ZSt9terminatev>
 80143ea:	2403      	movs	r4, #3
 80143ec:	e6dd      	b.n	80141aa <__gxx_personality_v0+0x26e>
 80143ee:	bf00      	nop

080143f0 <_Znwj>:
 80143f0:	b510      	push	{r4, lr}
 80143f2:	2800      	cmp	r0, #0
 80143f4:	bf14      	ite	ne
 80143f6:	4604      	movne	r4, r0
 80143f8:	2401      	moveq	r4, #1
 80143fa:	4620      	mov	r0, r4
 80143fc:	f002 fb0e 	bl	8016a1c <malloc>
 8014400:	b100      	cbz	r0, 8014404 <_Znwj+0x14>
 8014402:	bd10      	pop	{r4, pc}
 8014404:	f000 fac2 	bl	801498c <_ZSt15get_new_handlerv>
 8014408:	b108      	cbz	r0, 801440e <_Znwj+0x1e>
 801440a:	4780      	blx	r0
 801440c:	e7f5      	b.n	80143fa <_Znwj+0xa>
 801440e:	2004      	movs	r0, #4
 8014410:	f000 fbee 	bl	8014bf0 <__cxa_allocate_exception>
 8014414:	4b02      	ldr	r3, [pc, #8]	; (8014420 <_Znwj+0x30>)
 8014416:	6003      	str	r3, [r0, #0]
 8014418:	4a02      	ldr	r2, [pc, #8]	; (8014424 <_Znwj+0x34>)
 801441a:	4903      	ldr	r1, [pc, #12]	; (8014428 <_Znwj+0x38>)
 801441c:	f000 fc46 	bl	8014cac <__cxa_throw>
 8014420:	0801b698 	.word	0x0801b698
 8014424:	080149a5 	.word	0x080149a5
 8014428:	0801b6a4 	.word	0x0801b6a4

0801442c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801442c:	b570      	push	{r4, r5, r6, lr}
 801442e:	6803      	ldr	r3, [r0, #0]
 8014430:	b084      	sub	sp, #16
 8014432:	2400      	movs	r4, #0
 8014434:	699e      	ldr	r6, [r3, #24]
 8014436:	9400      	str	r4, [sp, #0]
 8014438:	2310      	movs	r3, #16
 801443a:	4615      	mov	r5, r2
 801443c:	9302      	str	r3, [sp, #8]
 801443e:	6812      	ldr	r2, [r2, #0]
 8014440:	f88d 4004 	strb.w	r4, [sp, #4]
 8014444:	466b      	mov	r3, sp
 8014446:	9403      	str	r4, [sp, #12]
 8014448:	47b0      	blx	r6
 801444a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801444e:	f003 0306 	and.w	r3, r3, #6
 8014452:	2b06      	cmp	r3, #6
 8014454:	bf03      	ittte	eq
 8014456:	9b00      	ldreq	r3, [sp, #0]
 8014458:	602b      	streq	r3, [r5, #0]
 801445a:	2001      	moveq	r0, #1
 801445c:	4620      	movne	r0, r4
 801445e:	b004      	add	sp, #16
 8014460:	bd70      	pop	{r4, r5, r6, pc}
 8014462:	bf00      	nop

08014464 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8014464:	9800      	ldr	r0, [sp, #0]
 8014466:	4290      	cmp	r0, r2
 8014468:	bf0c      	ite	eq
 801446a:	2006      	moveq	r0, #6
 801446c:	2001      	movne	r0, #1
 801446e:	4770      	bx	lr

08014470 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8014470:	b510      	push	{r4, lr}
 8014472:	4b03      	ldr	r3, [pc, #12]	; (8014480 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8014474:	6003      	str	r3, [r0, #0]
 8014476:	4604      	mov	r4, r0
 8014478:	f000 f938 	bl	80146ec <_ZNSt9type_infoD1Ev>
 801447c:	4620      	mov	r0, r4
 801447e:	bd10      	pop	{r4, pc}
 8014480:	0801b500 	.word	0x0801b500

08014484 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8014484:	b510      	push	{r4, lr}
 8014486:	4b05      	ldr	r3, [pc, #20]	; (801449c <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 8014488:	6003      	str	r3, [r0, #0]
 801448a:	4604      	mov	r4, r0
 801448c:	f000 f92e 	bl	80146ec <_ZNSt9type_infoD1Ev>
 8014490:	4620      	mov	r0, r4
 8014492:	f000 f9d9 	bl	8014848 <_ZdlPv>
 8014496:	4620      	mov	r0, r4
 8014498:	bd10      	pop	{r4, pc}
 801449a:	bf00      	nop
 801449c:	0801b500 	.word	0x0801b500

080144a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80144a0:	b538      	push	{r3, r4, r5, lr}
 80144a2:	4615      	mov	r5, r2
 80144a4:	461c      	mov	r4, r3
 80144a6:	f000 f925 	bl	80146f4 <_ZNKSt9type_infoeqERKS_>
 80144aa:	b120      	cbz	r0, 80144b6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80144ac:	2208      	movs	r2, #8
 80144ae:	2306      	movs	r3, #6
 80144b0:	6025      	str	r5, [r4, #0]
 80144b2:	60e2      	str	r2, [r4, #12]
 80144b4:	7123      	strb	r3, [r4, #4]
 80144b6:	bd38      	pop	{r3, r4, r5, pc}

080144b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80144b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ba:	b083      	sub	sp, #12
 80144bc:	4617      	mov	r7, r2
 80144be:	9d08      	ldr	r5, [sp, #32]
 80144c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80144c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80144c4:	428d      	cmp	r5, r1
 80144c6:	4606      	mov	r6, r0
 80144c8:	d00b      	beq.n	80144e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 80144ca:	4619      	mov	r1, r3
 80144cc:	4630      	mov	r0, r6
 80144ce:	f000 f911 	bl	80146f4 <_ZNKSt9type_infoeqERKS_>
 80144d2:	b118      	cbz	r0, 80144dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 80144d4:	2301      	movs	r3, #1
 80144d6:	6025      	str	r5, [r4, #0]
 80144d8:	7127      	strb	r7, [r4, #4]
 80144da:	71a3      	strb	r3, [r4, #6]
 80144dc:	2000      	movs	r0, #0
 80144de:	b003      	add	sp, #12
 80144e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144e4:	9301      	str	r3, [sp, #4]
 80144e6:	f000 f905 	bl	80146f4 <_ZNKSt9type_infoeqERKS_>
 80144ea:	b118      	cbz	r0, 80144f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 80144ec:	2000      	movs	r0, #0
 80144ee:	7167      	strb	r7, [r4, #5]
 80144f0:	b003      	add	sp, #12
 80144f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f4:	9b01      	ldr	r3, [sp, #4]
 80144f6:	e7e8      	b.n	80144ca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

080144f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80144f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144fc:	4617      	mov	r7, r2
 80144fe:	461c      	mov	r4, r3
 8014500:	4606      	mov	r6, r0
 8014502:	460d      	mov	r5, r1
 8014504:	f000 f8f6 	bl	80146f4 <_ZNKSt9type_infoeqERKS_>
 8014508:	b908      	cbnz	r0, 801450e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 801450a:	2c03      	cmp	r4, #3
 801450c:	d901      	bls.n	8014512 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 801450e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014512:	682b      	ldr	r3, [r5, #0]
 8014514:	463a      	mov	r2, r7
 8014516:	4631      	mov	r1, r6
 8014518:	4628      	mov	r0, r5
 801451a:	695b      	ldr	r3, [r3, #20]
 801451c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014520:	4718      	bx	r3
 8014522:	bf00      	nop

08014524 <_ZNSt9exceptionD1Ev>:
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop

08014528 <_ZNSt13bad_exceptionD1Ev>:
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop

0801452c <_ZNKSt13bad_exception4whatEv>:
 801452c:	4800      	ldr	r0, [pc, #0]	; (8014530 <_ZNKSt13bad_exception4whatEv+0x4>)
 801452e:	4770      	bx	lr
 8014530:	0801b5b8 	.word	0x0801b5b8

08014534 <_ZNSt13bad_exceptionD0Ev>:
 8014534:	b510      	push	{r4, lr}
 8014536:	4604      	mov	r4, r0
 8014538:	f000 f986 	bl	8014848 <_ZdlPv>
 801453c:	4620      	mov	r0, r4
 801453e:	bd10      	pop	{r4, pc}

08014540 <__cxa_get_globals_fast>:
 8014540:	4800      	ldr	r0, [pc, #0]	; (8014544 <__cxa_get_globals_fast+0x4>)
 8014542:	4770      	bx	lr
 8014544:	20004050 	.word	0x20004050

08014548 <__cxa_get_globals>:
 8014548:	4800      	ldr	r0, [pc, #0]	; (801454c <__cxa_get_globals+0x4>)
 801454a:	4770      	bx	lr
 801454c:	20004050 	.word	0x20004050

08014550 <__cxa_begin_catch>:
 8014550:	b538      	push	{r3, r4, r5, lr}
 8014552:	4604      	mov	r4, r0
 8014554:	f7ff fff8 	bl	8014548 <__cxa_get_globals>
 8014558:	7822      	ldrb	r2, [r4, #0]
 801455a:	6803      	ldr	r3, [r0, #0]
 801455c:	2a47      	cmp	r2, #71	; 0x47
 801455e:	f1a4 0120 	sub.w	r1, r4, #32
 8014562:	d005      	beq.n	8014570 <__cxa_begin_catch+0x20>
 8014564:	2b00      	cmp	r3, #0
 8014566:	d131      	bne.n	80145cc <__cxa_begin_catch+0x7c>
 8014568:	461c      	mov	r4, r3
 801456a:	6001      	str	r1, [r0, #0]
 801456c:	4620      	mov	r0, r4
 801456e:	bd38      	pop	{r3, r4, r5, pc}
 8014570:	7862      	ldrb	r2, [r4, #1]
 8014572:	2a4e      	cmp	r2, #78	; 0x4e
 8014574:	d1f6      	bne.n	8014564 <__cxa_begin_catch+0x14>
 8014576:	78a2      	ldrb	r2, [r4, #2]
 8014578:	2a55      	cmp	r2, #85	; 0x55
 801457a:	d1f3      	bne.n	8014564 <__cxa_begin_catch+0x14>
 801457c:	78e2      	ldrb	r2, [r4, #3]
 801457e:	2a43      	cmp	r2, #67	; 0x43
 8014580:	d1f0      	bne.n	8014564 <__cxa_begin_catch+0x14>
 8014582:	7922      	ldrb	r2, [r4, #4]
 8014584:	2a43      	cmp	r2, #67	; 0x43
 8014586:	d1ed      	bne.n	8014564 <__cxa_begin_catch+0x14>
 8014588:	7962      	ldrb	r2, [r4, #5]
 801458a:	2a2b      	cmp	r2, #43	; 0x2b
 801458c:	d1ea      	bne.n	8014564 <__cxa_begin_catch+0x14>
 801458e:	79a2      	ldrb	r2, [r4, #6]
 8014590:	2a2b      	cmp	r2, #43	; 0x2b
 8014592:	d1e7      	bne.n	8014564 <__cxa_begin_catch+0x14>
 8014594:	79e2      	ldrb	r2, [r4, #7]
 8014596:	2a01      	cmp	r2, #1
 8014598:	d8e4      	bhi.n	8014564 <__cxa_begin_catch+0x14>
 801459a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 801459e:	2a00      	cmp	r2, #0
 80145a0:	db11      	blt.n	80145c6 <__cxa_begin_catch+0x76>
 80145a2:	3201      	adds	r2, #1
 80145a4:	6845      	ldr	r5, [r0, #4]
 80145a6:	f844 2c0c 	str.w	r2, [r4, #-12]
 80145aa:	428b      	cmp	r3, r1
 80145ac:	f105 32ff 	add.w	r2, r5, #4294967295
 80145b0:	6042      	str	r2, [r0, #4]
 80145b2:	bf1c      	itt	ne
 80145b4:	f844 3c10 	strne.w	r3, [r4, #-16]
 80145b8:	6001      	strne	r1, [r0, #0]
 80145ba:	4620      	mov	r0, r4
 80145bc:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80145be:	f7f4 ffef 	bl	80095a0 <_Unwind_Complete>
 80145c2:	4620      	mov	r0, r4
 80145c4:	bd38      	pop	{r3, r4, r5, pc}
 80145c6:	f1c2 0201 	rsb	r2, r2, #1
 80145ca:	e7eb      	b.n	80145a4 <__cxa_begin_catch+0x54>
 80145cc:	f000 f860 	bl	8014690 <_ZSt9terminatev>
 80145d0:	3101      	adds	r1, #1
 80145d2:	d001      	beq.n	80145d8 <__cxa_begin_catch+0x88>
 80145d4:	f7ff fb18 	bl	8013c08 <__cxa_end_cleanup>
 80145d8:	f000 fa2a 	bl	8014a30 <__cxa_call_unexpected>

080145dc <__cxa_end_catch>:
 80145dc:	b508      	push	{r3, lr}
 80145de:	f7ff ffaf 	bl	8014540 <__cxa_get_globals_fast>
 80145e2:	4602      	mov	r2, r0
 80145e4:	6800      	ldr	r0, [r0, #0]
 80145e6:	2800      	cmp	r0, #0
 80145e8:	d03d      	beq.n	8014666 <__cxa_end_catch+0x8a>
 80145ea:	f890 3020 	ldrb.w	r3, [r0, #32]
 80145ee:	2b47      	cmp	r3, #71	; 0x47
 80145f0:	d006      	beq.n	8014600 <__cxa_end_catch+0x24>
 80145f2:	2300      	movs	r3, #0
 80145f4:	6013      	str	r3, [r2, #0]
 80145f6:	3020      	adds	r0, #32
 80145f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80145fc:	f7f4 bfd2 	b.w	80095a4 <_Unwind_DeleteException>
 8014600:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8014604:	2b4e      	cmp	r3, #78	; 0x4e
 8014606:	d1f4      	bne.n	80145f2 <__cxa_end_catch+0x16>
 8014608:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 801460c:	2b55      	cmp	r3, #85	; 0x55
 801460e:	d1f0      	bne.n	80145f2 <__cxa_end_catch+0x16>
 8014610:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8014614:	2b43      	cmp	r3, #67	; 0x43
 8014616:	d1ec      	bne.n	80145f2 <__cxa_end_catch+0x16>
 8014618:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801461c:	2b43      	cmp	r3, #67	; 0x43
 801461e:	d1e8      	bne.n	80145f2 <__cxa_end_catch+0x16>
 8014620:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014624:	2b2b      	cmp	r3, #43	; 0x2b
 8014626:	d1e4      	bne.n	80145f2 <__cxa_end_catch+0x16>
 8014628:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 801462c:	2b2b      	cmp	r3, #43	; 0x2b
 801462e:	d1e0      	bne.n	80145f2 <__cxa_end_catch+0x16>
 8014630:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8014634:	2b01      	cmp	r3, #1
 8014636:	d8dc      	bhi.n	80145f2 <__cxa_end_catch+0x16>
 8014638:	6943      	ldr	r3, [r0, #20]
 801463a:	2b00      	cmp	r3, #0
 801463c:	db05      	blt.n	801464a <__cxa_end_catch+0x6e>
 801463e:	3b01      	subs	r3, #1
 8014640:	d008      	beq.n	8014654 <__cxa_end_catch+0x78>
 8014642:	1c5a      	adds	r2, r3, #1
 8014644:	d00d      	beq.n	8014662 <__cxa_end_catch+0x86>
 8014646:	6143      	str	r3, [r0, #20]
 8014648:	bd08      	pop	{r3, pc}
 801464a:	3301      	adds	r3, #1
 801464c:	d1fb      	bne.n	8014646 <__cxa_end_catch+0x6a>
 801464e:	6901      	ldr	r1, [r0, #16]
 8014650:	6011      	str	r1, [r2, #0]
 8014652:	e7f8      	b.n	8014646 <__cxa_end_catch+0x6a>
 8014654:	6903      	ldr	r3, [r0, #16]
 8014656:	6013      	str	r3, [r2, #0]
 8014658:	3020      	adds	r0, #32
 801465a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801465e:	f7f4 bfa1 	b.w	80095a4 <_Unwind_DeleteException>
 8014662:	f000 f815 	bl	8014690 <_ZSt9terminatev>
 8014666:	bd08      	pop	{r3, pc}

08014668 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8014668:	b508      	push	{r3, lr}
 801466a:	4780      	blx	r0
 801466c:	f001 ff1a 	bl	80164a4 <abort>
 8014670:	f7ff ff6e 	bl	8014550 <__cxa_begin_catch>
 8014674:	f001 ff16 	bl	80164a4 <abort>
 8014678:	460d      	mov	r5, r1
 801467a:	4604      	mov	r4, r0
 801467c:	f7ff ffae 	bl	80145dc <__cxa_end_catch>
 8014680:	3501      	adds	r5, #1
 8014682:	d001      	beq.n	8014688 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 8014684:	f7ff fac0 	bl	8013c08 <__cxa_end_cleanup>
 8014688:	4620      	mov	r0, r4
 801468a:	f000 f9d1 	bl	8014a30 <__cxa_call_unexpected>
 801468e:	bf00      	nop

08014690 <_ZSt9terminatev>:
 8014690:	b508      	push	{r3, lr}
 8014692:	4b03      	ldr	r3, [pc, #12]	; (80146a0 <_ZSt9terminatev+0x10>)
 8014694:	6818      	ldr	r0, [r3, #0]
 8014696:	f3bf 8f5f 	dmb	sy
 801469a:	f7ff ffe5 	bl	8014668 <_ZN10__cxxabiv111__terminateEPFvvE>
 801469e:	bf00      	nop
 80146a0:	20000008 	.word	0x20000008

080146a4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80146a4:	b508      	push	{r3, lr}
 80146a6:	4780      	blx	r0
 80146a8:	f7ff fff2 	bl	8014690 <_ZSt9terminatev>

080146ac <_ZSt10unexpectedv>:
 80146ac:	b508      	push	{r3, lr}
 80146ae:	4b03      	ldr	r3, [pc, #12]	; (80146bc <_ZSt10unexpectedv+0x10>)
 80146b0:	6818      	ldr	r0, [r3, #0]
 80146b2:	f3bf 8f5f 	dmb	sy
 80146b6:	f7ff fff5 	bl	80146a4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 80146ba:	bf00      	nop
 80146bc:	2000000c 	.word	0x2000000c

080146c0 <_ZSt13get_terminatev>:
 80146c0:	4b02      	ldr	r3, [pc, #8]	; (80146cc <_ZSt13get_terminatev+0xc>)
 80146c2:	6818      	ldr	r0, [r3, #0]
 80146c4:	f3bf 8f5f 	dmb	sy
 80146c8:	4770      	bx	lr
 80146ca:	bf00      	nop
 80146cc:	20000008 	.word	0x20000008

080146d0 <_ZSt14get_unexpectedv>:
 80146d0:	4b02      	ldr	r3, [pc, #8]	; (80146dc <_ZSt14get_unexpectedv+0xc>)
 80146d2:	6818      	ldr	r0, [r3, #0]
 80146d4:	f3bf 8f5f 	dmb	sy
 80146d8:	4770      	bx	lr
 80146da:	bf00      	nop
 80146dc:	2000000c 	.word	0x2000000c

080146e0 <__aeabi_atexit>:
 80146e0:	460b      	mov	r3, r1
 80146e2:	4601      	mov	r1, r0
 80146e4:	4618      	mov	r0, r3
 80146e6:	f001 bee4 	b.w	80164b2 <__cxa_atexit>
 80146ea:	bf00      	nop

080146ec <_ZNSt9type_infoD1Ev>:
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop

080146f0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80146f0:	2000      	movs	r0, #0
 80146f2:	4770      	bx	lr

080146f4 <_ZNKSt9type_infoeqERKS_>:
 80146f4:	4281      	cmp	r1, r0
 80146f6:	d011      	beq.n	801471c <_ZNKSt9type_infoeqERKS_+0x28>
 80146f8:	b508      	push	{r3, lr}
 80146fa:	6840      	ldr	r0, [r0, #4]
 80146fc:	7803      	ldrb	r3, [r0, #0]
 80146fe:	2b2a      	cmp	r3, #42	; 0x2a
 8014700:	d00a      	beq.n	8014718 <_ZNKSt9type_infoeqERKS_+0x24>
 8014702:	6849      	ldr	r1, [r1, #4]
 8014704:	780b      	ldrb	r3, [r1, #0]
 8014706:	2b2a      	cmp	r3, #42	; 0x2a
 8014708:	bf08      	it	eq
 801470a:	3101      	addeq	r1, #1
 801470c:	f7f3 ff08 	bl	8008520 <strcmp>
 8014710:	fab0 f080 	clz	r0, r0
 8014714:	0940      	lsrs	r0, r0, #5
 8014716:	bd08      	pop	{r3, pc}
 8014718:	2000      	movs	r0, #0
 801471a:	bd08      	pop	{r3, pc}
 801471c:	2001      	movs	r0, #1
 801471e:	4770      	bx	lr

08014720 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8014720:	b510      	push	{r4, lr}
 8014722:	4b03      	ldr	r3, [pc, #12]	; (8014730 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8014724:	6003      	str	r3, [r0, #0]
 8014726:	4604      	mov	r4, r0
 8014728:	f7ff fea2 	bl	8014470 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801472c:	4620      	mov	r0, r4
 801472e:	bd10      	pop	{r4, pc}
 8014730:	0801b638 	.word	0x0801b638

08014734 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8014734:	b510      	push	{r4, lr}
 8014736:	4b05      	ldr	r3, [pc, #20]	; (801474c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 8014738:	6003      	str	r3, [r0, #0]
 801473a:	4604      	mov	r4, r0
 801473c:	f7ff fe98 	bl	8014470 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8014740:	4620      	mov	r0, r4
 8014742:	f000 f881 	bl	8014848 <_ZdlPv>
 8014746:	4620      	mov	r0, r4
 8014748:	bd10      	pop	{r4, pc}
 801474a:	bf00      	nop
 801474c:	0801b638 	.word	0x0801b638

08014750 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8014750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014754:	b081      	sub	sp, #4
 8014756:	460e      	mov	r6, r1
 8014758:	4619      	mov	r1, r3
 801475a:	461f      	mov	r7, r3
 801475c:	4691      	mov	r9, r2
 801475e:	4683      	mov	fp, r0
 8014760:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014762:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8014766:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801476a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801476c:	f7ff ffc2 	bl	80146f4 <_ZNKSt9type_infoeqERKS_>
 8014770:	b170      	cbz	r0, 8014790 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 8014772:	2e00      	cmp	r6, #0
 8014774:	602c      	str	r4, [r5, #0]
 8014776:	f885 9004 	strb.w	r9, [r5, #4]
 801477a:	db1f      	blt.n	80147bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 801477c:	4434      	add	r4, r6
 801477e:	45a0      	cmp	r8, r4
 8014780:	bf0c      	ite	eq
 8014782:	2406      	moveq	r4, #6
 8014784:	2401      	movne	r4, #1
 8014786:	71ac      	strb	r4, [r5, #6]
 8014788:	2000      	movs	r0, #0
 801478a:	b001      	add	sp, #4
 801478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014790:	4544      	cmp	r4, r8
 8014792:	d018      	beq.n	80147c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 8014794:	f8db 0008 	ldr.w	r0, [fp, #8]
 8014798:	f8d0 e000 	ldr.w	lr, [r0]
 801479c:	950d      	str	r5, [sp, #52]	; 0x34
 801479e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80147a2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80147a6:	940a      	str	r4, [sp, #40]	; 0x28
 80147a8:	f8de 401c 	ldr.w	r4, [lr, #28]
 80147ac:	463b      	mov	r3, r7
 80147ae:	464a      	mov	r2, r9
 80147b0:	4631      	mov	r1, r6
 80147b2:	46a4      	mov	ip, r4
 80147b4:	b001      	add	sp, #4
 80147b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ba:	4760      	bx	ip
 80147bc:	3602      	adds	r6, #2
 80147be:	d1e3      	bne.n	8014788 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80147c0:	2301      	movs	r3, #1
 80147c2:	71ab      	strb	r3, [r5, #6]
 80147c4:	e7e0      	b.n	8014788 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80147c6:	4651      	mov	r1, sl
 80147c8:	4658      	mov	r0, fp
 80147ca:	f7ff ff93 	bl	80146f4 <_ZNKSt9type_infoeqERKS_>
 80147ce:	2800      	cmp	r0, #0
 80147d0:	d0e0      	beq.n	8014794 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 80147d2:	2000      	movs	r0, #0
 80147d4:	f885 9005 	strb.w	r9, [r5, #5]
 80147d8:	b001      	add	sp, #4
 80147da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147de:	bf00      	nop

080147e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80147e0:	b570      	push	{r4, r5, r6, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	460d      	mov	r5, r1
 80147e6:	9c06      	ldr	r4, [sp, #24]
 80147e8:	4294      	cmp	r4, r2
 80147ea:	4606      	mov	r6, r0
 80147ec:	d009      	beq.n	8014802 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 80147ee:	68b0      	ldr	r0, [r6, #8]
 80147f0:	6806      	ldr	r6, [r0, #0]
 80147f2:	9406      	str	r4, [sp, #24]
 80147f4:	6a34      	ldr	r4, [r6, #32]
 80147f6:	4629      	mov	r1, r5
 80147f8:	46a4      	mov	ip, r4
 80147fa:	b002      	add	sp, #8
 80147fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014800:	4760      	bx	ip
 8014802:	4619      	mov	r1, r3
 8014804:	9201      	str	r2, [sp, #4]
 8014806:	9300      	str	r3, [sp, #0]
 8014808:	f7ff ff74 	bl	80146f4 <_ZNKSt9type_infoeqERKS_>
 801480c:	9b00      	ldr	r3, [sp, #0]
 801480e:	9a01      	ldr	r2, [sp, #4]
 8014810:	2800      	cmp	r0, #0
 8014812:	d0ec      	beq.n	80147ee <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8014814:	2006      	movs	r0, #6
 8014816:	b002      	add	sp, #8
 8014818:	bd70      	pop	{r4, r5, r6, pc}
 801481a:	bf00      	nop

0801481c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014820:	4607      	mov	r7, r0
 8014822:	460c      	mov	r4, r1
 8014824:	4615      	mov	r5, r2
 8014826:	461e      	mov	r6, r3
 8014828:	f7ff fe3a 	bl	80144a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801482c:	b108      	cbz	r0, 8014832 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 801482e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014832:	68b8      	ldr	r0, [r7, #8]
 8014834:	6807      	ldr	r7, [r0, #0]
 8014836:	4621      	mov	r1, r4
 8014838:	69bc      	ldr	r4, [r7, #24]
 801483a:	4633      	mov	r3, r6
 801483c:	462a      	mov	r2, r5
 801483e:	46a4      	mov	ip, r4
 8014840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014844:	4760      	bx	ip
 8014846:	bf00      	nop

08014848 <_ZdlPv>:
 8014848:	f002 b8f0 	b.w	8016a2c <free>

0801484c <_ZSt17__throw_bad_allocv>:
 801484c:	b508      	push	{r3, lr}
 801484e:	2004      	movs	r0, #4
 8014850:	f000 f9ce 	bl	8014bf0 <__cxa_allocate_exception>
 8014854:	4b02      	ldr	r3, [pc, #8]	; (8014860 <_ZSt17__throw_bad_allocv+0x14>)
 8014856:	6003      	str	r3, [r0, #0]
 8014858:	4a02      	ldr	r2, [pc, #8]	; (8014864 <_ZSt17__throw_bad_allocv+0x18>)
 801485a:	4903      	ldr	r1, [pc, #12]	; (8014868 <_ZSt17__throw_bad_allocv+0x1c>)
 801485c:	f000 fa26 	bl	8014cac <__cxa_throw>
 8014860:	0801b698 	.word	0x0801b698
 8014864:	080149a5 	.word	0x080149a5
 8014868:	0801b6a4 	.word	0x0801b6a4

0801486c <_ZSt19__throw_logic_errorPKc>:
 801486c:	b538      	push	{r3, r4, r5, lr}
 801486e:	4605      	mov	r5, r0
 8014870:	2008      	movs	r0, #8
 8014872:	f000 f9bd 	bl	8014bf0 <__cxa_allocate_exception>
 8014876:	4629      	mov	r1, r5
 8014878:	4604      	mov	r4, r0
 801487a:	f000 f855 	bl	8014928 <_ZNSt11logic_errorC1EPKc>
 801487e:	4620      	mov	r0, r4
 8014880:	4a04      	ldr	r2, [pc, #16]	; (8014894 <_ZSt19__throw_logic_errorPKc+0x28>)
 8014882:	4905      	ldr	r1, [pc, #20]	; (8014898 <_ZSt19__throw_logic_errorPKc+0x2c>)
 8014884:	f000 fa12 	bl	8014cac <__cxa_throw>
 8014888:	4620      	mov	r0, r4
 801488a:	f000 f9c9 	bl	8014c20 <__cxa_free_exception>
 801488e:	f7ff f9bb 	bl	8013c08 <__cxa_end_cleanup>
 8014892:	bf00      	nop
 8014894:	08014ecd 	.word	0x08014ecd
 8014898:	0801b764 	.word	0x0801b764

0801489c <_ZSt20__throw_length_errorPKc>:
 801489c:	b538      	push	{r3, r4, r5, lr}
 801489e:	4605      	mov	r5, r0
 80148a0:	2008      	movs	r0, #8
 80148a2:	f000 f9a5 	bl	8014bf0 <__cxa_allocate_exception>
 80148a6:	4629      	mov	r1, r5
 80148a8:	4604      	mov	r4, r0
 80148aa:	f000 f851 	bl	8014950 <_ZNSt12length_errorC1EPKc>
 80148ae:	4620      	mov	r0, r4
 80148b0:	4a04      	ldr	r2, [pc, #16]	; (80148c4 <_ZSt20__throw_length_errorPKc+0x28>)
 80148b2:	4905      	ldr	r1, [pc, #20]	; (80148c8 <_ZSt20__throw_length_errorPKc+0x2c>)
 80148b4:	f000 f9fa 	bl	8014cac <__cxa_throw>
 80148b8:	4620      	mov	r0, r4
 80148ba:	f000 f9b1 	bl	8014c20 <__cxa_free_exception>
 80148be:	f7ff f9a3 	bl	8013c08 <__cxa_end_cleanup>
 80148c2:	bf00      	nop
 80148c4:	08014f21 	.word	0x08014f21
 80148c8:	0801b7dc 	.word	0x0801b7dc

080148cc <_ZSt24__throw_out_of_range_fmtPKcz>:
 80148cc:	b40f      	push	{r0, r1, r2, r3}
 80148ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148d0:	b083      	sub	sp, #12
 80148d2:	af00      	add	r7, sp, #0
 80148d4:	f107 0420 	add.w	r4, r7, #32
 80148d8:	f854 6b04 	ldr.w	r6, [r4], #4
 80148dc:	4630      	mov	r0, r6
 80148de:	f7f3 fe29 	bl	8008534 <strlen>
 80148e2:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80148e6:	f023 0307 	bic.w	r3, r3, #7
 80148ea:	ebad 0d03 	sub.w	sp, sp, r3
 80148ee:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80148f2:	4623      	mov	r3, r4
 80148f4:	4632      	mov	r2, r6
 80148f6:	4668      	mov	r0, sp
 80148f8:	607c      	str	r4, [r7, #4]
 80148fa:	f000 fcdf 	bl	80152bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80148fe:	2008      	movs	r0, #8
 8014900:	f000 f976 	bl	8014bf0 <__cxa_allocate_exception>
 8014904:	4669      	mov	r1, sp
 8014906:	4604      	mov	r4, r0
 8014908:	f000 f82c 	bl	8014964 <_ZNSt12out_of_rangeC1EPKc>
 801490c:	4620      	mov	r0, r4
 801490e:	4a04      	ldr	r2, [pc, #16]	; (8014920 <_ZSt24__throw_out_of_range_fmtPKcz+0x54>)
 8014910:	4904      	ldr	r1, [pc, #16]	; (8014924 <_ZSt24__throw_out_of_range_fmtPKcz+0x58>)
 8014912:	f000 f9cb 	bl	8014cac <__cxa_throw>
 8014916:	4620      	mov	r0, r4
 8014918:	f000 f982 	bl	8014c20 <__cxa_free_exception>
 801491c:	f7ff f974 	bl	8013c08 <__cxa_end_cleanup>
 8014920:	08014f51 	.word	0x08014f51
 8014924:	0801b7bc 	.word	0x0801b7bc

08014928 <_ZNSt11logic_errorC1EPKc>:
 8014928:	b510      	push	{r4, lr}
 801492a:	4b08      	ldr	r3, [pc, #32]	; (801494c <_ZNSt11logic_errorC1EPKc+0x24>)
 801492c:	b082      	sub	sp, #8
 801492e:	4604      	mov	r4, r0
 8014930:	aa01      	add	r2, sp, #4
 8014932:	f840 3b04 	str.w	r3, [r0], #4
 8014936:	f000 fc5f 	bl	80151f8 <_ZNSsC1EPKcRKSaIcE>
 801493a:	4620      	mov	r0, r4
 801493c:	b002      	add	sp, #8
 801493e:	bd10      	pop	{r4, pc}
 8014940:	4620      	mov	r0, r4
 8014942:	f7ff fdef 	bl	8014524 <_ZNSt9exceptionD1Ev>
 8014946:	f7ff f95f 	bl	8013c08 <__cxa_end_cleanup>
 801494a:	bf00      	nop
 801494c:	0801b7b0 	.word	0x0801b7b0

08014950 <_ZNSt12length_errorC1EPKc>:
 8014950:	b510      	push	{r4, lr}
 8014952:	4604      	mov	r4, r0
 8014954:	f7ff ffe8 	bl	8014928 <_ZNSt11logic_errorC1EPKc>
 8014958:	4b01      	ldr	r3, [pc, #4]	; (8014960 <_ZNSt12length_errorC1EPKc+0x10>)
 801495a:	6023      	str	r3, [r4, #0]
 801495c:	4620      	mov	r0, r4
 801495e:	bd10      	pop	{r4, pc}
 8014960:	0801b7f0 	.word	0x0801b7f0

08014964 <_ZNSt12out_of_rangeC1EPKc>:
 8014964:	b510      	push	{r4, lr}
 8014966:	4604      	mov	r4, r0
 8014968:	f7ff ffde 	bl	8014928 <_ZNSt11logic_errorC1EPKc>
 801496c:	4b01      	ldr	r3, [pc, #4]	; (8014974 <_ZNSt12out_of_rangeC1EPKc+0x10>)
 801496e:	6023      	str	r3, [r4, #0]
 8014970:	4620      	mov	r0, r4
 8014972:	bd10      	pop	{r4, pc}
 8014974:	0801b79c 	.word	0x0801b79c

08014978 <_ZNSt12__cow_stringC1EPKcj>:
 8014978:	b510      	push	{r4, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	ab01      	add	r3, sp, #4
 801497e:	4604      	mov	r4, r0
 8014980:	f000 fc2c 	bl	80151dc <_ZNSsC1EPKcjRKSaIcE>
 8014984:	4620      	mov	r0, r4
 8014986:	b002      	add	sp, #8
 8014988:	bd10      	pop	{r4, pc}
 801498a:	bf00      	nop

0801498c <_ZSt15get_new_handlerv>:
 801498c:	4b02      	ldr	r3, [pc, #8]	; (8014998 <_ZSt15get_new_handlerv+0xc>)
 801498e:	6818      	ldr	r0, [r3, #0]
 8014990:	f3bf 8f5f 	dmb	sy
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop
 8014998:	2000405c 	.word	0x2000405c

0801499c <_ZNKSt9bad_alloc4whatEv>:
 801499c:	4800      	ldr	r0, [pc, #0]	; (80149a0 <_ZNKSt9bad_alloc4whatEv+0x4>)
 801499e:	4770      	bx	lr
 80149a0:	0801b6b0 	.word	0x0801b6b0

080149a4 <_ZNSt9bad_allocD1Ev>:
 80149a4:	b510      	push	{r4, lr}
 80149a6:	4b03      	ldr	r3, [pc, #12]	; (80149b4 <_ZNSt9bad_allocD1Ev+0x10>)
 80149a8:	6003      	str	r3, [r0, #0]
 80149aa:	4604      	mov	r4, r0
 80149ac:	f7ff fdba 	bl	8014524 <_ZNSt9exceptionD1Ev>
 80149b0:	4620      	mov	r0, r4
 80149b2:	bd10      	pop	{r4, pc}
 80149b4:	0801b698 	.word	0x0801b698

080149b8 <_ZNSt9bad_allocD0Ev>:
 80149b8:	b510      	push	{r4, lr}
 80149ba:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <_ZNSt9bad_allocD0Ev+0x18>)
 80149bc:	6003      	str	r3, [r0, #0]
 80149be:	4604      	mov	r4, r0
 80149c0:	f7ff fdb0 	bl	8014524 <_ZNSt9exceptionD1Ev>
 80149c4:	4620      	mov	r0, r4
 80149c6:	f7ff ff3f 	bl	8014848 <_ZdlPv>
 80149ca:	4620      	mov	r0, r4
 80149cc:	bd10      	pop	{r4, pc}
 80149ce:	bf00      	nop
 80149d0:	0801b698 	.word	0x0801b698

080149d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80149d4:	7803      	ldrb	r3, [r0, #0]
 80149d6:	2b47      	cmp	r3, #71	; 0x47
 80149d8:	d001      	beq.n	80149de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 80149da:	2000      	movs	r0, #0
 80149dc:	4770      	bx	lr
 80149de:	7843      	ldrb	r3, [r0, #1]
 80149e0:	2b4e      	cmp	r3, #78	; 0x4e
 80149e2:	d1fa      	bne.n	80149da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80149e4:	7883      	ldrb	r3, [r0, #2]
 80149e6:	2b55      	cmp	r3, #85	; 0x55
 80149e8:	d1f7      	bne.n	80149da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80149ea:	78c3      	ldrb	r3, [r0, #3]
 80149ec:	2b43      	cmp	r3, #67	; 0x43
 80149ee:	d1f4      	bne.n	80149da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80149f0:	7903      	ldrb	r3, [r0, #4]
 80149f2:	2b43      	cmp	r3, #67	; 0x43
 80149f4:	d1f1      	bne.n	80149da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80149f6:	7943      	ldrb	r3, [r0, #5]
 80149f8:	2b2b      	cmp	r3, #43	; 0x2b
 80149fa:	d1ee      	bne.n	80149da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 80149fc:	7983      	ldrb	r3, [r0, #6]
 80149fe:	2b2b      	cmp	r3, #43	; 0x2b
 8014a00:	d1eb      	bne.n	80149da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 8014a02:	79c0      	ldrb	r0, [r0, #7]
 8014a04:	2801      	cmp	r0, #1
 8014a06:	bf8c      	ite	hi
 8014a08:	2000      	movhi	r0, #0
 8014a0a:	2001      	movls	r0, #1
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop

08014a10 <__cxa_call_terminate>:
 8014a10:	b510      	push	{r4, lr}
 8014a12:	b130      	cbz	r0, 8014a22 <__cxa_call_terminate+0x12>
 8014a14:	4604      	mov	r4, r0
 8014a16:	f7ff fd9b 	bl	8014550 <__cxa_begin_catch>
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	f7ff ffda 	bl	80149d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8014a20:	b908      	cbnz	r0, 8014a26 <__cxa_call_terminate+0x16>
 8014a22:	f7ff fe35 	bl	8014690 <_ZSt9terminatev>
 8014a26:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8014a2a:	f7ff fe1d 	bl	8014668 <_ZN10__cxxabiv111__terminateEPFvvE>
 8014a2e:	bf00      	nop

08014a30 <__cxa_call_unexpected>:
 8014a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a34:	b085      	sub	sp, #20
 8014a36:	4602      	mov	r2, r0
 8014a38:	f7ff ffcc 	bl	80149d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8014a3c:	b160      	cbz	r0, 8014a58 <__cxa_call_unexpected+0x28>
 8014a3e:	f852 8c18 	ldr.w	r8, [r2, #-24]
 8014a42:	f852 5c14 	ldr.w	r5, [r2, #-20]
 8014a46:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8014a48:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8014a4a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8014a4c:	4610      	mov	r0, r2
 8014a4e:	f7ff fd7f 	bl	8014550 <__cxa_begin_catch>
 8014a52:	4640      	mov	r0, r8
 8014a54:	f7ff fe26 	bl	80146a4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8014a58:	4610      	mov	r0, r2
 8014a5a:	f7ff fd79 	bl	8014550 <__cxa_begin_catch>
 8014a5e:	f7ff fe25 	bl	80146ac <_ZSt10unexpectedv>
 8014a62:	f7ff fd75 	bl	8014550 <__cxa_begin_catch>
 8014a66:	f7ff fe13 	bl	8014690 <_ZSt9terminatev>
 8014a6a:	f7ff fd71 	bl	8014550 <__cxa_begin_catch>
 8014a6e:	f7ff fd67 	bl	8014540 <__cxa_get_globals_fast>
 8014a72:	f8d0 8000 	ldr.w	r8, [r0]
 8014a76:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
 8014a7a:	2b01      	cmp	r3, #1
 8014a7c:	d038      	beq.n	8014af0 <__cxa_call_unexpected+0xc0>
 8014a7e:	f108 0378 	add.w	r3, r8, #120	; 0x78
 8014a82:	f10d 0a10 	add.w	sl, sp, #16
 8014a86:	f04f 0900 	mov.w	r9, #0
 8014a8a:	f84a 3d08 	str.w	r3, [sl, #-8]!
 8014a8e:	f027 0303 	bic.w	r3, r7, #3
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	46cb      	mov	fp, r9
 8014a96:	45b3      	cmp	fp, r6
 8014a98:	da1e      	bge.n	8014ad8 <__cxa_call_unexpected+0xa8>
 8014a9a:	6827      	ldr	r7, [r4, #0]
 8014a9c:	b107      	cbz	r7, 8014aa0 <__cxa_call_unexpected+0x70>
 8014a9e:	4427      	add	r7, r4
 8014aa0:	4653      	mov	r3, sl
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	4639      	mov	r1, r7
 8014aa6:	f108 0020 	add.w	r0, r8, #32
 8014aaa:	f7ff f8b3 	bl	8013c14 <__cxa_type_match>
 8014aae:	bb28      	cbnz	r0, 8014afc <__cxa_call_unexpected+0xcc>
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	4916      	ldr	r1, [pc, #88]	; (8014b0c <__cxa_call_unexpected+0xdc>)
 8014ab4:	691b      	ldr	r3, [r3, #16]
 8014ab6:	9301      	str	r3, [sp, #4]
 8014ab8:	aa04      	add	r2, sp, #16
 8014aba:	2301      	movs	r3, #1
 8014abc:	f842 0d04 	str.w	r0, [r2, #-4]!
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	9f01      	ldr	r7, [sp, #4]
 8014ac4:	47b8      	blx	r7
 8014ac6:	9b00      	ldr	r3, [sp, #0]
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	bf18      	it	ne
 8014acc:	f04f 0901 	movne.w	r9, #1
 8014ad0:	f10b 0b01 	add.w	fp, fp, #1
 8014ad4:	441c      	add	r4, r3
 8014ad6:	e7de      	b.n	8014a96 <__cxa_call_unexpected+0x66>
 8014ad8:	f1b9 0f00 	cmp.w	r9, #0
 8014adc:	d00b      	beq.n	8014af6 <__cxa_call_unexpected+0xc6>
 8014ade:	2004      	movs	r0, #4
 8014ae0:	f000 f886 	bl	8014bf0 <__cxa_allocate_exception>
 8014ae4:	4b0a      	ldr	r3, [pc, #40]	; (8014b10 <__cxa_call_unexpected+0xe0>)
 8014ae6:	6003      	str	r3, [r0, #0]
 8014ae8:	4a0a      	ldr	r2, [pc, #40]	; (8014b14 <__cxa_call_unexpected+0xe4>)
 8014aea:	4908      	ldr	r1, [pc, #32]	; (8014b0c <__cxa_call_unexpected+0xdc>)
 8014aec:	f000 f8de 	bl	8014cac <__cxa_throw>
 8014af0:	f8d8 3000 	ldr.w	r3, [r8]
 8014af4:	e7c5      	b.n	8014a82 <__cxa_call_unexpected+0x52>
 8014af6:	4628      	mov	r0, r5
 8014af8:	f7ff fdb6 	bl	8014668 <_ZN10__cxxabiv111__terminateEPFvvE>
 8014afc:	f000 f914 	bl	8014d28 <__cxa_rethrow>
 8014b00:	f7ff fd6c 	bl	80145dc <__cxa_end_catch>
 8014b04:	f7ff fd6a 	bl	80145dc <__cxa_end_catch>
 8014b08:	f7ff f87e 	bl	8013c08 <__cxa_end_cleanup>
 8014b0c:	0801b60c 	.word	0x0801b60c
 8014b10:	0801b5dc 	.word	0x0801b5dc
 8014b14:	08014529 	.word	0x08014529

08014b18 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 8014b18:	b4f0      	push	{r4, r5, r6, r7}
 8014b1a:	4c1b      	ldr	r4, [pc, #108]	; (8014b88 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
 8014b1c:	f850 7c08 	ldr.w	r7, [r0, #-8]
 8014b20:	6861      	ldr	r1, [r4, #4]
 8014b22:	f1a0 0608 	sub.w	r6, r0, #8
 8014b26:	b1c9      	cbz	r1, 8014b5c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 8014b28:	19f5      	adds	r5, r6, r7
 8014b2a:	42a9      	cmp	r1, r5
 8014b2c:	d01b      	beq.n	8014b66 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 8014b2e:	684a      	ldr	r2, [r1, #4]
 8014b30:	b32a      	cbz	r2, 8014b7e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 8014b32:	4295      	cmp	r5, r2
 8014b34:	d303      	bcc.n	8014b3e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
 8014b36:	e022      	b.n	8014b7e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 8014b38:	429d      	cmp	r5, r3
 8014b3a:	d205      	bcs.n	8014b48 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	6853      	ldr	r3, [r2, #4]
 8014b40:	1d0c      	adds	r4, r1, #4
 8014b42:	4611      	mov	r1, r2
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d1f7      	bne.n	8014b38 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 8014b48:	6811      	ldr	r1, [r2, #0]
 8014b4a:	1855      	adds	r5, r2, r1
 8014b4c:	42ae      	cmp	r6, r5
 8014b4e:	d013      	beq.n	8014b78 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 8014b50:	f840 3c04 	str.w	r3, [r0, #-4]
 8014b54:	6823      	ldr	r3, [r4, #0]
 8014b56:	605e      	str	r6, [r3, #4]
 8014b58:	bcf0      	pop	{r4, r5, r6, r7}
 8014b5a:	4770      	bx	lr
 8014b5c:	f840 1c04 	str.w	r1, [r0, #-4]
 8014b60:	6066      	str	r6, [r4, #4]
 8014b62:	bcf0      	pop	{r4, r5, r6, r7}
 8014b64:	4770      	bx	lr
 8014b66:	680b      	ldr	r3, [r1, #0]
 8014b68:	684a      	ldr	r2, [r1, #4]
 8014b6a:	f840 2c04 	str.w	r2, [r0, #-4]
 8014b6e:	441f      	add	r7, r3
 8014b70:	f840 7c08 	str.w	r7, [r0, #-8]
 8014b74:	6066      	str	r6, [r4, #4]
 8014b76:	e7ef      	b.n	8014b58 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 8014b78:	4439      	add	r1, r7
 8014b7a:	6011      	str	r1, [r2, #0]
 8014b7c:	e7ec      	b.n	8014b58 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 8014b7e:	4613      	mov	r3, r2
 8014b80:	3404      	adds	r4, #4
 8014b82:	460a      	mov	r2, r1
 8014b84:	e7e0      	b.n	8014b48 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 8014b86:	bf00      	nop
 8014b88:	20004060 	.word	0x20004060

08014b8c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 8014b8c:	b430      	push	{r4, r5}
 8014b8e:	4c17      	ldr	r4, [pc, #92]	; (8014bec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x60>)
 8014b90:	f100 0308 	add.w	r3, r0, #8
 8014b94:	2b07      	cmp	r3, #7
 8014b96:	6863      	ldr	r3, [r4, #4]
 8014b98:	bf86      	itte	hi
 8014b9a:	f100 010f 	addhi.w	r1, r0, #15
 8014b9e:	f021 0107 	bichi.w	r1, r1, #7
 8014ba2:	2108      	movls	r1, #8
 8014ba4:	b1eb      	cbz	r3, 8014be2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x56>
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	4291      	cmp	r1, r2
 8014baa:	d804      	bhi.n	8014bb6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2a>
 8014bac:	e01b      	b.n	8014be6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5a>
 8014bae:	6802      	ldr	r2, [r0, #0]
 8014bb0:	428a      	cmp	r2, r1
 8014bb2:	d205      	bcs.n	8014bc0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	6858      	ldr	r0, [r3, #4]
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d1f8      	bne.n	8014bae <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x22>
 8014bbc:	bc30      	pop	{r4, r5}
 8014bbe:	4770      	bx	lr
 8014bc0:	3304      	adds	r3, #4
 8014bc2:	1a52      	subs	r2, r2, r1
 8014bc4:	2a07      	cmp	r2, #7
 8014bc6:	d909      	bls.n	8014bdc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 8014bc8:	1844      	adds	r4, r0, r1
 8014bca:	6845      	ldr	r5, [r0, #4]
 8014bcc:	6065      	str	r5, [r4, #4]
 8014bce:	5042      	str	r2, [r0, r1]
 8014bd0:	6818      	ldr	r0, [r3, #0]
 8014bd2:	6001      	str	r1, [r0, #0]
 8014bd4:	601c      	str	r4, [r3, #0]
 8014bd6:	3008      	adds	r0, #8
 8014bd8:	bc30      	pop	{r4, r5}
 8014bda:	4770      	bx	lr
 8014bdc:	6842      	ldr	r2, [r0, #4]
 8014bde:	601a      	str	r2, [r3, #0]
 8014be0:	e7f9      	b.n	8014bd6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4a>
 8014be2:	4618      	mov	r0, r3
 8014be4:	e7ea      	b.n	8014bbc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x30>
 8014be6:	4618      	mov	r0, r3
 8014be8:	1d23      	adds	r3, r4, #4
 8014bea:	e7ea      	b.n	8014bc2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x36>
 8014bec:	20004060 	.word	0x20004060

08014bf0 <__cxa_allocate_exception>:
 8014bf0:	b538      	push	{r3, r4, r5, lr}
 8014bf2:	f100 0580 	add.w	r5, r0, #128	; 0x80
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	f001 ff10 	bl	8016a1c <malloc>
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	b138      	cbz	r0, 8014c10 <__cxa_allocate_exception+0x20>
 8014c00:	2280      	movs	r2, #128	; 0x80
 8014c02:	2100      	movs	r1, #0
 8014c04:	4620      	mov	r0, r4
 8014c06:	f002 f96e 	bl	8016ee6 <memset>
 8014c0a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8014c0e:	bd38      	pop	{r3, r4, r5, pc}
 8014c10:	4628      	mov	r0, r5
 8014c12:	f7ff ffbb 	bl	8014b8c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 8014c16:	4604      	mov	r4, r0
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	d1f1      	bne.n	8014c00 <__cxa_allocate_exception+0x10>
 8014c1c:	f7ff fd38 	bl	8014690 <_ZSt9terminatev>

08014c20 <__cxa_free_exception>:
 8014c20:	4a06      	ldr	r2, [pc, #24]	; (8014c3c <__cxa_free_exception+0x1c>)
 8014c22:	6893      	ldr	r3, [r2, #8]
 8014c24:	3880      	subs	r0, #128	; 0x80
 8014c26:	4298      	cmp	r0, r3
 8014c28:	d905      	bls.n	8014c36 <__cxa_free_exception+0x16>
 8014c2a:	68d2      	ldr	r2, [r2, #12]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	4298      	cmp	r0, r3
 8014c30:	d201      	bcs.n	8014c36 <__cxa_free_exception+0x16>
 8014c32:	f7ff bf71 	b.w	8014b18 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 8014c36:	f001 bef9 	b.w	8016a2c <free>
 8014c3a:	bf00      	nop
 8014c3c:	20004060 	.word	0x20004060

08014c40 <_GLOBAL__sub_I___cxa_allocate_exception>:
 8014c40:	b538      	push	{r3, r4, r5, lr}
 8014c42:	4c08      	ldr	r4, [pc, #32]	; (8014c64 <_GLOBAL__sub_I___cxa_allocate_exception+0x24>)
 8014c44:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8014c48:	4628      	mov	r0, r5
 8014c4a:	60e5      	str	r5, [r4, #12]
 8014c4c:	f001 fee6 	bl	8016a1c <malloc>
 8014c50:	60a0      	str	r0, [r4, #8]
 8014c52:	b120      	cbz	r0, 8014c5e <_GLOBAL__sub_I___cxa_allocate_exception+0x1e>
 8014c54:	2300      	movs	r3, #0
 8014c56:	6060      	str	r0, [r4, #4]
 8014c58:	6005      	str	r5, [r0, #0]
 8014c5a:	6043      	str	r3, [r0, #4]
 8014c5c:	bd38      	pop	{r3, r4, r5, pc}
 8014c5e:	60e0      	str	r0, [r4, #12]
 8014c60:	6060      	str	r0, [r4, #4]
 8014c62:	bd38      	pop	{r3, r4, r5, pc}
 8014c64:	20004060 	.word	0x20004060

08014c68 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8014c68:	2801      	cmp	r0, #1
 8014c6a:	b510      	push	{r4, lr}
 8014c6c:	d81a      	bhi.n	8014ca4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 8014c6e:	f3bf 8f5f 	dmb	sy
 8014c72:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8014c76:	e853 2f00 	ldrex	r2, [r3]
 8014c7a:	3a01      	subs	r2, #1
 8014c7c:	e843 2000 	strex	r0, r2, [r3]
 8014c80:	2800      	cmp	r0, #0
 8014c82:	d1f8      	bne.n	8014c76 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8014c84:	f3bf 8f5f 	dmb	sy
 8014c88:	b95a      	cbnz	r2, 8014ca2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8014c8a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8014c8e:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8014c92:	b10b      	cbz	r3, 8014c98 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 8014c94:	4620      	mov	r0, r4
 8014c96:	4798      	blx	r3
 8014c98:	4620      	mov	r0, r4
 8014c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c9e:	f7ff bfbf 	b.w	8014c20 <__cxa_free_exception>
 8014ca2:	bd10      	pop	{r4, pc}
 8014ca4:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8014ca8:	f7ff fcde 	bl	8014668 <_ZN10__cxxabiv111__terminateEPFvvE>

08014cac <__cxa_throw>:
 8014cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cae:	4604      	mov	r4, r0
 8014cb0:	460f      	mov	r7, r1
 8014cb2:	4616      	mov	r6, r2
 8014cb4:	f7ff fc48 	bl	8014548 <__cxa_get_globals>
 8014cb8:	6843      	ldr	r3, [r0, #4]
 8014cba:	2501      	movs	r5, #1
 8014cbc:	442b      	add	r3, r5
 8014cbe:	6043      	str	r3, [r0, #4]
 8014cc0:	f844 7c78 	str.w	r7, [r4, #-120]
 8014cc4:	f844 6c74 	str.w	r6, [r4, #-116]
 8014cc8:	f844 5c80 	str.w	r5, [r4, #-128]
 8014ccc:	f7ff fd00 	bl	80146d0 <_ZSt14get_unexpectedv>
 8014cd0:	f844 0c70 	str.w	r0, [r4, #-112]
 8014cd4:	f7ff fcf4 	bl	80146c0 <_ZSt13get_terminatev>
 8014cd8:	2347      	movs	r3, #71	; 0x47
 8014cda:	2243      	movs	r2, #67	; 0x43
 8014cdc:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 8014ce0:	4910      	ldr	r1, [pc, #64]	; (8014d24 <__cxa_throw+0x78>)
 8014ce2:	f804 3c58 	strb.w	r3, [r4, #-88]
 8014ce6:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 8014cea:	232b      	movs	r3, #43	; 0x2b
 8014cec:	2755      	movs	r7, #85	; 0x55
 8014cee:	2600      	movs	r6, #0
 8014cf0:	f844 0c6c 	str.w	r0, [r4, #-108]
 8014cf4:	f804 ec57 	strb.w	lr, [r4, #-87]
 8014cf8:	f844 1c50 	str.w	r1, [r4, #-80]
 8014cfc:	f804 2c55 	strb.w	r2, [r4, #-85]
 8014d00:	f804 2c54 	strb.w	r2, [r4, #-84]
 8014d04:	f804 3c53 	strb.w	r3, [r4, #-83]
 8014d08:	f804 3c52 	strb.w	r3, [r4, #-82]
 8014d0c:	f804 7c56 	strb.w	r7, [r4, #-86]
 8014d10:	f804 6c51 	strb.w	r6, [r4, #-81]
 8014d14:	4628      	mov	r0, r5
 8014d16:	f7f4 ffe9 	bl	8009cec <_Unwind_RaiseException>
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f7ff fc18 	bl	8014550 <__cxa_begin_catch>
 8014d20:	f7ff fcb6 	bl	8014690 <_ZSt9terminatev>
 8014d24:	08014c69 	.word	0x08014c69

08014d28 <__cxa_rethrow>:
 8014d28:	b510      	push	{r4, lr}
 8014d2a:	f7ff fc0d 	bl	8014548 <__cxa_get_globals>
 8014d2e:	6842      	ldr	r2, [r0, #4]
 8014d30:	6803      	ldr	r3, [r0, #0]
 8014d32:	3201      	adds	r2, #1
 8014d34:	6042      	str	r2, [r0, #4]
 8014d36:	b16b      	cbz	r3, 8014d54 <__cxa_rethrow+0x2c>
 8014d38:	f893 2020 	ldrb.w	r2, [r3, #32]
 8014d3c:	2a47      	cmp	r2, #71	; 0x47
 8014d3e:	d00b      	beq.n	8014d58 <__cxa_rethrow+0x30>
 8014d40:	2200      	movs	r2, #0
 8014d42:	6002      	str	r2, [r0, #0]
 8014d44:	f103 0420 	add.w	r4, r3, #32
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f7f4 fff3 	bl	8009d34 <_Unwind_Resume_or_Rethrow>
 8014d4e:	4620      	mov	r0, r4
 8014d50:	f7ff fbfe 	bl	8014550 <__cxa_begin_catch>
 8014d54:	f7ff fc9c 	bl	8014690 <_ZSt9terminatev>
 8014d58:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8014d5c:	2a4e      	cmp	r2, #78	; 0x4e
 8014d5e:	d1ef      	bne.n	8014d40 <__cxa_rethrow+0x18>
 8014d60:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8014d64:	2a55      	cmp	r2, #85	; 0x55
 8014d66:	d1eb      	bne.n	8014d40 <__cxa_rethrow+0x18>
 8014d68:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8014d6c:	2a43      	cmp	r2, #67	; 0x43
 8014d6e:	d1e7      	bne.n	8014d40 <__cxa_rethrow+0x18>
 8014d70:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8014d74:	2a43      	cmp	r2, #67	; 0x43
 8014d76:	d1e3      	bne.n	8014d40 <__cxa_rethrow+0x18>
 8014d78:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8014d7c:	2a2b      	cmp	r2, #43	; 0x2b
 8014d7e:	d1df      	bne.n	8014d40 <__cxa_rethrow+0x18>
 8014d80:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8014d84:	2a2b      	cmp	r2, #43	; 0x2b
 8014d86:	d1db      	bne.n	8014d40 <__cxa_rethrow+0x18>
 8014d88:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8014d8c:	2a01      	cmp	r2, #1
 8014d8e:	d8d7      	bhi.n	8014d40 <__cxa_rethrow+0x18>
 8014d90:	695a      	ldr	r2, [r3, #20]
 8014d92:	4252      	negs	r2, r2
 8014d94:	615a      	str	r2, [r3, #20]
 8014d96:	e7d5      	b.n	8014d44 <__cxa_rethrow+0x1c>

08014d98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 8014d98:	b570      	push	{r4, r5, r6, lr}
 8014d9a:	4b3d      	ldr	r3, [pc, #244]	; (8014e90 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 8014d9c:	781a      	ldrb	r2, [r3, #0]
 8014d9e:	b082      	sub	sp, #8
 8014da0:	2a00      	cmp	r2, #0
 8014da2:	d136      	bne.n	8014e12 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7a>
 8014da4:	2401      	movs	r4, #1
 8014da6:	701c      	strb	r4, [r3, #0]
 8014da8:	f000 f880 	bl	8014eac <__cxa_current_exception_type>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	d05c      	beq.n	8014e6a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd2>
 8014db0:	6840      	ldr	r0, [r0, #4]
 8014db2:	4d38      	ldr	r5, [pc, #224]	; (8014e94 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8014db4:	7803      	ldrb	r3, [r0, #0]
 8014db6:	2b2a      	cmp	r3, #42	; 0x2a
 8014db8:	ab02      	add	r3, sp, #8
 8014dba:	f04f 32ff 	mov.w	r2, #4294967295
 8014dbe:	bf0c      	ite	eq
 8014dc0:	1904      	addeq	r4, r0, r4
 8014dc2:	4604      	movne	r4, r0
 8014dc4:	f843 2d04 	str.w	r2, [r3, #-4]!
 8014dc8:	2200      	movs	r2, #0
 8014dca:	4611      	mov	r1, r2
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f7f3 fae3 	bl	8008398 <__cxa_demangle>
 8014dd2:	682b      	ldr	r3, [r5, #0]
 8014dd4:	4606      	mov	r6, r0
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	482f      	ldr	r0, [pc, #188]	; (8014e98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 8014dda:	2230      	movs	r2, #48	; 0x30
 8014ddc:	2101      	movs	r1, #1
 8014dde:	f001 fd7d 	bl	80168dc <fwrite>
 8014de2:	9b01      	ldr	r3, [sp, #4]
 8014de4:	b17b      	cbz	r3, 8014e06 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
 8014de6:	682b      	ldr	r3, [r5, #0]
 8014de8:	4620      	mov	r0, r4
 8014dea:	68d9      	ldr	r1, [r3, #12]
 8014dec:	f001 fbce 	bl	801658c <fputs>
 8014df0:	682b      	ldr	r3, [r5, #0]
 8014df2:	482a      	ldr	r0, [pc, #168]	; (8014e9c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	2202      	movs	r2, #2
 8014df8:	2101      	movs	r1, #1
 8014dfa:	f001 fd6f 	bl	80168dc <fwrite>
 8014dfe:	9b01      	ldr	r3, [sp, #4]
 8014e00:	b18b      	cbz	r3, 8014e26 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
 8014e02:	f7ff ff91 	bl	8014d28 <__cxa_rethrow>
 8014e06:	682b      	ldr	r3, [r5, #0]
 8014e08:	4630      	mov	r0, r6
 8014e0a:	68d9      	ldr	r1, [r3, #12]
 8014e0c:	f001 fbbe 	bl	801658c <fputs>
 8014e10:	e7ee      	b.n	8014df0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x58>
 8014e12:	4b20      	ldr	r3, [pc, #128]	; (8014e94 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8014e14:	4822      	ldr	r0, [pc, #136]	; (8014ea0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	221d      	movs	r2, #29
 8014e1a:	68db      	ldr	r3, [r3, #12]
 8014e1c:	2101      	movs	r1, #1
 8014e1e:	f001 fd5d 	bl	80168dc <fwrite>
 8014e22:	f001 fb3f 	bl	80164a4 <abort>
 8014e26:	4630      	mov	r0, r6
 8014e28:	f001 fe00 	bl	8016a2c <free>
 8014e2c:	e7e9      	b.n	8014e02 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6a>
 8014e2e:	2901      	cmp	r1, #1
 8014e30:	460c      	mov	r4, r1
 8014e32:	d127      	bne.n	8014e84 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xec>
 8014e34:	f7ff fb8c 	bl	8014550 <__cxa_begin_catch>
 8014e38:	6803      	ldr	r3, [r0, #0]
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	4798      	blx	r3
 8014e3e:	682b      	ldr	r3, [r5, #0]
 8014e40:	4606      	mov	r6, r0
 8014e42:	68db      	ldr	r3, [r3, #12]
 8014e44:	4817      	ldr	r0, [pc, #92]	; (8014ea4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 8014e46:	4621      	mov	r1, r4
 8014e48:	220b      	movs	r2, #11
 8014e4a:	f001 fd47 	bl	80168dc <fwrite>
 8014e4e:	682b      	ldr	r3, [r5, #0]
 8014e50:	4630      	mov	r0, r6
 8014e52:	68d9      	ldr	r1, [r3, #12]
 8014e54:	f001 fb9a 	bl	801658c <fputs>
 8014e58:	682b      	ldr	r3, [r5, #0]
 8014e5a:	200a      	movs	r0, #10
 8014e5c:	68d9      	ldr	r1, [r3, #12]
 8014e5e:	f001 fb53 	bl	8016508 <fputc>
 8014e62:	f7ff fbbb 	bl	80145dc <__cxa_end_catch>
 8014e66:	f001 fb1d 	bl	80164a4 <abort>
 8014e6a:	4b0a      	ldr	r3, [pc, #40]	; (8014e94 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 8014e6c:	480e      	ldr	r0, [pc, #56]	; (8014ea8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4621      	mov	r1, r4
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	222d      	movs	r2, #45	; 0x2d
 8014e76:	f001 fd31 	bl	80168dc <fwrite>
 8014e7a:	e7f4      	b.n	8014e66 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 8014e7c:	f7ff fbae 	bl	80145dc <__cxa_end_catch>
 8014e80:	f7fe fec2 	bl	8013c08 <__cxa_end_cleanup>
 8014e84:	f7ff fb64 	bl	8014550 <__cxa_begin_catch>
 8014e88:	f7ff fba8 	bl	80145dc <__cxa_end_catch>
 8014e8c:	e7eb      	b.n	8014e66 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xce>
 8014e8e:	bf00      	nop
 8014e90:	20004070 	.word	0x20004070
 8014e94:	2000010c 	.word	0x2000010c
 8014e98:	0801b6f0 	.word	0x0801b6f0
 8014e9c:	0801b724 	.word	0x0801b724
 8014ea0:	0801b6d0 	.word	0x0801b6d0
 8014ea4:	0801b758 	.word	0x0801b758
 8014ea8:	0801b728 	.word	0x0801b728

08014eac <__cxa_current_exception_type>:
 8014eac:	b508      	push	{r3, lr}
 8014eae:	f7ff fb4b 	bl	8014548 <__cxa_get_globals>
 8014eb2:	6800      	ldr	r0, [r0, #0]
 8014eb4:	b130      	cbz	r0, 8014ec4 <__cxa_current_exception_type+0x18>
 8014eb6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8014eba:	2b01      	cmp	r3, #1
 8014ebc:	bf04      	itt	eq
 8014ebe:	6800      	ldreq	r0, [r0, #0]
 8014ec0:	3878      	subeq	r0, #120	; 0x78
 8014ec2:	6800      	ldr	r0, [r0, #0]
 8014ec4:	bd08      	pop	{r3, pc}
 8014ec6:	bf00      	nop

08014ec8 <_ZNKSt11logic_error4whatEv>:
 8014ec8:	6840      	ldr	r0, [r0, #4]
 8014eca:	4770      	bx	lr

08014ecc <_ZNSt11logic_errorD1Ev>:
 8014ecc:	b510      	push	{r4, lr}
 8014ece:	6843      	ldr	r3, [r0, #4]
 8014ed0:	4a0c      	ldr	r2, [pc, #48]	; (8014f04 <_ZNSt11logic_errorD1Ev+0x38>)
 8014ed2:	490d      	ldr	r1, [pc, #52]	; (8014f08 <_ZNSt11logic_errorD1Ev+0x3c>)
 8014ed4:	6001      	str	r1, [r0, #0]
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	f1a3 000c 	sub.w	r0, r3, #12
 8014edc:	4290      	cmp	r0, r2
 8014ede:	b082      	sub	sp, #8
 8014ee0:	d105      	bne.n	8014eee <_ZNSt11logic_errorD1Ev+0x22>
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	f7ff fb1e 	bl	8014524 <_ZNSt9exceptionD1Ev>
 8014ee8:	4620      	mov	r0, r4
 8014eea:	b002      	add	sp, #8
 8014eec:	bd10      	pop	{r4, pc}
 8014eee:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8014ef2:	1e51      	subs	r1, r2, #1
 8014ef4:	2a00      	cmp	r2, #0
 8014ef6:	f843 1c04 	str.w	r1, [r3, #-4]
 8014efa:	dcf2      	bgt.n	8014ee2 <_ZNSt11logic_errorD1Ev+0x16>
 8014efc:	a901      	add	r1, sp, #4
 8014efe:	f000 f959 	bl	80151b4 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8014f02:	e7ee      	b.n	8014ee2 <_ZNSt11logic_errorD1Ev+0x16>
 8014f04:	20004074 	.word	0x20004074
 8014f08:	0801b7b0 	.word	0x0801b7b0

08014f0c <_ZNSt11logic_errorD0Ev>:
 8014f0c:	b510      	push	{r4, lr}
 8014f0e:	4604      	mov	r4, r0
 8014f10:	f7ff ffdc 	bl	8014ecc <_ZNSt11logic_errorD1Ev>
 8014f14:	4620      	mov	r0, r4
 8014f16:	f7ff fc97 	bl	8014848 <_ZdlPv>
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	bd10      	pop	{r4, pc}
 8014f1e:	bf00      	nop

08014f20 <_ZNSt12length_errorD1Ev>:
 8014f20:	b510      	push	{r4, lr}
 8014f22:	4b03      	ldr	r3, [pc, #12]	; (8014f30 <_ZNSt12length_errorD1Ev+0x10>)
 8014f24:	6003      	str	r3, [r0, #0]
 8014f26:	4604      	mov	r4, r0
 8014f28:	f7ff ffd0 	bl	8014ecc <_ZNSt11logic_errorD1Ev>
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	bd10      	pop	{r4, pc}
 8014f30:	0801b7f0 	.word	0x0801b7f0

08014f34 <_ZNSt12length_errorD0Ev>:
 8014f34:	b510      	push	{r4, lr}
 8014f36:	4b05      	ldr	r3, [pc, #20]	; (8014f4c <_ZNSt12length_errorD0Ev+0x18>)
 8014f38:	6003      	str	r3, [r0, #0]
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	f7ff ffc6 	bl	8014ecc <_ZNSt11logic_errorD1Ev>
 8014f40:	4620      	mov	r0, r4
 8014f42:	f7ff fc81 	bl	8014848 <_ZdlPv>
 8014f46:	4620      	mov	r0, r4
 8014f48:	bd10      	pop	{r4, pc}
 8014f4a:	bf00      	nop
 8014f4c:	0801b7f0 	.word	0x0801b7f0

08014f50 <_ZNSt12out_of_rangeD1Ev>:
 8014f50:	b510      	push	{r4, lr}
 8014f52:	4b03      	ldr	r3, [pc, #12]	; (8014f60 <_ZNSt12out_of_rangeD1Ev+0x10>)
 8014f54:	6003      	str	r3, [r0, #0]
 8014f56:	4604      	mov	r4, r0
 8014f58:	f7ff ffb8 	bl	8014ecc <_ZNSt11logic_errorD1Ev>
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	bd10      	pop	{r4, pc}
 8014f60:	0801b79c 	.word	0x0801b79c

08014f64 <_ZNSt12out_of_rangeD0Ev>:
 8014f64:	b510      	push	{r4, lr}
 8014f66:	4b05      	ldr	r3, [pc, #20]	; (8014f7c <_ZNSt12out_of_rangeD0Ev+0x18>)
 8014f68:	6003      	str	r3, [r0, #0]
 8014f6a:	4604      	mov	r4, r0
 8014f6c:	f7ff ffae 	bl	8014ecc <_ZNSt11logic_errorD1Ev>
 8014f70:	4620      	mov	r0, r4
 8014f72:	f7ff fc69 	bl	8014848 <_ZdlPv>
 8014f76:	4620      	mov	r0, r4
 8014f78:	bd10      	pop	{r4, pc}
 8014f7a:	bf00      	nop
 8014f7c:	0801b79c 	.word	0x0801b79c

08014f80 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 8014f80:	4800      	ldr	r0, [pc, #0]	; (8014f84 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 8014f82:	4770      	bx	lr
 8014f84:	0801b8b8 	.word	0x0801b8b8

08014f88 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 8014f88:	4800      	ldr	r0, [pc, #0]	; (8014f8c <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 8014f8a:	4770      	bx	lr
 8014f8c:	0801b8c0 	.word	0x0801b8c0

08014f90 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 8014f90:	6002      	str	r2, [r0, #0]
 8014f92:	6041      	str	r1, [r0, #4]
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop

08014f98 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 8014f98:	684b      	ldr	r3, [r1, #4]
 8014f9a:	4283      	cmp	r3, r0
 8014f9c:	d001      	beq.n	8014fa2 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0xa>
 8014f9e:	2000      	movs	r0, #0
 8014fa0:	4770      	bx	lr
 8014fa2:	6808      	ldr	r0, [r1, #0]
 8014fa4:	1a80      	subs	r0, r0, r2
 8014fa6:	fab0 f080 	clz	r0, r0
 8014faa:	0940      	lsrs	r0, r0, #5
 8014fac:	4770      	bx	lr
 8014fae:	bf00      	nop

08014fb0 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop

08014fb4 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 8014fb4:	4770      	bx	lr
 8014fb6:	bf00      	nop

08014fb8 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 8014fb8:	b510      	push	{r4, lr}
 8014fba:	4604      	mov	r4, r0
 8014fbc:	f7ff fc44 	bl	8014848 <_ZdlPv>
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	bd10      	pop	{r4, pc}

08014fc4 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	f7ff fc3e 	bl	8014848 <_ZdlPv>
 8014fcc:	4620      	mov	r0, r4
 8014fce:	bd10      	pop	{r4, pc}

08014fd0 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8014fd0:	b510      	push	{r4, lr}
 8014fd2:	680b      	ldr	r3, [r1, #0]
 8014fd4:	b086      	sub	sp, #24
 8014fd6:	4604      	mov	r4, r0
 8014fd8:	691b      	ldr	r3, [r3, #16]
 8014fda:	4668      	mov	r0, sp
 8014fdc:	4798      	blx	r3
 8014fde:	4620      	mov	r0, r4
 8014fe0:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8014fe4:	f7ff fcc8 	bl	8014978 <_ZNSt12__cow_stringC1EPKcj>
 8014fe8:	9800      	ldr	r0, [sp, #0]
 8014fea:	ab02      	add	r3, sp, #8
 8014fec:	4298      	cmp	r0, r3
 8014fee:	d001      	beq.n	8014ff4 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x24>
 8014ff0:	f7ff fc2a 	bl	8014848 <_ZdlPv>
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	b006      	add	sp, #24
 8014ff8:	bd10      	pop	{r4, pc}
 8014ffa:	9800      	ldr	r0, [sp, #0]
 8014ffc:	ab02      	add	r3, sp, #8
 8014ffe:	4298      	cmp	r0, r3
 8015000:	d001      	beq.n	8015006 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x36>
 8015002:	f7ff fc21 	bl	8014848 <_ZdlPv>
 8015006:	f7fe fdff 	bl	8013c08 <__cxa_end_cleanup>
 801500a:	bf00      	nop

0801500c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17>:
 801500c:	b570      	push	{r4, r5, r6, lr}
 801500e:	4605      	mov	r5, r0
 8015010:	b082      	sub	sp, #8
 8015012:	b301      	cbz	r1, 8015056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x4a>
 8015014:	1a54      	subs	r4, r2, r1
 8015016:	2c0f      	cmp	r4, #15
 8015018:	460e      	mov	r6, r1
 801501a:	9401      	str	r4, [sp, #4]
 801501c:	d80a      	bhi.n	8015034 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x28>
 801501e:	682b      	ldr	r3, [r5, #0]
 8015020:	2c01      	cmp	r4, #1
 8015022:	4618      	mov	r0, r3
 8015024:	d013      	beq.n	801504e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x42>
 8015026:	b964      	cbnz	r4, 8015042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x36>
 8015028:	9a01      	ldr	r2, [sp, #4]
 801502a:	606a      	str	r2, [r5, #4]
 801502c:	2100      	movs	r1, #0
 801502e:	5499      	strb	r1, [r3, r2]
 8015030:	b002      	add	sp, #8
 8015032:	bd70      	pop	{r4, r5, r6, pc}
 8015034:	2200      	movs	r2, #0
 8015036:	a901      	add	r1, sp, #4
 8015038:	f000 f988 	bl	801534c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801503c:	9b01      	ldr	r3, [sp, #4]
 801503e:	6028      	str	r0, [r5, #0]
 8015040:	60ab      	str	r3, [r5, #8]
 8015042:	4622      	mov	r2, r4
 8015044:	4631      	mov	r1, r6
 8015046:	f001 ff28 	bl	8016e9a <memcpy>
 801504a:	682b      	ldr	r3, [r5, #0]
 801504c:	e7ec      	b.n	8015028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x1c>
 801504e:	7832      	ldrb	r2, [r6, #0]
 8015050:	701a      	strb	r2, [r3, #0]
 8015052:	682b      	ldr	r3, [r5, #0]
 8015054:	e7e8      	b.n	8015028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x1c>
 8015056:	b112      	cbz	r2, 801505e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x52>
 8015058:	4802      	ldr	r0, [pc, #8]	; (8015064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x58>)
 801505a:	f7ff fc07 	bl	801486c <_ZSt19__throw_logic_errorPKc>
 801505e:	9201      	str	r2, [sp, #4]
 8015060:	6803      	ldr	r3, [r0, #0]
 8015062:	e7e1      	b.n	8015028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17+0x1c>
 8015064:	0801b8c8 	.word	0x0801b8c8

08015068 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	4604      	mov	r4, r0
 801506c:	4610      	mov	r0, r2
 801506e:	f002 fbcf 	bl	8017810 <strerror>
 8015072:	f104 0308 	add.w	r3, r4, #8
 8015076:	6023      	str	r3, [r4, #0]
 8015078:	4605      	mov	r5, r0
 801507a:	b140      	cbz	r0, 801508e <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x26>
 801507c:	f7f3 fa5a 	bl	8008534 <strlen>
 8015080:	4629      	mov	r1, r5
 8015082:	182a      	adds	r2, r5, r0
 8015084:	4620      	mov	r0, r4
 8015086:	f7ff ffc1 	bl	801500c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17>
 801508a:	4620      	mov	r0, r4
 801508c:	bd38      	pop	{r3, r4, r5, pc}
 801508e:	4620      	mov	r0, r4
 8015090:	f04f 32ff 	mov.w	r2, #4294967295
 8015094:	4629      	mov	r1, r5
 8015096:	f7ff ffb9 	bl	801500c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.17>
 801509a:	4620      	mov	r0, r4
 801509c:	bd38      	pop	{r3, r4, r5, pc}
 801509e:	bf00      	nop

080150a0 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 80150a0:	b530      	push	{r4, r5, lr}
 80150a2:	6803      	ldr	r3, [r0, #0]
 80150a4:	4d0c      	ldr	r5, [pc, #48]	; (80150d8 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x38>)
 80150a6:	695b      	ldr	r3, [r3, #20]
 80150a8:	42ab      	cmp	r3, r5
 80150aa:	b083      	sub	sp, #12
 80150ac:	4614      	mov	r4, r2
 80150ae:	d10c      	bne.n	80150ca <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x2a>
 80150b0:	6863      	ldr	r3, [r4, #4]
 80150b2:	4283      	cmp	r3, r0
 80150b4:	d002      	beq.n	80150bc <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x1c>
 80150b6:	2000      	movs	r0, #0
 80150b8:	b003      	add	sp, #12
 80150ba:	bd30      	pop	{r4, r5, pc}
 80150bc:	6820      	ldr	r0, [r4, #0]
 80150be:	1a40      	subs	r0, r0, r1
 80150c0:	fab0 f080 	clz	r0, r0
 80150c4:	0940      	lsrs	r0, r0, #5
 80150c6:	b003      	add	sp, #12
 80150c8:	bd30      	pop	{r4, r5, pc}
 80150ca:	460a      	mov	r2, r1
 80150cc:	4601      	mov	r1, r0
 80150ce:	4668      	mov	r0, sp
 80150d0:	4798      	blx	r3
 80150d2:	9900      	ldr	r1, [sp, #0]
 80150d4:	9801      	ldr	r0, [sp, #4]
 80150d6:	e7eb      	b.n	80150b0 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x10>
 80150d8:	08014f91 	.word	0x08014f91

080150dc <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev>:
 80150dc:	b510      	push	{r4, lr}
 80150de:	4c06      	ldr	r4, [pc, #24]	; (80150f8 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x1c>)
 80150e0:	4906      	ldr	r1, [pc, #24]	; (80150fc <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x20>)
 80150e2:	4807      	ldr	r0, [pc, #28]	; (8015100 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x24>)
 80150e4:	4622      	mov	r2, r4
 80150e6:	f7ff fafb 	bl	80146e0 <__aeabi_atexit>
 80150ea:	4622      	mov	r2, r4
 80150ec:	4905      	ldr	r1, [pc, #20]	; (8015104 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x28>)
 80150ee:	4806      	ldr	r0, [pc, #24]	; (8015108 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x2c>)
 80150f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150f4:	f7ff baf4 	b.w	80146e0 <__aeabi_atexit>
 80150f8:	20000000 	.word	0x20000000
 80150fc:	08014fb5 	.word	0x08014fb5
 8015100:	20000014 	.word	0x20000014
 8015104:	08014fb1 	.word	0x08014fb1
 8015108:	20000010 	.word	0x20000010

0801510c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 801510c:	4b13      	ldr	r3, [pc, #76]	; (801515c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 801510e:	4298      	cmp	r0, r3
 8015110:	b510      	push	{r4, lr}
 8015112:	d81f      	bhi.n	8015154 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
 8015114:	4288      	cmp	r0, r1
 8015116:	4604      	mov	r4, r0
 8015118:	d914      	bls.n	8015144 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
 801511a:	004a      	lsls	r2, r1, #1
 801511c:	4290      	cmp	r0, r2
 801511e:	bf38      	it	cc
 8015120:	4614      	movcc	r4, r2
 8015122:	f104 021d 	add.w	r2, r4, #29
 8015126:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801512a:	f104 000d 	add.w	r0, r4, #13
 801512e:	d90b      	bls.n	8015148 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 8015130:	42a1      	cmp	r1, r4
 8015132:	d209      	bcs.n	8015148 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 8015134:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8015138:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801513c:	1aa4      	subs	r4, r4, r2
 801513e:	429c      	cmp	r4, r3
 8015140:	bf28      	it	cs
 8015142:	461c      	movcs	r4, r3
 8015144:	f104 000d 	add.w	r0, r4, #13
 8015148:	f7ff f952 	bl	80143f0 <_Znwj>
 801514c:	2200      	movs	r2, #0
 801514e:	6044      	str	r4, [r0, #4]
 8015150:	6082      	str	r2, [r0, #8]
 8015152:	bd10      	pop	{r4, pc}
 8015154:	4802      	ldr	r0, [pc, #8]	; (8015160 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
 8015156:	f7ff fba1 	bl	801489c <_ZSt20__throw_length_errorPKc>
 801515a:	bf00      	nop
 801515c:	3ffffffc 	.word	0x3ffffffc
 8015160:	0801b9c4 	.word	0x0801b9c4

08015164 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26>:
 8015164:	b570      	push	{r4, r5, r6, lr}
 8015166:	1a0c      	subs	r4, r1, r0
 8015168:	4606      	mov	r6, r0
 801516a:	2100      	movs	r1, #0
 801516c:	4620      	mov	r0, r4
 801516e:	f7ff ffcd 	bl	801510c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8015172:	2c01      	cmp	r4, #1
 8015174:	4605      	mov	r5, r0
 8015176:	f100 030c 	add.w	r3, r0, #12
 801517a:	d005      	beq.n	8015188 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26+0x24>
 801517c:	b984      	cbnz	r4, 80151a0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26+0x3c>
 801517e:	4a0c      	ldr	r2, [pc, #48]	; (80151b0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26+0x4c>)
 8015180:	4295      	cmp	r5, r2
 8015182:	d106      	bne.n	8015192 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26+0x2e>
 8015184:	4618      	mov	r0, r3
 8015186:	bd70      	pop	{r4, r5, r6, pc}
 8015188:	7832      	ldrb	r2, [r6, #0]
 801518a:	7302      	strb	r2, [r0, #12]
 801518c:	4a08      	ldr	r2, [pc, #32]	; (80151b0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26+0x4c>)
 801518e:	4295      	cmp	r5, r2
 8015190:	d0f8      	beq.n	8015184 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26+0x20>
 8015192:	1929      	adds	r1, r5, r4
 8015194:	2200      	movs	r2, #0
 8015196:	602c      	str	r4, [r5, #0]
 8015198:	60aa      	str	r2, [r5, #8]
 801519a:	730a      	strb	r2, [r1, #12]
 801519c:	4618      	mov	r0, r3
 801519e:	bd70      	pop	{r4, r5, r6, pc}
 80151a0:	4618      	mov	r0, r3
 80151a2:	4631      	mov	r1, r6
 80151a4:	4622      	mov	r2, r4
 80151a6:	f001 fe78 	bl	8016e9a <memcpy>
 80151aa:	4603      	mov	r3, r0
 80151ac:	e7e7      	b.n	801517e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26+0x1a>
 80151ae:	bf00      	nop
 80151b0:	20004074 	.word	0x20004074

080151b4 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 80151b4:	f7ff bb48 	b.w	8014848 <_ZdlPv>

080151b8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 80151b8:	4288      	cmp	r0, r1
 80151ba:	d002      	beq.n	80151c2 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xa>
 80151bc:	b118      	cbz	r0, 80151c6 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xe>
 80151be:	f7ff bfd1 	b.w	8015164 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.26>
 80151c2:	4804      	ldr	r0, [pc, #16]	; (80151d4 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
 80151c4:	4770      	bx	lr
 80151c6:	2900      	cmp	r1, #0
 80151c8:	d0f9      	beq.n	80151be <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x6>
 80151ca:	b508      	push	{r3, lr}
 80151cc:	4802      	ldr	r0, [pc, #8]	; (80151d8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
 80151ce:	f7ff fb4d 	bl	801486c <_ZSt19__throw_logic_errorPKc>
 80151d2:	bf00      	nop
 80151d4:	20004080 	.word	0x20004080
 80151d8:	0801ba88 	.word	0x0801ba88

080151dc <_ZNSsC1EPKcjRKSaIcE>:
 80151dc:	b538      	push	{r3, r4, r5, lr}
 80151de:	460d      	mov	r5, r1
 80151e0:	4604      	mov	r4, r0
 80151e2:	4411      	add	r1, r2
 80151e4:	4628      	mov	r0, r5
 80151e6:	461a      	mov	r2, r3
 80151e8:	f04f 0300 	mov.w	r3, #0
 80151ec:	f7ff ffe4 	bl	80151b8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 80151f0:	6020      	str	r0, [r4, #0]
 80151f2:	4620      	mov	r0, r4
 80151f4:	bd38      	pop	{r3, r4, r5, pc}
 80151f6:	bf00      	nop

080151f8 <_ZNSsC1EPKcRKSaIcE>:
 80151f8:	b570      	push	{r4, r5, r6, lr}
 80151fa:	4605      	mov	r5, r0
 80151fc:	4616      	mov	r6, r2
 80151fe:	460c      	mov	r4, r1
 8015200:	b161      	cbz	r1, 801521c <_ZNSsC1EPKcRKSaIcE+0x24>
 8015202:	4608      	mov	r0, r1
 8015204:	f7f3 f996 	bl	8008534 <strlen>
 8015208:	1821      	adds	r1, r4, r0
 801520a:	4632      	mov	r2, r6
 801520c:	4620      	mov	r0, r4
 801520e:	f04f 0300 	mov.w	r3, #0
 8015212:	f7ff ffd1 	bl	80151b8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 8015216:	6028      	str	r0, [r5, #0]
 8015218:	4628      	mov	r0, r5
 801521a:	bd70      	pop	{r4, r5, r6, pc}
 801521c:	f04f 31ff 	mov.w	r1, #4294967295
 8015220:	e7f3      	b.n	801520a <_ZNSsC1EPKcRKSaIcE+0x12>
 8015222:	bf00      	nop

08015224 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8015224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015226:	b09d      	sub	sp, #116	; 0x74
 8015228:	af00      	add	r7, sp, #0
 801522a:	1a0c      	subs	r4, r1, r0
 801522c:	4606      	mov	r6, r0
 801522e:	226c      	movs	r2, #108	; 0x6c
 8015230:	490e      	ldr	r1, [pc, #56]	; (801526c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8015232:	1d38      	adds	r0, r7, #4
 8015234:	f001 fe31 	bl	8016e9a <memcpy>
 8015238:	f104 037a 	add.w	r3, r4, #122	; 0x7a
 801523c:	f023 0307 	bic.w	r3, r3, #7
 8015240:	ebad 0d03 	sub.w	sp, sp, r3
 8015244:	1d39      	adds	r1, r7, #4
 8015246:	226b      	movs	r2, #107	; 0x6b
 8015248:	4668      	mov	r0, sp
 801524a:	f001 fe26 	bl	8016e9a <memcpy>
 801524e:	4622      	mov	r2, r4
 8015250:	3401      	adds	r4, #1
 8015252:	4631      	mov	r1, r6
 8015254:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
 8015258:	446c      	add	r4, sp
 801525a:	f001 fe1e 	bl	8016e9a <memcpy>
 801525e:	2300      	movs	r3, #0
 8015260:	4668      	mov	r0, sp
 8015262:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015266:	f7ff fb01 	bl	801486c <_ZSt19__throw_logic_errorPKc>
 801526a:	bf00      	nop
 801526c:	0801bb4c 	.word	0x0801bb4c

08015270 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8015270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015274:	4b10      	ldr	r3, [pc, #64]	; (80152b8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>)
 8015276:	b084      	sub	sp, #16
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	af04      	add	r7, sp, #16
 801527c:	b088      	sub	sp, #32
 801527e:	2501      	movs	r5, #1
 8015280:	2402      	movs	r4, #2
 8015282:	e88d 0018 	stmia.w	sp, {r3, r4}
 8015286:	9502      	str	r5, [sp, #8]
 8015288:	4680      	mov	r8, r0
 801528a:	2300      	movs	r3, #0
 801528c:	a80a      	add	r0, sp, #40	; 0x28
 801528e:	460e      	mov	r6, r1
 8015290:	f000 f882 	bl	8015398 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>
 8015294:	42b0      	cmp	r0, r6
 8015296:	d80c      	bhi.n	80152b2 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x42>
 8015298:	4604      	mov	r4, r0
 801529a:	f1c0 0118 	rsb	r1, r0, #24
 801529e:	ad04      	add	r5, sp, #16
 80152a0:	4640      	mov	r0, r8
 80152a2:	4429      	add	r1, r5
 80152a4:	4622      	mov	r2, r4
 80152a6:	f001 fdf8 	bl	8016e9a <memcpy>
 80152aa:	4620      	mov	r0, r4
 80152ac:	46bd      	mov	sp, r7
 80152ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b2:	f04f 34ff 	mov.w	r4, #4294967295
 80152b6:	e7f8      	b.n	80152aa <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3a>
 80152b8:	20000018 	.word	0x20000018

080152bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80152bc:	3901      	subs	r1, #1
 80152be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c2:	4607      	mov	r7, r0
 80152c4:	1846      	adds	r6, r0, r1
 80152c6:	4615      	mov	r5, r2
 80152c8:	4604      	mov	r4, r0
 80152ca:	e002      	b.n	80152d2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x16>
 80152cc:	7022      	strb	r2, [r4, #0]
 80152ce:	3501      	adds	r5, #1
 80152d0:	3401      	adds	r4, #1
 80152d2:	782a      	ldrb	r2, [r5, #0]
 80152d4:	b1fa      	cbz	r2, 8015316 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x5a>
 80152d6:	42b4      	cmp	r4, r6
 80152d8:	d234      	bcs.n	8015344 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x88>
 80152da:	2a25      	cmp	r2, #37	; 0x25
 80152dc:	d1f6      	bne.n	80152cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80152de:	7869      	ldrb	r1, [r5, #1]
 80152e0:	2973      	cmp	r1, #115	; 0x73
 80152e2:	d01c      	beq.n	801531e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80152e4:	297a      	cmp	r1, #122	; 0x7a
 80152e6:	d004      	beq.n	80152f2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80152e8:	2925      	cmp	r1, #37	; 0x25
 80152ea:	d1ef      	bne.n	80152cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80152ec:	3501      	adds	r5, #1
 80152ee:	460a      	mov	r2, r1
 80152f0:	e7ec      	b.n	80152cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80152f2:	78a9      	ldrb	r1, [r5, #2]
 80152f4:	2975      	cmp	r1, #117	; 0x75
 80152f6:	d1e9      	bne.n	80152cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	1b31      	subs	r1, r6, r4
 80152fc:	4620      	mov	r0, r4
 80152fe:	f103 0804 	add.w	r8, r3, #4
 8015302:	f7ff ffb5 	bl	8015270 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8015306:	2800      	cmp	r0, #0
 8015308:	dd1c      	ble.n	8015344 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x88>
 801530a:	3503      	adds	r5, #3
 801530c:	782a      	ldrb	r2, [r5, #0]
 801530e:	4404      	add	r4, r0
 8015310:	4643      	mov	r3, r8
 8015312:	2a00      	cmp	r2, #0
 8015314:	d1df      	bne.n	80152d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x1a>
 8015316:	7022      	strb	r2, [r4, #0]
 8015318:	1be0      	subs	r0, r4, r7
 801531a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801531e:	6819      	ldr	r1, [r3, #0]
 8015320:	780a      	ldrb	r2, [r1, #0]
 8015322:	3304      	adds	r3, #4
 8015324:	b912      	cbnz	r2, 801532c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 8015326:	e007      	b.n	8015338 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 8015328:	42a6      	cmp	r6, r4
 801532a:	d007      	beq.n	801533c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x80>
 801532c:	f804 2b01 	strb.w	r2, [r4], #1
 8015330:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015334:	2a00      	cmp	r2, #0
 8015336:	d1f7      	bne.n	8015328 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6c>
 8015338:	3502      	adds	r5, #2
 801533a:	e7ca      	b.n	80152d2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x16>
 801533c:	4631      	mov	r1, r6
 801533e:	4638      	mov	r0, r7
 8015340:	f7ff ff70 	bl	8015224 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8015344:	4621      	mov	r1, r4
 8015346:	4638      	mov	r0, r7
 8015348:	f7ff ff6c 	bl	8015224 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>

0801534c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801534c:	6808      	ldr	r0, [r1, #0]
 801534e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8015352:	b508      	push	{r3, lr}
 8015354:	d21b      	bcs.n	801538e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x42>
 8015356:	4290      	cmp	r0, r2
 8015358:	d90e      	bls.n	8015378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801535a:	0052      	lsls	r2, r2, #1
 801535c:	4290      	cmp	r0, r2
 801535e:	d20b      	bcs.n	8015378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015360:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8015364:	d30d      	bcc.n	8015382 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8015366:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801536a:	600b      	str	r3, [r1, #0]
 801536c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015370:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015374:	f7ff b83c 	b.w	80143f0 <_Znwj>
 8015378:	3001      	adds	r0, #1
 801537a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801537e:	f7ff b837 	b.w	80143f0 <_Znwj>
 8015382:	600a      	str	r2, [r1, #0]
 8015384:	1c50      	adds	r0, r2, #1
 8015386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801538a:	f7ff b831 	b.w	80143f0 <_Znwj>
 801538e:	4801      	ldr	r0, [pc, #4]	; (8015394 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x48>)
 8015390:	f7ff fa84 	bl	801489c <_ZSt20__throw_length_errorPKc>
 8015394:	0801bbb8 	.word	0x0801bbb8

08015398 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>:
 8015398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801539c:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80153a0:	9f06      	ldr	r7, [sp, #24]
 80153a2:	4680      	mov	r8, r0
 80153a4:	4614      	mov	r4, r2
 80153a6:	461d      	mov	r5, r3
 80153a8:	b1c9      	cbz	r1, 80153de <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x46>
 80153aa:	4606      	mov	r6, r0
 80153ac:	4620      	mov	r0, r4
 80153ae:	4629      	mov	r1, r5
 80153b0:	220a      	movs	r2, #10
 80153b2:	2300      	movs	r3, #0
 80153b4:	f7f3 fda6 	bl	8008f04 <__aeabi_uldivmod>
 80153b8:	443a      	add	r2, r7
 80153ba:	4620      	mov	r0, r4
 80153bc:	7913      	ldrb	r3, [r2, #4]
 80153be:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80153c2:	4629      	mov	r1, r5
 80153c4:	2300      	movs	r3, #0
 80153c6:	220a      	movs	r2, #10
 80153c8:	f7f3 fd9c 	bl	8008f04 <__aeabi_uldivmod>
 80153cc:	4604      	mov	r4, r0
 80153ce:	460d      	mov	r5, r1
 80153d0:	ea54 0305 	orrs.w	r3, r4, r5
 80153d4:	d1ea      	bne.n	80153ac <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x14>
 80153d6:	ebc6 0008 	rsb	r0, r6, r8
 80153da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153de:	9b07      	ldr	r3, [sp, #28]
 80153e0:	f003 034a 	and.w	r3, r3, #74	; 0x4a
 80153e4:	2b40      	cmp	r3, #64	; 0x40
 80153e6:	d016      	beq.n	8015416 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x7e>
 80153e8:	9b07      	ldr	r3, [sp, #28]
 80153ea:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80153ee:	bf0c      	ite	eq
 80153f0:	2304      	moveq	r3, #4
 80153f2:	2314      	movne	r3, #20
 80153f4:	441f      	add	r7, r3
 80153f6:	4606      	mov	r6, r0
 80153f8:	0923      	lsrs	r3, r4, #4
 80153fa:	f004 010f 	and.w	r1, r4, #15
 80153fe:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8015402:	092a      	lsrs	r2, r5, #4
 8015404:	461c      	mov	r4, r3
 8015406:	4615      	mov	r5, r2
 8015408:	5c7b      	ldrb	r3, [r7, r1]
 801540a:	f806 3d01 	strb.w	r3, [r6, #-1]!
 801540e:	ea54 0305 	orrs.w	r3, r4, r5
 8015412:	d1f1      	bne.n	80153f8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x60>
 8015414:	e7df      	b.n	80153d6 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x3e>
 8015416:	4606      	mov	r6, r0
 8015418:	f004 0307 	and.w	r3, r4, #7
 801541c:	08e2      	lsrs	r2, r4, #3
 801541e:	443b      	add	r3, r7
 8015420:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8015424:	08e9      	lsrs	r1, r5, #3
 8015426:	791b      	ldrb	r3, [r3, #4]
 8015428:	f806 3d01 	strb.w	r3, [r6, #-1]!
 801542c:	4614      	mov	r4, r2
 801542e:	460d      	mov	r5, r1
 8015430:	ea54 0305 	orrs.w	r3, r4, r5
 8015434:	d1f0      	bne.n	8015418 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x80>
 8015436:	e7ce      	b.n	80153d6 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x3e>

08015438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8015438:	4b24      	ldr	r3, [pc, #144]	; (80154cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 801543a:	681a      	ldr	r2, [r3, #0]
 801543c:	07d0      	lsls	r0, r2, #31
 801543e:	bf5c      	itt	pl
 8015440:	2201      	movpl	r2, #1
 8015442:	601a      	strpl	r2, [r3, #0]
 8015444:	4b22      	ldr	r3, [pc, #136]	; (80154d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	07d1      	lsls	r1, r2, #31
 801544a:	bf5c      	itt	pl
 801544c:	2201      	movpl	r2, #1
 801544e:	601a      	strpl	r2, [r3, #0]
 8015450:	4b20      	ldr	r3, [pc, #128]	; (80154d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	07d2      	lsls	r2, r2, #31
 8015456:	bf5c      	itt	pl
 8015458:	2201      	movpl	r2, #1
 801545a:	601a      	strpl	r2, [r3, #0]
 801545c:	4b1e      	ldr	r3, [pc, #120]	; (80154d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	07d0      	lsls	r0, r2, #31
 8015462:	bf5c      	itt	pl
 8015464:	2201      	movpl	r2, #1
 8015466:	601a      	strpl	r2, [r3, #0]
 8015468:	4b1c      	ldr	r3, [pc, #112]	; (80154dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	07d1      	lsls	r1, r2, #31
 801546e:	bf5c      	itt	pl
 8015470:	2201      	movpl	r2, #1
 8015472:	601a      	strpl	r2, [r3, #0]
 8015474:	4b1a      	ldr	r3, [pc, #104]	; (80154e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8015476:	681a      	ldr	r2, [r3, #0]
 8015478:	07d2      	lsls	r2, r2, #31
 801547a:	bf5c      	itt	pl
 801547c:	2201      	movpl	r2, #1
 801547e:	601a      	strpl	r2, [r3, #0]
 8015480:	4b18      	ldr	r3, [pc, #96]	; (80154e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	07d0      	lsls	r0, r2, #31
 8015486:	bf5c      	itt	pl
 8015488:	2201      	movpl	r2, #1
 801548a:	601a      	strpl	r2, [r3, #0]
 801548c:	4b16      	ldr	r3, [pc, #88]	; (80154e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	07d1      	lsls	r1, r2, #31
 8015492:	bf5c      	itt	pl
 8015494:	2201      	movpl	r2, #1
 8015496:	601a      	strpl	r2, [r3, #0]
 8015498:	4b14      	ldr	r3, [pc, #80]	; (80154ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 801549a:	681a      	ldr	r2, [r3, #0]
 801549c:	07d2      	lsls	r2, r2, #31
 801549e:	bf5c      	itt	pl
 80154a0:	2201      	movpl	r2, #1
 80154a2:	601a      	strpl	r2, [r3, #0]
 80154a4:	4b12      	ldr	r3, [pc, #72]	; (80154f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80154a6:	681a      	ldr	r2, [r3, #0]
 80154a8:	07d0      	lsls	r0, r2, #31
 80154aa:	bf5c      	itt	pl
 80154ac:	2201      	movpl	r2, #1
 80154ae:	601a      	strpl	r2, [r3, #0]
 80154b0:	4b10      	ldr	r3, [pc, #64]	; (80154f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	07d1      	lsls	r1, r2, #31
 80154b6:	bf5c      	itt	pl
 80154b8:	2201      	movpl	r2, #1
 80154ba:	601a      	strpl	r2, [r3, #0]
 80154bc:	4b0e      	ldr	r3, [pc, #56]	; (80154f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80154be:	681a      	ldr	r2, [r3, #0]
 80154c0:	07d2      	lsls	r2, r2, #31
 80154c2:	bf5c      	itt	pl
 80154c4:	2201      	movpl	r2, #1
 80154c6:	601a      	strpl	r2, [r3, #0]
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	200040b0 	.word	0x200040b0
 80154d0:	200040ac 	.word	0x200040ac
 80154d4:	200040a8 	.word	0x200040a8
 80154d8:	200040a4 	.word	0x200040a4
 80154dc:	200040a0 	.word	0x200040a0
 80154e0:	2000409c 	.word	0x2000409c
 80154e4:	20004098 	.word	0x20004098
 80154e8:	20004094 	.word	0x20004094
 80154ec:	20004090 	.word	0x20004090
 80154f0:	2000408c 	.word	0x2000408c
 80154f4:	20004088 	.word	0x20004088
 80154f8:	20004084 	.word	0x20004084

080154fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80154fc:	4b24      	ldr	r3, [pc, #144]	; (8015590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80154fe:	681a      	ldr	r2, [r3, #0]
 8015500:	07d0      	lsls	r0, r2, #31
 8015502:	bf5c      	itt	pl
 8015504:	2201      	movpl	r2, #1
 8015506:	601a      	strpl	r2, [r3, #0]
 8015508:	4b22      	ldr	r3, [pc, #136]	; (8015594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	07d1      	lsls	r1, r2, #31
 801550e:	bf5c      	itt	pl
 8015510:	2201      	movpl	r2, #1
 8015512:	601a      	strpl	r2, [r3, #0]
 8015514:	4b20      	ldr	r3, [pc, #128]	; (8015598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8015516:	681a      	ldr	r2, [r3, #0]
 8015518:	07d2      	lsls	r2, r2, #31
 801551a:	bf5c      	itt	pl
 801551c:	2201      	movpl	r2, #1
 801551e:	601a      	strpl	r2, [r3, #0]
 8015520:	4b1e      	ldr	r3, [pc, #120]	; (801559c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	07d0      	lsls	r0, r2, #31
 8015526:	bf5c      	itt	pl
 8015528:	2201      	movpl	r2, #1
 801552a:	601a      	strpl	r2, [r3, #0]
 801552c:	4b1c      	ldr	r3, [pc, #112]	; (80155a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 801552e:	681a      	ldr	r2, [r3, #0]
 8015530:	07d1      	lsls	r1, r2, #31
 8015532:	bf5c      	itt	pl
 8015534:	2201      	movpl	r2, #1
 8015536:	601a      	strpl	r2, [r3, #0]
 8015538:	4b1a      	ldr	r3, [pc, #104]	; (80155a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	07d2      	lsls	r2, r2, #31
 801553e:	bf5c      	itt	pl
 8015540:	2201      	movpl	r2, #1
 8015542:	601a      	strpl	r2, [r3, #0]
 8015544:	4b18      	ldr	r3, [pc, #96]	; (80155a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8015546:	681a      	ldr	r2, [r3, #0]
 8015548:	07d0      	lsls	r0, r2, #31
 801554a:	bf5c      	itt	pl
 801554c:	2201      	movpl	r2, #1
 801554e:	601a      	strpl	r2, [r3, #0]
 8015550:	4b16      	ldr	r3, [pc, #88]	; (80155ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8015552:	681a      	ldr	r2, [r3, #0]
 8015554:	07d1      	lsls	r1, r2, #31
 8015556:	bf5c      	itt	pl
 8015558:	2201      	movpl	r2, #1
 801555a:	601a      	strpl	r2, [r3, #0]
 801555c:	4b14      	ldr	r3, [pc, #80]	; (80155b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 801555e:	681a      	ldr	r2, [r3, #0]
 8015560:	07d2      	lsls	r2, r2, #31
 8015562:	bf5c      	itt	pl
 8015564:	2201      	movpl	r2, #1
 8015566:	601a      	strpl	r2, [r3, #0]
 8015568:	4b12      	ldr	r3, [pc, #72]	; (80155b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 801556a:	681a      	ldr	r2, [r3, #0]
 801556c:	07d0      	lsls	r0, r2, #31
 801556e:	bf5c      	itt	pl
 8015570:	2201      	movpl	r2, #1
 8015572:	601a      	strpl	r2, [r3, #0]
 8015574:	4b10      	ldr	r3, [pc, #64]	; (80155b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8015576:	681a      	ldr	r2, [r3, #0]
 8015578:	07d1      	lsls	r1, r2, #31
 801557a:	bf5c      	itt	pl
 801557c:	2201      	movpl	r2, #1
 801557e:	601a      	strpl	r2, [r3, #0]
 8015580:	4b0e      	ldr	r3, [pc, #56]	; (80155bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	07d2      	lsls	r2, r2, #31
 8015586:	bf5c      	itt	pl
 8015588:	2201      	movpl	r2, #1
 801558a:	601a      	strpl	r2, [r3, #0]
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	200040e0 	.word	0x200040e0
 8015594:	200040dc 	.word	0x200040dc
 8015598:	200040d8 	.word	0x200040d8
 801559c:	200040d4 	.word	0x200040d4
 80155a0:	200040d0 	.word	0x200040d0
 80155a4:	200040cc 	.word	0x200040cc
 80155a8:	200040c8 	.word	0x200040c8
 80155ac:	200040c4 	.word	0x200040c4
 80155b0:	200040c0 	.word	0x200040c0
 80155b4:	200040bc 	.word	0x200040bc
 80155b8:	200040b8 	.word	0x200040b8
 80155bc:	200040b4 	.word	0x200040b4

080155c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80155c0:	4b18      	ldr	r3, [pc, #96]	; (8015624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	07d1      	lsls	r1, r2, #31
 80155c6:	bf5c      	itt	pl
 80155c8:	2201      	movpl	r2, #1
 80155ca:	601a      	strpl	r2, [r3, #0]
 80155cc:	4b16      	ldr	r3, [pc, #88]	; (8015628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80155ce:	681a      	ldr	r2, [r3, #0]
 80155d0:	07d2      	lsls	r2, r2, #31
 80155d2:	bf5c      	itt	pl
 80155d4:	2201      	movpl	r2, #1
 80155d6:	601a      	strpl	r2, [r3, #0]
 80155d8:	4b14      	ldr	r3, [pc, #80]	; (801562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	07d0      	lsls	r0, r2, #31
 80155de:	bf5c      	itt	pl
 80155e0:	2201      	movpl	r2, #1
 80155e2:	601a      	strpl	r2, [r3, #0]
 80155e4:	4b12      	ldr	r3, [pc, #72]	; (8015630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	07d1      	lsls	r1, r2, #31
 80155ea:	bf5c      	itt	pl
 80155ec:	2201      	movpl	r2, #1
 80155ee:	601a      	strpl	r2, [r3, #0]
 80155f0:	4b10      	ldr	r3, [pc, #64]	; (8015634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	07d2      	lsls	r2, r2, #31
 80155f6:	bf5c      	itt	pl
 80155f8:	2201      	movpl	r2, #1
 80155fa:	601a      	strpl	r2, [r3, #0]
 80155fc:	4b0e      	ldr	r3, [pc, #56]	; (8015638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80155fe:	681a      	ldr	r2, [r3, #0]
 8015600:	07d0      	lsls	r0, r2, #31
 8015602:	bf5c      	itt	pl
 8015604:	2201      	movpl	r2, #1
 8015606:	601a      	strpl	r2, [r3, #0]
 8015608:	4b0c      	ldr	r3, [pc, #48]	; (801563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	07d1      	lsls	r1, r2, #31
 801560e:	bf5c      	itt	pl
 8015610:	2201      	movpl	r2, #1
 8015612:	601a      	strpl	r2, [r3, #0]
 8015614:	4b0a      	ldr	r3, [pc, #40]	; (8015640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	07d2      	lsls	r2, r2, #31
 801561a:	bf5c      	itt	pl
 801561c:	2201      	movpl	r2, #1
 801561e:	601a      	strpl	r2, [r3, #0]
 8015620:	4770      	bx	lr
 8015622:	bf00      	nop
 8015624:	20004100 	.word	0x20004100
 8015628:	200040fc 	.word	0x200040fc
 801562c:	200040f8 	.word	0x200040f8
 8015630:	200040f4 	.word	0x200040f4
 8015634:	200040f0 	.word	0x200040f0
 8015638:	200040ec 	.word	0x200040ec
 801563c:	200040e8 	.word	0x200040e8
 8015640:	200040e4 	.word	0x200040e4

08015644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8015644:	4b18      	ldr	r3, [pc, #96]	; (80156a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	07d1      	lsls	r1, r2, #31
 801564a:	bf5c      	itt	pl
 801564c:	2201      	movpl	r2, #1
 801564e:	601a      	strpl	r2, [r3, #0]
 8015650:	4b16      	ldr	r3, [pc, #88]	; (80156ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	07d2      	lsls	r2, r2, #31
 8015656:	bf5c      	itt	pl
 8015658:	2201      	movpl	r2, #1
 801565a:	601a      	strpl	r2, [r3, #0]
 801565c:	4b14      	ldr	r3, [pc, #80]	; (80156b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	07d0      	lsls	r0, r2, #31
 8015662:	bf5c      	itt	pl
 8015664:	2201      	movpl	r2, #1
 8015666:	601a      	strpl	r2, [r3, #0]
 8015668:	4b12      	ldr	r3, [pc, #72]	; (80156b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 801566a:	681a      	ldr	r2, [r3, #0]
 801566c:	07d1      	lsls	r1, r2, #31
 801566e:	bf5c      	itt	pl
 8015670:	2201      	movpl	r2, #1
 8015672:	601a      	strpl	r2, [r3, #0]
 8015674:	4b10      	ldr	r3, [pc, #64]	; (80156b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	07d2      	lsls	r2, r2, #31
 801567a:	bf5c      	itt	pl
 801567c:	2201      	movpl	r2, #1
 801567e:	601a      	strpl	r2, [r3, #0]
 8015680:	4b0e      	ldr	r3, [pc, #56]	; (80156bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	07d0      	lsls	r0, r2, #31
 8015686:	bf5c      	itt	pl
 8015688:	2201      	movpl	r2, #1
 801568a:	601a      	strpl	r2, [r3, #0]
 801568c:	4b0c      	ldr	r3, [pc, #48]	; (80156c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	07d1      	lsls	r1, r2, #31
 8015692:	bf5c      	itt	pl
 8015694:	2201      	movpl	r2, #1
 8015696:	601a      	strpl	r2, [r3, #0]
 8015698:	4b0a      	ldr	r3, [pc, #40]	; (80156c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	07d2      	lsls	r2, r2, #31
 801569e:	bf5c      	itt	pl
 80156a0:	2201      	movpl	r2, #1
 80156a2:	601a      	strpl	r2, [r3, #0]
 80156a4:	4770      	bx	lr
 80156a6:	bf00      	nop
 80156a8:	20004120 	.word	0x20004120
 80156ac:	2000411c 	.word	0x2000411c
 80156b0:	20004118 	.word	0x20004118
 80156b4:	20004114 	.word	0x20004114
 80156b8:	20004110 	.word	0x20004110
 80156bc:	2000410c 	.word	0x2000410c
 80156c0:	20004108 	.word	0x20004108
 80156c4:	20004104 	.word	0x20004104

080156c8 <cosf>:
 80156c8:	ee10 3a10 	vmov	r3, s0
 80156cc:	b507      	push	{r0, r1, r2, lr}
 80156ce:	4a1c      	ldr	r2, [pc, #112]	; (8015740 <cosf+0x78>)
 80156d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80156d4:	4293      	cmp	r3, r2
 80156d6:	dc02      	bgt.n	80156de <cosf+0x16>
 80156d8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015744 <cosf+0x7c>
 80156dc:	e013      	b.n	8015706 <cosf+0x3e>
 80156de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80156e2:	db02      	blt.n	80156ea <cosf+0x22>
 80156e4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80156e8:	e027      	b.n	801573a <cosf+0x72>
 80156ea:	4668      	mov	r0, sp
 80156ec:	f000 f91a 	bl	8015924 <__ieee754_rem_pio2f>
 80156f0:	f000 0003 	and.w	r0, r0, #3
 80156f4:	2801      	cmp	r0, #1
 80156f6:	d009      	beq.n	801570c <cosf+0x44>
 80156f8:	2802      	cmp	r0, #2
 80156fa:	d00e      	beq.n	801571a <cosf+0x52>
 80156fc:	b9b0      	cbnz	r0, 801572c <cosf+0x64>
 80156fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8015702:	ed9d 0a00 	vldr	s0, [sp]
 8015706:	f000 fa37 	bl	8015b78 <__kernel_cosf>
 801570a:	e016      	b.n	801573a <cosf+0x72>
 801570c:	eddd 0a01 	vldr	s1, [sp, #4]
 8015710:	ed9d 0a00 	vldr	s0, [sp]
 8015714:	f000 fcf4 	bl	8016100 <__kernel_sinf>
 8015718:	e005      	b.n	8015726 <cosf+0x5e>
 801571a:	eddd 0a01 	vldr	s1, [sp, #4]
 801571e:	ed9d 0a00 	vldr	s0, [sp]
 8015722:	f000 fa29 	bl	8015b78 <__kernel_cosf>
 8015726:	eeb1 0a40 	vneg.f32	s0, s0
 801572a:	e006      	b.n	801573a <cosf+0x72>
 801572c:	2001      	movs	r0, #1
 801572e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015732:	ed9d 0a00 	vldr	s0, [sp]
 8015736:	f000 fce3 	bl	8016100 <__kernel_sinf>
 801573a:	b003      	add	sp, #12
 801573c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015740:	3f490fd8 	.word	0x3f490fd8
 8015744:	00000000 	.word	0x00000000

08015748 <sinf>:
 8015748:	ee10 3a10 	vmov	r3, s0
 801574c:	b507      	push	{r0, r1, r2, lr}
 801574e:	4a1d      	ldr	r2, [pc, #116]	; (80157c4 <sinf+0x7c>)
 8015750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015754:	4293      	cmp	r3, r2
 8015756:	dc03      	bgt.n	8015760 <sinf+0x18>
 8015758:	2000      	movs	r0, #0
 801575a:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80157c8 <sinf+0x80>
 801575e:	e014      	b.n	801578a <sinf+0x42>
 8015760:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015764:	db02      	blt.n	801576c <sinf+0x24>
 8015766:	ee30 0a40 	vsub.f32	s0, s0, s0
 801576a:	e028      	b.n	80157be <sinf+0x76>
 801576c:	4668      	mov	r0, sp
 801576e:	f000 f8d9 	bl	8015924 <__ieee754_rem_pio2f>
 8015772:	f000 0003 	and.w	r0, r0, #3
 8015776:	2801      	cmp	r0, #1
 8015778:	d00a      	beq.n	8015790 <sinf+0x48>
 801577a:	2802      	cmp	r0, #2
 801577c:	d00f      	beq.n	801579e <sinf+0x56>
 801577e:	b9b0      	cbnz	r0, 80157ae <sinf+0x66>
 8015780:	eddd 0a01 	vldr	s1, [sp, #4]
 8015784:	ed9d 0a00 	vldr	s0, [sp]
 8015788:	2001      	movs	r0, #1
 801578a:	f000 fcb9 	bl	8016100 <__kernel_sinf>
 801578e:	e016      	b.n	80157be <sinf+0x76>
 8015790:	eddd 0a01 	vldr	s1, [sp, #4]
 8015794:	ed9d 0a00 	vldr	s0, [sp]
 8015798:	f000 f9ee 	bl	8015b78 <__kernel_cosf>
 801579c:	e00f      	b.n	80157be <sinf+0x76>
 801579e:	2001      	movs	r0, #1
 80157a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80157a4:	ed9d 0a00 	vldr	s0, [sp]
 80157a8:	f000 fcaa 	bl	8016100 <__kernel_sinf>
 80157ac:	e005      	b.n	80157ba <sinf+0x72>
 80157ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80157b2:	ed9d 0a00 	vldr	s0, [sp]
 80157b6:	f000 f9df 	bl	8015b78 <__kernel_cosf>
 80157ba:	eeb1 0a40 	vneg.f32	s0, s0
 80157be:	b003      	add	sp, #12
 80157c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80157c4:	3f490fd8 	.word	0x3f490fd8
 80157c8:	00000000 	.word	0x00000000

080157cc <atan2f>:
 80157cc:	f000 b800 	b.w	80157d0 <__ieee754_atan2f>

080157d0 <__ieee754_atan2f>:
 80157d0:	ee10 2a90 	vmov	r2, s1
 80157d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80157d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80157dc:	b510      	push	{r4, lr}
 80157de:	eef0 7a40 	vmov.f32	s15, s0
 80157e2:	dc06      	bgt.n	80157f2 <__ieee754_atan2f+0x22>
 80157e4:	ee10 0a10 	vmov	r0, s0
 80157e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80157ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80157f0:	dd02      	ble.n	80157f8 <__ieee754_atan2f+0x28>
 80157f2:	ee30 0aa7 	vadd.f32	s0, s1, s15
 80157f6:	bd10      	pop	{r4, pc}
 80157f8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80157fc:	d103      	bne.n	8015806 <__ieee754_atan2f+0x36>
 80157fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015802:	f000 bcc5 	b.w	8016190 <atanf>
 8015806:	1794      	asrs	r4, r2, #30
 8015808:	f004 0402 	and.w	r4, r4, #2
 801580c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015810:	b943      	cbnz	r3, 8015824 <__ieee754_atan2f+0x54>
 8015812:	2c02      	cmp	r4, #2
 8015814:	d06c      	beq.n	80158f0 <__ieee754_atan2f+0x120>
 8015816:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80158f8 <__ieee754_atan2f+0x128>
 801581a:	2c03      	cmp	r4, #3
 801581c:	bf18      	it	ne
 801581e:	eeb0 0a67 	vmovne.f32	s0, s15
 8015822:	bd10      	pop	{r4, pc}
 8015824:	b341      	cbz	r1, 8015878 <__ieee754_atan2f+0xa8>
 8015826:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801582a:	d122      	bne.n	8015872 <__ieee754_atan2f+0xa2>
 801582c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015830:	d10f      	bne.n	8015852 <__ieee754_atan2f+0x82>
 8015832:	2c02      	cmp	r4, #2
 8015834:	d007      	beq.n	8015846 <__ieee754_atan2f+0x76>
 8015836:	2c03      	cmp	r4, #3
 8015838:	d008      	beq.n	801584c <__ieee754_atan2f+0x7c>
 801583a:	2c01      	cmp	r4, #1
 801583c:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80158fc <__ieee754_atan2f+0x12c>
 8015840:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8015900 <__ieee754_atan2f+0x130>
 8015844:	e00e      	b.n	8015864 <__ieee754_atan2f+0x94>
 8015846:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8015904 <__ieee754_atan2f+0x134>
 801584a:	bd10      	pop	{r4, pc}
 801584c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015908 <__ieee754_atan2f+0x138>
 8015850:	bd10      	pop	{r4, pc}
 8015852:	2c02      	cmp	r4, #2
 8015854:	d04c      	beq.n	80158f0 <__ieee754_atan2f+0x120>
 8015856:	2c03      	cmp	r4, #3
 8015858:	d008      	beq.n	801586c <__ieee754_atan2f+0x9c>
 801585a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801590c <__ieee754_atan2f+0x13c>
 801585e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8015910 <__ieee754_atan2f+0x140>
 8015862:	2c01      	cmp	r4, #1
 8015864:	bf08      	it	eq
 8015866:	eeb0 0a67 	vmoveq.f32	s0, s15
 801586a:	bd10      	pop	{r4, pc}
 801586c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80158f8 <__ieee754_atan2f+0x128>
 8015870:	bd10      	pop	{r4, pc}
 8015872:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015876:	d108      	bne.n	801588a <__ieee754_atan2f+0xba>
 8015878:	eddf 7a26 	vldr	s15, [pc, #152]	; 8015914 <__ieee754_atan2f+0x144>
 801587c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8015918 <__ieee754_atan2f+0x148>
 8015880:	2800      	cmp	r0, #0
 8015882:	bfa8      	it	ge
 8015884:	eeb0 0a67 	vmovge.f32	s0, s15
 8015888:	bd10      	pop	{r4, pc}
 801588a:	1a5b      	subs	r3, r3, r1
 801588c:	15db      	asrs	r3, r3, #23
 801588e:	2b3c      	cmp	r3, #60	; 0x3c
 8015890:	dc0a      	bgt.n	80158a8 <__ieee754_atan2f+0xd8>
 8015892:	2a00      	cmp	r2, #0
 8015894:	da01      	bge.n	801589a <__ieee754_atan2f+0xca>
 8015896:	333c      	adds	r3, #60	; 0x3c
 8015898:	db09      	blt.n	80158ae <__ieee754_atan2f+0xde>
 801589a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801589e:	f000 fd4d 	bl	801633c <fabsf>
 80158a2:	f000 fc75 	bl	8016190 <atanf>
 80158a6:	e004      	b.n	80158b2 <__ieee754_atan2f+0xe2>
 80158a8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8015914 <__ieee754_atan2f+0x144>
 80158ac:	e001      	b.n	80158b2 <__ieee754_atan2f+0xe2>
 80158ae:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801590c <__ieee754_atan2f+0x13c>
 80158b2:	2c01      	cmp	r4, #1
 80158b4:	d003      	beq.n	80158be <__ieee754_atan2f+0xee>
 80158b6:	2c02      	cmp	r4, #2
 80158b8:	d008      	beq.n	80158cc <__ieee754_atan2f+0xfc>
 80158ba:	b984      	cbnz	r4, 80158de <__ieee754_atan2f+0x10e>
 80158bc:	bd10      	pop	{r4, pc}
 80158be:	ee10 3a10 	vmov	r3, s0
 80158c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80158c6:	ee00 3a10 	vmov	s0, r3
 80158ca:	bd10      	pop	{r4, pc}
 80158cc:	eddf 0a13 	vldr	s1, [pc, #76]	; 801591c <__ieee754_atan2f+0x14c>
 80158d0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80158d4:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015920 <__ieee754_atan2f+0x150>
 80158d8:	ee30 0ac0 	vsub.f32	s0, s1, s0
 80158dc:	bd10      	pop	{r4, pc}
 80158de:	eddf 0a0f 	vldr	s1, [pc, #60]	; 801591c <__ieee754_atan2f+0x14c>
 80158e2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80158e6:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015920 <__ieee754_atan2f+0x150>
 80158ea:	ee30 0a60 	vsub.f32	s0, s0, s1
 80158ee:	bd10      	pop	{r4, pc}
 80158f0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8015920 <__ieee754_atan2f+0x150>
 80158f4:	bd10      	pop	{r4, pc}
 80158f6:	bf00      	nop
 80158f8:	c0490fdb 	.word	0xc0490fdb
 80158fc:	3f490fdb 	.word	0x3f490fdb
 8015900:	bf490fdb 	.word	0xbf490fdb
 8015904:	4016cbe4 	.word	0x4016cbe4
 8015908:	c016cbe4 	.word	0xc016cbe4
 801590c:	00000000 	.word	0x00000000
 8015910:	80000000 	.word	0x80000000
 8015914:	3fc90fdb 	.word	0x3fc90fdb
 8015918:	bfc90fdb 	.word	0xbfc90fdb
 801591c:	33bbbd2e 	.word	0x33bbbd2e
 8015920:	40490fdb 	.word	0x40490fdb

08015924 <__ieee754_rem_pio2f>:
 8015924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015926:	ee10 6a10 	vmov	r6, s0
 801592a:	4b85      	ldr	r3, [pc, #532]	; (8015b40 <__ieee754_rem_pio2f+0x21c>)
 801592c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8015930:	429c      	cmp	r4, r3
 8015932:	b087      	sub	sp, #28
 8015934:	4605      	mov	r5, r0
 8015936:	dc04      	bgt.n	8015942 <__ieee754_rem_pio2f+0x1e>
 8015938:	2300      	movs	r3, #0
 801593a:	ed85 0a00 	vstr	s0, [r5]
 801593e:	6043      	str	r3, [r0, #4]
 8015940:	e0b7      	b.n	8015ab2 <__ieee754_rem_pio2f+0x18e>
 8015942:	4b80      	ldr	r3, [pc, #512]	; (8015b44 <__ieee754_rem_pio2f+0x220>)
 8015944:	429c      	cmp	r4, r3
 8015946:	dc37      	bgt.n	80159b8 <__ieee754_rem_pio2f+0x94>
 8015948:	2e00      	cmp	r6, #0
 801594a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8015b48 <__ieee754_rem_pio2f+0x224>
 801594e:	4b7f      	ldr	r3, [pc, #508]	; (8015b4c <__ieee754_rem_pio2f+0x228>)
 8015950:	f024 040f 	bic.w	r4, r4, #15
 8015954:	dd17      	ble.n	8015986 <__ieee754_rem_pio2f+0x62>
 8015956:	429c      	cmp	r4, r3
 8015958:	ee70 7a47 	vsub.f32	s15, s0, s14
 801595c:	bf09      	itett	eq
 801595e:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8015b50 <__ieee754_rem_pio2f+0x22c>
 8015962:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8015b54 <__ieee754_rem_pio2f+0x230>
 8015966:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801596a:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8015b58 <__ieee754_rem_pio2f+0x234>
 801596e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015972:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015976:	edc0 6a00 	vstr	s13, [r0]
 801597a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801597e:	edc0 7a01 	vstr	s15, [r0, #4]
 8015982:	2001      	movs	r0, #1
 8015984:	e0da      	b.n	8015b3c <__ieee754_rem_pio2f+0x218>
 8015986:	429c      	cmp	r4, r3
 8015988:	ee70 7a07 	vadd.f32	s15, s0, s14
 801598c:	bf09      	itett	eq
 801598e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8015b50 <__ieee754_rem_pio2f+0x22c>
 8015992:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8015b54 <__ieee754_rem_pio2f+0x230>
 8015996:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801599a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8015b58 <__ieee754_rem_pio2f+0x234>
 801599e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80159a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80159a6:	edc0 6a00 	vstr	s13, [r0]
 80159aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80159ae:	edc0 7a01 	vstr	s15, [r0, #4]
 80159b2:	f04f 30ff 	mov.w	r0, #4294967295
 80159b6:	e0c1      	b.n	8015b3c <__ieee754_rem_pio2f+0x218>
 80159b8:	4b68      	ldr	r3, [pc, #416]	; (8015b5c <__ieee754_rem_pio2f+0x238>)
 80159ba:	429c      	cmp	r4, r3
 80159bc:	dc70      	bgt.n	8015aa0 <__ieee754_rem_pio2f+0x17c>
 80159be:	f000 fcbd 	bl	801633c <fabsf>
 80159c2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015b60 <__ieee754_rem_pio2f+0x23c>
 80159c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80159ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80159ce:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8015b48 <__ieee754_rem_pio2f+0x224>
 80159d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80159d6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80159da:	ee17 0a90 	vmov	r0, s15
 80159de:	eef1 7a46 	vneg.f32	s15, s12
 80159e2:	eea7 0a87 	vfma.f32	s0, s15, s14
 80159e6:	281f      	cmp	r0, #31
 80159e8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8015b54 <__ieee754_rem_pio2f+0x230>
 80159ec:	ee26 7a07 	vmul.f32	s14, s12, s14
 80159f0:	ee70 6a47 	vsub.f32	s13, s0, s14
 80159f4:	ee16 3a90 	vmov	r3, s13
 80159f8:	dc07      	bgt.n	8015a0a <__ieee754_rem_pio2f+0xe6>
 80159fa:	1e47      	subs	r7, r0, #1
 80159fc:	4959      	ldr	r1, [pc, #356]	; (8015b64 <__ieee754_rem_pio2f+0x240>)
 80159fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8015a02:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8015a06:	428a      	cmp	r2, r1
 8015a08:	d105      	bne.n	8015a16 <__ieee754_rem_pio2f+0xf2>
 8015a0a:	15e4      	asrs	r4, r4, #23
 8015a0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015a10:	1aa2      	subs	r2, r4, r2
 8015a12:	2a08      	cmp	r2, #8
 8015a14:	dc01      	bgt.n	8015a1a <__ieee754_rem_pio2f+0xf6>
 8015a16:	602b      	str	r3, [r5, #0]
 8015a18:	e02f      	b.n	8015a7a <__ieee754_rem_pio2f+0x156>
 8015a1a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8015b50 <__ieee754_rem_pio2f+0x22c>
 8015a1e:	eef0 6a40 	vmov.f32	s13, s0
 8015a22:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015a26:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015a2a:	eea7 0a87 	vfma.f32	s0, s15, s14
 8015a2e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8015b58 <__ieee754_rem_pio2f+0x234>
 8015a32:	ee96 0a07 	vfnms.f32	s0, s12, s14
 8015a36:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8015a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8015a3e:	ee15 3a90 	vmov	r3, s11
 8015a42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015a46:	1aa4      	subs	r4, r4, r2
 8015a48:	2c19      	cmp	r4, #25
 8015a4a:	dc04      	bgt.n	8015a56 <__ieee754_rem_pio2f+0x132>
 8015a4c:	edc5 5a00 	vstr	s11, [r5]
 8015a50:	eeb0 0a66 	vmov.f32	s0, s13
 8015a54:	e011      	b.n	8015a7a <__ieee754_rem_pio2f+0x156>
 8015a56:	eddf 5a44 	vldr	s11, [pc, #272]	; 8015b68 <__ieee754_rem_pio2f+0x244>
 8015a5a:	eeb0 0a66 	vmov.f32	s0, s13
 8015a5e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015a62:	ee36 7ac0 	vsub.f32	s14, s13, s0
 8015a66:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015a6a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015b6c <__ieee754_rem_pio2f+0x248>
 8015a6e:	ee96 7a27 	vfnms.f32	s14, s12, s15
 8015a72:	ee70 7a47 	vsub.f32	s15, s0, s14
 8015a76:	edc5 7a00 	vstr	s15, [r5]
 8015a7a:	edd5 6a00 	vldr	s13, [r5]
 8015a7e:	ee70 7a66 	vsub.f32	s15, s0, s13
 8015a82:	2e00      	cmp	r6, #0
 8015a84:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015a88:	ed85 0a01 	vstr	s0, [r5, #4]
 8015a8c:	da56      	bge.n	8015b3c <__ieee754_rem_pio2f+0x218>
 8015a8e:	eef1 6a66 	vneg.f32	s13, s13
 8015a92:	eeb1 0a40 	vneg.f32	s0, s0
 8015a96:	edc5 6a00 	vstr	s13, [r5]
 8015a9a:	ed85 0a01 	vstr	s0, [r5, #4]
 8015a9e:	e04c      	b.n	8015b3a <__ieee754_rem_pio2f+0x216>
 8015aa0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015aa4:	db07      	blt.n	8015ab6 <__ieee754_rem_pio2f+0x192>
 8015aa6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015aaa:	edc0 7a01 	vstr	s15, [r0, #4]
 8015aae:	edc0 7a00 	vstr	s15, [r0]
 8015ab2:	2000      	movs	r0, #0
 8015ab4:	e042      	b.n	8015b3c <__ieee754_rem_pio2f+0x218>
 8015ab6:	15e2      	asrs	r2, r4, #23
 8015ab8:	3a86      	subs	r2, #134	; 0x86
 8015aba:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8015abe:	ee06 3a90 	vmov	s13, r3
 8015ac2:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 8015ac6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8015b70 <__ieee754_rem_pio2f+0x24c>
 8015aca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ace:	ed8d 7a03 	vstr	s14, [sp, #12]
 8015ad2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ada:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8015ade:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015ae2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015ae6:	edcd 6a04 	vstr	s13, [sp, #16]
 8015aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015aee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af6:	edcd 7a05 	vstr	s15, [sp, #20]
 8015afa:	d107      	bne.n	8015b0c <__ieee754_rem_pio2f+0x1e8>
 8015afc:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b04:	bf14      	ite	ne
 8015b06:	2302      	movne	r3, #2
 8015b08:	2301      	moveq	r3, #1
 8015b0a:	e000      	b.n	8015b0e <__ieee754_rem_pio2f+0x1ea>
 8015b0c:	2303      	movs	r3, #3
 8015b0e:	4919      	ldr	r1, [pc, #100]	; (8015b74 <__ieee754_rem_pio2f+0x250>)
 8015b10:	9101      	str	r1, [sp, #4]
 8015b12:	2102      	movs	r1, #2
 8015b14:	9100      	str	r1, [sp, #0]
 8015b16:	a803      	add	r0, sp, #12
 8015b18:	4629      	mov	r1, r5
 8015b1a:	f000 f88b 	bl	8015c34 <__kernel_rem_pio2f>
 8015b1e:	2e00      	cmp	r6, #0
 8015b20:	da0c      	bge.n	8015b3c <__ieee754_rem_pio2f+0x218>
 8015b22:	edd5 7a00 	vldr	s15, [r5]
 8015b26:	eef1 7a67 	vneg.f32	s15, s15
 8015b2a:	edc5 7a00 	vstr	s15, [r5]
 8015b2e:	edd5 7a01 	vldr	s15, [r5, #4]
 8015b32:	eef1 7a67 	vneg.f32	s15, s15
 8015b36:	edc5 7a01 	vstr	s15, [r5, #4]
 8015b3a:	4240      	negs	r0, r0
 8015b3c:	b007      	add	sp, #28
 8015b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b40:	3f490fd8 	.word	0x3f490fd8
 8015b44:	4016cbe3 	.word	0x4016cbe3
 8015b48:	3fc90f80 	.word	0x3fc90f80
 8015b4c:	3fc90fd0 	.word	0x3fc90fd0
 8015b50:	37354400 	.word	0x37354400
 8015b54:	37354443 	.word	0x37354443
 8015b58:	2e85a308 	.word	0x2e85a308
 8015b5c:	43490f80 	.word	0x43490f80
 8015b60:	3f22f984 	.word	0x3f22f984
 8015b64:	0801c478 	.word	0x0801c478
 8015b68:	2e85a300 	.word	0x2e85a300
 8015b6c:	248d3132 	.word	0x248d3132
 8015b70:	43800000 	.word	0x43800000
 8015b74:	0801c4f8 	.word	0x0801c4f8

08015b78 <__kernel_cosf>:
 8015b78:	ee10 3a10 	vmov	r3, s0
 8015b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b80:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b88:	da05      	bge.n	8015b96 <__kernel_cosf+0x1e>
 8015b8a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015b8e:	ee17 2a90 	vmov	r2, s15
 8015b92:	2a00      	cmp	r2, #0
 8015b94:	d03b      	beq.n	8015c0e <__kernel_cosf+0x96>
 8015b96:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015b9a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8015c14 <__kernel_cosf+0x9c>
 8015b9e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015c18 <__kernel_cosf+0xa0>
 8015ba2:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8015c1c <__kernel_cosf+0xa4>
 8015ba6:	4a1e      	ldr	r2, [pc, #120]	; (8015c20 <__kernel_cosf+0xa8>)
 8015ba8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015bac:	4293      	cmp	r3, r2
 8015bae:	ee60 0a20 	vmul.f32	s1, s0, s1
 8015bb2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8015bb6:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8015c24 <__kernel_cosf+0xac>
 8015bba:	eea7 6a25 	vfma.f32	s12, s14, s11
 8015bbe:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8015c28 <__kernel_cosf+0xb0>
 8015bc2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8015bc6:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8015c2c <__kernel_cosf+0xb4>
 8015bca:	eea7 6a25 	vfma.f32	s12, s14, s11
 8015bce:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015bd2:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015bd6:	dc06      	bgt.n	8015be6 <__kernel_cosf+0x6e>
 8015bd8:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8015bdc:	eed7 0a25 	vfnms.f32	s1, s14, s11
 8015be0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8015be4:	4770      	bx	lr
 8015be6:	4a12      	ldr	r2, [pc, #72]	; (8015c30 <__kernel_cosf+0xb8>)
 8015be8:	4293      	cmp	r3, r2
 8015bea:	bfda      	itte	le
 8015bec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8015bf0:	ee07 3a90 	vmovle	s15, r3
 8015bf4:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8015bf8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015bfc:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8015c00:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8015c04:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015c08:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8015c0c:	4770      	bx	lr
 8015c0e:	eeb0 0a66 	vmov.f32	s0, s13
 8015c12:	4770      	bx	lr
 8015c14:	310f74f6 	.word	0x310f74f6
 8015c18:	ad47d74e 	.word	0xad47d74e
 8015c1c:	b493f27c 	.word	0xb493f27c
 8015c20:	3e999999 	.word	0x3e999999
 8015c24:	37d00d01 	.word	0x37d00d01
 8015c28:	bab60b61 	.word	0xbab60b61
 8015c2c:	3d2aaaab 	.word	0x3d2aaaab
 8015c30:	3f480000 	.word	0x3f480000

08015c34 <__kernel_rem_pio2f>:
 8015c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c38:	ed2d 8b04 	vpush	{d8-d9}
 8015c3c:	b0d5      	sub	sp, #340	; 0x154
 8015c3e:	460f      	mov	r7, r1
 8015c40:	9000      	str	r0, [sp, #0]
 8015c42:	49cf      	ldr	r1, [pc, #828]	; (8015f80 <__kernel_rem_pio2f+0x34c>)
 8015c44:	9862      	ldr	r0, [sp, #392]	; 0x188
 8015c46:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 8015c48:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8015c4c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015c50:	1ed0      	subs	r0, r2, #3
 8015c52:	2408      	movs	r4, #8
 8015c54:	fb90 f0f4 	sdiv	r0, r0, r4
 8015c58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8015c5c:	1c45      	adds	r5, r0, #1
 8015c5e:	ebca 0e00 	rsb	lr, sl, r0
 8015c62:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8015c66:	eb09 0c0a 	add.w	ip, r9, sl
 8015c6a:	ac18      	add	r4, sp, #96	; 0x60
 8015c6c:	eb06 088e 	add.w	r8, r6, lr, lsl #2
 8015c70:	2200      	movs	r2, #0
 8015c72:	4562      	cmp	r2, ip
 8015c74:	dc0e      	bgt.n	8015c94 <__kernel_rem_pio2f+0x60>
 8015c76:	eb1e 0f02 	cmn.w	lr, r2
 8015c7a:	bf57      	itett	pl
 8015c7c:	f858 1022 	ldrpl.w	r1, [r8, r2, lsl #2]
 8015c80:	eddf 7ac0 	vldrmi	s15, [pc, #768]	; 8015f84 <__kernel_rem_pio2f+0x350>
 8015c84:	ee07 1a90 	vmovpl	s15, r1
 8015c88:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8015c8c:	3201      	adds	r2, #1
 8015c8e:	ece4 7a01 	vstmia	r4!, {s15}
 8015c92:	e7ee      	b.n	8015c72 <__kernel_rem_pio2f+0x3e>
 8015c94:	f50d 7c80 	add.w	ip, sp, #256	; 0x100
 8015c98:	2400      	movs	r4, #0
 8015c9a:	454c      	cmp	r4, r9
 8015c9c:	dc18      	bgt.n	8015cd0 <__kernel_rem_pio2f+0x9c>
 8015c9e:	191a      	adds	r2, r3, r4
 8015ca0:	a918      	add	r1, sp, #96	; 0x60
 8015ca2:	f8dd e000 	ldr.w	lr, [sp]
 8015ca6:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8015f84 <__kernel_rem_pio2f+0x350>
 8015caa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8015cae:	f04f 0800 	mov.w	r8, #0
 8015cb2:	45d0      	cmp	r8, sl
 8015cb4:	dc08      	bgt.n	8015cc8 <__kernel_rem_pio2f+0x94>
 8015cb6:	ecfe 6a01 	vldmia	lr!, {s13}
 8015cba:	ed32 7a01 	vldmdb	r2!, {s14}
 8015cbe:	f108 0801 	add.w	r8, r8, #1
 8015cc2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015cc6:	e7f4      	b.n	8015cb2 <__kernel_rem_pio2f+0x7e>
 8015cc8:	ecec 7a01 	vstmia	ip!, {s15}
 8015ccc:	3401      	adds	r4, #1
 8015cce:	e7e4      	b.n	8015c9a <__kernel_rem_pio2f+0x66>
 8015cd0:	aa04      	add	r2, sp, #16
 8015cd2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8015cd6:	9201      	str	r2, [sp, #4]
 8015cd8:	eddf 8aab 	vldr	s17, [pc, #684]	; 8015f88 <__kernel_rem_pio2f+0x354>
 8015cdc:	ed9f 9aab 	vldr	s18, [pc, #684]	; 8015f8c <__kernel_rem_pio2f+0x358>
 8015ce0:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 8015ce4:	9202      	str	r2, [sp, #8]
 8015ce6:	464c      	mov	r4, r9
 8015ce8:	aa54      	add	r2, sp, #336	; 0x150
 8015cea:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 8015cee:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8015cf2:	f108 38ff 	add.w	r8, r8, #4294967295
 8015cf6:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8015cfa:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8015cfe:	aa54      	add	r2, sp, #336	; 0x150
 8015d00:	eb02 0008 	add.w	r0, r2, r8
 8015d04:	384c      	subs	r0, #76	; 0x4c
 8015d06:	2200      	movs	r2, #0
 8015d08:	1aa6      	subs	r6, r4, r2
 8015d0a:	2e00      	cmp	r6, #0
 8015d0c:	dd14      	ble.n	8015d38 <__kernel_rem_pio2f+0x104>
 8015d0e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8015d12:	ae04      	add	r6, sp, #16
 8015d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d1c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8015d20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015d24:	ee10 1a10 	vmov	r1, s0
 8015d28:	ed30 0a01 	vldmdb	r0!, {s0}
 8015d2c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8015d30:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015d34:	3201      	adds	r2, #1
 8015d36:	e7e7      	b.n	8015d08 <__kernel_rem_pio2f+0xd4>
 8015d38:	4628      	mov	r0, r5
 8015d3a:	9303      	str	r3, [sp, #12]
 8015d3c:	f000 fb48 	bl	80163d0 <scalbnf>
 8015d40:	eeb0 8a40 	vmov.f32	s16, s0
 8015d44:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8015d48:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015d4c:	f000 fafe 	bl	801634c <floorf>
 8015d50:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8015d54:	eea0 8a67 	vfms.f32	s16, s0, s15
 8015d58:	2d00      	cmp	r5, #0
 8015d5a:	9b03      	ldr	r3, [sp, #12]
 8015d5c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015d60:	ee17 ba90 	vmov	fp, s15
 8015d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d68:	ee38 8a67 	vsub.f32	s16, s16, s15
 8015d6c:	dd14      	ble.n	8015d98 <__kernel_rem_pio2f+0x164>
 8015d6e:	f104 3eff 	add.w	lr, r4, #4294967295
 8015d72:	aa04      	add	r2, sp, #16
 8015d74:	f1c5 0608 	rsb	r6, r5, #8
 8015d78:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015d7c:	fa42 f006 	asr.w	r0, r2, r6
 8015d80:	fa00 f606 	lsl.w	r6, r0, r6
 8015d84:	a904      	add	r1, sp, #16
 8015d86:	1b92      	subs	r2, r2, r6
 8015d88:	f1c5 0607 	rsb	r6, r5, #7
 8015d8c:	4483      	add	fp, r0
 8015d8e:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 8015d92:	fa42 f606 	asr.w	r6, r2, r6
 8015d96:	e00f      	b.n	8015db8 <__kernel_rem_pio2f+0x184>
 8015d98:	d105      	bne.n	8015da6 <__kernel_rem_pio2f+0x172>
 8015d9a:	1e62      	subs	r2, r4, #1
 8015d9c:	a904      	add	r1, sp, #16
 8015d9e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8015da2:	1236      	asrs	r6, r6, #8
 8015da4:	e008      	b.n	8015db8 <__kernel_rem_pio2f+0x184>
 8015da6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015daa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db2:	da04      	bge.n	8015dbe <__kernel_rem_pio2f+0x18a>
 8015db4:	2600      	movs	r6, #0
 8015db6:	e03f      	b.n	8015e38 <__kernel_rem_pio2f+0x204>
 8015db8:	2e00      	cmp	r6, #0
 8015dba:	dc01      	bgt.n	8015dc0 <__kernel_rem_pio2f+0x18c>
 8015dbc:	e03c      	b.n	8015e38 <__kernel_rem_pio2f+0x204>
 8015dbe:	2602      	movs	r6, #2
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	f10b 0b01 	add.w	fp, fp, #1
 8015dc6:	4610      	mov	r0, r2
 8015dc8:	4294      	cmp	r4, r2
 8015dca:	dd0f      	ble.n	8015dec <__kernel_rem_pio2f+0x1b8>
 8015dcc:	a904      	add	r1, sp, #16
 8015dce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015dd2:	b918      	cbnz	r0, 8015ddc <__kernel_rem_pio2f+0x1a8>
 8015dd4:	b141      	cbz	r1, 8015de8 <__kernel_rem_pio2f+0x1b4>
 8015dd6:	f5c1 7080 	rsb	r0, r1, #256	; 0x100
 8015dda:	e001      	b.n	8015de0 <__kernel_rem_pio2f+0x1ac>
 8015ddc:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
 8015de0:	a904      	add	r1, sp, #16
 8015de2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8015de6:	2001      	movs	r0, #1
 8015de8:	3201      	adds	r2, #1
 8015dea:	e7ed      	b.n	8015dc8 <__kernel_rem_pio2f+0x194>
 8015dec:	2d00      	cmp	r5, #0
 8015dee:	dd15      	ble.n	8015e1c <__kernel_rem_pio2f+0x1e8>
 8015df0:	2d01      	cmp	r5, #1
 8015df2:	d009      	beq.n	8015e08 <__kernel_rem_pio2f+0x1d4>
 8015df4:	2d02      	cmp	r5, #2
 8015df6:	d111      	bne.n	8015e1c <__kernel_rem_pio2f+0x1e8>
 8015df8:	f104 3eff 	add.w	lr, r4, #4294967295
 8015dfc:	aa04      	add	r2, sp, #16
 8015dfe:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015e02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8015e06:	e006      	b.n	8015e16 <__kernel_rem_pio2f+0x1e2>
 8015e08:	f104 3eff 	add.w	lr, r4, #4294967295
 8015e0c:	aa04      	add	r2, sp, #16
 8015e0e:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015e12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015e16:	a904      	add	r1, sp, #16
 8015e18:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 8015e1c:	2e02      	cmp	r6, #2
 8015e1e:	d10b      	bne.n	8015e38 <__kernel_rem_pio2f+0x204>
 8015e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015e24:	ee30 8a48 	vsub.f32	s16, s0, s16
 8015e28:	b130      	cbz	r0, 8015e38 <__kernel_rem_pio2f+0x204>
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	9303      	str	r3, [sp, #12]
 8015e2e:	f000 facf 	bl	80163d0 <scalbnf>
 8015e32:	9b03      	ldr	r3, [sp, #12]
 8015e34:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015e38:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e40:	d154      	bne.n	8015eec <__kernel_rem_pio2f+0x2b8>
 8015e42:	f104 3cff 	add.w	ip, r4, #4294967295
 8015e46:	4660      	mov	r0, ip
 8015e48:	2200      	movs	r2, #0
 8015e4a:	4548      	cmp	r0, r9
 8015e4c:	db05      	blt.n	8015e5a <__kernel_rem_pio2f+0x226>
 8015e4e:	a904      	add	r1, sp, #16
 8015e50:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8015e54:	3801      	subs	r0, #1
 8015e56:	430a      	orrs	r2, r1
 8015e58:	e7f7      	b.n	8015e4a <__kernel_rem_pio2f+0x216>
 8015e5a:	2a00      	cmp	r2, #0
 8015e5c:	d13d      	bne.n	8015eda <__kernel_rem_pio2f+0x2a6>
 8015e5e:	2201      	movs	r2, #1
 8015e60:	f06f 0603 	mvn.w	r6, #3
 8015e64:	fb06 f002 	mul.w	r0, r6, r2
 8015e68:	9901      	ldr	r1, [sp, #4]
 8015e6a:	5808      	ldr	r0, [r1, r0]
 8015e6c:	b908      	cbnz	r0, 8015e72 <__kernel_rem_pio2f+0x23e>
 8015e6e:	3201      	adds	r2, #1
 8015e70:	e7f8      	b.n	8015e64 <__kernel_rem_pio2f+0x230>
 8015e72:	eb03 0e04 	add.w	lr, r3, r4
 8015e76:	1c60      	adds	r0, r4, #1
 8015e78:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8015e7c:	f108 0804 	add.w	r8, r8, #4
 8015e80:	2600      	movs	r6, #0
 8015e82:	4414      	add	r4, r2
 8015e84:	42a0      	cmp	r0, r4
 8015e86:	f73f af2f 	bgt.w	8015ce8 <__kernel_rem_pio2f+0xb4>
 8015e8a:	3604      	adds	r6, #4
 8015e8c:	a918      	add	r1, sp, #96	; 0x60
 8015e8e:	eb06 020e 	add.w	r2, r6, lr
 8015e92:	440a      	add	r2, r1
 8015e94:	9902      	ldr	r1, [sp, #8]
 8015e96:	f8dd b000 	ldr.w	fp, [sp]
 8015e9a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8015e9e:	9103      	str	r1, [sp, #12]
 8015ea0:	ee07 1a90 	vmov	s15, r1
 8015ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ea8:	f04f 0c00 	mov.w	ip, #0
 8015eac:	ed42 7a01 	vstr	s15, [r2, #-4]
 8015eb0:	eddf 7a34 	vldr	s15, [pc, #208]	; 8015f84 <__kernel_rem_pio2f+0x350>
 8015eb4:	45d4      	cmp	ip, sl
 8015eb6:	dc08      	bgt.n	8015eca <__kernel_rem_pio2f+0x296>
 8015eb8:	ecfb 6a01 	vldmia	fp!, {s13}
 8015ebc:	ed32 7a01 	vldmdb	r2!, {s14}
 8015ec0:	f10c 0c01 	add.w	ip, ip, #1
 8015ec4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015ec8:	e7f4      	b.n	8015eb4 <__kernel_rem_pio2f+0x280>
 8015eca:	eb06 0208 	add.w	r2, r6, r8
 8015ece:	a940      	add	r1, sp, #256	; 0x100
 8015ed0:	440a      	add	r2, r1
 8015ed2:	edc2 7a00 	vstr	s15, [r2]
 8015ed6:	3001      	adds	r0, #1
 8015ed8:	e7d4      	b.n	8015e84 <__kernel_rem_pio2f+0x250>
 8015eda:	3d08      	subs	r5, #8
 8015edc:	4664      	mov	r4, ip
 8015ede:	ab04      	add	r3, sp, #16
 8015ee0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015ee4:	bb6b      	cbnz	r3, 8015f42 <__kernel_rem_pio2f+0x30e>
 8015ee6:	3c01      	subs	r4, #1
 8015ee8:	3d08      	subs	r5, #8
 8015eea:	e7f8      	b.n	8015ede <__kernel_rem_pio2f+0x2aa>
 8015eec:	4268      	negs	r0, r5
 8015eee:	eeb0 0a48 	vmov.f32	s0, s16
 8015ef2:	f000 fa6d 	bl	80163d0 <scalbnf>
 8015ef6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8015f8c <__kernel_rem_pio2f+0x358>
 8015efa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8015efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f02:	db17      	blt.n	8015f34 <__kernel_rem_pio2f+0x300>
 8015f04:	eddf 7a20 	vldr	s15, [pc, #128]	; 8015f88 <__kernel_rem_pio2f+0x354>
 8015f08:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015f0c:	aa04      	add	r2, sp, #16
 8015f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015f12:	3508      	adds	r5, #8
 8015f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015f20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015f24:	ee10 3a10 	vmov	r3, s0
 8015f28:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015f2c:	3401      	adds	r4, #1
 8015f2e:	ee17 3a90 	vmov	r3, s15
 8015f32:	e004      	b.n	8015f3e <__kernel_rem_pio2f+0x30a>
 8015f34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015f38:	aa04      	add	r2, sp, #16
 8015f3a:	ee10 3a10 	vmov	r3, s0
 8015f3e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015f42:	4628      	mov	r0, r5
 8015f44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015f48:	f000 fa42 	bl	80163d0 <scalbnf>
 8015f4c:	00a3      	lsls	r3, r4, #2
 8015f4e:	a940      	add	r1, sp, #256	; 0x100
 8015f50:	1d1a      	adds	r2, r3, #4
 8015f52:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8015f88 <__kernel_rem_pio2f+0x354>
 8015f56:	1888      	adds	r0, r1, r2
 8015f58:	4621      	mov	r1, r4
 8015f5a:	2900      	cmp	r1, #0
 8015f5c:	db18      	blt.n	8015f90 <__kernel_rem_pio2f+0x35c>
 8015f5e:	ad04      	add	r5, sp, #16
 8015f60:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015f64:	9500      	str	r5, [sp, #0]
 8015f66:	ee07 5a90 	vmov	s15, r5
 8015f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f6e:	3901      	subs	r1, #1
 8015f70:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015f74:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015f78:	ed60 7a01 	vstmdb	r0!, {s15}
 8015f7c:	e7ed      	b.n	8015f5a <__kernel_rem_pio2f+0x326>
 8015f7e:	bf00      	nop
 8015f80:	0801c810 	.word	0x0801c810
 8015f84:	00000000 	.word	0x00000000
 8015f88:	3b800000 	.word	0x3b800000
 8015f8c:	43800000 	.word	0x43800000
 8015f90:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
 8015f94:	2100      	movs	r1, #0
 8015f96:	1a65      	subs	r5, r4, r1
 8015f98:	d417      	bmi.n	8015fca <__kernel_rem_pio2f+0x396>
 8015f9a:	a840      	add	r0, sp, #256	; 0x100
 8015f9c:	f8df e15c 	ldr.w	lr, [pc, #348]	; 80160fc <__kernel_rem_pio2f+0x4c8>
 8015fa0:	eddf 7a55 	vldr	s15, [pc, #340]	; 80160f8 <__kernel_rem_pio2f+0x4c4>
 8015fa4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8015fa8:	2000      	movs	r0, #0
 8015faa:	4548      	cmp	r0, r9
 8015fac:	dc09      	bgt.n	8015fc2 <__kernel_rem_pio2f+0x38e>
 8015fae:	4288      	cmp	r0, r1
 8015fb0:	dc07      	bgt.n	8015fc2 <__kernel_rem_pio2f+0x38e>
 8015fb2:	ecfe 6a01 	vldmia	lr!, {s13}
 8015fb6:	ecb5 7a01 	vldmia	r5!, {s14}
 8015fba:	3001      	adds	r0, #1
 8015fbc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015fc0:	e7f3      	b.n	8015faa <__kernel_rem_pio2f+0x376>
 8015fc2:	ecec 7a01 	vstmia	ip!, {s15}
 8015fc6:	3101      	adds	r1, #1
 8015fc8:	e7e5      	b.n	8015f96 <__kernel_rem_pio2f+0x362>
 8015fca:	9962      	ldr	r1, [sp, #392]	; 0x188
 8015fcc:	2903      	cmp	r1, #3
 8015fce:	f200 808c 	bhi.w	80160ea <__kernel_rem_pio2f+0x4b6>
 8015fd2:	e8df f001 	tbb	[pc, r1]
 8015fd6:	070d      	.short	0x070d
 8015fd8:	0207      	.short	0x0207
 8015fda:	a92c      	add	r1, sp, #176	; 0xb0
 8015fdc:	440b      	add	r3, r1
 8015fde:	4619      	mov	r1, r3
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	e03b      	b.n	801605c <__kernel_rem_pio2f+0x428>
 8015fe4:	ab2c      	add	r3, sp, #176	; 0xb0
 8015fe6:	441a      	add	r2, r3
 8015fe8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80160f8 <__kernel_rem_pio2f+0x4c4>
 8015fec:	4623      	mov	r3, r4
 8015fee:	e011      	b.n	8016014 <__kernel_rem_pio2f+0x3e0>
 8015ff0:	ab2c      	add	r3, sp, #176	; 0xb0
 8015ff2:	eddf 7a41 	vldr	s15, [pc, #260]	; 80160f8 <__kernel_rem_pio2f+0x4c4>
 8015ff6:	441a      	add	r2, r3
 8015ff8:	2c00      	cmp	r4, #0
 8015ffa:	db05      	blt.n	8016008 <__kernel_rem_pio2f+0x3d4>
 8015ffc:	ed32 7a01 	vldmdb	r2!, {s14}
 8016000:	3c01      	subs	r4, #1
 8016002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016006:	e7f7      	b.n	8015ff8 <__kernel_rem_pio2f+0x3c4>
 8016008:	b10e      	cbz	r6, 801600e <__kernel_rem_pio2f+0x3da>
 801600a:	eef1 7a67 	vneg.f32	s15, s15
 801600e:	edc7 7a00 	vstr	s15, [r7]
 8016012:	e06a      	b.n	80160ea <__kernel_rem_pio2f+0x4b6>
 8016014:	2b00      	cmp	r3, #0
 8016016:	db05      	blt.n	8016024 <__kernel_rem_pio2f+0x3f0>
 8016018:	ed72 7a01 	vldmdb	r2!, {s15}
 801601c:	3b01      	subs	r3, #1
 801601e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016022:	e7f7      	b.n	8016014 <__kernel_rem_pio2f+0x3e0>
 8016024:	b116      	cbz	r6, 801602c <__kernel_rem_pio2f+0x3f8>
 8016026:	eef1 7a47 	vneg.f32	s15, s14
 801602a:	e001      	b.n	8016030 <__kernel_rem_pio2f+0x3fc>
 801602c:	eef0 7a47 	vmov.f32	s15, s14
 8016030:	edc7 7a00 	vstr	s15, [r7]
 8016034:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
 8016038:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801603c:	aa2d      	add	r2, sp, #180	; 0xb4
 801603e:	2301      	movs	r3, #1
 8016040:	429c      	cmp	r4, r3
 8016042:	db05      	blt.n	8016050 <__kernel_rem_pio2f+0x41c>
 8016044:	ecb2 7a01 	vldmia	r2!, {s14}
 8016048:	3301      	adds	r3, #1
 801604a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801604e:	e7f7      	b.n	8016040 <__kernel_rem_pio2f+0x40c>
 8016050:	b10e      	cbz	r6, 8016056 <__kernel_rem_pio2f+0x422>
 8016052:	eef1 7a67 	vneg.f32	s15, s15
 8016056:	edc7 7a01 	vstr	s15, [r7, #4]
 801605a:	e046      	b.n	80160ea <__kernel_rem_pio2f+0x4b6>
 801605c:	2800      	cmp	r0, #0
 801605e:	dd0f      	ble.n	8016080 <__kernel_rem_pio2f+0x44c>
 8016060:	ed71 7a01 	vldmdb	r1!, {s15}
 8016064:	edd1 6a01 	vldr	s13, [r1, #4]
 8016068:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801606c:	3801      	subs	r0, #1
 801606e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016072:	ed81 7a00 	vstr	s14, [r1]
 8016076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801607a:	edc1 7a01 	vstr	s15, [r1, #4]
 801607e:	e7ed      	b.n	801605c <__kernel_rem_pio2f+0x428>
 8016080:	4621      	mov	r1, r4
 8016082:	2901      	cmp	r1, #1
 8016084:	dd0f      	ble.n	80160a6 <__kernel_rem_pio2f+0x472>
 8016086:	ed73 7a01 	vldmdb	r3!, {s15}
 801608a:	edd3 6a01 	vldr	s13, [r3, #4]
 801608e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016092:	3901      	subs	r1, #1
 8016094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016098:	ed83 7a00 	vstr	s14, [r3]
 801609c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160a0:	edc3 7a01 	vstr	s15, [r3, #4]
 80160a4:	e7ed      	b.n	8016082 <__kernel_rem_pio2f+0x44e>
 80160a6:	ab2c      	add	r3, sp, #176	; 0xb0
 80160a8:	eddf 7a13 	vldr	s15, [pc, #76]	; 80160f8 <__kernel_rem_pio2f+0x4c4>
 80160ac:	441a      	add	r2, r3
 80160ae:	2c01      	cmp	r4, #1
 80160b0:	dd05      	ble.n	80160be <__kernel_rem_pio2f+0x48a>
 80160b2:	ed32 7a01 	vldmdb	r2!, {s14}
 80160b6:	3c01      	subs	r4, #1
 80160b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80160bc:	e7f7      	b.n	80160ae <__kernel_rem_pio2f+0x47a>
 80160be:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 80160c2:	ed9d 7a2d 	vldr	s14, [sp, #180]	; 0xb4
 80160c6:	b926      	cbnz	r6, 80160d2 <__kernel_rem_pio2f+0x49e>
 80160c8:	edc7 6a00 	vstr	s13, [r7]
 80160cc:	ed87 7a01 	vstr	s14, [r7, #4]
 80160d0:	e009      	b.n	80160e6 <__kernel_rem_pio2f+0x4b2>
 80160d2:	eef1 6a66 	vneg.f32	s13, s13
 80160d6:	eeb1 7a47 	vneg.f32	s14, s14
 80160da:	edc7 6a00 	vstr	s13, [r7]
 80160de:	ed87 7a01 	vstr	s14, [r7, #4]
 80160e2:	eef1 7a67 	vneg.f32	s15, s15
 80160e6:	edc7 7a02 	vstr	s15, [r7, #8]
 80160ea:	f00b 0007 	and.w	r0, fp, #7
 80160ee:	b055      	add	sp, #340	; 0x154
 80160f0:	ecbd 8b04 	vpop	{d8-d9}
 80160f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f8:	00000000 	.word	0x00000000
 80160fc:	0801c81c 	.word	0x0801c81c

08016100 <__kernel_sinf>:
 8016100:	ee10 3a10 	vmov	r3, s0
 8016104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016108:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801610c:	da04      	bge.n	8016118 <__kernel_sinf+0x18>
 801610e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016112:	ee17 3a90 	vmov	r3, s15
 8016116:	b35b      	cbz	r3, 8016170 <__kernel_sinf+0x70>
 8016118:	ee20 7a00 	vmul.f32	s14, s0, s0
 801611c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016174 <__kernel_sinf+0x74>
 8016120:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016178 <__kernel_sinf+0x78>
 8016124:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016128:	eddf 7a14 	vldr	s15, [pc, #80]	; 801617c <__kernel_sinf+0x7c>
 801612c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8016130:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016180 <__kernel_sinf+0x80>
 8016134:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016138:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016184 <__kernel_sinf+0x84>
 801613c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016140:	eee7 7a06 	vfma.f32	s15, s14, s12
 8016144:	b930      	cbnz	r0, 8016154 <__kernel_sinf+0x54>
 8016146:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016188 <__kernel_sinf+0x88>
 801614a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801614e:	eea6 0a86 	vfma.f32	s0, s13, s12
 8016152:	4770      	bx	lr
 8016154:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016158:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801615c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016160:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8016164:	eddf 7a09 	vldr	s15, [pc, #36]	; 801618c <__kernel_sinf+0x8c>
 8016168:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801616c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	2f2ec9d3 	.word	0x2f2ec9d3
 8016178:	b2d72f34 	.word	0xb2d72f34
 801617c:	3638ef1b 	.word	0x3638ef1b
 8016180:	b9500d01 	.word	0xb9500d01
 8016184:	3c088889 	.word	0x3c088889
 8016188:	be2aaaab 	.word	0xbe2aaaab
 801618c:	3e2aaaab 	.word	0x3e2aaaab

08016190 <atanf>:
 8016190:	b538      	push	{r3, r4, r5, lr}
 8016192:	ee10 5a10 	vmov	r5, s0
 8016196:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801619a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801619e:	eef0 7a40 	vmov.f32	s15, s0
 80161a2:	db0e      	blt.n	80161c2 <atanf+0x32>
 80161a4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80161a8:	dd02      	ble.n	80161b0 <atanf+0x20>
 80161aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80161ae:	bd38      	pop	{r3, r4, r5, pc}
 80161b0:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80162f0 <atanf+0x160>
 80161b4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80162f4 <atanf+0x164>
 80161b8:	2d00      	cmp	r5, #0
 80161ba:	bfc8      	it	gt
 80161bc:	eeb0 0a67 	vmovgt.f32	s0, s15
 80161c0:	bd38      	pop	{r3, r4, r5, pc}
 80161c2:	4b4d      	ldr	r3, [pc, #308]	; (80162f8 <atanf+0x168>)
 80161c4:	429c      	cmp	r4, r3
 80161c6:	dc0f      	bgt.n	80161e8 <atanf+0x58>
 80161c8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80161cc:	da40      	bge.n	8016250 <atanf+0xc0>
 80161ce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80162fc <atanf+0x16c>
 80161d2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80161d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80161da:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80161de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161e2:	f300 8082 	bgt.w	80162ea <atanf+0x15a>
 80161e6:	e033      	b.n	8016250 <atanf+0xc0>
 80161e8:	f000 f8a8 	bl	801633c <fabsf>
 80161ec:	4b44      	ldr	r3, [pc, #272]	; (8016300 <atanf+0x170>)
 80161ee:	429c      	cmp	r4, r3
 80161f0:	dc19      	bgt.n	8016226 <atanf+0x96>
 80161f2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80161f6:	429c      	cmp	r4, r3
 80161f8:	dc0b      	bgt.n	8016212 <atanf+0x82>
 80161fa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80161fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016202:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016206:	2300      	movs	r3, #0
 8016208:	ee30 0a27 	vadd.f32	s0, s0, s15
 801620c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016210:	e020      	b.n	8016254 <atanf+0xc4>
 8016212:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016216:	ee30 7a67 	vsub.f32	s14, s0, s15
 801621a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801621e:	2301      	movs	r3, #1
 8016220:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016224:	e016      	b.n	8016254 <atanf+0xc4>
 8016226:	4b37      	ldr	r3, [pc, #220]	; (8016304 <atanf+0x174>)
 8016228:	429c      	cmp	r4, r3
 801622a:	dc0b      	bgt.n	8016244 <atanf+0xb4>
 801622c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016234:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016238:	2302      	movs	r3, #2
 801623a:	ee70 6a67 	vsub.f32	s13, s0, s15
 801623e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016242:	e007      	b.n	8016254 <atanf+0xc4>
 8016244:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016248:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801624c:	2303      	movs	r3, #3
 801624e:	e001      	b.n	8016254 <atanf+0xc4>
 8016250:	f04f 33ff 	mov.w	r3, #4294967295
 8016254:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8016258:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8016308 <atanf+0x178>
 801625c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801630c <atanf+0x17c>
 8016260:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8016310 <atanf+0x180>
 8016264:	ee26 7a06 	vmul.f32	s14, s12, s12
 8016268:	1c5a      	adds	r2, r3, #1
 801626a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801626e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016314 <atanf+0x184>
 8016272:	eee7 6a25 	vfma.f32	s13, s14, s11
 8016276:	eddf 5a28 	vldr	s11, [pc, #160]	; 8016318 <atanf+0x188>
 801627a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801627e:	eddf 6a27 	vldr	s13, [pc, #156]	; 801631c <atanf+0x18c>
 8016282:	eee7 6a25 	vfma.f32	s13, s14, s11
 8016286:	eddf 5a26 	vldr	s11, [pc, #152]	; 8016320 <atanf+0x190>
 801628a:	eee7 5a26 	vfma.f32	s11, s14, s13
 801628e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8016324 <atanf+0x194>
 8016292:	eea7 5a26 	vfma.f32	s10, s14, s13
 8016296:	eddf 6a24 	vldr	s13, [pc, #144]	; 8016328 <atanf+0x198>
 801629a:	eee7 6a05 	vfma.f32	s13, s14, s10
 801629e:	ed9f 5a23 	vldr	s10, [pc, #140]	; 801632c <atanf+0x19c>
 80162a2:	eea7 5a26 	vfma.f32	s10, s14, s13
 80162a6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8016330 <atanf+0x1a0>
 80162aa:	eee7 6a05 	vfma.f32	s13, s14, s10
 80162ae:	ee26 7a87 	vmul.f32	s14, s13, s14
 80162b2:	ee05 7a86 	vmla.f32	s14, s11, s12
 80162b6:	d104      	bne.n	80162c2 <atanf+0x132>
 80162b8:	eeb0 0a67 	vmov.f32	s0, s15
 80162bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80162c0:	bd38      	pop	{r3, r4, r5, pc}
 80162c2:	4a1c      	ldr	r2, [pc, #112]	; (8016334 <atanf+0x1a4>)
 80162c4:	491c      	ldr	r1, [pc, #112]	; (8016338 <atanf+0x1a8>)
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	441a      	add	r2, r3
 80162ca:	440b      	add	r3, r1
 80162cc:	ed93 0a00 	vldr	s0, [r3]
 80162d0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80162d4:	2d00      	cmp	r5, #0
 80162d6:	ed92 7a00 	vldr	s14, [r2]
 80162da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80162de:	ee77 7a40 	vsub.f32	s15, s14, s0
 80162e2:	da02      	bge.n	80162ea <atanf+0x15a>
 80162e4:	eeb1 0a67 	vneg.f32	s0, s15
 80162e8:	bd38      	pop	{r3, r4, r5, pc}
 80162ea:	eeb0 0a67 	vmov.f32	s0, s15
 80162ee:	bd38      	pop	{r3, r4, r5, pc}
 80162f0:	3fc90fdb 	.word	0x3fc90fdb
 80162f4:	bfc90fdb 	.word	0xbfc90fdb
 80162f8:	3edfffff 	.word	0x3edfffff
 80162fc:	7149f2ca 	.word	0x7149f2ca
 8016300:	3f97ffff 	.word	0x3f97ffff
 8016304:	401bffff 	.word	0x401bffff
 8016308:	3c8569d7 	.word	0x3c8569d7
 801630c:	3d4bda59 	.word	0x3d4bda59
 8016310:	bd6ef16b 	.word	0xbd6ef16b
 8016314:	3d886b35 	.word	0x3d886b35
 8016318:	3dba2e6e 	.word	0x3dba2e6e
 801631c:	3e124925 	.word	0x3e124925
 8016320:	3eaaaaab 	.word	0x3eaaaaab
 8016324:	bd15a221 	.word	0xbd15a221
 8016328:	bd9d8795 	.word	0xbd9d8795
 801632c:	bde38e38 	.word	0xbde38e38
 8016330:	be4ccccd 	.word	0xbe4ccccd
 8016334:	0801c858 	.word	0x0801c858
 8016338:	0801c848 	.word	0x0801c848

0801633c <fabsf>:
 801633c:	ee10 3a10 	vmov	r3, s0
 8016340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016344:	ee00 3a10 	vmov	s0, r3
 8016348:	4770      	bx	lr
	...

0801634c <floorf>:
 801634c:	ee10 3a10 	vmov	r3, s0
 8016350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016354:	0dca      	lsrs	r2, r1, #23
 8016356:	3a7f      	subs	r2, #127	; 0x7f
 8016358:	2a16      	cmp	r2, #22
 801635a:	dc28      	bgt.n	80163ae <floorf+0x62>
 801635c:	2a00      	cmp	r2, #0
 801635e:	da0f      	bge.n	8016380 <floorf+0x34>
 8016360:	eddf 7a18 	vldr	s15, [pc, #96]	; 80163c4 <floorf+0x78>
 8016364:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016368:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016370:	dd24      	ble.n	80163bc <floorf+0x70>
 8016372:	2b00      	cmp	r3, #0
 8016374:	da21      	bge.n	80163ba <floorf+0x6e>
 8016376:	4a14      	ldr	r2, [pc, #80]	; (80163c8 <floorf+0x7c>)
 8016378:	2900      	cmp	r1, #0
 801637a:	bf18      	it	ne
 801637c:	4613      	movne	r3, r2
 801637e:	e01d      	b.n	80163bc <floorf+0x70>
 8016380:	4912      	ldr	r1, [pc, #72]	; (80163cc <floorf+0x80>)
 8016382:	4111      	asrs	r1, r2
 8016384:	420b      	tst	r3, r1
 8016386:	d01b      	beq.n	80163c0 <floorf+0x74>
 8016388:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80163c4 <floorf+0x78>
 801638c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016390:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016398:	dd10      	ble.n	80163bc <floorf+0x70>
 801639a:	2b00      	cmp	r3, #0
 801639c:	bfbe      	ittt	lt
 801639e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80163a2:	fa40 f202 	asrlt.w	r2, r0, r2
 80163a6:	189b      	addlt	r3, r3, r2
 80163a8:	ea23 0301 	bic.w	r3, r3, r1
 80163ac:	e006      	b.n	80163bc <floorf+0x70>
 80163ae:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80163b2:	d305      	bcc.n	80163c0 <floorf+0x74>
 80163b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80163b8:	4770      	bx	lr
 80163ba:	2300      	movs	r3, #0
 80163bc:	ee00 3a10 	vmov	s0, r3
 80163c0:	4770      	bx	lr
 80163c2:	bf00      	nop
 80163c4:	7149f2ca 	.word	0x7149f2ca
 80163c8:	bf800000 	.word	0xbf800000
 80163cc:	007fffff 	.word	0x007fffff

080163d0 <scalbnf>:
 80163d0:	b508      	push	{r3, lr}
 80163d2:	ee10 2a10 	vmov	r2, s0
 80163d6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80163da:	ed2d 8b02 	vpush	{d8}
 80163de:	eef0 0a40 	vmov.f32	s1, s0
 80163e2:	d045      	beq.n	8016470 <scalbnf+0xa0>
 80163e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80163e8:	d302      	bcc.n	80163f0 <scalbnf+0x20>
 80163ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80163ee:	e03f      	b.n	8016470 <scalbnf+0xa0>
 80163f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80163f4:	d211      	bcs.n	801641a <scalbnf+0x4a>
 80163f6:	4b20      	ldr	r3, [pc, #128]	; (8016478 <scalbnf+0xa8>)
 80163f8:	eddf 7a20 	vldr	s15, [pc, #128]	; 801647c <scalbnf+0xac>
 80163fc:	4298      	cmp	r0, r3
 80163fe:	ee60 0a27 	vmul.f32	s1, s0, s15
 8016402:	db05      	blt.n	8016410 <scalbnf+0x40>
 8016404:	ee10 2a90 	vmov	r2, s1
 8016408:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801640c:	3b19      	subs	r3, #25
 801640e:	e005      	b.n	801641c <scalbnf+0x4c>
 8016410:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8016480 <scalbnf+0xb0>
 8016414:	ee20 0a80 	vmul.f32	s0, s1, s0
 8016418:	e02a      	b.n	8016470 <scalbnf+0xa0>
 801641a:	0ddb      	lsrs	r3, r3, #23
 801641c:	4403      	add	r3, r0
 801641e:	2bfe      	cmp	r3, #254	; 0xfe
 8016420:	dc0f      	bgt.n	8016442 <scalbnf+0x72>
 8016422:	2b00      	cmp	r3, #0
 8016424:	dd06      	ble.n	8016434 <scalbnf+0x64>
 8016426:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801642a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801642e:	ee00 3a10 	vmov	s0, r3
 8016432:	e01d      	b.n	8016470 <scalbnf+0xa0>
 8016434:	f113 0f16 	cmn.w	r3, #22
 8016438:	da0f      	bge.n	801645a <scalbnf+0x8a>
 801643a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801643e:	4298      	cmp	r0, r3
 8016440:	dd02      	ble.n	8016448 <scalbnf+0x78>
 8016442:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8016484 <scalbnf+0xb4>
 8016446:	e001      	b.n	801644c <scalbnf+0x7c>
 8016448:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8016480 <scalbnf+0xb0>
 801644c:	eeb0 0a48 	vmov.f32	s0, s16
 8016450:	f000 f81c 	bl	801648c <copysignf>
 8016454:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016458:	e00a      	b.n	8016470 <scalbnf+0xa0>
 801645a:	3319      	adds	r3, #25
 801645c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016460:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016464:	ee00 3a90 	vmov	s1, r3
 8016468:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016488 <scalbnf+0xb8>
 801646c:	ee20 0aa7 	vmul.f32	s0, s1, s15
 8016470:	ecbd 8b02 	vpop	{d8}
 8016474:	bd08      	pop	{r3, pc}
 8016476:	bf00      	nop
 8016478:	ffff3cb0 	.word	0xffff3cb0
 801647c:	4c000000 	.word	0x4c000000
 8016480:	0da24260 	.word	0x0da24260
 8016484:	7149f2ca 	.word	0x7149f2ca
 8016488:	33000000 	.word	0x33000000

0801648c <copysignf>:
 801648c:	ee10 3a10 	vmov	r3, s0
 8016490:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016494:	ee10 3a90 	vmov	r3, s1
 8016498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801649c:	4313      	orrs	r3, r2
 801649e:	ee00 3a10 	vmov	s0, r3
 80164a2:	4770      	bx	lr

080164a4 <abort>:
 80164a4:	b508      	push	{r3, lr}
 80164a6:	2006      	movs	r0, #6
 80164a8:	f000 ff48 	bl	801733c <raise>
 80164ac:	2001      	movs	r0, #1
 80164ae:	f004 f807 	bl	801a4c0 <_exit>

080164b2 <__cxa_atexit>:
 80164b2:	4613      	mov	r3, r2
 80164b4:	460a      	mov	r2, r1
 80164b6:	4601      	mov	r1, r0
 80164b8:	2002      	movs	r0, #2
 80164ba:	f002 ba6b 	b.w	8018994 <__register_exitproc>
	...

080164c0 <_fputc_r>:
 80164c0:	b570      	push	{r4, r5, r6, lr}
 80164c2:	460e      	mov	r6, r1
 80164c4:	4614      	mov	r4, r2
 80164c6:	4605      	mov	r5, r0
 80164c8:	b118      	cbz	r0, 80164d2 <_fputc_r+0x12>
 80164ca:	6983      	ldr	r3, [r0, #24]
 80164cc:	b90b      	cbnz	r3, 80164d2 <_fputc_r+0x12>
 80164ce:	f003 f9fd 	bl	80198cc <__sinit>
 80164d2:	4b0a      	ldr	r3, [pc, #40]	; (80164fc <_fputc_r+0x3c>)
 80164d4:	429c      	cmp	r4, r3
 80164d6:	d101      	bne.n	80164dc <_fputc_r+0x1c>
 80164d8:	686c      	ldr	r4, [r5, #4]
 80164da:	e008      	b.n	80164ee <_fputc_r+0x2e>
 80164dc:	4b08      	ldr	r3, [pc, #32]	; (8016500 <_fputc_r+0x40>)
 80164de:	429c      	cmp	r4, r3
 80164e0:	d101      	bne.n	80164e6 <_fputc_r+0x26>
 80164e2:	68ac      	ldr	r4, [r5, #8]
 80164e4:	e003      	b.n	80164ee <_fputc_r+0x2e>
 80164e6:	4b07      	ldr	r3, [pc, #28]	; (8016504 <_fputc_r+0x44>)
 80164e8:	429c      	cmp	r4, r3
 80164ea:	bf08      	it	eq
 80164ec:	68ec      	ldreq	r4, [r5, #12]
 80164ee:	4622      	mov	r2, r4
 80164f0:	4631      	mov	r1, r6
 80164f2:	4628      	mov	r0, r5
 80164f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164f8:	f000 bd00 	b.w	8016efc <_putc_r>
 80164fc:	0801cf74 	.word	0x0801cf74
 8016500:	0801cf94 	.word	0x0801cf94
 8016504:	0801cfb4 	.word	0x0801cfb4

08016508 <fputc>:
 8016508:	4b02      	ldr	r3, [pc, #8]	; (8016514 <fputc+0xc>)
 801650a:	460a      	mov	r2, r1
 801650c:	4601      	mov	r1, r0
 801650e:	6818      	ldr	r0, [r3, #0]
 8016510:	f7ff bfd6 	b.w	80164c0 <_fputc_r>
 8016514:	2000010c 	.word	0x2000010c

08016518 <_fputs_r>:
 8016518:	b530      	push	{r4, r5, lr}
 801651a:	b087      	sub	sp, #28
 801651c:	4605      	mov	r5, r0
 801651e:	4608      	mov	r0, r1
 8016520:	4614      	mov	r4, r2
 8016522:	9101      	str	r1, [sp, #4]
 8016524:	f7f2 f806 	bl	8008534 <strlen>
 8016528:	ab01      	add	r3, sp, #4
 801652a:	9303      	str	r3, [sp, #12]
 801652c:	2301      	movs	r3, #1
 801652e:	9005      	str	r0, [sp, #20]
 8016530:	9002      	str	r0, [sp, #8]
 8016532:	9304      	str	r3, [sp, #16]
 8016534:	b125      	cbz	r5, 8016540 <_fputs_r+0x28>
 8016536:	69ab      	ldr	r3, [r5, #24]
 8016538:	b913      	cbnz	r3, 8016540 <_fputs_r+0x28>
 801653a:	4628      	mov	r0, r5
 801653c:	f003 f9c6 	bl	80198cc <__sinit>
 8016540:	4b0f      	ldr	r3, [pc, #60]	; (8016580 <_fputs_r+0x68>)
 8016542:	429c      	cmp	r4, r3
 8016544:	d101      	bne.n	801654a <_fputs_r+0x32>
 8016546:	686c      	ldr	r4, [r5, #4]
 8016548:	e008      	b.n	801655c <_fputs_r+0x44>
 801654a:	4b0e      	ldr	r3, [pc, #56]	; (8016584 <_fputs_r+0x6c>)
 801654c:	429c      	cmp	r4, r3
 801654e:	d101      	bne.n	8016554 <_fputs_r+0x3c>
 8016550:	68ac      	ldr	r4, [r5, #8]
 8016552:	e003      	b.n	801655c <_fputs_r+0x44>
 8016554:	4b0c      	ldr	r3, [pc, #48]	; (8016588 <_fputs_r+0x70>)
 8016556:	429c      	cmp	r4, r3
 8016558:	bf08      	it	eq
 801655a:	68ec      	ldreq	r4, [r5, #12]
 801655c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016560:	049a      	lsls	r2, r3, #18
 8016562:	d406      	bmi.n	8016572 <_fputs_r+0x5a>
 8016564:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801656a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801656e:	81a3      	strh	r3, [r4, #12]
 8016570:	6662      	str	r2, [r4, #100]	; 0x64
 8016572:	aa03      	add	r2, sp, #12
 8016574:	4621      	mov	r1, r4
 8016576:	4628      	mov	r0, r5
 8016578:	f000 f822 	bl	80165c0 <__sfvwrite_r>
 801657c:	b007      	add	sp, #28
 801657e:	bd30      	pop	{r4, r5, pc}
 8016580:	0801cf74 	.word	0x0801cf74
 8016584:	0801cf94 	.word	0x0801cf94
 8016588:	0801cfb4 	.word	0x0801cfb4

0801658c <fputs>:
 801658c:	4b02      	ldr	r3, [pc, #8]	; (8016598 <fputs+0xc>)
 801658e:	460a      	mov	r2, r1
 8016590:	4601      	mov	r1, r0
 8016592:	6818      	ldr	r0, [r3, #0]
 8016594:	f7ff bfc0 	b.w	8016518 <_fputs_r>
 8016598:	2000010c 	.word	0x2000010c

0801659c <_fstat_r>:
 801659c:	b538      	push	{r3, r4, r5, lr}
 801659e:	4c07      	ldr	r4, [pc, #28]	; (80165bc <_fstat_r+0x20>)
 80165a0:	2300      	movs	r3, #0
 80165a2:	4605      	mov	r5, r0
 80165a4:	4608      	mov	r0, r1
 80165a6:	4611      	mov	r1, r2
 80165a8:	6023      	str	r3, [r4, #0]
 80165aa:	f003 ff43 	bl	801a434 <_fstat>
 80165ae:	1c43      	adds	r3, r0, #1
 80165b0:	d102      	bne.n	80165b8 <_fstat_r+0x1c>
 80165b2:	6823      	ldr	r3, [r4, #0]
 80165b4:	b103      	cbz	r3, 80165b8 <_fstat_r+0x1c>
 80165b6:	602b      	str	r3, [r5, #0]
 80165b8:	bd38      	pop	{r3, r4, r5, pc}
 80165ba:	bf00      	nop
 80165bc:	20004264 	.word	0x20004264

080165c0 <__sfvwrite_r>:
 80165c0:	6893      	ldr	r3, [r2, #8]
 80165c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165c6:	4606      	mov	r6, r0
 80165c8:	460c      	mov	r4, r1
 80165ca:	4690      	mov	r8, r2
 80165cc:	b90b      	cbnz	r3, 80165d2 <__sfvwrite_r+0x12>
 80165ce:	2000      	movs	r0, #0
 80165d0:	e13b      	b.n	801684a <__sfvwrite_r+0x28a>
 80165d2:	898b      	ldrh	r3, [r1, #12]
 80165d4:	0718      	lsls	r0, r3, #28
 80165d6:	d50f      	bpl.n	80165f8 <__sfvwrite_r+0x38>
 80165d8:	690b      	ldr	r3, [r1, #16]
 80165da:	b16b      	cbz	r3, 80165f8 <__sfvwrite_r+0x38>
 80165dc:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 80165e0:	f8d8 b000 	ldr.w	fp, [r8]
 80165e4:	f009 0502 	and.w	r5, r9, #2
 80165e8:	b2ad      	uxth	r5, r5
 80165ea:	b355      	cbz	r5, 8016642 <__sfvwrite_r+0x82>
 80165ec:	f04f 0900 	mov.w	r9, #0
 80165f0:	464f      	mov	r7, r9
 80165f2:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8016850 <__sfvwrite_r+0x290>
 80165f6:	e01b      	b.n	8016630 <__sfvwrite_r+0x70>
 80165f8:	4621      	mov	r1, r4
 80165fa:	4630      	mov	r0, r6
 80165fc:	f002 f95c 	bl	80188b8 <__swsetup_r>
 8016600:	2800      	cmp	r0, #0
 8016602:	d0eb      	beq.n	80165dc <__sfvwrite_r+0x1c>
 8016604:	e11f      	b.n	8016846 <__sfvwrite_r+0x286>
 8016606:	4557      	cmp	r7, sl
 8016608:	463b      	mov	r3, r7
 801660a:	464a      	mov	r2, r9
 801660c:	bf28      	it	cs
 801660e:	4653      	movcs	r3, sl
 8016610:	6a21      	ldr	r1, [r4, #32]
 8016612:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016614:	4630      	mov	r0, r6
 8016616:	47a8      	blx	r5
 8016618:	2800      	cmp	r0, #0
 801661a:	f340 8110 	ble.w	801683e <__sfvwrite_r+0x27e>
 801661e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016622:	4481      	add	r9, r0
 8016624:	1a3f      	subs	r7, r7, r0
 8016626:	1a18      	subs	r0, r3, r0
 8016628:	f8c8 0008 	str.w	r0, [r8, #8]
 801662c:	2800      	cmp	r0, #0
 801662e:	d0ce      	beq.n	80165ce <__sfvwrite_r+0xe>
 8016630:	2f00      	cmp	r7, #0
 8016632:	d1e8      	bne.n	8016606 <__sfvwrite_r+0x46>
 8016634:	f8db 9000 	ldr.w	r9, [fp]
 8016638:	f8db 7004 	ldr.w	r7, [fp, #4]
 801663c:	f10b 0b08 	add.w	fp, fp, #8
 8016640:	e7f6      	b.n	8016630 <__sfvwrite_r+0x70>
 8016642:	f019 0901 	ands.w	r9, r9, #1
 8016646:	d003      	beq.n	8016650 <__sfvwrite_r+0x90>
 8016648:	9500      	str	r5, [sp, #0]
 801664a:	46a9      	mov	r9, r5
 801664c:	46aa      	mov	sl, r5
 801664e:	e0bd      	b.n	80167cc <__sfvwrite_r+0x20c>
 8016650:	464f      	mov	r7, r9
 8016652:	b937      	cbnz	r7, 8016662 <__sfvwrite_r+0xa2>
 8016654:	f8db 9000 	ldr.w	r9, [fp]
 8016658:	f8db 7004 	ldr.w	r7, [fp, #4]
 801665c:	f10b 0b08 	add.w	fp, fp, #8
 8016660:	e7f7      	b.n	8016652 <__sfvwrite_r+0x92>
 8016662:	89a2      	ldrh	r2, [r4, #12]
 8016664:	68a5      	ldr	r5, [r4, #8]
 8016666:	0591      	lsls	r1, r2, #22
 8016668:	d552      	bpl.n	8016710 <__sfvwrite_r+0x150>
 801666a:	42af      	cmp	r7, r5
 801666c:	d342      	bcc.n	80166f4 <__sfvwrite_r+0x134>
 801666e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016672:	d03d      	beq.n	80166f0 <__sfvwrite_r+0x130>
 8016674:	6921      	ldr	r1, [r4, #16]
 8016676:	6823      	ldr	r3, [r4, #0]
 8016678:	1a5b      	subs	r3, r3, r1
 801667a:	9300      	str	r3, [sp, #0]
 801667c:	6963      	ldr	r3, [r4, #20]
 801667e:	2002      	movs	r0, #2
 8016680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016684:	fb93 faf0 	sdiv	sl, r3, r0
 8016688:	9b00      	ldr	r3, [sp, #0]
 801668a:	3301      	adds	r3, #1
 801668c:	443b      	add	r3, r7
 801668e:	459a      	cmp	sl, r3
 8016690:	bf38      	it	cc
 8016692:	469a      	movcc	sl, r3
 8016694:	0553      	lsls	r3, r2, #21
 8016696:	d510      	bpl.n	80166ba <__sfvwrite_r+0xfa>
 8016698:	4651      	mov	r1, sl
 801669a:	4630      	mov	r0, r6
 801669c:	f000 f9ce 	bl	8016a3c <_malloc_r>
 80166a0:	4605      	mov	r5, r0
 80166a2:	b1c0      	cbz	r0, 80166d6 <__sfvwrite_r+0x116>
 80166a4:	9a00      	ldr	r2, [sp, #0]
 80166a6:	6921      	ldr	r1, [r4, #16]
 80166a8:	f000 fbf7 	bl	8016e9a <memcpy>
 80166ac:	89a3      	ldrh	r3, [r4, #12]
 80166ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80166b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166b6:	81a3      	strh	r3, [r4, #12]
 80166b8:	e010      	b.n	80166dc <__sfvwrite_r+0x11c>
 80166ba:	4652      	mov	r2, sl
 80166bc:	4630      	mov	r0, r6
 80166be:	f000 fc5b 	bl	8016f78 <_realloc_r>
 80166c2:	4605      	mov	r5, r0
 80166c4:	b950      	cbnz	r0, 80166dc <__sfvwrite_r+0x11c>
 80166c6:	6921      	ldr	r1, [r4, #16]
 80166c8:	4630      	mov	r0, r6
 80166ca:	f003 f9c7 	bl	8019a5c <_free_r>
 80166ce:	89a3      	ldrh	r3, [r4, #12]
 80166d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80166d4:	81a3      	strh	r3, [r4, #12]
 80166d6:	230c      	movs	r3, #12
 80166d8:	6033      	str	r3, [r6, #0]
 80166da:	e0b0      	b.n	801683e <__sfvwrite_r+0x27e>
 80166dc:	9b00      	ldr	r3, [sp, #0]
 80166de:	6125      	str	r5, [r4, #16]
 80166e0:	441d      	add	r5, r3
 80166e2:	ebc3 030a 	rsb	r3, r3, sl
 80166e6:	6025      	str	r5, [r4, #0]
 80166e8:	f8c4 a014 	str.w	sl, [r4, #20]
 80166ec:	463d      	mov	r5, r7
 80166ee:	60a3      	str	r3, [r4, #8]
 80166f0:	42af      	cmp	r7, r5
 80166f2:	d200      	bcs.n	80166f6 <__sfvwrite_r+0x136>
 80166f4:	463d      	mov	r5, r7
 80166f6:	462a      	mov	r2, r5
 80166f8:	4649      	mov	r1, r9
 80166fa:	6820      	ldr	r0, [r4, #0]
 80166fc:	f000 fbd8 	bl	8016eb0 <memmove>
 8016700:	68a3      	ldr	r3, [r4, #8]
 8016702:	1b5b      	subs	r3, r3, r5
 8016704:	60a3      	str	r3, [r4, #8]
 8016706:	6823      	ldr	r3, [r4, #0]
 8016708:	441d      	add	r5, r3
 801670a:	6025      	str	r5, [r4, #0]
 801670c:	463d      	mov	r5, r7
 801670e:	e029      	b.n	8016764 <__sfvwrite_r+0x1a4>
 8016710:	6820      	ldr	r0, [r4, #0]
 8016712:	6923      	ldr	r3, [r4, #16]
 8016714:	4298      	cmp	r0, r3
 8016716:	d802      	bhi.n	801671e <__sfvwrite_r+0x15e>
 8016718:	6962      	ldr	r2, [r4, #20]
 801671a:	4297      	cmp	r7, r2
 801671c:	d213      	bcs.n	8016746 <__sfvwrite_r+0x186>
 801671e:	42bd      	cmp	r5, r7
 8016720:	bf28      	it	cs
 8016722:	463d      	movcs	r5, r7
 8016724:	462a      	mov	r2, r5
 8016726:	4649      	mov	r1, r9
 8016728:	f000 fbc2 	bl	8016eb0 <memmove>
 801672c:	68a3      	ldr	r3, [r4, #8]
 801672e:	6822      	ldr	r2, [r4, #0]
 8016730:	1b5b      	subs	r3, r3, r5
 8016732:	442a      	add	r2, r5
 8016734:	60a3      	str	r3, [r4, #8]
 8016736:	6022      	str	r2, [r4, #0]
 8016738:	b9a3      	cbnz	r3, 8016764 <__sfvwrite_r+0x1a4>
 801673a:	4621      	mov	r1, r4
 801673c:	4630      	mov	r0, r6
 801673e:	f003 f85b 	bl	80197f8 <_fflush_r>
 8016742:	b178      	cbz	r0, 8016764 <__sfvwrite_r+0x1a4>
 8016744:	e07b      	b.n	801683e <__sfvwrite_r+0x27e>
 8016746:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801674a:	42bb      	cmp	r3, r7
 801674c:	bf28      	it	cs
 801674e:	463b      	movcs	r3, r7
 8016750:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016752:	fb93 f3f2 	sdiv	r3, r3, r2
 8016756:	6a21      	ldr	r1, [r4, #32]
 8016758:	4353      	muls	r3, r2
 801675a:	4630      	mov	r0, r6
 801675c:	464a      	mov	r2, r9
 801675e:	47a8      	blx	r5
 8016760:	1e05      	subs	r5, r0, #0
 8016762:	dd6c      	ble.n	801683e <__sfvwrite_r+0x27e>
 8016764:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016768:	44a9      	add	r9, r5
 801676a:	1b7f      	subs	r7, r7, r5
 801676c:	1b5d      	subs	r5, r3, r5
 801676e:	f8c8 5008 	str.w	r5, [r8, #8]
 8016772:	2d00      	cmp	r5, #0
 8016774:	f47f af6d 	bne.w	8016652 <__sfvwrite_r+0x92>
 8016778:	e729      	b.n	80165ce <__sfvwrite_r+0xe>
 801677a:	9b00      	ldr	r3, [sp, #0]
 801677c:	b383      	cbz	r3, 80167e0 <__sfvwrite_r+0x220>
 801677e:	6820      	ldr	r0, [r4, #0]
 8016780:	6921      	ldr	r1, [r4, #16]
 8016782:	6962      	ldr	r2, [r4, #20]
 8016784:	4555      	cmp	r5, sl
 8016786:	462b      	mov	r3, r5
 8016788:	bf28      	it	cs
 801678a:	4653      	movcs	r3, sl
 801678c:	4288      	cmp	r0, r1
 801678e:	d936      	bls.n	80167fe <__sfvwrite_r+0x23e>
 8016790:	68a7      	ldr	r7, [r4, #8]
 8016792:	4417      	add	r7, r2
 8016794:	42bb      	cmp	r3, r7
 8016796:	dd32      	ble.n	80167fe <__sfvwrite_r+0x23e>
 8016798:	4649      	mov	r1, r9
 801679a:	463a      	mov	r2, r7
 801679c:	f000 fb88 	bl	8016eb0 <memmove>
 80167a0:	6823      	ldr	r3, [r4, #0]
 80167a2:	443b      	add	r3, r7
 80167a4:	6023      	str	r3, [r4, #0]
 80167a6:	4621      	mov	r1, r4
 80167a8:	4630      	mov	r0, r6
 80167aa:	f003 f825 	bl	80197f8 <_fflush_r>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d145      	bne.n	801683e <__sfvwrite_r+0x27e>
 80167b2:	1bed      	subs	r5, r5, r7
 80167b4:	d03c      	beq.n	8016830 <__sfvwrite_r+0x270>
 80167b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80167ba:	44b9      	add	r9, r7
 80167bc:	ebc7 0a0a 	rsb	sl, r7, sl
 80167c0:	1bdf      	subs	r7, r3, r7
 80167c2:	f8c8 7008 	str.w	r7, [r8, #8]
 80167c6:	2f00      	cmp	r7, #0
 80167c8:	f43f af01 	beq.w	80165ce <__sfvwrite_r+0xe>
 80167cc:	f1ba 0f00 	cmp.w	sl, #0
 80167d0:	d1d3      	bne.n	801677a <__sfvwrite_r+0x1ba>
 80167d2:	2300      	movs	r3, #0
 80167d4:	e89b 0600 	ldmia.w	fp, {r9, sl}
 80167d8:	9300      	str	r3, [sp, #0]
 80167da:	f10b 0b08 	add.w	fp, fp, #8
 80167de:	e7f5      	b.n	80167cc <__sfvwrite_r+0x20c>
 80167e0:	4652      	mov	r2, sl
 80167e2:	210a      	movs	r1, #10
 80167e4:	4648      	mov	r0, r9
 80167e6:	f7f1 fe4b 	bl	8008480 <memchr>
 80167ea:	b118      	cbz	r0, 80167f4 <__sfvwrite_r+0x234>
 80167ec:	3001      	adds	r0, #1
 80167ee:	ebc9 0500 	rsb	r5, r9, r0
 80167f2:	e001      	b.n	80167f8 <__sfvwrite_r+0x238>
 80167f4:	f10a 0501 	add.w	r5, sl, #1
 80167f8:	2301      	movs	r3, #1
 80167fa:	9300      	str	r3, [sp, #0]
 80167fc:	e7bf      	b.n	801677e <__sfvwrite_r+0x1be>
 80167fe:	4293      	cmp	r3, r2
 8016800:	db08      	blt.n	8016814 <__sfvwrite_r+0x254>
 8016802:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8016804:	6a21      	ldr	r1, [r4, #32]
 8016806:	4613      	mov	r3, r2
 8016808:	4630      	mov	r0, r6
 801680a:	464a      	mov	r2, r9
 801680c:	47b8      	blx	r7
 801680e:	1e07      	subs	r7, r0, #0
 8016810:	dccf      	bgt.n	80167b2 <__sfvwrite_r+0x1f2>
 8016812:	e014      	b.n	801683e <__sfvwrite_r+0x27e>
 8016814:	461a      	mov	r2, r3
 8016816:	4649      	mov	r1, r9
 8016818:	9301      	str	r3, [sp, #4]
 801681a:	f000 fb49 	bl	8016eb0 <memmove>
 801681e:	9b01      	ldr	r3, [sp, #4]
 8016820:	68a2      	ldr	r2, [r4, #8]
 8016822:	1ad2      	subs	r2, r2, r3
 8016824:	60a2      	str	r2, [r4, #8]
 8016826:	6822      	ldr	r2, [r4, #0]
 8016828:	441a      	add	r2, r3
 801682a:	6022      	str	r2, [r4, #0]
 801682c:	461f      	mov	r7, r3
 801682e:	e7c0      	b.n	80167b2 <__sfvwrite_r+0x1f2>
 8016830:	4621      	mov	r1, r4
 8016832:	4630      	mov	r0, r6
 8016834:	f002 ffe0 	bl	80197f8 <_fflush_r>
 8016838:	b908      	cbnz	r0, 801683e <__sfvwrite_r+0x27e>
 801683a:	9500      	str	r5, [sp, #0]
 801683c:	e7bb      	b.n	80167b6 <__sfvwrite_r+0x1f6>
 801683e:	89a3      	ldrh	r3, [r4, #12]
 8016840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016844:	81a3      	strh	r3, [r4, #12]
 8016846:	f04f 30ff 	mov.w	r0, #4294967295
 801684a:	b003      	add	sp, #12
 801684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016850:	7ffffc00 	.word	0x7ffffc00

08016854 <_fwrite_r>:
 8016854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016858:	b086      	sub	sp, #24
 801685a:	fb02 f603 	mul.w	r6, r2, r3
 801685e:	461d      	mov	r5, r3
 8016860:	ab01      	add	r3, sp, #4
 8016862:	9303      	str	r3, [sp, #12]
 8016864:	2301      	movs	r3, #1
 8016866:	4690      	mov	r8, r2
 8016868:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801686a:	9101      	str	r1, [sp, #4]
 801686c:	9602      	str	r6, [sp, #8]
 801686e:	9605      	str	r6, [sp, #20]
 8016870:	9304      	str	r3, [sp, #16]
 8016872:	4607      	mov	r7, r0
 8016874:	b118      	cbz	r0, 801687e <_fwrite_r+0x2a>
 8016876:	6983      	ldr	r3, [r0, #24]
 8016878:	b90b      	cbnz	r3, 801687e <_fwrite_r+0x2a>
 801687a:	f003 f827 	bl	80198cc <__sinit>
 801687e:	4b14      	ldr	r3, [pc, #80]	; (80168d0 <_fwrite_r+0x7c>)
 8016880:	429c      	cmp	r4, r3
 8016882:	d101      	bne.n	8016888 <_fwrite_r+0x34>
 8016884:	687c      	ldr	r4, [r7, #4]
 8016886:	e008      	b.n	801689a <_fwrite_r+0x46>
 8016888:	4b12      	ldr	r3, [pc, #72]	; (80168d4 <_fwrite_r+0x80>)
 801688a:	429c      	cmp	r4, r3
 801688c:	d101      	bne.n	8016892 <_fwrite_r+0x3e>
 801688e:	68bc      	ldr	r4, [r7, #8]
 8016890:	e003      	b.n	801689a <_fwrite_r+0x46>
 8016892:	4b11      	ldr	r3, [pc, #68]	; (80168d8 <_fwrite_r+0x84>)
 8016894:	429c      	cmp	r4, r3
 8016896:	bf08      	it	eq
 8016898:	68fc      	ldreq	r4, [r7, #12]
 801689a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801689e:	049a      	lsls	r2, r3, #18
 80168a0:	d406      	bmi.n	80168b0 <_fwrite_r+0x5c>
 80168a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80168a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80168ac:	81a3      	strh	r3, [r4, #12]
 80168ae:	6662      	str	r2, [r4, #100]	; 0x64
 80168b0:	aa03      	add	r2, sp, #12
 80168b2:	4621      	mov	r1, r4
 80168b4:	4638      	mov	r0, r7
 80168b6:	f7ff fe83 	bl	80165c0 <__sfvwrite_r>
 80168ba:	b120      	cbz	r0, 80168c6 <_fwrite_r+0x72>
 80168bc:	9805      	ldr	r0, [sp, #20]
 80168be:	1a30      	subs	r0, r6, r0
 80168c0:	fbb0 f0f8 	udiv	r0, r0, r8
 80168c4:	e000      	b.n	80168c8 <_fwrite_r+0x74>
 80168c6:	4628      	mov	r0, r5
 80168c8:	b006      	add	sp, #24
 80168ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168ce:	bf00      	nop
 80168d0:	0801cf74 	.word	0x0801cf74
 80168d4:	0801cf94 	.word	0x0801cf94
 80168d8:	0801cfb4 	.word	0x0801cfb4

080168dc <fwrite>:
 80168dc:	b507      	push	{r0, r1, r2, lr}
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	4613      	mov	r3, r2
 80168e2:	460a      	mov	r2, r1
 80168e4:	4601      	mov	r1, r0
 80168e6:	4803      	ldr	r0, [pc, #12]	; (80168f4 <fwrite+0x18>)
 80168e8:	6800      	ldr	r0, [r0, #0]
 80168ea:	f7ff ffb3 	bl	8016854 <_fwrite_r>
 80168ee:	b003      	add	sp, #12
 80168f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80168f4:	2000010c 	.word	0x2000010c

080168f8 <__libc_init_array>:
 80168f8:	b570      	push	{r4, r5, r6, lr}
 80168fa:	4b0e      	ldr	r3, [pc, #56]	; (8016934 <__libc_init_array+0x3c>)
 80168fc:	4c0e      	ldr	r4, [pc, #56]	; (8016938 <__libc_init_array+0x40>)
 80168fe:	1ae4      	subs	r4, r4, r3
 8016900:	10a4      	asrs	r4, r4, #2
 8016902:	2500      	movs	r5, #0
 8016904:	461e      	mov	r6, r3
 8016906:	42a5      	cmp	r5, r4
 8016908:	d004      	beq.n	8016914 <__libc_init_array+0x1c>
 801690a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801690e:	4798      	blx	r3
 8016910:	3501      	adds	r5, #1
 8016912:	e7f8      	b.n	8016906 <__libc_init_array+0xe>
 8016914:	f003 fdd6 	bl	801a4c4 <_init>
 8016918:	4c08      	ldr	r4, [pc, #32]	; (801693c <__libc_init_array+0x44>)
 801691a:	4b09      	ldr	r3, [pc, #36]	; (8016940 <__libc_init_array+0x48>)
 801691c:	1ae4      	subs	r4, r4, r3
 801691e:	10a4      	asrs	r4, r4, #2
 8016920:	2500      	movs	r5, #0
 8016922:	461e      	mov	r6, r3
 8016924:	42a5      	cmp	r5, r4
 8016926:	d004      	beq.n	8016932 <__libc_init_array+0x3a>
 8016928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801692c:	4798      	blx	r3
 801692e:	3501      	adds	r5, #1
 8016930:	e7f8      	b.n	8016924 <__libc_init_array+0x2c>
 8016932:	bd70      	pop	{r4, r5, r6, pc}
 8016934:	0801d9e8 	.word	0x0801d9e8
 8016938:	0801d9e8 	.word	0x0801d9e8
 801693c:	0801da08 	.word	0x0801da08
 8016940:	0801d9e8 	.word	0x0801d9e8

08016944 <_localeconv_r>:
 8016944:	4800      	ldr	r0, [pc, #0]	; (8016948 <_localeconv_r+0x4>)
 8016946:	4770      	bx	lr
 8016948:	20000110 	.word	0x20000110

0801694c <__swhatbuf_r>:
 801694c:	b570      	push	{r4, r5, r6, lr}
 801694e:	460e      	mov	r6, r1
 8016950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016954:	2900      	cmp	r1, #0
 8016956:	b090      	sub	sp, #64	; 0x40
 8016958:	4614      	mov	r4, r2
 801695a:	461d      	mov	r5, r3
 801695c:	da0a      	bge.n	8016974 <__swhatbuf_r+0x28>
 801695e:	89b3      	ldrh	r3, [r6, #12]
 8016960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016964:	2200      	movs	r2, #0
 8016966:	b298      	uxth	r0, r3
 8016968:	602a      	str	r2, [r5, #0]
 801696a:	b1b0      	cbz	r0, 801699a <__swhatbuf_r+0x4e>
 801696c:	2340      	movs	r3, #64	; 0x40
 801696e:	6023      	str	r3, [r4, #0]
 8016970:	4610      	mov	r0, r2
 8016972:	e015      	b.n	80169a0 <__swhatbuf_r+0x54>
 8016974:	aa01      	add	r2, sp, #4
 8016976:	f7ff fe11 	bl	801659c <_fstat_r>
 801697a:	2800      	cmp	r0, #0
 801697c:	dbef      	blt.n	801695e <__swhatbuf_r+0x12>
 801697e:	9a02      	ldr	r2, [sp, #8]
 8016980:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016984:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016988:	425a      	negs	r2, r3
 801698a:	415a      	adcs	r2, r3
 801698c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016990:	602a      	str	r2, [r5, #0]
 8016992:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8016996:	6023      	str	r3, [r4, #0]
 8016998:	e002      	b.n	80169a0 <__swhatbuf_r+0x54>
 801699a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801699e:	6023      	str	r3, [r4, #0]
 80169a0:	b010      	add	sp, #64	; 0x40
 80169a2:	bd70      	pop	{r4, r5, r6, pc}

080169a4 <__smakebuf_r>:
 80169a4:	898b      	ldrh	r3, [r1, #12]
 80169a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80169a8:	079e      	lsls	r6, r3, #30
 80169aa:	4605      	mov	r5, r0
 80169ac:	460c      	mov	r4, r1
 80169ae:	d410      	bmi.n	80169d2 <__smakebuf_r+0x2e>
 80169b0:	ab01      	add	r3, sp, #4
 80169b2:	466a      	mov	r2, sp
 80169b4:	f7ff ffca 	bl	801694c <__swhatbuf_r>
 80169b8:	9900      	ldr	r1, [sp, #0]
 80169ba:	4606      	mov	r6, r0
 80169bc:	4628      	mov	r0, r5
 80169be:	f000 f83d 	bl	8016a3c <_malloc_r>
 80169c2:	b968      	cbnz	r0, 80169e0 <__smakebuf_r+0x3c>
 80169c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169c8:	059a      	lsls	r2, r3, #22
 80169ca:	d422      	bmi.n	8016a12 <__smakebuf_r+0x6e>
 80169cc:	f043 0302 	orr.w	r3, r3, #2
 80169d0:	81a3      	strh	r3, [r4, #12]
 80169d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80169d6:	6023      	str	r3, [r4, #0]
 80169d8:	6123      	str	r3, [r4, #16]
 80169da:	2301      	movs	r3, #1
 80169dc:	6163      	str	r3, [r4, #20]
 80169de:	e018      	b.n	8016a12 <__smakebuf_r+0x6e>
 80169e0:	4b0d      	ldr	r3, [pc, #52]	; (8016a18 <__smakebuf_r+0x74>)
 80169e2:	62ab      	str	r3, [r5, #40]	; 0x28
 80169e4:	89a3      	ldrh	r3, [r4, #12]
 80169e6:	6020      	str	r0, [r4, #0]
 80169e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169ec:	81a3      	strh	r3, [r4, #12]
 80169ee:	9b00      	ldr	r3, [sp, #0]
 80169f0:	6163      	str	r3, [r4, #20]
 80169f2:	9b01      	ldr	r3, [sp, #4]
 80169f4:	6120      	str	r0, [r4, #16]
 80169f6:	b14b      	cbz	r3, 8016a0c <__smakebuf_r+0x68>
 80169f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169fc:	4628      	mov	r0, r5
 80169fe:	f003 f909 	bl	8019c14 <_isatty_r>
 8016a02:	b118      	cbz	r0, 8016a0c <__smakebuf_r+0x68>
 8016a04:	89a3      	ldrh	r3, [r4, #12]
 8016a06:	f043 0301 	orr.w	r3, r3, #1
 8016a0a:	81a3      	strh	r3, [r4, #12]
 8016a0c:	89a0      	ldrh	r0, [r4, #12]
 8016a0e:	4330      	orrs	r0, r6
 8016a10:	81a0      	strh	r0, [r4, #12]
 8016a12:	b002      	add	sp, #8
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
 8016a16:	bf00      	nop
 8016a18:	0801984d 	.word	0x0801984d

08016a1c <malloc>:
 8016a1c:	4b02      	ldr	r3, [pc, #8]	; (8016a28 <malloc+0xc>)
 8016a1e:	4601      	mov	r1, r0
 8016a20:	6818      	ldr	r0, [r3, #0]
 8016a22:	f000 b80b 	b.w	8016a3c <_malloc_r>
 8016a26:	bf00      	nop
 8016a28:	2000010c 	.word	0x2000010c

08016a2c <free>:
 8016a2c:	4b02      	ldr	r3, [pc, #8]	; (8016a38 <free+0xc>)
 8016a2e:	4601      	mov	r1, r0
 8016a30:	6818      	ldr	r0, [r3, #0]
 8016a32:	f003 b813 	b.w	8019a5c <_free_r>
 8016a36:	bf00      	nop
 8016a38:	2000010c 	.word	0x2000010c

08016a3c <_malloc_r>:
 8016a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a40:	f101 040b 	add.w	r4, r1, #11
 8016a44:	2c16      	cmp	r4, #22
 8016a46:	b085      	sub	sp, #20
 8016a48:	4681      	mov	r9, r0
 8016a4a:	d903      	bls.n	8016a54 <_malloc_r+0x18>
 8016a4c:	f034 0407 	bics.w	r4, r4, #7
 8016a50:	d501      	bpl.n	8016a56 <_malloc_r+0x1a>
 8016a52:	e002      	b.n	8016a5a <_malloc_r+0x1e>
 8016a54:	2410      	movs	r4, #16
 8016a56:	428c      	cmp	r4, r1
 8016a58:	d203      	bcs.n	8016a62 <_malloc_r+0x26>
 8016a5a:	230c      	movs	r3, #12
 8016a5c:	f8c9 3000 	str.w	r3, [r9]
 8016a60:	e1ea      	b.n	8016e38 <_malloc_r+0x3fc>
 8016a62:	4648      	mov	r0, r9
 8016a64:	f000 fa47 	bl	8016ef6 <__malloc_lock>
 8016a68:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8016a6c:	4d9e      	ldr	r5, [pc, #632]	; (8016ce8 <_malloc_r+0x2ac>)
 8016a6e:	d217      	bcs.n	8016aa0 <_malloc_r+0x64>
 8016a70:	f104 0208 	add.w	r2, r4, #8
 8016a74:	442a      	add	r2, r5
 8016a76:	f1a2 0108 	sub.w	r1, r2, #8
 8016a7a:	6856      	ldr	r6, [r2, #4]
 8016a7c:	428e      	cmp	r6, r1
 8016a7e:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8016a82:	d102      	bne.n	8016a8a <_malloc_r+0x4e>
 8016a84:	68d6      	ldr	r6, [r2, #12]
 8016a86:	42b2      	cmp	r2, r6
 8016a88:	d008      	beq.n	8016a9c <_malloc_r+0x60>
 8016a8a:	6873      	ldr	r3, [r6, #4]
 8016a8c:	68f2      	ldr	r2, [r6, #12]
 8016a8e:	68b1      	ldr	r1, [r6, #8]
 8016a90:	f023 0303 	bic.w	r3, r3, #3
 8016a94:	60ca      	str	r2, [r1, #12]
 8016a96:	4433      	add	r3, r6
 8016a98:	6091      	str	r1, [r2, #8]
 8016a9a:	e02f      	b.n	8016afc <_malloc_r+0xc0>
 8016a9c:	3302      	adds	r3, #2
 8016a9e:	e03d      	b.n	8016b1c <_malloc_r+0xe0>
 8016aa0:	0a63      	lsrs	r3, r4, #9
 8016aa2:	d01a      	beq.n	8016ada <_malloc_r+0x9e>
 8016aa4:	2b04      	cmp	r3, #4
 8016aa6:	d802      	bhi.n	8016aae <_malloc_r+0x72>
 8016aa8:	09a3      	lsrs	r3, r4, #6
 8016aaa:	3338      	adds	r3, #56	; 0x38
 8016aac:	e018      	b.n	8016ae0 <_malloc_r+0xa4>
 8016aae:	2b14      	cmp	r3, #20
 8016ab0:	d801      	bhi.n	8016ab6 <_malloc_r+0x7a>
 8016ab2:	335b      	adds	r3, #91	; 0x5b
 8016ab4:	e014      	b.n	8016ae0 <_malloc_r+0xa4>
 8016ab6:	2b54      	cmp	r3, #84	; 0x54
 8016ab8:	d802      	bhi.n	8016ac0 <_malloc_r+0x84>
 8016aba:	0b23      	lsrs	r3, r4, #12
 8016abc:	336e      	adds	r3, #110	; 0x6e
 8016abe:	e00f      	b.n	8016ae0 <_malloc_r+0xa4>
 8016ac0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8016ac4:	d802      	bhi.n	8016acc <_malloc_r+0x90>
 8016ac6:	0be3      	lsrs	r3, r4, #15
 8016ac8:	3377      	adds	r3, #119	; 0x77
 8016aca:	e009      	b.n	8016ae0 <_malloc_r+0xa4>
 8016acc:	f240 5254 	movw	r2, #1364	; 0x554
 8016ad0:	4293      	cmp	r3, r2
 8016ad2:	d804      	bhi.n	8016ade <_malloc_r+0xa2>
 8016ad4:	0ca3      	lsrs	r3, r4, #18
 8016ad6:	337c      	adds	r3, #124	; 0x7c
 8016ad8:	e002      	b.n	8016ae0 <_malloc_r+0xa4>
 8016ada:	233f      	movs	r3, #63	; 0x3f
 8016adc:	e000      	b.n	8016ae0 <_malloc_r+0xa4>
 8016ade:	237e      	movs	r3, #126	; 0x7e
 8016ae0:	1c5a      	adds	r2, r3, #1
 8016ae2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8016ae6:	f1a2 0008 	sub.w	r0, r2, #8
 8016aea:	6856      	ldr	r6, [r2, #4]
 8016aec:	e00c      	b.n	8016b08 <_malloc_r+0xcc>
 8016aee:	2900      	cmp	r1, #0
 8016af0:	68f1      	ldr	r1, [r6, #12]
 8016af2:	db08      	blt.n	8016b06 <_malloc_r+0xca>
 8016af4:	68b3      	ldr	r3, [r6, #8]
 8016af6:	60d9      	str	r1, [r3, #12]
 8016af8:	608b      	str	r3, [r1, #8]
 8016afa:	18b3      	adds	r3, r6, r2
 8016afc:	685a      	ldr	r2, [r3, #4]
 8016afe:	f042 0201 	orr.w	r2, r2, #1
 8016b02:	605a      	str	r2, [r3, #4]
 8016b04:	e1a3      	b.n	8016e4e <_malloc_r+0x412>
 8016b06:	460e      	mov	r6, r1
 8016b08:	4286      	cmp	r6, r0
 8016b0a:	d006      	beq.n	8016b1a <_malloc_r+0xde>
 8016b0c:	6872      	ldr	r2, [r6, #4]
 8016b0e:	f022 0203 	bic.w	r2, r2, #3
 8016b12:	1b11      	subs	r1, r2, r4
 8016b14:	290f      	cmp	r1, #15
 8016b16:	ddea      	ble.n	8016aee <_malloc_r+0xb2>
 8016b18:	3b01      	subs	r3, #1
 8016b1a:	3301      	adds	r3, #1
 8016b1c:	4a72      	ldr	r2, [pc, #456]	; (8016ce8 <_malloc_r+0x2ac>)
 8016b1e:	692e      	ldr	r6, [r5, #16]
 8016b20:	f102 0708 	add.w	r7, r2, #8
 8016b24:	42be      	cmp	r6, r7
 8016b26:	4639      	mov	r1, r7
 8016b28:	d079      	beq.n	8016c1e <_malloc_r+0x1e2>
 8016b2a:	6870      	ldr	r0, [r6, #4]
 8016b2c:	f020 0003 	bic.w	r0, r0, #3
 8016b30:	ebc4 0e00 	rsb	lr, r4, r0
 8016b34:	f1be 0f0f 	cmp.w	lr, #15
 8016b38:	dd0d      	ble.n	8016b56 <_malloc_r+0x11a>
 8016b3a:	1933      	adds	r3, r6, r4
 8016b3c:	f044 0401 	orr.w	r4, r4, #1
 8016b40:	6074      	str	r4, [r6, #4]
 8016b42:	6153      	str	r3, [r2, #20]
 8016b44:	6113      	str	r3, [r2, #16]
 8016b46:	f04e 0201 	orr.w	r2, lr, #1
 8016b4a:	60df      	str	r7, [r3, #12]
 8016b4c:	609f      	str	r7, [r3, #8]
 8016b4e:	605a      	str	r2, [r3, #4]
 8016b50:	f843 e00e 	str.w	lr, [r3, lr]
 8016b54:	e17b      	b.n	8016e4e <_malloc_r+0x412>
 8016b56:	f1be 0f00 	cmp.w	lr, #0
 8016b5a:	6157      	str	r7, [r2, #20]
 8016b5c:	6117      	str	r7, [r2, #16]
 8016b5e:	db05      	blt.n	8016b6c <_malloc_r+0x130>
 8016b60:	4430      	add	r0, r6
 8016b62:	6843      	ldr	r3, [r0, #4]
 8016b64:	f043 0301 	orr.w	r3, r3, #1
 8016b68:	6043      	str	r3, [r0, #4]
 8016b6a:	e170      	b.n	8016e4e <_malloc_r+0x412>
 8016b6c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8016b70:	d215      	bcs.n	8016b9e <_malloc_r+0x162>
 8016b72:	08c0      	lsrs	r0, r0, #3
 8016b74:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8016b78:	2701      	movs	r7, #1
 8016b7a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8016b7e:	6857      	ldr	r7, [r2, #4]
 8016b80:	3001      	adds	r0, #1
 8016b82:	ea4e 0707 	orr.w	r7, lr, r7
 8016b86:	6057      	str	r7, [r2, #4]
 8016b88:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8016b8c:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8016b90:	f8c6 e008 	str.w	lr, [r6, #8]
 8016b94:	3f08      	subs	r7, #8
 8016b96:	60f7      	str	r7, [r6, #12]
 8016b98:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8016b9c:	e03d      	b.n	8016c1a <_malloc_r+0x1de>
 8016b9e:	0a42      	lsrs	r2, r0, #9
 8016ba0:	2a04      	cmp	r2, #4
 8016ba2:	d802      	bhi.n	8016baa <_malloc_r+0x16e>
 8016ba4:	0982      	lsrs	r2, r0, #6
 8016ba6:	3238      	adds	r2, #56	; 0x38
 8016ba8:	e015      	b.n	8016bd6 <_malloc_r+0x19a>
 8016baa:	2a14      	cmp	r2, #20
 8016bac:	d801      	bhi.n	8016bb2 <_malloc_r+0x176>
 8016bae:	325b      	adds	r2, #91	; 0x5b
 8016bb0:	e011      	b.n	8016bd6 <_malloc_r+0x19a>
 8016bb2:	2a54      	cmp	r2, #84	; 0x54
 8016bb4:	d802      	bhi.n	8016bbc <_malloc_r+0x180>
 8016bb6:	0b02      	lsrs	r2, r0, #12
 8016bb8:	326e      	adds	r2, #110	; 0x6e
 8016bba:	e00c      	b.n	8016bd6 <_malloc_r+0x19a>
 8016bbc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8016bc0:	d802      	bhi.n	8016bc8 <_malloc_r+0x18c>
 8016bc2:	0bc2      	lsrs	r2, r0, #15
 8016bc4:	3277      	adds	r2, #119	; 0x77
 8016bc6:	e006      	b.n	8016bd6 <_malloc_r+0x19a>
 8016bc8:	f240 5754 	movw	r7, #1364	; 0x554
 8016bcc:	42ba      	cmp	r2, r7
 8016bce:	bf9a      	itte	ls
 8016bd0:	0c82      	lsrls	r2, r0, #18
 8016bd2:	327c      	addls	r2, #124	; 0x7c
 8016bd4:	227e      	movhi	r2, #126	; 0x7e
 8016bd6:	1c57      	adds	r7, r2, #1
 8016bd8:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8016bdc:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8016be0:	f8df c104 	ldr.w	ip, [pc, #260]	; 8016ce8 <_malloc_r+0x2ac>
 8016be4:	45be      	cmp	lr, r7
 8016be6:	d10d      	bne.n	8016c04 <_malloc_r+0x1c8>
 8016be8:	2001      	movs	r0, #1
 8016bea:	1092      	asrs	r2, r2, #2
 8016bec:	fa00 f202 	lsl.w	r2, r0, r2
 8016bf0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016bf4:	4310      	orrs	r0, r2
 8016bf6:	f8cc 0004 	str.w	r0, [ip, #4]
 8016bfa:	4672      	mov	r2, lr
 8016bfc:	e009      	b.n	8016c12 <_malloc_r+0x1d6>
 8016bfe:	68bf      	ldr	r7, [r7, #8]
 8016c00:	45be      	cmp	lr, r7
 8016c02:	d004      	beq.n	8016c0e <_malloc_r+0x1d2>
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	f022 0203 	bic.w	r2, r2, #3
 8016c0a:	4290      	cmp	r0, r2
 8016c0c:	d3f7      	bcc.n	8016bfe <_malloc_r+0x1c2>
 8016c0e:	68fa      	ldr	r2, [r7, #12]
 8016c10:	46be      	mov	lr, r7
 8016c12:	60f2      	str	r2, [r6, #12]
 8016c14:	f8c6 e008 	str.w	lr, [r6, #8]
 8016c18:	6096      	str	r6, [r2, #8]
 8016c1a:	f8ce 600c 	str.w	r6, [lr, #12]
 8016c1e:	2001      	movs	r0, #1
 8016c20:	109a      	asrs	r2, r3, #2
 8016c22:	fa00 f202 	lsl.w	r2, r0, r2
 8016c26:	6868      	ldr	r0, [r5, #4]
 8016c28:	4282      	cmp	r2, r0
 8016c2a:	d85f      	bhi.n	8016cec <_malloc_r+0x2b0>
 8016c2c:	4202      	tst	r2, r0
 8016c2e:	d106      	bne.n	8016c3e <_malloc_r+0x202>
 8016c30:	f023 0303 	bic.w	r3, r3, #3
 8016c34:	0052      	lsls	r2, r2, #1
 8016c36:	4202      	tst	r2, r0
 8016c38:	f103 0304 	add.w	r3, r3, #4
 8016c3c:	d0fa      	beq.n	8016c34 <_malloc_r+0x1f8>
 8016c3e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8016c42:	46c2      	mov	sl, r8
 8016c44:	469c      	mov	ip, r3
 8016c46:	f8da 600c 	ldr.w	r6, [sl, #12]
 8016c4a:	4556      	cmp	r6, sl
 8016c4c:	d02c      	beq.n	8016ca8 <_malloc_r+0x26c>
 8016c4e:	6870      	ldr	r0, [r6, #4]
 8016c50:	68f7      	ldr	r7, [r6, #12]
 8016c52:	f020 0003 	bic.w	r0, r0, #3
 8016c56:	ebc4 0e00 	rsb	lr, r4, r0
 8016c5a:	f1be 0f0f 	cmp.w	lr, #15
 8016c5e:	dd11      	ble.n	8016c84 <_malloc_r+0x248>
 8016c60:	1933      	adds	r3, r6, r4
 8016c62:	f044 0401 	orr.w	r4, r4, #1
 8016c66:	6074      	str	r4, [r6, #4]
 8016c68:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8016c6c:	60d7      	str	r7, [r2, #12]
 8016c6e:	60ba      	str	r2, [r7, #8]
 8016c70:	f04e 0201 	orr.w	r2, lr, #1
 8016c74:	616b      	str	r3, [r5, #20]
 8016c76:	612b      	str	r3, [r5, #16]
 8016c78:	60d9      	str	r1, [r3, #12]
 8016c7a:	6099      	str	r1, [r3, #8]
 8016c7c:	605a      	str	r2, [r3, #4]
 8016c7e:	f843 e00e 	str.w	lr, [r3, lr]
 8016c82:	e00b      	b.n	8016c9c <_malloc_r+0x260>
 8016c84:	f1be 0f00 	cmp.w	lr, #0
 8016c88:	db0c      	blt.n	8016ca4 <_malloc_r+0x268>
 8016c8a:	1833      	adds	r3, r6, r0
 8016c8c:	685a      	ldr	r2, [r3, #4]
 8016c8e:	f042 0201 	orr.w	r2, r2, #1
 8016c92:	605a      	str	r2, [r3, #4]
 8016c94:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8016c98:	60df      	str	r7, [r3, #12]
 8016c9a:	60bb      	str	r3, [r7, #8]
 8016c9c:	4648      	mov	r0, r9
 8016c9e:	f000 f92b 	bl	8016ef8 <__malloc_unlock>
 8016ca2:	e0d8      	b.n	8016e56 <_malloc_r+0x41a>
 8016ca4:	463e      	mov	r6, r7
 8016ca6:	e7d0      	b.n	8016c4a <_malloc_r+0x20e>
 8016ca8:	f10c 0c01 	add.w	ip, ip, #1
 8016cac:	f01c 0f03 	tst.w	ip, #3
 8016cb0:	f10a 0a08 	add.w	sl, sl, #8
 8016cb4:	d1c7      	bne.n	8016c46 <_malloc_r+0x20a>
 8016cb6:	0798      	lsls	r0, r3, #30
 8016cb8:	d104      	bne.n	8016cc4 <_malloc_r+0x288>
 8016cba:	686b      	ldr	r3, [r5, #4]
 8016cbc:	ea23 0302 	bic.w	r3, r3, r2
 8016cc0:	606b      	str	r3, [r5, #4]
 8016cc2:	e005      	b.n	8016cd0 <_malloc_r+0x294>
 8016cc4:	f858 0908 	ldr.w	r0, [r8], #-8
 8016cc8:	4580      	cmp	r8, r0
 8016cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8016cce:	d0f2      	beq.n	8016cb6 <_malloc_r+0x27a>
 8016cd0:	6868      	ldr	r0, [r5, #4]
 8016cd2:	0052      	lsls	r2, r2, #1
 8016cd4:	4282      	cmp	r2, r0
 8016cd6:	d809      	bhi.n	8016cec <_malloc_r+0x2b0>
 8016cd8:	b142      	cbz	r2, 8016cec <_malloc_r+0x2b0>
 8016cda:	4663      	mov	r3, ip
 8016cdc:	4202      	tst	r2, r0
 8016cde:	d1ae      	bne.n	8016c3e <_malloc_r+0x202>
 8016ce0:	3304      	adds	r3, #4
 8016ce2:	0052      	lsls	r2, r2, #1
 8016ce4:	e7fa      	b.n	8016cdc <_malloc_r+0x2a0>
 8016ce6:	bf00      	nop
 8016ce8:	20000148 	.word	0x20000148
 8016cec:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8016cf0:	f8db 6004 	ldr.w	r6, [fp, #4]
 8016cf4:	f026 0603 	bic.w	r6, r6, #3
 8016cf8:	42b4      	cmp	r4, r6
 8016cfa:	d803      	bhi.n	8016d04 <_malloc_r+0x2c8>
 8016cfc:	1b33      	subs	r3, r6, r4
 8016cfe:	2b0f      	cmp	r3, #15
 8016d00:	f300 809c 	bgt.w	8016e3c <_malloc_r+0x400>
 8016d04:	4a56      	ldr	r2, [pc, #344]	; (8016e60 <_malloc_r+0x424>)
 8016d06:	4957      	ldr	r1, [pc, #348]	; (8016e64 <_malloc_r+0x428>)
 8016d08:	6812      	ldr	r2, [r2, #0]
 8016d0a:	6808      	ldr	r0, [r1, #0]
 8016d0c:	9101      	str	r1, [sp, #4]
 8016d0e:	f102 0810 	add.w	r8, r2, #16
 8016d12:	4a55      	ldr	r2, [pc, #340]	; (8016e68 <_malloc_r+0x42c>)
 8016d14:	9203      	str	r2, [sp, #12]
 8016d16:	3001      	adds	r0, #1
 8016d18:	bf18      	it	ne
 8016d1a:	f102 31ff 	addne.w	r1, r2, #4294967295
 8016d1e:	44a0      	add	r8, r4
 8016d20:	bf1e      	ittt	ne
 8016d22:	4488      	addne	r8, r1
 8016d24:	4251      	negne	r1, r2
 8016d26:	ea01 0808 	andne.w	r8, r1, r8
 8016d2a:	eb0b 0306 	add.w	r3, fp, r6
 8016d2e:	4641      	mov	r1, r8
 8016d30:	4648      	mov	r0, r9
 8016d32:	9302      	str	r3, [sp, #8]
 8016d34:	f000 fac8 	bl	80172c8 <_sbrk_r>
 8016d38:	1c42      	adds	r2, r0, #1
 8016d3a:	4607      	mov	r7, r0
 8016d3c:	d06f      	beq.n	8016e1e <_malloc_r+0x3e2>
 8016d3e:	9b02      	ldr	r3, [sp, #8]
 8016d40:	9a03      	ldr	r2, [sp, #12]
 8016d42:	4283      	cmp	r3, r0
 8016d44:	d901      	bls.n	8016d4a <_malloc_r+0x30e>
 8016d46:	45ab      	cmp	fp, r5
 8016d48:	d169      	bne.n	8016e1e <_malloc_r+0x3e2>
 8016d4a:	f8df a128 	ldr.w	sl, [pc, #296]	; 8016e74 <_malloc_r+0x438>
 8016d4e:	f8df c128 	ldr.w	ip, [pc, #296]	; 8016e78 <_malloc_r+0x43c>
 8016d52:	f8da 0000 	ldr.w	r0, [sl]
 8016d56:	42bb      	cmp	r3, r7
 8016d58:	4440      	add	r0, r8
 8016d5a:	f8ca 0000 	str.w	r0, [sl]
 8016d5e:	d108      	bne.n	8016d72 <_malloc_r+0x336>
 8016d60:	ea13 0f0c 	tst.w	r3, ip
 8016d64:	d105      	bne.n	8016d72 <_malloc_r+0x336>
 8016d66:	68ab      	ldr	r3, [r5, #8]
 8016d68:	4446      	add	r6, r8
 8016d6a:	f046 0601 	orr.w	r6, r6, #1
 8016d6e:	605e      	str	r6, [r3, #4]
 8016d70:	e049      	b.n	8016e06 <_malloc_r+0x3ca>
 8016d72:	9901      	ldr	r1, [sp, #4]
 8016d74:	f8d1 e000 	ldr.w	lr, [r1]
 8016d78:	f1be 3fff 	cmp.w	lr, #4294967295
 8016d7c:	bf15      	itete	ne
 8016d7e:	1afb      	subne	r3, r7, r3
 8016d80:	4b38      	ldreq	r3, [pc, #224]	; (8016e64 <_malloc_r+0x428>)
 8016d82:	181b      	addne	r3, r3, r0
 8016d84:	601f      	streq	r7, [r3, #0]
 8016d86:	bf18      	it	ne
 8016d88:	f8ca 3000 	strne.w	r3, [sl]
 8016d8c:	f017 0307 	ands.w	r3, r7, #7
 8016d90:	bf1c      	itt	ne
 8016d92:	f1c3 0308 	rsbne	r3, r3, #8
 8016d96:	18ff      	addne	r7, r7, r3
 8016d98:	44b8      	add	r8, r7
 8016d9a:	441a      	add	r2, r3
 8016d9c:	ea08 080c 	and.w	r8, r8, ip
 8016da0:	ebc8 0802 	rsb	r8, r8, r2
 8016da4:	4641      	mov	r1, r8
 8016da6:	4648      	mov	r0, r9
 8016da8:	f000 fa8e 	bl	80172c8 <_sbrk_r>
 8016dac:	1c43      	adds	r3, r0, #1
 8016dae:	bf04      	itt	eq
 8016db0:	4638      	moveq	r0, r7
 8016db2:	f04f 0800 	moveq.w	r8, #0
 8016db6:	f8da 3000 	ldr.w	r3, [sl]
 8016dba:	60af      	str	r7, [r5, #8]
 8016dbc:	1bc2      	subs	r2, r0, r7
 8016dbe:	4442      	add	r2, r8
 8016dc0:	4443      	add	r3, r8
 8016dc2:	f042 0201 	orr.w	r2, r2, #1
 8016dc6:	45ab      	cmp	fp, r5
 8016dc8:	f8ca 3000 	str.w	r3, [sl]
 8016dcc:	607a      	str	r2, [r7, #4]
 8016dce:	d01a      	beq.n	8016e06 <_malloc_r+0x3ca>
 8016dd0:	2e0f      	cmp	r6, #15
 8016dd2:	d802      	bhi.n	8016dda <_malloc_r+0x39e>
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	607b      	str	r3, [r7, #4]
 8016dd8:	e021      	b.n	8016e1e <_malloc_r+0x3e2>
 8016dda:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016dde:	3e0c      	subs	r6, #12
 8016de0:	f026 0607 	bic.w	r6, r6, #7
 8016de4:	f003 0301 	and.w	r3, r3, #1
 8016de8:	4333      	orrs	r3, r6
 8016dea:	f8cb 3004 	str.w	r3, [fp, #4]
 8016dee:	eb0b 0306 	add.w	r3, fp, r6
 8016df2:	2205      	movs	r2, #5
 8016df4:	2e0f      	cmp	r6, #15
 8016df6:	605a      	str	r2, [r3, #4]
 8016df8:	609a      	str	r2, [r3, #8]
 8016dfa:	d904      	bls.n	8016e06 <_malloc_r+0x3ca>
 8016dfc:	f10b 0108 	add.w	r1, fp, #8
 8016e00:	4648      	mov	r0, r9
 8016e02:	f002 fe2b 	bl	8019a5c <_free_r>
 8016e06:	4a19      	ldr	r2, [pc, #100]	; (8016e6c <_malloc_r+0x430>)
 8016e08:	f8da 3000 	ldr.w	r3, [sl]
 8016e0c:	6811      	ldr	r1, [r2, #0]
 8016e0e:	428b      	cmp	r3, r1
 8016e10:	bf88      	it	hi
 8016e12:	6013      	strhi	r3, [r2, #0]
 8016e14:	4a16      	ldr	r2, [pc, #88]	; (8016e70 <_malloc_r+0x434>)
 8016e16:	6811      	ldr	r1, [r2, #0]
 8016e18:	428b      	cmp	r3, r1
 8016e1a:	bf88      	it	hi
 8016e1c:	6013      	strhi	r3, [r2, #0]
 8016e1e:	68ab      	ldr	r3, [r5, #8]
 8016e20:	685a      	ldr	r2, [r3, #4]
 8016e22:	f022 0203 	bic.w	r2, r2, #3
 8016e26:	4294      	cmp	r4, r2
 8016e28:	eba2 0304 	sub.w	r3, r2, r4
 8016e2c:	d801      	bhi.n	8016e32 <_malloc_r+0x3f6>
 8016e2e:	2b0f      	cmp	r3, #15
 8016e30:	dc04      	bgt.n	8016e3c <_malloc_r+0x400>
 8016e32:	4648      	mov	r0, r9
 8016e34:	f000 f860 	bl	8016ef8 <__malloc_unlock>
 8016e38:	2600      	movs	r6, #0
 8016e3a:	e00c      	b.n	8016e56 <_malloc_r+0x41a>
 8016e3c:	68ae      	ldr	r6, [r5, #8]
 8016e3e:	f044 0201 	orr.w	r2, r4, #1
 8016e42:	4434      	add	r4, r6
 8016e44:	f043 0301 	orr.w	r3, r3, #1
 8016e48:	6072      	str	r2, [r6, #4]
 8016e4a:	60ac      	str	r4, [r5, #8]
 8016e4c:	6063      	str	r3, [r4, #4]
 8016e4e:	4648      	mov	r0, r9
 8016e50:	f000 f852 	bl	8016ef8 <__malloc_unlock>
 8016e54:	3608      	adds	r6, #8
 8016e56:	4630      	mov	r0, r6
 8016e58:	b005      	add	sp, #20
 8016e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e5e:	bf00      	nop
 8016e60:	2000412c 	.word	0x2000412c
 8016e64:	20000554 	.word	0x20000554
 8016e68:	00001000 	.word	0x00001000
 8016e6c:	20004128 	.word	0x20004128
 8016e70:	20004124 	.word	0x20004124
 8016e74:	20004130 	.word	0x20004130
 8016e78:	00000fff 	.word	0x00000fff

08016e7c <memcmp>:
 8016e7c:	b510      	push	{r4, lr}
 8016e7e:	3901      	subs	r1, #1
 8016e80:	4402      	add	r2, r0
 8016e82:	4290      	cmp	r0, r2
 8016e84:	d007      	beq.n	8016e96 <memcmp+0x1a>
 8016e86:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016e8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016e8e:	42a3      	cmp	r3, r4
 8016e90:	d0f7      	beq.n	8016e82 <memcmp+0x6>
 8016e92:	1b18      	subs	r0, r3, r4
 8016e94:	bd10      	pop	{r4, pc}
 8016e96:	2000      	movs	r0, #0
 8016e98:	bd10      	pop	{r4, pc}

08016e9a <memcpy>:
 8016e9a:	b510      	push	{r4, lr}
 8016e9c:	1e43      	subs	r3, r0, #1
 8016e9e:	440a      	add	r2, r1
 8016ea0:	4291      	cmp	r1, r2
 8016ea2:	d004      	beq.n	8016eae <memcpy+0x14>
 8016ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016eac:	e7f8      	b.n	8016ea0 <memcpy+0x6>
 8016eae:	bd10      	pop	{r4, pc}

08016eb0 <memmove>:
 8016eb0:	4288      	cmp	r0, r1
 8016eb2:	b510      	push	{r4, lr}
 8016eb4:	eb01 0302 	add.w	r3, r1, r2
 8016eb8:	d801      	bhi.n	8016ebe <memmove+0xe>
 8016eba:	1e42      	subs	r2, r0, #1
 8016ebc:	e00b      	b.n	8016ed6 <memmove+0x26>
 8016ebe:	4298      	cmp	r0, r3
 8016ec0:	d2fb      	bcs.n	8016eba <memmove+0xa>
 8016ec2:	1881      	adds	r1, r0, r2
 8016ec4:	1ad2      	subs	r2, r2, r3
 8016ec6:	42d3      	cmn	r3, r2
 8016ec8:	d004      	beq.n	8016ed4 <memmove+0x24>
 8016eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ece:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016ed2:	e7f8      	b.n	8016ec6 <memmove+0x16>
 8016ed4:	bd10      	pop	{r4, pc}
 8016ed6:	4299      	cmp	r1, r3
 8016ed8:	d004      	beq.n	8016ee4 <memmove+0x34>
 8016eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ede:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016ee2:	e7f8      	b.n	8016ed6 <memmove+0x26>
 8016ee4:	bd10      	pop	{r4, pc}

08016ee6 <memset>:
 8016ee6:	4402      	add	r2, r0
 8016ee8:	4603      	mov	r3, r0
 8016eea:	4293      	cmp	r3, r2
 8016eec:	d002      	beq.n	8016ef4 <memset+0xe>
 8016eee:	f803 1b01 	strb.w	r1, [r3], #1
 8016ef2:	e7fa      	b.n	8016eea <memset+0x4>
 8016ef4:	4770      	bx	lr

08016ef6 <__malloc_lock>:
 8016ef6:	4770      	bx	lr

08016ef8 <__malloc_unlock>:
 8016ef8:	4770      	bx	lr
	...

08016efc <_putc_r>:
 8016efc:	b570      	push	{r4, r5, r6, lr}
 8016efe:	460d      	mov	r5, r1
 8016f00:	4614      	mov	r4, r2
 8016f02:	4606      	mov	r6, r0
 8016f04:	b118      	cbz	r0, 8016f0e <_putc_r+0x12>
 8016f06:	6983      	ldr	r3, [r0, #24]
 8016f08:	b90b      	cbnz	r3, 8016f0e <_putc_r+0x12>
 8016f0a:	f002 fcdf 	bl	80198cc <__sinit>
 8016f0e:	4b13      	ldr	r3, [pc, #76]	; (8016f5c <_putc_r+0x60>)
 8016f10:	429c      	cmp	r4, r3
 8016f12:	d101      	bne.n	8016f18 <_putc_r+0x1c>
 8016f14:	6874      	ldr	r4, [r6, #4]
 8016f16:	e008      	b.n	8016f2a <_putc_r+0x2e>
 8016f18:	4b11      	ldr	r3, [pc, #68]	; (8016f60 <_putc_r+0x64>)
 8016f1a:	429c      	cmp	r4, r3
 8016f1c:	d101      	bne.n	8016f22 <_putc_r+0x26>
 8016f1e:	68b4      	ldr	r4, [r6, #8]
 8016f20:	e003      	b.n	8016f2a <_putc_r+0x2e>
 8016f22:	4b10      	ldr	r3, [pc, #64]	; (8016f64 <_putc_r+0x68>)
 8016f24:	429c      	cmp	r4, r3
 8016f26:	bf08      	it	eq
 8016f28:	68f4      	ldreq	r4, [r6, #12]
 8016f2a:	68a3      	ldr	r3, [r4, #8]
 8016f2c:	3b01      	subs	r3, #1
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	60a3      	str	r3, [r4, #8]
 8016f32:	da0c      	bge.n	8016f4e <_putc_r+0x52>
 8016f34:	69a2      	ldr	r2, [r4, #24]
 8016f36:	4293      	cmp	r3, r2
 8016f38:	db02      	blt.n	8016f40 <_putc_r+0x44>
 8016f3a:	b2eb      	uxtb	r3, r5
 8016f3c:	2b0a      	cmp	r3, #10
 8016f3e:	d106      	bne.n	8016f4e <_putc_r+0x52>
 8016f40:	4622      	mov	r2, r4
 8016f42:	4629      	mov	r1, r5
 8016f44:	4630      	mov	r0, r6
 8016f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f4a:	f001 bc45 	b.w	80187d8 <__swbuf_r>
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	1c5a      	adds	r2, r3, #1
 8016f52:	6022      	str	r2, [r4, #0]
 8016f54:	701d      	strb	r5, [r3, #0]
 8016f56:	b2e8      	uxtb	r0, r5
 8016f58:	bd70      	pop	{r4, r5, r6, pc}
 8016f5a:	bf00      	nop
 8016f5c:	0801cf74 	.word	0x0801cf74
 8016f60:	0801cf94 	.word	0x0801cf94
 8016f64:	0801cfb4 	.word	0x0801cfb4

08016f68 <realloc>:
 8016f68:	4b02      	ldr	r3, [pc, #8]	; (8016f74 <realloc+0xc>)
 8016f6a:	460a      	mov	r2, r1
 8016f6c:	4601      	mov	r1, r0
 8016f6e:	6818      	ldr	r0, [r3, #0]
 8016f70:	f000 b802 	b.w	8016f78 <_realloc_r>
 8016f74:	2000010c 	.word	0x2000010c

08016f78 <_realloc_r>:
 8016f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f7c:	4681      	mov	r9, r0
 8016f7e:	460c      	mov	r4, r1
 8016f80:	b929      	cbnz	r1, 8016f8e <_realloc_r+0x16>
 8016f82:	4611      	mov	r1, r2
 8016f84:	b003      	add	sp, #12
 8016f86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f8a:	f7ff bd57 	b.w	8016a3c <_malloc_r>
 8016f8e:	9201      	str	r2, [sp, #4]
 8016f90:	f7ff ffb1 	bl	8016ef6 <__malloc_lock>
 8016f94:	9a01      	ldr	r2, [sp, #4]
 8016f96:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8016f9a:	f102 080b 	add.w	r8, r2, #11
 8016f9e:	f1b8 0f16 	cmp.w	r8, #22
 8016fa2:	f1a4 0b08 	sub.w	fp, r4, #8
 8016fa6:	f02e 0503 	bic.w	r5, lr, #3
 8016faa:	d903      	bls.n	8016fb4 <_realloc_r+0x3c>
 8016fac:	f038 0807 	bics.w	r8, r8, #7
 8016fb0:	d502      	bpl.n	8016fb8 <_realloc_r+0x40>
 8016fb2:	e003      	b.n	8016fbc <_realloc_r+0x44>
 8016fb4:	f04f 0810 	mov.w	r8, #16
 8016fb8:	4590      	cmp	r8, r2
 8016fba:	d204      	bcs.n	8016fc6 <_realloc_r+0x4e>
 8016fbc:	230c      	movs	r3, #12
 8016fbe:	f8c9 3000 	str.w	r3, [r9]
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	e17d      	b.n	80172c2 <_realloc_r+0x34a>
 8016fc6:	45a8      	cmp	r8, r5
 8016fc8:	f340 8150 	ble.w	801726c <_realloc_r+0x2f4>
 8016fcc:	4ba6      	ldr	r3, [pc, #664]	; (8017268 <_realloc_r+0x2f0>)
 8016fce:	6898      	ldr	r0, [r3, #8]
 8016fd0:	eb0b 0105 	add.w	r1, fp, r5
 8016fd4:	4281      	cmp	r1, r0
 8016fd6:	684f      	ldr	r7, [r1, #4]
 8016fd8:	d005      	beq.n	8016fe6 <_realloc_r+0x6e>
 8016fda:	f027 0601 	bic.w	r6, r7, #1
 8016fde:	440e      	add	r6, r1
 8016fe0:	6876      	ldr	r6, [r6, #4]
 8016fe2:	07f6      	lsls	r6, r6, #31
 8016fe4:	d426      	bmi.n	8017034 <_realloc_r+0xbc>
 8016fe6:	f027 0a03 	bic.w	sl, r7, #3
 8016fea:	4281      	cmp	r1, r0
 8016fec:	eb05 070a 	add.w	r7, r5, sl
 8016ff0:	d118      	bne.n	8017024 <_realloc_r+0xac>
 8016ff2:	f108 0610 	add.w	r6, r8, #16
 8016ff6:	42b7      	cmp	r7, r6
 8016ff8:	db1f      	blt.n	801703a <_realloc_r+0xc2>
 8016ffa:	eb0b 0008 	add.w	r0, fp, r8
 8016ffe:	ebc8 0707 	rsb	r7, r8, r7
 8017002:	f047 0701 	orr.w	r7, r7, #1
 8017006:	6098      	str	r0, [r3, #8]
 8017008:	6047      	str	r7, [r0, #4]
 801700a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801700e:	f003 0301 	and.w	r3, r3, #1
 8017012:	ea43 0308 	orr.w	r3, r3, r8
 8017016:	4648      	mov	r0, r9
 8017018:	f844 3c04 	str.w	r3, [r4, #-4]
 801701c:	f7ff ff6c 	bl	8016ef8 <__malloc_unlock>
 8017020:	4620      	mov	r0, r4
 8017022:	e14e      	b.n	80172c2 <_realloc_r+0x34a>
 8017024:	45b8      	cmp	r8, r7
 8017026:	dc08      	bgt.n	801703a <_realloc_r+0xc2>
 8017028:	68cb      	ldr	r3, [r1, #12]
 801702a:	688a      	ldr	r2, [r1, #8]
 801702c:	463d      	mov	r5, r7
 801702e:	60d3      	str	r3, [r2, #12]
 8017030:	609a      	str	r2, [r3, #8]
 8017032:	e11b      	b.n	801726c <_realloc_r+0x2f4>
 8017034:	f04f 0a00 	mov.w	sl, #0
 8017038:	4651      	mov	r1, sl
 801703a:	f01e 0f01 	tst.w	lr, #1
 801703e:	f040 80c3 	bne.w	80171c8 <_realloc_r+0x250>
 8017042:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8017046:	ebc7 070b 	rsb	r7, r7, fp
 801704a:	687e      	ldr	r6, [r7, #4]
 801704c:	f026 0603 	bic.w	r6, r6, #3
 8017050:	442e      	add	r6, r5
 8017052:	2900      	cmp	r1, #0
 8017054:	f000 8083 	beq.w	801715e <_realloc_r+0x1e6>
 8017058:	4281      	cmp	r1, r0
 801705a:	44b2      	add	sl, r6
 801705c:	d147      	bne.n	80170ee <_realloc_r+0x176>
 801705e:	f108 0110 	add.w	r1, r8, #16
 8017062:	458a      	cmp	sl, r1
 8017064:	db7b      	blt.n	801715e <_realloc_r+0x1e6>
 8017066:	463e      	mov	r6, r7
 8017068:	68fa      	ldr	r2, [r7, #12]
 801706a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 801706e:	60ca      	str	r2, [r1, #12]
 8017070:	6091      	str	r1, [r2, #8]
 8017072:	1f2a      	subs	r2, r5, #4
 8017074:	2a24      	cmp	r2, #36	; 0x24
 8017076:	d825      	bhi.n	80170c4 <_realloc_r+0x14c>
 8017078:	2a13      	cmp	r2, #19
 801707a:	d91b      	bls.n	80170b4 <_realloc_r+0x13c>
 801707c:	6821      	ldr	r1, [r4, #0]
 801707e:	60b9      	str	r1, [r7, #8]
 8017080:	6861      	ldr	r1, [r4, #4]
 8017082:	60f9      	str	r1, [r7, #12]
 8017084:	2a1b      	cmp	r2, #27
 8017086:	d803      	bhi.n	8017090 <_realloc_r+0x118>
 8017088:	f107 0210 	add.w	r2, r7, #16
 801708c:	3408      	adds	r4, #8
 801708e:	e012      	b.n	80170b6 <_realloc_r+0x13e>
 8017090:	68a1      	ldr	r1, [r4, #8]
 8017092:	6139      	str	r1, [r7, #16]
 8017094:	68e1      	ldr	r1, [r4, #12]
 8017096:	6179      	str	r1, [r7, #20]
 8017098:	2a24      	cmp	r2, #36	; 0x24
 801709a:	bf01      	itttt	eq
 801709c:	6922      	ldreq	r2, [r4, #16]
 801709e:	61ba      	streq	r2, [r7, #24]
 80170a0:	6961      	ldreq	r1, [r4, #20]
 80170a2:	61f9      	streq	r1, [r7, #28]
 80170a4:	bf19      	ittee	ne
 80170a6:	f107 0218 	addne.w	r2, r7, #24
 80170aa:	3410      	addne	r4, #16
 80170ac:	f107 0220 	addeq.w	r2, r7, #32
 80170b0:	3418      	addeq	r4, #24
 80170b2:	e000      	b.n	80170b6 <_realloc_r+0x13e>
 80170b4:	4632      	mov	r2, r6
 80170b6:	6821      	ldr	r1, [r4, #0]
 80170b8:	6011      	str	r1, [r2, #0]
 80170ba:	6861      	ldr	r1, [r4, #4]
 80170bc:	6051      	str	r1, [r2, #4]
 80170be:	68a1      	ldr	r1, [r4, #8]
 80170c0:	6091      	str	r1, [r2, #8]
 80170c2:	e005      	b.n	80170d0 <_realloc_r+0x158>
 80170c4:	4621      	mov	r1, r4
 80170c6:	4630      	mov	r0, r6
 80170c8:	9301      	str	r3, [sp, #4]
 80170ca:	f7ff fef1 	bl	8016eb0 <memmove>
 80170ce:	9b01      	ldr	r3, [sp, #4]
 80170d0:	eb07 0208 	add.w	r2, r7, r8
 80170d4:	ebc8 0a0a 	rsb	sl, r8, sl
 80170d8:	609a      	str	r2, [r3, #8]
 80170da:	f04a 0301 	orr.w	r3, sl, #1
 80170de:	6053      	str	r3, [r2, #4]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f003 0301 	and.w	r3, r3, #1
 80170e6:	ea43 0308 	orr.w	r3, r3, r8
 80170ea:	607b      	str	r3, [r7, #4]
 80170ec:	e0b6      	b.n	801725c <_realloc_r+0x2e4>
 80170ee:	45d0      	cmp	r8, sl
 80170f0:	dc35      	bgt.n	801715e <_realloc_r+0x1e6>
 80170f2:	68cb      	ldr	r3, [r1, #12]
 80170f4:	688a      	ldr	r2, [r1, #8]
 80170f6:	4638      	mov	r0, r7
 80170f8:	60d3      	str	r3, [r2, #12]
 80170fa:	609a      	str	r2, [r3, #8]
 80170fc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	60d3      	str	r3, [r2, #12]
 8017104:	609a      	str	r2, [r3, #8]
 8017106:	1f2a      	subs	r2, r5, #4
 8017108:	2a24      	cmp	r2, #36	; 0x24
 801710a:	d823      	bhi.n	8017154 <_realloc_r+0x1dc>
 801710c:	2a13      	cmp	r2, #19
 801710e:	d91a      	bls.n	8017146 <_realloc_r+0x1ce>
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	60bb      	str	r3, [r7, #8]
 8017114:	6863      	ldr	r3, [r4, #4]
 8017116:	60fb      	str	r3, [r7, #12]
 8017118:	2a1b      	cmp	r2, #27
 801711a:	d803      	bhi.n	8017124 <_realloc_r+0x1ac>
 801711c:	f107 0010 	add.w	r0, r7, #16
 8017120:	3408      	adds	r4, #8
 8017122:	e010      	b.n	8017146 <_realloc_r+0x1ce>
 8017124:	68a3      	ldr	r3, [r4, #8]
 8017126:	613b      	str	r3, [r7, #16]
 8017128:	68e3      	ldr	r3, [r4, #12]
 801712a:	617b      	str	r3, [r7, #20]
 801712c:	2a24      	cmp	r2, #36	; 0x24
 801712e:	bf01      	itttt	eq
 8017130:	6923      	ldreq	r3, [r4, #16]
 8017132:	61bb      	streq	r3, [r7, #24]
 8017134:	6963      	ldreq	r3, [r4, #20]
 8017136:	61fb      	streq	r3, [r7, #28]
 8017138:	bf19      	ittee	ne
 801713a:	f107 0018 	addne.w	r0, r7, #24
 801713e:	3410      	addne	r4, #16
 8017140:	f107 0020 	addeq.w	r0, r7, #32
 8017144:	3418      	addeq	r4, #24
 8017146:	6823      	ldr	r3, [r4, #0]
 8017148:	6003      	str	r3, [r0, #0]
 801714a:	6863      	ldr	r3, [r4, #4]
 801714c:	6043      	str	r3, [r0, #4]
 801714e:	68a3      	ldr	r3, [r4, #8]
 8017150:	6083      	str	r3, [r0, #8]
 8017152:	e002      	b.n	801715a <_realloc_r+0x1e2>
 8017154:	4621      	mov	r1, r4
 8017156:	f7ff feab 	bl	8016eb0 <memmove>
 801715a:	4655      	mov	r5, sl
 801715c:	e02e      	b.n	80171bc <_realloc_r+0x244>
 801715e:	45b0      	cmp	r8, r6
 8017160:	dc32      	bgt.n	80171c8 <_realloc_r+0x250>
 8017162:	4638      	mov	r0, r7
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801716a:	60d3      	str	r3, [r2, #12]
 801716c:	609a      	str	r2, [r3, #8]
 801716e:	1f2a      	subs	r2, r5, #4
 8017170:	2a24      	cmp	r2, #36	; 0x24
 8017172:	d825      	bhi.n	80171c0 <_realloc_r+0x248>
 8017174:	2a13      	cmp	r2, #19
 8017176:	d91a      	bls.n	80171ae <_realloc_r+0x236>
 8017178:	6823      	ldr	r3, [r4, #0]
 801717a:	60bb      	str	r3, [r7, #8]
 801717c:	6863      	ldr	r3, [r4, #4]
 801717e:	60fb      	str	r3, [r7, #12]
 8017180:	2a1b      	cmp	r2, #27
 8017182:	d803      	bhi.n	801718c <_realloc_r+0x214>
 8017184:	f107 0010 	add.w	r0, r7, #16
 8017188:	3408      	adds	r4, #8
 801718a:	e010      	b.n	80171ae <_realloc_r+0x236>
 801718c:	68a3      	ldr	r3, [r4, #8]
 801718e:	613b      	str	r3, [r7, #16]
 8017190:	68e3      	ldr	r3, [r4, #12]
 8017192:	617b      	str	r3, [r7, #20]
 8017194:	2a24      	cmp	r2, #36	; 0x24
 8017196:	bf01      	itttt	eq
 8017198:	6923      	ldreq	r3, [r4, #16]
 801719a:	61bb      	streq	r3, [r7, #24]
 801719c:	6963      	ldreq	r3, [r4, #20]
 801719e:	61fb      	streq	r3, [r7, #28]
 80171a0:	bf19      	ittee	ne
 80171a2:	f107 0018 	addne.w	r0, r7, #24
 80171a6:	3410      	addne	r4, #16
 80171a8:	f107 0020 	addeq.w	r0, r7, #32
 80171ac:	3418      	addeq	r4, #24
 80171ae:	6823      	ldr	r3, [r4, #0]
 80171b0:	6003      	str	r3, [r0, #0]
 80171b2:	6863      	ldr	r3, [r4, #4]
 80171b4:	6043      	str	r3, [r0, #4]
 80171b6:	68a3      	ldr	r3, [r4, #8]
 80171b8:	6083      	str	r3, [r0, #8]
 80171ba:	4635      	mov	r5, r6
 80171bc:	46bb      	mov	fp, r7
 80171be:	e055      	b.n	801726c <_realloc_r+0x2f4>
 80171c0:	4621      	mov	r1, r4
 80171c2:	f7ff fe75 	bl	8016eb0 <memmove>
 80171c6:	e7f8      	b.n	80171ba <_realloc_r+0x242>
 80171c8:	4611      	mov	r1, r2
 80171ca:	4648      	mov	r0, r9
 80171cc:	f7ff fc36 	bl	8016a3c <_malloc_r>
 80171d0:	4606      	mov	r6, r0
 80171d2:	2800      	cmp	r0, #0
 80171d4:	d042      	beq.n	801725c <_realloc_r+0x2e4>
 80171d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80171da:	f023 0301 	bic.w	r3, r3, #1
 80171de:	f1a0 0208 	sub.w	r2, r0, #8
 80171e2:	445b      	add	r3, fp
 80171e4:	429a      	cmp	r2, r3
 80171e6:	d105      	bne.n	80171f4 <_realloc_r+0x27c>
 80171e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80171ec:	f023 0303 	bic.w	r3, r3, #3
 80171f0:	441d      	add	r5, r3
 80171f2:	e03b      	b.n	801726c <_realloc_r+0x2f4>
 80171f4:	1f2a      	subs	r2, r5, #4
 80171f6:	2a24      	cmp	r2, #36	; 0x24
 80171f8:	d829      	bhi.n	801724e <_realloc_r+0x2d6>
 80171fa:	2a13      	cmp	r2, #19
 80171fc:	d91e      	bls.n	801723c <_realloc_r+0x2c4>
 80171fe:	6823      	ldr	r3, [r4, #0]
 8017200:	6003      	str	r3, [r0, #0]
 8017202:	6863      	ldr	r3, [r4, #4]
 8017204:	6043      	str	r3, [r0, #4]
 8017206:	2a1b      	cmp	r2, #27
 8017208:	d804      	bhi.n	8017214 <_realloc_r+0x29c>
 801720a:	f100 0308 	add.w	r3, r0, #8
 801720e:	f104 0208 	add.w	r2, r4, #8
 8017212:	e015      	b.n	8017240 <_realloc_r+0x2c8>
 8017214:	68a3      	ldr	r3, [r4, #8]
 8017216:	6083      	str	r3, [r0, #8]
 8017218:	68e3      	ldr	r3, [r4, #12]
 801721a:	60c3      	str	r3, [r0, #12]
 801721c:	2a24      	cmp	r2, #36	; 0x24
 801721e:	bf01      	itttt	eq
 8017220:	6923      	ldreq	r3, [r4, #16]
 8017222:	6103      	streq	r3, [r0, #16]
 8017224:	6961      	ldreq	r1, [r4, #20]
 8017226:	6141      	streq	r1, [r0, #20]
 8017228:	bf19      	ittee	ne
 801722a:	f100 0310 	addne.w	r3, r0, #16
 801722e:	f104 0210 	addne.w	r2, r4, #16
 8017232:	f100 0318 	addeq.w	r3, r0, #24
 8017236:	f104 0218 	addeq.w	r2, r4, #24
 801723a:	e001      	b.n	8017240 <_realloc_r+0x2c8>
 801723c:	4603      	mov	r3, r0
 801723e:	4622      	mov	r2, r4
 8017240:	6811      	ldr	r1, [r2, #0]
 8017242:	6019      	str	r1, [r3, #0]
 8017244:	6851      	ldr	r1, [r2, #4]
 8017246:	6059      	str	r1, [r3, #4]
 8017248:	6892      	ldr	r2, [r2, #8]
 801724a:	609a      	str	r2, [r3, #8]
 801724c:	e002      	b.n	8017254 <_realloc_r+0x2dc>
 801724e:	4621      	mov	r1, r4
 8017250:	f7ff fe2e 	bl	8016eb0 <memmove>
 8017254:	4621      	mov	r1, r4
 8017256:	4648      	mov	r0, r9
 8017258:	f002 fc00 	bl	8019a5c <_free_r>
 801725c:	4648      	mov	r0, r9
 801725e:	f7ff fe4b 	bl	8016ef8 <__malloc_unlock>
 8017262:	4630      	mov	r0, r6
 8017264:	e02d      	b.n	80172c2 <_realloc_r+0x34a>
 8017266:	bf00      	nop
 8017268:	20000148 	.word	0x20000148
 801726c:	ebc8 0205 	rsb	r2, r8, r5
 8017270:	2a0f      	cmp	r2, #15
 8017272:	f8db 3004 	ldr.w	r3, [fp, #4]
 8017276:	d914      	bls.n	80172a2 <_realloc_r+0x32a>
 8017278:	f003 0301 	and.w	r3, r3, #1
 801727c:	eb0b 0108 	add.w	r1, fp, r8
 8017280:	ea43 0308 	orr.w	r3, r3, r8
 8017284:	f8cb 3004 	str.w	r3, [fp, #4]
 8017288:	f042 0301 	orr.w	r3, r2, #1
 801728c:	440a      	add	r2, r1
 801728e:	604b      	str	r3, [r1, #4]
 8017290:	6853      	ldr	r3, [r2, #4]
 8017292:	f043 0301 	orr.w	r3, r3, #1
 8017296:	6053      	str	r3, [r2, #4]
 8017298:	3108      	adds	r1, #8
 801729a:	4648      	mov	r0, r9
 801729c:	f002 fbde 	bl	8019a5c <_free_r>
 80172a0:	e00a      	b.n	80172b8 <_realloc_r+0x340>
 80172a2:	f003 0301 	and.w	r3, r3, #1
 80172a6:	432b      	orrs	r3, r5
 80172a8:	eb0b 0205 	add.w	r2, fp, r5
 80172ac:	f8cb 3004 	str.w	r3, [fp, #4]
 80172b0:	6853      	ldr	r3, [r2, #4]
 80172b2:	f043 0301 	orr.w	r3, r3, #1
 80172b6:	6053      	str	r3, [r2, #4]
 80172b8:	4648      	mov	r0, r9
 80172ba:	f7ff fe1d 	bl	8016ef8 <__malloc_unlock>
 80172be:	f10b 0008 	add.w	r0, fp, #8
 80172c2:	b003      	add	sp, #12
 80172c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080172c8 <_sbrk_r>:
 80172c8:	b538      	push	{r3, r4, r5, lr}
 80172ca:	4c06      	ldr	r4, [pc, #24]	; (80172e4 <_sbrk_r+0x1c>)
 80172cc:	2300      	movs	r3, #0
 80172ce:	4605      	mov	r5, r0
 80172d0:	4608      	mov	r0, r1
 80172d2:	6023      	str	r3, [r4, #0]
 80172d4:	f003 f8de 	bl	801a494 <_sbrk>
 80172d8:	1c43      	adds	r3, r0, #1
 80172da:	d102      	bne.n	80172e2 <_sbrk_r+0x1a>
 80172dc:	6823      	ldr	r3, [r4, #0]
 80172de:	b103      	cbz	r3, 80172e2 <_sbrk_r+0x1a>
 80172e0:	602b      	str	r3, [r5, #0]
 80172e2:	bd38      	pop	{r3, r4, r5, pc}
 80172e4:	20004264 	.word	0x20004264

080172e8 <_raise_r>:
 80172e8:	291f      	cmp	r1, #31
 80172ea:	b538      	push	{r3, r4, r5, lr}
 80172ec:	4604      	mov	r4, r0
 80172ee:	460d      	mov	r5, r1
 80172f0:	d904      	bls.n	80172fc <_raise_r+0x14>
 80172f2:	2316      	movs	r3, #22
 80172f4:	6003      	str	r3, [r0, #0]
 80172f6:	f04f 30ff 	mov.w	r0, #4294967295
 80172fa:	bd38      	pop	{r3, r4, r5, pc}
 80172fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80172fe:	b112      	cbz	r2, 8017306 <_raise_r+0x1e>
 8017300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017304:	b94b      	cbnz	r3, 801731a <_raise_r+0x32>
 8017306:	4620      	mov	r0, r4
 8017308:	f000 f832 	bl	8017370 <_getpid_r>
 801730c:	462a      	mov	r2, r5
 801730e:	4601      	mov	r1, r0
 8017310:	4620      	mov	r0, r4
 8017312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017316:	f000 b819 	b.w	801734c <_kill_r>
 801731a:	2b01      	cmp	r3, #1
 801731c:	d00c      	beq.n	8017338 <_raise_r+0x50>
 801731e:	1c59      	adds	r1, r3, #1
 8017320:	d103      	bne.n	801732a <_raise_r+0x42>
 8017322:	2316      	movs	r3, #22
 8017324:	6003      	str	r3, [r0, #0]
 8017326:	2001      	movs	r0, #1
 8017328:	bd38      	pop	{r3, r4, r5, pc}
 801732a:	2400      	movs	r4, #0
 801732c:	4628      	mov	r0, r5
 801732e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017332:	4798      	blx	r3
 8017334:	4620      	mov	r0, r4
 8017336:	bd38      	pop	{r3, r4, r5, pc}
 8017338:	2000      	movs	r0, #0
 801733a:	bd38      	pop	{r3, r4, r5, pc}

0801733c <raise>:
 801733c:	4b02      	ldr	r3, [pc, #8]	; (8017348 <raise+0xc>)
 801733e:	4601      	mov	r1, r0
 8017340:	6818      	ldr	r0, [r3, #0]
 8017342:	f7ff bfd1 	b.w	80172e8 <_raise_r>
 8017346:	bf00      	nop
 8017348:	2000010c 	.word	0x2000010c

0801734c <_kill_r>:
 801734c:	b538      	push	{r3, r4, r5, lr}
 801734e:	4c07      	ldr	r4, [pc, #28]	; (801736c <_kill_r+0x20>)
 8017350:	2300      	movs	r3, #0
 8017352:	4605      	mov	r5, r0
 8017354:	4608      	mov	r0, r1
 8017356:	4611      	mov	r1, r2
 8017358:	6023      	str	r3, [r4, #0]
 801735a:	f003 f883 	bl	801a464 <_kill>
 801735e:	1c43      	adds	r3, r0, #1
 8017360:	d102      	bne.n	8017368 <_kill_r+0x1c>
 8017362:	6823      	ldr	r3, [r4, #0]
 8017364:	b103      	cbz	r3, 8017368 <_kill_r+0x1c>
 8017366:	602b      	str	r3, [r5, #0]
 8017368:	bd38      	pop	{r3, r4, r5, pc}
 801736a:	bf00      	nop
 801736c:	20004264 	.word	0x20004264

08017370 <_getpid_r>:
 8017370:	f003 b868 	b.w	801a444 <_getpid>

08017374 <sprintf>:
 8017374:	b40e      	push	{r1, r2, r3}
 8017376:	b500      	push	{lr}
 8017378:	b09c      	sub	sp, #112	; 0x70
 801737a:	f44f 7102 	mov.w	r1, #520	; 0x208
 801737e:	ab1d      	add	r3, sp, #116	; 0x74
 8017380:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017384:	9002      	str	r0, [sp, #8]
 8017386:	9006      	str	r0, [sp, #24]
 8017388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801738c:	480a      	ldr	r0, [pc, #40]	; (80173b8 <sprintf+0x44>)
 801738e:	9104      	str	r1, [sp, #16]
 8017390:	9107      	str	r1, [sp, #28]
 8017392:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017396:	f853 2b04 	ldr.w	r2, [r3], #4
 801739a:	f8ad 1016 	strh.w	r1, [sp, #22]
 801739e:	6800      	ldr	r0, [r0, #0]
 80173a0:	9301      	str	r3, [sp, #4]
 80173a2:	a902      	add	r1, sp, #8
 80173a4:	f000 fa54 	bl	8017850 <_svfprintf_r>
 80173a8:	9b02      	ldr	r3, [sp, #8]
 80173aa:	2200      	movs	r2, #0
 80173ac:	701a      	strb	r2, [r3, #0]
 80173ae:	b01c      	add	sp, #112	; 0x70
 80173b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80173b4:	b003      	add	sp, #12
 80173b6:	4770      	bx	lr
 80173b8:	2000010c 	.word	0x2000010c

080173bc <__sread>:
 80173bc:	b510      	push	{r4, lr}
 80173be:	460c      	mov	r4, r1
 80173c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c4:	f002 ff1e 	bl	801a204 <_read_r>
 80173c8:	2800      	cmp	r0, #0
 80173ca:	bfab      	itete	ge
 80173cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80173ce:	89a3      	ldrhlt	r3, [r4, #12]
 80173d0:	181b      	addge	r3, r3, r0
 80173d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80173d6:	bfac      	ite	ge
 80173d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80173da:	81a3      	strhlt	r3, [r4, #12]
 80173dc:	bd10      	pop	{r4, pc}

080173de <__swrite>:
 80173de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173e2:	461f      	mov	r7, r3
 80173e4:	898b      	ldrh	r3, [r1, #12]
 80173e6:	05db      	lsls	r3, r3, #23
 80173e8:	4605      	mov	r5, r0
 80173ea:	460c      	mov	r4, r1
 80173ec:	4616      	mov	r6, r2
 80173ee:	d505      	bpl.n	80173fc <__swrite+0x1e>
 80173f0:	2302      	movs	r3, #2
 80173f2:	2200      	movs	r2, #0
 80173f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173f8:	f002 fc1c 	bl	8019c34 <_lseek_r>
 80173fc:	89a3      	ldrh	r3, [r4, #12]
 80173fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017406:	81a3      	strh	r3, [r4, #12]
 8017408:	4632      	mov	r2, r6
 801740a:	463b      	mov	r3, r7
 801740c:	4628      	mov	r0, r5
 801740e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017412:	f001 ba3f 	b.w	8018894 <_write_r>

08017416 <__sseek>:
 8017416:	b510      	push	{r4, lr}
 8017418:	460c      	mov	r4, r1
 801741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801741e:	f002 fc09 	bl	8019c34 <_lseek_r>
 8017422:	1c43      	adds	r3, r0, #1
 8017424:	89a3      	ldrh	r3, [r4, #12]
 8017426:	bf15      	itete	ne
 8017428:	6560      	strne	r0, [r4, #84]	; 0x54
 801742a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801742e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017432:	81a3      	strheq	r3, [r4, #12]
 8017434:	bf18      	it	ne
 8017436:	81a3      	strhne	r3, [r4, #12]
 8017438:	bd10      	pop	{r4, pc}

0801743a <__sclose>:
 801743a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801743e:	f001 bb0b 	b.w	8018a58 <_close_r>
	...

08017444 <_strerror_r>:
 8017444:	b510      	push	{r4, lr}
 8017446:	4604      	mov	r4, r0
 8017448:	4608      	mov	r0, r1
 801744a:	4611      	mov	r1, r2
 801744c:	288e      	cmp	r0, #142	; 0x8e
 801744e:	f200 812f 	bhi.w	80176b0 <_strerror_r+0x26c>
 8017452:	e8df f010 	tbh	[pc, r0, lsl #1]
 8017456:	0138      	.short	0x0138
 8017458:	0091008f 	.word	0x0091008f
 801745c:	00950093 	.word	0x00950093
 8017460:	00990097 	.word	0x00990097
 8017464:	009d009b 	.word	0x009d009b
 8017468:	00a300a1 	.word	0x00a300a1
 801746c:	00a900a7 	.word	0x00a900a7
 8017470:	00ad00ab 	.word	0x00ad00ab
 8017474:	00af012d 	.word	0x00af012d
 8017478:	00b300b1 	.word	0x00b300b1
 801747c:	00b700b5 	.word	0x00b700b5
 8017480:	00bf00bd 	.word	0x00bf00bd
 8017484:	00c700c5 	.word	0x00c700c5
 8017488:	00cb00c9 	.word	0x00cb00c9
 801748c:	00d100cd 	.word	0x00d100cd
 8017490:	00d700d5 	.word	0x00d700d5
 8017494:	00db00d9 	.word	0x00db00d9
 8017498:	00df00dd 	.word	0x00df00dd
 801749c:	00e300e1 	.word	0x00e300e1
 80174a0:	012d012d 	.word	0x012d012d
 80174a4:	012d012d 	.word	0x012d012d
 80174a8:	012d012d 	.word	0x012d012d
 80174ac:	012d012d 	.word	0x012d012d
 80174b0:	00eb00e7 	.word	0x00eb00e7
 80174b4:	012d012d 	.word	0x012d012d
 80174b8:	012d012d 	.word	0x012d012d
 80174bc:	012d012d 	.word	0x012d012d
 80174c0:	012d012d 	.word	0x012d012d
 80174c4:	012d012d 	.word	0x012d012d
 80174c8:	012d012d 	.word	0x012d012d
 80174cc:	00ed012d 	.word	0x00ed012d
 80174d0:	00ef0107 	.word	0x00ef0107
 80174d4:	012d00f1 	.word	0x012d00f1
 80174d8:	012d012d 	.word	0x012d012d
 80174dc:	012d00f3 	.word	0x012d00f3
 80174e0:	012d012d 	.word	0x012d012d
 80174e4:	012d00f5 	.word	0x012d00f5
 80174e8:	00f9012d 	.word	0x00f9012d
 80174ec:	012d012d 	.word	0x012d012d
 80174f0:	012d00fb 	.word	0x012d00fb
 80174f4:	012d012d 	.word	0x012d012d
 80174f8:	012d012d 	.word	0x012d012d
 80174fc:	012d012d 	.word	0x012d012d
 8017500:	012d012d 	.word	0x012d012d
 8017504:	00fd012d 	.word	0x00fd012d
 8017508:	00ff012d 	.word	0x00ff012d
 801750c:	01030101 	.word	0x01030101
 8017510:	012d012d 	.word	0x012d012d
 8017514:	012d0125 	.word	0x012d0125
 8017518:	012d012d 	.word	0x012d012d
 801751c:	012d012d 	.word	0x012d012d
 8017520:	012d012d 	.word	0x012d012d
 8017524:	0113012d 	.word	0x0113012d
 8017528:	01090105 	.word	0x01090105
 801752c:	010d010b 	.word	0x010d010b
 8017530:	012d010f 	.word	0x012d010f
 8017534:	01150111 	.word	0x01150111
 8017538:	00e90119 	.word	0x00e90119
 801753c:	012b00c1 	.word	0x012b00c1
 8017540:	00cf00b9 	.word	0x00cf00b9
 8017544:	009f00bb 	.word	0x009f00bb
 8017548:	012900a5 	.word	0x012900a5
 801754c:	012d00f7 	.word	0x012d00f7
 8017550:	00c30117 	.word	0x00c30117
 8017554:	011b011d 	.word	0x011b011d
 8017558:	012d012d 	.word	0x012d012d
 801755c:	012d012d 	.word	0x012d012d
 8017560:	00d3012d 	.word	0x00d3012d
 8017564:	012d012d 	.word	0x012d012d
 8017568:	00e5012d 	.word	0x00e5012d
 801756c:	011f0127 	.word	0x011f0127
 8017570:	01230121 	.word	0x01230121
 8017574:	4855      	ldr	r0, [pc, #340]	; (80176cc <_strerror_r+0x288>)
 8017576:	bd10      	pop	{r4, pc}
 8017578:	4855      	ldr	r0, [pc, #340]	; (80176d0 <_strerror_r+0x28c>)
 801757a:	bd10      	pop	{r4, pc}
 801757c:	4855      	ldr	r0, [pc, #340]	; (80176d4 <_strerror_r+0x290>)
 801757e:	bd10      	pop	{r4, pc}
 8017580:	4855      	ldr	r0, [pc, #340]	; (80176d8 <_strerror_r+0x294>)
 8017582:	bd10      	pop	{r4, pc}
 8017584:	4855      	ldr	r0, [pc, #340]	; (80176dc <_strerror_r+0x298>)
 8017586:	bd10      	pop	{r4, pc}
 8017588:	4855      	ldr	r0, [pc, #340]	; (80176e0 <_strerror_r+0x29c>)
 801758a:	bd10      	pop	{r4, pc}
 801758c:	4855      	ldr	r0, [pc, #340]	; (80176e4 <_strerror_r+0x2a0>)
 801758e:	bd10      	pop	{r4, pc}
 8017590:	4855      	ldr	r0, [pc, #340]	; (80176e8 <_strerror_r+0x2a4>)
 8017592:	bd10      	pop	{r4, pc}
 8017594:	4855      	ldr	r0, [pc, #340]	; (80176ec <_strerror_r+0x2a8>)
 8017596:	bd10      	pop	{r4, pc}
 8017598:	4855      	ldr	r0, [pc, #340]	; (80176f0 <_strerror_r+0x2ac>)
 801759a:	bd10      	pop	{r4, pc}
 801759c:	4855      	ldr	r0, [pc, #340]	; (80176f4 <_strerror_r+0x2b0>)
 801759e:	bd10      	pop	{r4, pc}
 80175a0:	4855      	ldr	r0, [pc, #340]	; (80176f8 <_strerror_r+0x2b4>)
 80175a2:	bd10      	pop	{r4, pc}
 80175a4:	4855      	ldr	r0, [pc, #340]	; (80176fc <_strerror_r+0x2b8>)
 80175a6:	bd10      	pop	{r4, pc}
 80175a8:	4855      	ldr	r0, [pc, #340]	; (8017700 <_strerror_r+0x2bc>)
 80175aa:	bd10      	pop	{r4, pc}
 80175ac:	4855      	ldr	r0, [pc, #340]	; (8017704 <_strerror_r+0x2c0>)
 80175ae:	bd10      	pop	{r4, pc}
 80175b0:	4855      	ldr	r0, [pc, #340]	; (8017708 <_strerror_r+0x2c4>)
 80175b2:	bd10      	pop	{r4, pc}
 80175b4:	4855      	ldr	r0, [pc, #340]	; (801770c <_strerror_r+0x2c8>)
 80175b6:	bd10      	pop	{r4, pc}
 80175b8:	4855      	ldr	r0, [pc, #340]	; (8017710 <_strerror_r+0x2cc>)
 80175ba:	bd10      	pop	{r4, pc}
 80175bc:	4855      	ldr	r0, [pc, #340]	; (8017714 <_strerror_r+0x2d0>)
 80175be:	bd10      	pop	{r4, pc}
 80175c0:	4855      	ldr	r0, [pc, #340]	; (8017718 <_strerror_r+0x2d4>)
 80175c2:	bd10      	pop	{r4, pc}
 80175c4:	4855      	ldr	r0, [pc, #340]	; (801771c <_strerror_r+0x2d8>)
 80175c6:	bd10      	pop	{r4, pc}
 80175c8:	4855      	ldr	r0, [pc, #340]	; (8017720 <_strerror_r+0x2dc>)
 80175ca:	bd10      	pop	{r4, pc}
 80175cc:	4855      	ldr	r0, [pc, #340]	; (8017724 <_strerror_r+0x2e0>)
 80175ce:	bd10      	pop	{r4, pc}
 80175d0:	4855      	ldr	r0, [pc, #340]	; (8017728 <_strerror_r+0x2e4>)
 80175d2:	bd10      	pop	{r4, pc}
 80175d4:	4855      	ldr	r0, [pc, #340]	; (801772c <_strerror_r+0x2e8>)
 80175d6:	bd10      	pop	{r4, pc}
 80175d8:	4855      	ldr	r0, [pc, #340]	; (8017730 <_strerror_r+0x2ec>)
 80175da:	bd10      	pop	{r4, pc}
 80175dc:	4855      	ldr	r0, [pc, #340]	; (8017734 <_strerror_r+0x2f0>)
 80175de:	bd10      	pop	{r4, pc}
 80175e0:	4855      	ldr	r0, [pc, #340]	; (8017738 <_strerror_r+0x2f4>)
 80175e2:	bd10      	pop	{r4, pc}
 80175e4:	4855      	ldr	r0, [pc, #340]	; (801773c <_strerror_r+0x2f8>)
 80175e6:	bd10      	pop	{r4, pc}
 80175e8:	4855      	ldr	r0, [pc, #340]	; (8017740 <_strerror_r+0x2fc>)
 80175ea:	bd10      	pop	{r4, pc}
 80175ec:	4855      	ldr	r0, [pc, #340]	; (8017744 <_strerror_r+0x300>)
 80175ee:	bd10      	pop	{r4, pc}
 80175f0:	4855      	ldr	r0, [pc, #340]	; (8017748 <_strerror_r+0x304>)
 80175f2:	bd10      	pop	{r4, pc}
 80175f4:	4855      	ldr	r0, [pc, #340]	; (801774c <_strerror_r+0x308>)
 80175f6:	bd10      	pop	{r4, pc}
 80175f8:	4855      	ldr	r0, [pc, #340]	; (8017750 <_strerror_r+0x30c>)
 80175fa:	bd10      	pop	{r4, pc}
 80175fc:	4855      	ldr	r0, [pc, #340]	; (8017754 <_strerror_r+0x310>)
 80175fe:	bd10      	pop	{r4, pc}
 8017600:	4855      	ldr	r0, [pc, #340]	; (8017758 <_strerror_r+0x314>)
 8017602:	bd10      	pop	{r4, pc}
 8017604:	4855      	ldr	r0, [pc, #340]	; (801775c <_strerror_r+0x318>)
 8017606:	bd10      	pop	{r4, pc}
 8017608:	4855      	ldr	r0, [pc, #340]	; (8017760 <_strerror_r+0x31c>)
 801760a:	bd10      	pop	{r4, pc}
 801760c:	4855      	ldr	r0, [pc, #340]	; (8017764 <_strerror_r+0x320>)
 801760e:	bd10      	pop	{r4, pc}
 8017610:	4855      	ldr	r0, [pc, #340]	; (8017768 <_strerror_r+0x324>)
 8017612:	bd10      	pop	{r4, pc}
 8017614:	4855      	ldr	r0, [pc, #340]	; (801776c <_strerror_r+0x328>)
 8017616:	bd10      	pop	{r4, pc}
 8017618:	4855      	ldr	r0, [pc, #340]	; (8017770 <_strerror_r+0x32c>)
 801761a:	bd10      	pop	{r4, pc}
 801761c:	4855      	ldr	r0, [pc, #340]	; (8017774 <_strerror_r+0x330>)
 801761e:	bd10      	pop	{r4, pc}
 8017620:	4855      	ldr	r0, [pc, #340]	; (8017778 <_strerror_r+0x334>)
 8017622:	bd10      	pop	{r4, pc}
 8017624:	4855      	ldr	r0, [pc, #340]	; (801777c <_strerror_r+0x338>)
 8017626:	bd10      	pop	{r4, pc}
 8017628:	4855      	ldr	r0, [pc, #340]	; (8017780 <_strerror_r+0x33c>)
 801762a:	bd10      	pop	{r4, pc}
 801762c:	4855      	ldr	r0, [pc, #340]	; (8017784 <_strerror_r+0x340>)
 801762e:	bd10      	pop	{r4, pc}
 8017630:	4855      	ldr	r0, [pc, #340]	; (8017788 <_strerror_r+0x344>)
 8017632:	bd10      	pop	{r4, pc}
 8017634:	4855      	ldr	r0, [pc, #340]	; (801778c <_strerror_r+0x348>)
 8017636:	bd10      	pop	{r4, pc}
 8017638:	4855      	ldr	r0, [pc, #340]	; (8017790 <_strerror_r+0x34c>)
 801763a:	bd10      	pop	{r4, pc}
 801763c:	4855      	ldr	r0, [pc, #340]	; (8017794 <_strerror_r+0x350>)
 801763e:	bd10      	pop	{r4, pc}
 8017640:	4855      	ldr	r0, [pc, #340]	; (8017798 <_strerror_r+0x354>)
 8017642:	bd10      	pop	{r4, pc}
 8017644:	4855      	ldr	r0, [pc, #340]	; (801779c <_strerror_r+0x358>)
 8017646:	bd10      	pop	{r4, pc}
 8017648:	4855      	ldr	r0, [pc, #340]	; (80177a0 <_strerror_r+0x35c>)
 801764a:	bd10      	pop	{r4, pc}
 801764c:	4855      	ldr	r0, [pc, #340]	; (80177a4 <_strerror_r+0x360>)
 801764e:	bd10      	pop	{r4, pc}
 8017650:	4855      	ldr	r0, [pc, #340]	; (80177a8 <_strerror_r+0x364>)
 8017652:	bd10      	pop	{r4, pc}
 8017654:	4855      	ldr	r0, [pc, #340]	; (80177ac <_strerror_r+0x368>)
 8017656:	bd10      	pop	{r4, pc}
 8017658:	4855      	ldr	r0, [pc, #340]	; (80177b0 <_strerror_r+0x36c>)
 801765a:	bd10      	pop	{r4, pc}
 801765c:	4855      	ldr	r0, [pc, #340]	; (80177b4 <_strerror_r+0x370>)
 801765e:	bd10      	pop	{r4, pc}
 8017660:	4855      	ldr	r0, [pc, #340]	; (80177b8 <_strerror_r+0x374>)
 8017662:	bd10      	pop	{r4, pc}
 8017664:	4855      	ldr	r0, [pc, #340]	; (80177bc <_strerror_r+0x378>)
 8017666:	bd10      	pop	{r4, pc}
 8017668:	4855      	ldr	r0, [pc, #340]	; (80177c0 <_strerror_r+0x37c>)
 801766a:	bd10      	pop	{r4, pc}
 801766c:	4855      	ldr	r0, [pc, #340]	; (80177c4 <_strerror_r+0x380>)
 801766e:	bd10      	pop	{r4, pc}
 8017670:	4855      	ldr	r0, [pc, #340]	; (80177c8 <_strerror_r+0x384>)
 8017672:	bd10      	pop	{r4, pc}
 8017674:	4855      	ldr	r0, [pc, #340]	; (80177cc <_strerror_r+0x388>)
 8017676:	bd10      	pop	{r4, pc}
 8017678:	4855      	ldr	r0, [pc, #340]	; (80177d0 <_strerror_r+0x38c>)
 801767a:	bd10      	pop	{r4, pc}
 801767c:	4855      	ldr	r0, [pc, #340]	; (80177d4 <_strerror_r+0x390>)
 801767e:	bd10      	pop	{r4, pc}
 8017680:	4855      	ldr	r0, [pc, #340]	; (80177d8 <_strerror_r+0x394>)
 8017682:	bd10      	pop	{r4, pc}
 8017684:	4855      	ldr	r0, [pc, #340]	; (80177dc <_strerror_r+0x398>)
 8017686:	bd10      	pop	{r4, pc}
 8017688:	4855      	ldr	r0, [pc, #340]	; (80177e0 <_strerror_r+0x39c>)
 801768a:	bd10      	pop	{r4, pc}
 801768c:	4855      	ldr	r0, [pc, #340]	; (80177e4 <_strerror_r+0x3a0>)
 801768e:	bd10      	pop	{r4, pc}
 8017690:	4855      	ldr	r0, [pc, #340]	; (80177e8 <_strerror_r+0x3a4>)
 8017692:	bd10      	pop	{r4, pc}
 8017694:	4855      	ldr	r0, [pc, #340]	; (80177ec <_strerror_r+0x3a8>)
 8017696:	bd10      	pop	{r4, pc}
 8017698:	4855      	ldr	r0, [pc, #340]	; (80177f0 <_strerror_r+0x3ac>)
 801769a:	bd10      	pop	{r4, pc}
 801769c:	4855      	ldr	r0, [pc, #340]	; (80177f4 <_strerror_r+0x3b0>)
 801769e:	bd10      	pop	{r4, pc}
 80176a0:	4855      	ldr	r0, [pc, #340]	; (80177f8 <_strerror_r+0x3b4>)
 80176a2:	bd10      	pop	{r4, pc}
 80176a4:	4855      	ldr	r0, [pc, #340]	; (80177fc <_strerror_r+0x3b8>)
 80176a6:	bd10      	pop	{r4, pc}
 80176a8:	4855      	ldr	r0, [pc, #340]	; (8017800 <_strerror_r+0x3bc>)
 80176aa:	bd10      	pop	{r4, pc}
 80176ac:	4855      	ldr	r0, [pc, #340]	; (8017804 <_strerror_r+0x3c0>)
 80176ae:	bd10      	pop	{r4, pc}
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	bf14      	ite	ne
 80176b4:	461a      	movne	r2, r3
 80176b6:	4622      	moveq	r2, r4
 80176b8:	f001 f88c 	bl	80187d4 <_user_strerror>
 80176bc:	4b52      	ldr	r3, [pc, #328]	; (8017808 <_strerror_r+0x3c4>)
 80176be:	2800      	cmp	r0, #0
 80176c0:	bf08      	it	eq
 80176c2:	4618      	moveq	r0, r3
 80176c4:	bd10      	pop	{r4, pc}
 80176c6:	4851      	ldr	r0, [pc, #324]	; (801780c <_strerror_r+0x3c8>)
 80176c8:	bd10      	pop	{r4, pc}
 80176ca:	bf00      	nop
 80176cc:	0801c884 	.word	0x0801c884
 80176d0:	0801c88e 	.word	0x0801c88e
 80176d4:	0801c8a8 	.word	0x0801c8a8
 80176d8:	0801c8b8 	.word	0x0801c8b8
 80176dc:	0801c8d0 	.word	0x0801c8d0
 80176e0:	0801c8da 	.word	0x0801c8da
 80176e4:	0801c8f4 	.word	0x0801c8f4
 80176e8:	0801c906 	.word	0x0801c906
 80176ec:	0801c918 	.word	0x0801c918
 80176f0:	0801c931 	.word	0x0801c931
 80176f4:	0801c941 	.word	0x0801c941
 80176f8:	0801c94d 	.word	0x0801c94d
 80176fc:	0801c96a 	.word	0x0801c96a
 8017700:	0801c97c 	.word	0x0801c97c
 8017704:	0801c98d 	.word	0x0801c98d
 8017708:	0801c99f 	.word	0x0801c99f
 801770c:	0801c9ab 	.word	0x0801c9ab
 8017710:	0801c9c3 	.word	0x0801c9c3
 8017714:	0801c9cf 	.word	0x0801c9cf
 8017718:	0801c9e1 	.word	0x0801c9e1
 801771c:	0801c9f0 	.word	0x0801c9f0
 8017720:	0801ca00 	.word	0x0801ca00
 8017724:	0801ca0d 	.word	0x0801ca0d
 8017728:	0801ca2c 	.word	0x0801ca2c
 801772c:	0801ca3b 	.word	0x0801ca3b
 8017730:	0801ca4c 	.word	0x0801ca4c
 8017734:	0801ca70 	.word	0x0801ca70
 8017738:	0801ca8e 	.word	0x0801ca8e
 801773c:	0801caac 	.word	0x0801caac
 8017740:	0801cacc 	.word	0x0801cacc
 8017744:	0801cae3 	.word	0x0801cae3
 8017748:	0801caf2 	.word	0x0801caf2
 801774c:	0801cb01 	.word	0x0801cb01
 8017750:	0801cb15 	.word	0x0801cb15
 8017754:	0801cb2d 	.word	0x0801cb2d
 8017758:	0801cb3b 	.word	0x0801cb3b
 801775c:	0801cb48 	.word	0x0801cb48
 8017760:	0801cb5e 	.word	0x0801cb5e
 8017764:	0801cb6d 	.word	0x0801cb6d
 8017768:	0801cb79 	.word	0x0801cb79
 801776c:	0801cba8 	.word	0x0801cba8
 8017770:	0801cbb9 	.word	0x0801cbb9
 8017774:	0801cbd4 	.word	0x0801cbd4
 8017778:	0801cbe7 	.word	0x0801cbe7
 801777c:	0801cbfd 	.word	0x0801cbfd
 8017780:	0801cc06 	.word	0x0801cc06
 8017784:	0801cc1d 	.word	0x0801cc1d
 8017788:	0801cc25 	.word	0x0801cc25
 801778c:	0801cc32 	.word	0x0801cc32
 8017790:	0801cc47 	.word	0x0801cc47
 8017794:	0801cc5b 	.word	0x0801cc5b
 8017798:	0801cc73 	.word	0x0801cc73
 801779c:	0801cc82 	.word	0x0801cc82
 80177a0:	0801cc93 	.word	0x0801cc93
 80177a4:	0801cca6 	.word	0x0801cca6
 80177a8:	0801ccb2 	.word	0x0801ccb2
 80177ac:	0801cccb 	.word	0x0801cccb
 80177b0:	0801ccdf 	.word	0x0801ccdf
 80177b4:	0801ccfa 	.word	0x0801ccfa
 80177b8:	0801cd12 	.word	0x0801cd12
 80177bc:	0801cd2c 	.word	0x0801cd2c
 80177c0:	0801cd34 	.word	0x0801cd34
 80177c4:	0801cd64 	.word	0x0801cd64
 80177c8:	0801cd83 	.word	0x0801cd83
 80177cc:	0801cda2 	.word	0x0801cda2
 80177d0:	0801cdb9 	.word	0x0801cdb9
 80177d4:	0801cdcc 	.word	0x0801cdcc
 80177d8:	0801cde5 	.word	0x0801cde5
 80177dc:	0801cdfc 	.word	0x0801cdfc
 80177e0:	0801ce12 	.word	0x0801ce12
 80177e4:	0801ce33 	.word	0x0801ce33
 80177e8:	0801ce4b 	.word	0x0801ce4b
 80177ec:	0801ce67 	.word	0x0801ce67
 80177f0:	0801ce7a 	.word	0x0801ce7a
 80177f4:	0801ce90 	.word	0x0801ce90
 80177f8:	0801cea4 	.word	0x0801cea4
 80177fc:	0801cec6 	.word	0x0801cec6
 8017800:	0801ceec 	.word	0x0801ceec
 8017804:	0801cefd 	.word	0x0801cefd
 8017808:	0801c877 	.word	0x0801c877
 801780c:	0801c87c 	.word	0x0801c87c

08017810 <strerror>:
 8017810:	4601      	mov	r1, r0
 8017812:	4803      	ldr	r0, [pc, #12]	; (8017820 <strerror+0x10>)
 8017814:	2300      	movs	r3, #0
 8017816:	461a      	mov	r2, r3
 8017818:	6800      	ldr	r0, [r0, #0]
 801781a:	f7ff be13 	b.w	8017444 <_strerror_r>
 801781e:	bf00      	nop
 8017820:	2000010c 	.word	0x2000010c

08017824 <strncmp>:
 8017824:	b530      	push	{r4, r5, lr}
 8017826:	b182      	cbz	r2, 801784a <strncmp+0x26>
 8017828:	1e45      	subs	r5, r0, #1
 801782a:	3901      	subs	r1, #1
 801782c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8017830:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017834:	42a3      	cmp	r3, r4
 8017836:	d106      	bne.n	8017846 <strncmp+0x22>
 8017838:	43ec      	mvns	r4, r5
 801783a:	4414      	add	r4, r2
 801783c:	42e0      	cmn	r0, r4
 801783e:	d001      	beq.n	8017844 <strncmp+0x20>
 8017840:	2b00      	cmp	r3, #0
 8017842:	d1f3      	bne.n	801782c <strncmp+0x8>
 8017844:	461c      	mov	r4, r3
 8017846:	1b18      	subs	r0, r3, r4
 8017848:	bd30      	pop	{r4, r5, pc}
 801784a:	4610      	mov	r0, r2
 801784c:	bd30      	pop	{r4, r5, pc}
	...

08017850 <_svfprintf_r>:
 8017850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017854:	b0bd      	sub	sp, #244	; 0xf4
 8017856:	468b      	mov	fp, r1
 8017858:	9205      	str	r2, [sp, #20]
 801785a:	461f      	mov	r7, r3
 801785c:	4682      	mov	sl, r0
 801785e:	f7ff f871 	bl	8016944 <_localeconv_r>
 8017862:	6803      	ldr	r3, [r0, #0]
 8017864:	930d      	str	r3, [sp, #52]	; 0x34
 8017866:	4618      	mov	r0, r3
 8017868:	f7f0 fe64 	bl	8008534 <strlen>
 801786c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8017870:	9008      	str	r0, [sp, #32]
 8017872:	0619      	lsls	r1, r3, #24
 8017874:	d515      	bpl.n	80178a2 <_svfprintf_r+0x52>
 8017876:	f8db 3010 	ldr.w	r3, [fp, #16]
 801787a:	b993      	cbnz	r3, 80178a2 <_svfprintf_r+0x52>
 801787c:	2140      	movs	r1, #64	; 0x40
 801787e:	4650      	mov	r0, sl
 8017880:	f7ff f8dc 	bl	8016a3c <_malloc_r>
 8017884:	f8cb 0000 	str.w	r0, [fp]
 8017888:	f8cb 0010 	str.w	r0, [fp, #16]
 801788c:	b930      	cbnz	r0, 801789c <_svfprintf_r+0x4c>
 801788e:	230c      	movs	r3, #12
 8017890:	f8ca 3000 	str.w	r3, [sl]
 8017894:	f04f 30ff 	mov.w	r0, #4294967295
 8017898:	f000 bf95 	b.w	80187c6 <_svfprintf_r+0xf76>
 801789c:	2340      	movs	r3, #64	; 0x40
 801789e:	f8cb 3014 	str.w	r3, [fp, #20]
 80178a2:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8017b08 <_svfprintf_r+0x2b8>
 80178a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80178aa:	2300      	movs	r3, #0
 80178ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80178ae:	941f      	str	r4, [sp, #124]	; 0x7c
 80178b0:	9321      	str	r3, [sp, #132]	; 0x84
 80178b2:	9320      	str	r3, [sp, #128]	; 0x80
 80178b4:	9304      	str	r3, [sp, #16]
 80178b6:	9311      	str	r3, [sp, #68]	; 0x44
 80178b8:	9310      	str	r3, [sp, #64]	; 0x40
 80178ba:	930a      	str	r3, [sp, #40]	; 0x28
 80178bc:	9d05      	ldr	r5, [sp, #20]
 80178be:	462b      	mov	r3, r5
 80178c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178c4:	b11a      	cbz	r2, 80178ce <_svfprintf_r+0x7e>
 80178c6:	2a25      	cmp	r2, #37	; 0x25
 80178c8:	d001      	beq.n	80178ce <_svfprintf_r+0x7e>
 80178ca:	461d      	mov	r5, r3
 80178cc:	e7f7      	b.n	80178be <_svfprintf_r+0x6e>
 80178ce:	9b05      	ldr	r3, [sp, #20]
 80178d0:	1aee      	subs	r6, r5, r3
 80178d2:	d017      	beq.n	8017904 <_svfprintf_r+0xb4>
 80178d4:	e884 0048 	stmia.w	r4, {r3, r6}
 80178d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178da:	4433      	add	r3, r6
 80178dc:	9321      	str	r3, [sp, #132]	; 0x84
 80178de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80178e0:	3301      	adds	r3, #1
 80178e2:	2b07      	cmp	r3, #7
 80178e4:	9320      	str	r3, [sp, #128]	; 0x80
 80178e6:	dc01      	bgt.n	80178ec <_svfprintf_r+0x9c>
 80178e8:	3408      	adds	r4, #8
 80178ea:	e008      	b.n	80178fe <_svfprintf_r+0xae>
 80178ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80178ee:	4659      	mov	r1, fp
 80178f0:	4650      	mov	r0, sl
 80178f2:	f002 fc99 	bl	801a228 <__ssprint_r>
 80178f6:	2800      	cmp	r0, #0
 80178f8:	f040 862c 	bne.w	8018554 <_svfprintf_r+0xd04>
 80178fc:	ac2c      	add	r4, sp, #176	; 0xb0
 80178fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017900:	4433      	add	r3, r6
 8017902:	930a      	str	r3, [sp, #40]	; 0x28
 8017904:	782b      	ldrb	r3, [r5, #0]
 8017906:	2b00      	cmp	r3, #0
 8017908:	f000 861d 	beq.w	8018546 <_svfprintf_r+0xcf6>
 801790c:	2200      	movs	r2, #0
 801790e:	1c6b      	adds	r3, r5, #1
 8017910:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8017914:	4611      	mov	r1, r2
 8017916:	f04f 39ff 	mov.w	r9, #4294967295
 801791a:	9209      	str	r2, [sp, #36]	; 0x24
 801791c:	4615      	mov	r5, r2
 801791e:	200a      	movs	r0, #10
 8017920:	1c5e      	adds	r6, r3, #1
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	9605      	str	r6, [sp, #20]
 8017926:	9302      	str	r3, [sp, #8]
 8017928:	9b02      	ldr	r3, [sp, #8]
 801792a:	3b20      	subs	r3, #32
 801792c:	2b58      	cmp	r3, #88	; 0x58
 801792e:	f200 8263 	bhi.w	8017df8 <_svfprintf_r+0x5a8>
 8017932:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017936:	005c      	.short	0x005c
 8017938:	02610261 	.word	0x02610261
 801793c:	0261006b 	.word	0x0261006b
 8017940:	02610261 	.word	0x02610261
 8017944:	02610261 	.word	0x02610261
 8017948:	006e0261 	.word	0x006e0261
 801794c:	02610059 	.word	0x02610059
 8017950:	007c0079 	.word	0x007c0079
 8017954:	00a30261 	.word	0x00a30261
 8017958:	00a600a6 	.word	0x00a600a6
 801795c:	00a600a6 	.word	0x00a600a6
 8017960:	00a600a6 	.word	0x00a600a6
 8017964:	00a600a6 	.word	0x00a600a6
 8017968:	026100a6 	.word	0x026100a6
 801796c:	02610261 	.word	0x02610261
 8017970:	02610261 	.word	0x02610261
 8017974:	02610261 	.word	0x02610261
 8017978:	02610261 	.word	0x02610261
 801797c:	00d60261 	.word	0x00d60261
 8017980:	0261010b 	.word	0x0261010b
 8017984:	0261010b 	.word	0x0261010b
 8017988:	02610261 	.word	0x02610261
 801798c:	00b90261 	.word	0x00b90261
 8017990:	02610261 	.word	0x02610261
 8017994:	02610152 	.word	0x02610152
 8017998:	02610261 	.word	0x02610261
 801799c:	02610261 	.word	0x02610261
 80179a0:	02610199 	.word	0x02610199
 80179a4:	00660261 	.word	0x00660261
 80179a8:	02610261 	.word	0x02610261
 80179ac:	02610261 	.word	0x02610261
 80179b0:	02610261 	.word	0x02610261
 80179b4:	02610261 	.word	0x02610261
 80179b8:	02610261 	.word	0x02610261
 80179bc:	006100cd 	.word	0x006100cd
 80179c0:	010b010b 	.word	0x010b010b
 80179c4:	00bc010b 	.word	0x00bc010b
 80179c8:	02610061 	.word	0x02610061
 80179cc:	00bf0261 	.word	0x00bf0261
 80179d0:	01340261 	.word	0x01340261
 80179d4:	016f0154 	.word	0x016f0154
 80179d8:	026100ca 	.word	0x026100ca
 80179dc:	02610180 	.word	0x02610180
 80179e0:	0261019b 	.word	0x0261019b
 80179e4:	01b30261 	.word	0x01b30261
 80179e8:	2201      	movs	r2, #1
 80179ea:	212b      	movs	r1, #43	; 0x2b
 80179ec:	e002      	b.n	80179f4 <_svfprintf_r+0x1a4>
 80179ee:	b909      	cbnz	r1, 80179f4 <_svfprintf_r+0x1a4>
 80179f0:	2201      	movs	r2, #1
 80179f2:	2120      	movs	r1, #32
 80179f4:	9b05      	ldr	r3, [sp, #20]
 80179f6:	e793      	b.n	8017920 <_svfprintf_r+0xd0>
 80179f8:	2a00      	cmp	r2, #0
 80179fa:	d077      	beq.n	8017aec <_svfprintf_r+0x29c>
 80179fc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8017a00:	e074      	b.n	8017aec <_svfprintf_r+0x29c>
 8017a02:	b10a      	cbz	r2, 8017a08 <_svfprintf_r+0x1b8>
 8017a04:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8017a08:	4b41      	ldr	r3, [pc, #260]	; (8017b10 <_svfprintf_r+0x2c0>)
 8017a0a:	e14b      	b.n	8017ca4 <_svfprintf_r+0x454>
 8017a0c:	f045 0501 	orr.w	r5, r5, #1
 8017a10:	e7f0      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017a12:	683e      	ldr	r6, [r7, #0]
 8017a14:	9609      	str	r6, [sp, #36]	; 0x24
 8017a16:	2e00      	cmp	r6, #0
 8017a18:	f107 0304 	add.w	r3, r7, #4
 8017a1c:	db01      	blt.n	8017a22 <_svfprintf_r+0x1d2>
 8017a1e:	461f      	mov	r7, r3
 8017a20:	e7e8      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017a22:	4276      	negs	r6, r6
 8017a24:	9609      	str	r6, [sp, #36]	; 0x24
 8017a26:	461f      	mov	r7, r3
 8017a28:	f045 0504 	orr.w	r5, r5, #4
 8017a2c:	e7e2      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017a2e:	9e05      	ldr	r6, [sp, #20]
 8017a30:	9b05      	ldr	r3, [sp, #20]
 8017a32:	7836      	ldrb	r6, [r6, #0]
 8017a34:	9602      	str	r6, [sp, #8]
 8017a36:	2e2a      	cmp	r6, #42	; 0x2a
 8017a38:	f103 0301 	add.w	r3, r3, #1
 8017a3c:	d002      	beq.n	8017a44 <_svfprintf_r+0x1f4>
 8017a3e:	f04f 0900 	mov.w	r9, #0
 8017a42:	e00a      	b.n	8017a5a <_svfprintf_r+0x20a>
 8017a44:	f8d7 9000 	ldr.w	r9, [r7]
 8017a48:	9305      	str	r3, [sp, #20]
 8017a4a:	1d3e      	adds	r6, r7, #4
 8017a4c:	f1b9 0f00 	cmp.w	r9, #0
 8017a50:	4637      	mov	r7, r6
 8017a52:	dacf      	bge.n	80179f4 <_svfprintf_r+0x1a4>
 8017a54:	f04f 39ff 	mov.w	r9, #4294967295
 8017a58:	e7cc      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017a5a:	9305      	str	r3, [sp, #20]
 8017a5c:	9b02      	ldr	r3, [sp, #8]
 8017a5e:	3b30      	subs	r3, #48	; 0x30
 8017a60:	2b09      	cmp	r3, #9
 8017a62:	d808      	bhi.n	8017a76 <_svfprintf_r+0x226>
 8017a64:	fb00 3909 	mla	r9, r0, r9, r3
 8017a68:	9b05      	ldr	r3, [sp, #20]
 8017a6a:	461e      	mov	r6, r3
 8017a6c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8017a70:	9302      	str	r3, [sp, #8]
 8017a72:	4633      	mov	r3, r6
 8017a74:	e7f1      	b.n	8017a5a <_svfprintf_r+0x20a>
 8017a76:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8017a7a:	e755      	b.n	8017928 <_svfprintf_r+0xd8>
 8017a7c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8017a80:	e7b8      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017a82:	2300      	movs	r3, #0
 8017a84:	9309      	str	r3, [sp, #36]	; 0x24
 8017a86:	9b02      	ldr	r3, [sp, #8]
 8017a88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017a8a:	3b30      	subs	r3, #48	; 0x30
 8017a8c:	fb00 3306 	mla	r3, r0, r6, r3
 8017a90:	9309      	str	r3, [sp, #36]	; 0x24
 8017a92:	9b05      	ldr	r3, [sp, #20]
 8017a94:	461e      	mov	r6, r3
 8017a96:	f816 3b01 	ldrb.w	r3, [r6], #1
 8017a9a:	9302      	str	r3, [sp, #8]
 8017a9c:	9b02      	ldr	r3, [sp, #8]
 8017a9e:	9605      	str	r6, [sp, #20]
 8017aa0:	3b30      	subs	r3, #48	; 0x30
 8017aa2:	2b09      	cmp	r3, #9
 8017aa4:	d9ef      	bls.n	8017a86 <_svfprintf_r+0x236>
 8017aa6:	e73f      	b.n	8017928 <_svfprintf_r+0xd8>
 8017aa8:	f045 0508 	orr.w	r5, r5, #8
 8017aac:	e7a2      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017aae:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8017ab2:	e79f      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017ab4:	9b05      	ldr	r3, [sp, #20]
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	2b6c      	cmp	r3, #108	; 0x6c
 8017aba:	d103      	bne.n	8017ac4 <_svfprintf_r+0x274>
 8017abc:	9b05      	ldr	r3, [sp, #20]
 8017abe:	3301      	adds	r3, #1
 8017ac0:	9305      	str	r3, [sp, #20]
 8017ac2:	e002      	b.n	8017aca <_svfprintf_r+0x27a>
 8017ac4:	f045 0510 	orr.w	r5, r5, #16
 8017ac8:	e794      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017aca:	f045 0520 	orr.w	r5, r5, #32
 8017ace:	e791      	b.n	80179f4 <_svfprintf_r+0x1a4>
 8017ad0:	1d3b      	adds	r3, r7, #4
 8017ad2:	9303      	str	r3, [sp, #12]
 8017ad4:	2600      	movs	r6, #0
 8017ad6:	683b      	ldr	r3, [r7, #0]
 8017ad8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8017adc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8017ae0:	e199      	b.n	8017e16 <_svfprintf_r+0x5c6>
 8017ae2:	b10a      	cbz	r2, 8017ae8 <_svfprintf_r+0x298>
 8017ae4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8017ae8:	f045 0510 	orr.w	r5, r5, #16
 8017aec:	06aa      	lsls	r2, r5, #26
 8017aee:	d511      	bpl.n	8017b14 <_svfprintf_r+0x2c4>
 8017af0:	3707      	adds	r7, #7
 8017af2:	f027 0707 	bic.w	r7, r7, #7
 8017af6:	f107 0308 	add.w	r3, r7, #8
 8017afa:	9303      	str	r3, [sp, #12]
 8017afc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017b00:	e017      	b.n	8017b32 <_svfprintf_r+0x2e2>
 8017b02:	bf00      	nop
 8017b04:	f3af 8000 	nop.w
	...
 8017b10:	0801cf32 	.word	0x0801cf32
 8017b14:	f015 0f10 	tst.w	r5, #16
 8017b18:	f107 0304 	add.w	r3, r7, #4
 8017b1c:	d002      	beq.n	8017b24 <_svfprintf_r+0x2d4>
 8017b1e:	9303      	str	r3, [sp, #12]
 8017b20:	683e      	ldr	r6, [r7, #0]
 8017b22:	e005      	b.n	8017b30 <_svfprintf_r+0x2e0>
 8017b24:	683e      	ldr	r6, [r7, #0]
 8017b26:	9303      	str	r3, [sp, #12]
 8017b28:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017b2c:	bf18      	it	ne
 8017b2e:	b236      	sxthne	r6, r6
 8017b30:	17f7      	asrs	r7, r6, #31
 8017b32:	2e00      	cmp	r6, #0
 8017b34:	f177 0300 	sbcs.w	r3, r7, #0
 8017b38:	f280 80de 	bge.w	8017cf8 <_svfprintf_r+0x4a8>
 8017b3c:	4276      	negs	r6, r6
 8017b3e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8017b42:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8017b46:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8017b4a:	e0d5      	b.n	8017cf8 <_svfprintf_r+0x4a8>
 8017b4c:	b10a      	cbz	r2, 8017b52 <_svfprintf_r+0x302>
 8017b4e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8017b52:	3707      	adds	r7, #7
 8017b54:	f027 0707 	bic.w	r7, r7, #7
 8017b58:	f107 0308 	add.w	r3, r7, #8
 8017b5c:	9303      	str	r3, [sp, #12]
 8017b5e:	ed97 7b00 	vldr	d7, [r7]
 8017b62:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017b66:	9b06      	ldr	r3, [sp, #24]
 8017b68:	9312      	str	r3, [sp, #72]	; 0x48
 8017b6a:	9b07      	ldr	r3, [sp, #28]
 8017b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017b70:	9313      	str	r3, [sp, #76]	; 0x4c
 8017b72:	f04f 32ff 	mov.w	r2, #4294967295
 8017b76:	4bab      	ldr	r3, [pc, #684]	; (8017e24 <_svfprintf_r+0x5d4>)
 8017b78:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8017b7c:	f7f1 f934 	bl	8008de8 <__aeabi_dcmpun>
 8017b80:	2800      	cmp	r0, #0
 8017b82:	f040 84f1 	bne.w	8018568 <_svfprintf_r+0xd18>
 8017b86:	f04f 32ff 	mov.w	r2, #4294967295
 8017b8a:	4ba6      	ldr	r3, [pc, #664]	; (8017e24 <_svfprintf_r+0x5d4>)
 8017b8c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8017b90:	f7f1 f90c 	bl	8008dac <__aeabi_dcmple>
 8017b94:	2800      	cmp	r0, #0
 8017b96:	f040 84e7 	bne.w	8018568 <_svfprintf_r+0xd18>
 8017b9a:	f000 bdfd 	b.w	8018798 <_svfprintf_r+0xf48>
 8017b9e:	b10a      	cbz	r2, 8017ba4 <_svfprintf_r+0x354>
 8017ba0:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8017ba4:	f015 0f20 	tst.w	r5, #32
 8017ba8:	f107 0304 	add.w	r3, r7, #4
 8017bac:	d007      	beq.n	8017bbe <_svfprintf_r+0x36e>
 8017bae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017bb0:	683a      	ldr	r2, [r7, #0]
 8017bb2:	17ce      	asrs	r6, r1, #31
 8017bb4:	4608      	mov	r0, r1
 8017bb6:	4631      	mov	r1, r6
 8017bb8:	e9c2 0100 	strd	r0, r1, [r2]
 8017bbc:	e00b      	b.n	8017bd6 <_svfprintf_r+0x386>
 8017bbe:	06e9      	lsls	r1, r5, #27
 8017bc0:	d406      	bmi.n	8017bd0 <_svfprintf_r+0x380>
 8017bc2:	066a      	lsls	r2, r5, #25
 8017bc4:	d504      	bpl.n	8017bd0 <_svfprintf_r+0x380>
 8017bc6:	683a      	ldr	r2, [r7, #0]
 8017bc8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8017bcc:	8011      	strh	r1, [r2, #0]
 8017bce:	e002      	b.n	8017bd6 <_svfprintf_r+0x386>
 8017bd0:	683a      	ldr	r2, [r7, #0]
 8017bd2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017bd4:	6011      	str	r1, [r2, #0]
 8017bd6:	461f      	mov	r7, r3
 8017bd8:	e670      	b.n	80178bc <_svfprintf_r+0x6c>
 8017bda:	f045 0510 	orr.w	r5, r5, #16
 8017bde:	f015 0320 	ands.w	r3, r5, #32
 8017be2:	d009      	beq.n	8017bf8 <_svfprintf_r+0x3a8>
 8017be4:	3707      	adds	r7, #7
 8017be6:	f027 0707 	bic.w	r7, r7, #7
 8017bea:	f107 0308 	add.w	r3, r7, #8
 8017bee:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017bf2:	9303      	str	r3, [sp, #12]
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	e07b      	b.n	8017cf0 <_svfprintf_r+0x4a0>
 8017bf8:	1d3a      	adds	r2, r7, #4
 8017bfa:	f015 0110 	ands.w	r1, r5, #16
 8017bfe:	9203      	str	r2, [sp, #12]
 8017c00:	d105      	bne.n	8017c0e <_svfprintf_r+0x3be>
 8017c02:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8017c06:	d002      	beq.n	8017c0e <_svfprintf_r+0x3be>
 8017c08:	883e      	ldrh	r6, [r7, #0]
 8017c0a:	2700      	movs	r7, #0
 8017c0c:	e7f2      	b.n	8017bf4 <_svfprintf_r+0x3a4>
 8017c0e:	683e      	ldr	r6, [r7, #0]
 8017c10:	2700      	movs	r7, #0
 8017c12:	e06d      	b.n	8017cf0 <_svfprintf_r+0x4a0>
 8017c14:	1d3b      	adds	r3, r7, #4
 8017c16:	9303      	str	r3, [sp, #12]
 8017c18:	2330      	movs	r3, #48	; 0x30
 8017c1a:	2278      	movs	r2, #120	; 0x78
 8017c1c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8017c20:	4b81      	ldr	r3, [pc, #516]	; (8017e28 <_svfprintf_r+0x5d8>)
 8017c22:	683e      	ldr	r6, [r7, #0]
 8017c24:	9311      	str	r3, [sp, #68]	; 0x44
 8017c26:	2700      	movs	r7, #0
 8017c28:	f045 0502 	orr.w	r5, r5, #2
 8017c2c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8017c30:	2302      	movs	r3, #2
 8017c32:	9202      	str	r2, [sp, #8]
 8017c34:	e05c      	b.n	8017cf0 <_svfprintf_r+0x4a0>
 8017c36:	2600      	movs	r6, #0
 8017c38:	1d3b      	adds	r3, r7, #4
 8017c3a:	45b1      	cmp	r9, r6
 8017c3c:	9303      	str	r3, [sp, #12]
 8017c3e:	f8d7 8000 	ldr.w	r8, [r7]
 8017c42:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8017c46:	db0a      	blt.n	8017c5e <_svfprintf_r+0x40e>
 8017c48:	464a      	mov	r2, r9
 8017c4a:	4631      	mov	r1, r6
 8017c4c:	4640      	mov	r0, r8
 8017c4e:	f7f0 fc17 	bl	8008480 <memchr>
 8017c52:	2800      	cmp	r0, #0
 8017c54:	f000 80ea 	beq.w	8017e2c <_svfprintf_r+0x5dc>
 8017c58:	ebc8 0900 	rsb	r9, r8, r0
 8017c5c:	e0e7      	b.n	8017e2e <_svfprintf_r+0x5de>
 8017c5e:	4640      	mov	r0, r8
 8017c60:	f7f0 fc68 	bl	8008534 <strlen>
 8017c64:	4681      	mov	r9, r0
 8017c66:	e0e2      	b.n	8017e2e <_svfprintf_r+0x5de>
 8017c68:	f045 0510 	orr.w	r5, r5, #16
 8017c6c:	06ae      	lsls	r6, r5, #26
 8017c6e:	d508      	bpl.n	8017c82 <_svfprintf_r+0x432>
 8017c70:	3707      	adds	r7, #7
 8017c72:	f027 0707 	bic.w	r7, r7, #7
 8017c76:	f107 0308 	add.w	r3, r7, #8
 8017c7a:	9303      	str	r3, [sp, #12]
 8017c7c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017c80:	e00a      	b.n	8017c98 <_svfprintf_r+0x448>
 8017c82:	1d3b      	adds	r3, r7, #4
 8017c84:	f015 0f10 	tst.w	r5, #16
 8017c88:	9303      	str	r3, [sp, #12]
 8017c8a:	d103      	bne.n	8017c94 <_svfprintf_r+0x444>
 8017c8c:	0668      	lsls	r0, r5, #25
 8017c8e:	d501      	bpl.n	8017c94 <_svfprintf_r+0x444>
 8017c90:	883e      	ldrh	r6, [r7, #0]
 8017c92:	e000      	b.n	8017c96 <_svfprintf_r+0x446>
 8017c94:	683e      	ldr	r6, [r7, #0]
 8017c96:	2700      	movs	r7, #0
 8017c98:	2301      	movs	r3, #1
 8017c9a:	e029      	b.n	8017cf0 <_svfprintf_r+0x4a0>
 8017c9c:	b10a      	cbz	r2, 8017ca2 <_svfprintf_r+0x452>
 8017c9e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8017ca2:	4b61      	ldr	r3, [pc, #388]	; (8017e28 <_svfprintf_r+0x5d8>)
 8017ca4:	9311      	str	r3, [sp, #68]	; 0x44
 8017ca6:	06a9      	lsls	r1, r5, #26
 8017ca8:	d508      	bpl.n	8017cbc <_svfprintf_r+0x46c>
 8017caa:	3707      	adds	r7, #7
 8017cac:	f027 0707 	bic.w	r7, r7, #7
 8017cb0:	f107 0308 	add.w	r3, r7, #8
 8017cb4:	9303      	str	r3, [sp, #12]
 8017cb6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8017cba:	e00a      	b.n	8017cd2 <_svfprintf_r+0x482>
 8017cbc:	1d3b      	adds	r3, r7, #4
 8017cbe:	f015 0f10 	tst.w	r5, #16
 8017cc2:	9303      	str	r3, [sp, #12]
 8017cc4:	d103      	bne.n	8017cce <_svfprintf_r+0x47e>
 8017cc6:	066a      	lsls	r2, r5, #25
 8017cc8:	d501      	bpl.n	8017cce <_svfprintf_r+0x47e>
 8017cca:	883e      	ldrh	r6, [r7, #0]
 8017ccc:	e000      	b.n	8017cd0 <_svfprintf_r+0x480>
 8017cce:	683e      	ldr	r6, [r7, #0]
 8017cd0:	2700      	movs	r7, #0
 8017cd2:	07eb      	lsls	r3, r5, #31
 8017cd4:	d50b      	bpl.n	8017cee <_svfprintf_r+0x49e>
 8017cd6:	ea56 0307 	orrs.w	r3, r6, r7
 8017cda:	d008      	beq.n	8017cee <_svfprintf_r+0x49e>
 8017cdc:	2330      	movs	r3, #48	; 0x30
 8017cde:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8017ce2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8017ce6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8017cea:	f045 0502 	orr.w	r5, r5, #2
 8017cee:	2302      	movs	r3, #2
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8017cf6:	e000      	b.n	8017cfa <_svfprintf_r+0x4aa>
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	f1b9 0f00 	cmp.w	r9, #0
 8017cfe:	f2c0 855c 	blt.w	80187ba <_svfprintf_r+0xf6a>
 8017d02:	ea56 0207 	orrs.w	r2, r6, r7
 8017d06:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8017d0a:	d103      	bne.n	8017d14 <_svfprintf_r+0x4c4>
 8017d0c:	f1b9 0f00 	cmp.w	r9, #0
 8017d10:	d05f      	beq.n	8017dd2 <_svfprintf_r+0x582>
 8017d12:	e006      	b.n	8017d22 <_svfprintf_r+0x4d2>
 8017d14:	460d      	mov	r5, r1
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d025      	beq.n	8017d66 <_svfprintf_r+0x516>
 8017d1a:	2b02      	cmp	r3, #2
 8017d1c:	d046      	beq.n	8017dac <_svfprintf_r+0x55c>
 8017d1e:	4629      	mov	r1, r5
 8017d20:	e007      	b.n	8017d32 <_svfprintf_r+0x4e2>
 8017d22:	460d      	mov	r5, r1
 8017d24:	2b01      	cmp	r3, #1
 8017d26:	d022      	beq.n	8017d6e <_svfprintf_r+0x51e>
 8017d28:	2b02      	cmp	r3, #2
 8017d2a:	d03d      	beq.n	8017da8 <_svfprintf_r+0x558>
 8017d2c:	4629      	mov	r1, r5
 8017d2e:	2600      	movs	r6, #0
 8017d30:	2700      	movs	r7, #0
 8017d32:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8017d36:	08f2      	lsrs	r2, r6, #3
 8017d38:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8017d3c:	08f8      	lsrs	r0, r7, #3
 8017d3e:	f006 0307 	and.w	r3, r6, #7
 8017d42:	4607      	mov	r7, r0
 8017d44:	4616      	mov	r6, r2
 8017d46:	3330      	adds	r3, #48	; 0x30
 8017d48:	ea56 0207 	orrs.w	r2, r6, r7
 8017d4c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8017d50:	d1f1      	bne.n	8017d36 <_svfprintf_r+0x4e6>
 8017d52:	07e8      	lsls	r0, r5, #31
 8017d54:	d548      	bpl.n	8017de8 <_svfprintf_r+0x598>
 8017d56:	2b30      	cmp	r3, #48	; 0x30
 8017d58:	d046      	beq.n	8017de8 <_svfprintf_r+0x598>
 8017d5a:	2330      	movs	r3, #48	; 0x30
 8017d5c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8017d60:	f108 38ff 	add.w	r8, r8, #4294967295
 8017d64:	e040      	b.n	8017de8 <_svfprintf_r+0x598>
 8017d66:	2f00      	cmp	r7, #0
 8017d68:	bf08      	it	eq
 8017d6a:	2e0a      	cmpeq	r6, #10
 8017d6c:	d205      	bcs.n	8017d7a <_svfprintf_r+0x52a>
 8017d6e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8017d72:	3630      	adds	r6, #48	; 0x30
 8017d74:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8017d78:	e029      	b.n	8017dce <_svfprintf_r+0x57e>
 8017d7a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8017d7e:	4630      	mov	r0, r6
 8017d80:	4639      	mov	r1, r7
 8017d82:	220a      	movs	r2, #10
 8017d84:	2300      	movs	r3, #0
 8017d86:	f7f1 f8bd 	bl	8008f04 <__aeabi_uldivmod>
 8017d8a:	3230      	adds	r2, #48	; 0x30
 8017d8c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8017d90:	2300      	movs	r3, #0
 8017d92:	4630      	mov	r0, r6
 8017d94:	4639      	mov	r1, r7
 8017d96:	220a      	movs	r2, #10
 8017d98:	f7f1 f8b4 	bl	8008f04 <__aeabi_uldivmod>
 8017d9c:	4606      	mov	r6, r0
 8017d9e:	460f      	mov	r7, r1
 8017da0:	ea56 0307 	orrs.w	r3, r6, r7
 8017da4:	d1eb      	bne.n	8017d7e <_svfprintf_r+0x52e>
 8017da6:	e012      	b.n	8017dce <_svfprintf_r+0x57e>
 8017da8:	2600      	movs	r6, #0
 8017daa:	2700      	movs	r7, #0
 8017dac:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8017db0:	f006 030f 	and.w	r3, r6, #15
 8017db4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017db6:	5cd3      	ldrb	r3, [r2, r3]
 8017db8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8017dbc:	0933      	lsrs	r3, r6, #4
 8017dbe:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8017dc2:	093a      	lsrs	r2, r7, #4
 8017dc4:	461e      	mov	r6, r3
 8017dc6:	4617      	mov	r7, r2
 8017dc8:	ea56 0307 	orrs.w	r3, r6, r7
 8017dcc:	d1f0      	bne.n	8017db0 <_svfprintf_r+0x560>
 8017dce:	4629      	mov	r1, r5
 8017dd0:	e00a      	b.n	8017de8 <_svfprintf_r+0x598>
 8017dd2:	b93b      	cbnz	r3, 8017de4 <_svfprintf_r+0x594>
 8017dd4:	07ea      	lsls	r2, r5, #31
 8017dd6:	d505      	bpl.n	8017de4 <_svfprintf_r+0x594>
 8017dd8:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8017ddc:	2330      	movs	r3, #48	; 0x30
 8017dde:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8017de2:	e001      	b.n	8017de8 <_svfprintf_r+0x598>
 8017de4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8017de8:	464e      	mov	r6, r9
 8017dea:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8017dee:	ebc8 0909 	rsb	r9, r8, r9
 8017df2:	460d      	mov	r5, r1
 8017df4:	2700      	movs	r7, #0
 8017df6:	e01b      	b.n	8017e30 <_svfprintf_r+0x5e0>
 8017df8:	b10a      	cbz	r2, 8017dfe <_svfprintf_r+0x5ae>
 8017dfa:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8017dfe:	9b02      	ldr	r3, [sp, #8]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	f000 83a0 	beq.w	8018546 <_svfprintf_r+0xcf6>
 8017e06:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8017e0a:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8017e0e:	2600      	movs	r6, #0
 8017e10:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8017e14:	9703      	str	r7, [sp, #12]
 8017e16:	f04f 0901 	mov.w	r9, #1
 8017e1a:	4637      	mov	r7, r6
 8017e1c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8017e20:	e006      	b.n	8017e30 <_svfprintf_r+0x5e0>
 8017e22:	bf00      	nop
 8017e24:	7fefffff 	.word	0x7fefffff
 8017e28:	0801cf43 	.word	0x0801cf43
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	4637      	mov	r7, r6
 8017e30:	454e      	cmp	r6, r9
 8017e32:	4633      	mov	r3, r6
 8017e34:	bfb8      	it	lt
 8017e36:	464b      	movlt	r3, r9
 8017e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e3a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8017e3e:	b113      	cbz	r3, 8017e46 <_svfprintf_r+0x5f6>
 8017e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e42:	3301      	adds	r3, #1
 8017e44:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e46:	f015 0302 	ands.w	r3, r5, #2
 8017e4a:	9314      	str	r3, [sp, #80]	; 0x50
 8017e4c:	bf1e      	ittt	ne
 8017e4e:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8017e50:	3302      	addne	r3, #2
 8017e52:	930b      	strne	r3, [sp, #44]	; 0x2c
 8017e54:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8017e58:	9315      	str	r3, [sp, #84]	; 0x54
 8017e5a:	d139      	bne.n	8017ed0 <_svfprintf_r+0x680>
 8017e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017e60:	1a9b      	subs	r3, r3, r2
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	930c      	str	r3, [sp, #48]	; 0x30
 8017e66:	dd33      	ble.n	8017ed0 <_svfprintf_r+0x680>
 8017e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e6a:	2b10      	cmp	r3, #16
 8017e6c:	4ba6      	ldr	r3, [pc, #664]	; (8018108 <_svfprintf_r+0x8b8>)
 8017e6e:	6023      	str	r3, [r4, #0]
 8017e70:	dd18      	ble.n	8017ea4 <_svfprintf_r+0x654>
 8017e72:	2310      	movs	r3, #16
 8017e74:	6063      	str	r3, [r4, #4]
 8017e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e78:	3310      	adds	r3, #16
 8017e7a:	9321      	str	r3, [sp, #132]	; 0x84
 8017e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017e7e:	3301      	adds	r3, #1
 8017e80:	2b07      	cmp	r3, #7
 8017e82:	9320      	str	r3, [sp, #128]	; 0x80
 8017e84:	dc01      	bgt.n	8017e8a <_svfprintf_r+0x63a>
 8017e86:	3408      	adds	r4, #8
 8017e88:	e008      	b.n	8017e9c <_svfprintf_r+0x64c>
 8017e8a:	aa1f      	add	r2, sp, #124	; 0x7c
 8017e8c:	4659      	mov	r1, fp
 8017e8e:	4650      	mov	r0, sl
 8017e90:	f002 f9ca 	bl	801a228 <__ssprint_r>
 8017e94:	2800      	cmp	r0, #0
 8017e96:	f040 835d 	bne.w	8018554 <_svfprintf_r+0xd04>
 8017e9a:	ac2c      	add	r4, sp, #176	; 0xb0
 8017e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e9e:	3b10      	subs	r3, #16
 8017ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8017ea2:	e7e1      	b.n	8017e68 <_svfprintf_r+0x618>
 8017ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ea6:	6063      	str	r3, [r4, #4]
 8017ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017eac:	4413      	add	r3, r2
 8017eae:	9321      	str	r3, [sp, #132]	; 0x84
 8017eb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017eb2:	3301      	adds	r3, #1
 8017eb4:	2b07      	cmp	r3, #7
 8017eb6:	9320      	str	r3, [sp, #128]	; 0x80
 8017eb8:	dc01      	bgt.n	8017ebe <_svfprintf_r+0x66e>
 8017eba:	3408      	adds	r4, #8
 8017ebc:	e008      	b.n	8017ed0 <_svfprintf_r+0x680>
 8017ebe:	aa1f      	add	r2, sp, #124	; 0x7c
 8017ec0:	4659      	mov	r1, fp
 8017ec2:	4650      	mov	r0, sl
 8017ec4:	f002 f9b0 	bl	801a228 <__ssprint_r>
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	f040 8343 	bne.w	8018554 <_svfprintf_r+0xd04>
 8017ece:	ac2c      	add	r4, sp, #176	; 0xb0
 8017ed0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8017ed4:	b1bb      	cbz	r3, 8017f06 <_svfprintf_r+0x6b6>
 8017ed6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8017eda:	6023      	str	r3, [r4, #0]
 8017edc:	2301      	movs	r3, #1
 8017ede:	6063      	str	r3, [r4, #4]
 8017ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ee2:	3301      	adds	r3, #1
 8017ee4:	9321      	str	r3, [sp, #132]	; 0x84
 8017ee6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017ee8:	3301      	adds	r3, #1
 8017eea:	2b07      	cmp	r3, #7
 8017eec:	9320      	str	r3, [sp, #128]	; 0x80
 8017eee:	dc01      	bgt.n	8017ef4 <_svfprintf_r+0x6a4>
 8017ef0:	3408      	adds	r4, #8
 8017ef2:	e008      	b.n	8017f06 <_svfprintf_r+0x6b6>
 8017ef4:	aa1f      	add	r2, sp, #124	; 0x7c
 8017ef6:	4659      	mov	r1, fp
 8017ef8:	4650      	mov	r0, sl
 8017efa:	f002 f995 	bl	801a228 <__ssprint_r>
 8017efe:	2800      	cmp	r0, #0
 8017f00:	f040 8328 	bne.w	8018554 <_svfprintf_r+0xd04>
 8017f04:	ac2c      	add	r4, sp, #176	; 0xb0
 8017f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f08:	b1b3      	cbz	r3, 8017f38 <_svfprintf_r+0x6e8>
 8017f0a:	ab18      	add	r3, sp, #96	; 0x60
 8017f0c:	6023      	str	r3, [r4, #0]
 8017f0e:	2302      	movs	r3, #2
 8017f10:	6063      	str	r3, [r4, #4]
 8017f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f14:	3302      	adds	r3, #2
 8017f16:	9321      	str	r3, [sp, #132]	; 0x84
 8017f18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017f1a:	3301      	adds	r3, #1
 8017f1c:	2b07      	cmp	r3, #7
 8017f1e:	9320      	str	r3, [sp, #128]	; 0x80
 8017f20:	dc01      	bgt.n	8017f26 <_svfprintf_r+0x6d6>
 8017f22:	3408      	adds	r4, #8
 8017f24:	e008      	b.n	8017f38 <_svfprintf_r+0x6e8>
 8017f26:	aa1f      	add	r2, sp, #124	; 0x7c
 8017f28:	4659      	mov	r1, fp
 8017f2a:	4650      	mov	r0, sl
 8017f2c:	f002 f97c 	bl	801a228 <__ssprint_r>
 8017f30:	2800      	cmp	r0, #0
 8017f32:	f040 830f 	bne.w	8018554 <_svfprintf_r+0xd04>
 8017f36:	ac2c      	add	r4, sp, #176	; 0xb0
 8017f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f3a:	2b80      	cmp	r3, #128	; 0x80
 8017f3c:	d135      	bne.n	8017faa <_svfprintf_r+0x75a>
 8017f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017f42:	1a9b      	subs	r3, r3, r2
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	dd30      	ble.n	8017faa <_svfprintf_r+0x75a>
 8017f48:	4a70      	ldr	r2, [pc, #448]	; (801810c <_svfprintf_r+0x8bc>)
 8017f4a:	6022      	str	r2, [r4, #0]
 8017f4c:	2b10      	cmp	r3, #16
 8017f4e:	dd18      	ble.n	8017f82 <_svfprintf_r+0x732>
 8017f50:	2210      	movs	r2, #16
 8017f52:	6062      	str	r2, [r4, #4]
 8017f54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f56:	3210      	adds	r2, #16
 8017f58:	9221      	str	r2, [sp, #132]	; 0x84
 8017f5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f5c:	3201      	adds	r2, #1
 8017f5e:	2a07      	cmp	r2, #7
 8017f60:	9220      	str	r2, [sp, #128]	; 0x80
 8017f62:	dc01      	bgt.n	8017f68 <_svfprintf_r+0x718>
 8017f64:	3408      	adds	r4, #8
 8017f66:	e00a      	b.n	8017f7e <_svfprintf_r+0x72e>
 8017f68:	aa1f      	add	r2, sp, #124	; 0x7c
 8017f6a:	4659      	mov	r1, fp
 8017f6c:	4650      	mov	r0, sl
 8017f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8017f70:	f002 f95a 	bl	801a228 <__ssprint_r>
 8017f74:	2800      	cmp	r0, #0
 8017f76:	f040 82ed 	bne.w	8018554 <_svfprintf_r+0xd04>
 8017f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8017f7e:	3b10      	subs	r3, #16
 8017f80:	e7e2      	b.n	8017f48 <_svfprintf_r+0x6f8>
 8017f82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f84:	6063      	str	r3, [r4, #4]
 8017f86:	4413      	add	r3, r2
 8017f88:	9321      	str	r3, [sp, #132]	; 0x84
 8017f8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	2b07      	cmp	r3, #7
 8017f90:	9320      	str	r3, [sp, #128]	; 0x80
 8017f92:	dc01      	bgt.n	8017f98 <_svfprintf_r+0x748>
 8017f94:	3408      	adds	r4, #8
 8017f96:	e008      	b.n	8017faa <_svfprintf_r+0x75a>
 8017f98:	aa1f      	add	r2, sp, #124	; 0x7c
 8017f9a:	4659      	mov	r1, fp
 8017f9c:	4650      	mov	r0, sl
 8017f9e:	f002 f943 	bl	801a228 <__ssprint_r>
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	f040 82d6 	bne.w	8018554 <_svfprintf_r+0xd04>
 8017fa8:	ac2c      	add	r4, sp, #176	; 0xb0
 8017faa:	ebc9 0606 	rsb	r6, r9, r6
 8017fae:	2e00      	cmp	r6, #0
 8017fb0:	dd2e      	ble.n	8018010 <_svfprintf_r+0x7c0>
 8017fb2:	4b56      	ldr	r3, [pc, #344]	; (801810c <_svfprintf_r+0x8bc>)
 8017fb4:	6023      	str	r3, [r4, #0]
 8017fb6:	2e10      	cmp	r6, #16
 8017fb8:	dd16      	ble.n	8017fe8 <_svfprintf_r+0x798>
 8017fba:	2310      	movs	r3, #16
 8017fbc:	6063      	str	r3, [r4, #4]
 8017fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fc0:	3310      	adds	r3, #16
 8017fc2:	9321      	str	r3, [sp, #132]	; 0x84
 8017fc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017fc6:	3301      	adds	r3, #1
 8017fc8:	2b07      	cmp	r3, #7
 8017fca:	9320      	str	r3, [sp, #128]	; 0x80
 8017fcc:	dc01      	bgt.n	8017fd2 <_svfprintf_r+0x782>
 8017fce:	3408      	adds	r4, #8
 8017fd0:	e008      	b.n	8017fe4 <_svfprintf_r+0x794>
 8017fd2:	aa1f      	add	r2, sp, #124	; 0x7c
 8017fd4:	4659      	mov	r1, fp
 8017fd6:	4650      	mov	r0, sl
 8017fd8:	f002 f926 	bl	801a228 <__ssprint_r>
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	f040 82b9 	bne.w	8018554 <_svfprintf_r+0xd04>
 8017fe2:	ac2c      	add	r4, sp, #176	; 0xb0
 8017fe4:	3e10      	subs	r6, #16
 8017fe6:	e7e4      	b.n	8017fb2 <_svfprintf_r+0x762>
 8017fe8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017fea:	9821      	ldr	r0, [sp, #132]	; 0x84
 8017fec:	6066      	str	r6, [r4, #4]
 8017fee:	3301      	adds	r3, #1
 8017ff0:	4406      	add	r6, r0
 8017ff2:	2b07      	cmp	r3, #7
 8017ff4:	9621      	str	r6, [sp, #132]	; 0x84
 8017ff6:	9320      	str	r3, [sp, #128]	; 0x80
 8017ff8:	dc01      	bgt.n	8017ffe <_svfprintf_r+0x7ae>
 8017ffa:	3408      	adds	r4, #8
 8017ffc:	e008      	b.n	8018010 <_svfprintf_r+0x7c0>
 8017ffe:	aa1f      	add	r2, sp, #124	; 0x7c
 8018000:	4659      	mov	r1, fp
 8018002:	4650      	mov	r0, sl
 8018004:	f002 f910 	bl	801a228 <__ssprint_r>
 8018008:	2800      	cmp	r0, #0
 801800a:	f040 82a3 	bne.w	8018554 <_svfprintf_r+0xd04>
 801800e:	ac2c      	add	r4, sp, #176	; 0xb0
 8018010:	05eb      	lsls	r3, r5, #23
 8018012:	d414      	bmi.n	801803e <_svfprintf_r+0x7ee>
 8018014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018016:	e884 0300 	stmia.w	r4, {r8, r9}
 801801a:	444b      	add	r3, r9
 801801c:	9321      	str	r3, [sp, #132]	; 0x84
 801801e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018020:	3301      	adds	r3, #1
 8018022:	2b07      	cmp	r3, #7
 8018024:	9320      	str	r3, [sp, #128]	; 0x80
 8018026:	f340 8244 	ble.w	80184b2 <_svfprintf_r+0xc62>
 801802a:	aa1f      	add	r2, sp, #124	; 0x7c
 801802c:	4659      	mov	r1, fp
 801802e:	4650      	mov	r0, sl
 8018030:	f002 f8fa 	bl	801a228 <__ssprint_r>
 8018034:	2800      	cmp	r0, #0
 8018036:	f040 828d 	bne.w	8018554 <_svfprintf_r+0xd04>
 801803a:	ac2c      	add	r4, sp, #176	; 0xb0
 801803c:	e23a      	b.n	80184b4 <_svfprintf_r+0xc64>
 801803e:	9b02      	ldr	r3, [sp, #8]
 8018040:	2b65      	cmp	r3, #101	; 0x65
 8018042:	f340 81ad 	ble.w	80183a0 <_svfprintf_r+0xb50>
 8018046:	2200      	movs	r2, #0
 8018048:	2300      	movs	r3, #0
 801804a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801804e:	f7f0 fe99 	bl	8008d84 <__aeabi_dcmpeq>
 8018052:	2800      	cmp	r0, #0
 8018054:	d05e      	beq.n	8018114 <_svfprintf_r+0x8c4>
 8018056:	4b2e      	ldr	r3, [pc, #184]	; (8018110 <_svfprintf_r+0x8c0>)
 8018058:	6023      	str	r3, [r4, #0]
 801805a:	2301      	movs	r3, #1
 801805c:	6063      	str	r3, [r4, #4]
 801805e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018060:	3301      	adds	r3, #1
 8018062:	9321      	str	r3, [sp, #132]	; 0x84
 8018064:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018066:	3301      	adds	r3, #1
 8018068:	2b07      	cmp	r3, #7
 801806a:	9320      	str	r3, [sp, #128]	; 0x80
 801806c:	dc01      	bgt.n	8018072 <_svfprintf_r+0x822>
 801806e:	3408      	adds	r4, #8
 8018070:	e008      	b.n	8018084 <_svfprintf_r+0x834>
 8018072:	aa1f      	add	r2, sp, #124	; 0x7c
 8018074:	4659      	mov	r1, fp
 8018076:	4650      	mov	r0, sl
 8018078:	f002 f8d6 	bl	801a228 <__ssprint_r>
 801807c:	2800      	cmp	r0, #0
 801807e:	f040 8269 	bne.w	8018554 <_svfprintf_r+0xd04>
 8018082:	ac2c      	add	r4, sp, #176	; 0xb0
 8018084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018086:	9a04      	ldr	r2, [sp, #16]
 8018088:	4293      	cmp	r3, r2
 801808a:	db02      	blt.n	8018092 <_svfprintf_r+0x842>
 801808c:	07ee      	lsls	r6, r5, #31
 801808e:	f140 8211 	bpl.w	80184b4 <_svfprintf_r+0xc64>
 8018092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018094:	6023      	str	r3, [r4, #0]
 8018096:	9b08      	ldr	r3, [sp, #32]
 8018098:	6063      	str	r3, [r4, #4]
 801809a:	9a08      	ldr	r2, [sp, #32]
 801809c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801809e:	4413      	add	r3, r2
 80180a0:	9321      	str	r3, [sp, #132]	; 0x84
 80180a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80180a4:	3301      	adds	r3, #1
 80180a6:	2b07      	cmp	r3, #7
 80180a8:	9320      	str	r3, [sp, #128]	; 0x80
 80180aa:	dc01      	bgt.n	80180b0 <_svfprintf_r+0x860>
 80180ac:	3408      	adds	r4, #8
 80180ae:	e008      	b.n	80180c2 <_svfprintf_r+0x872>
 80180b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80180b2:	4659      	mov	r1, fp
 80180b4:	4650      	mov	r0, sl
 80180b6:	f002 f8b7 	bl	801a228 <__ssprint_r>
 80180ba:	2800      	cmp	r0, #0
 80180bc:	f040 824a 	bne.w	8018554 <_svfprintf_r+0xd04>
 80180c0:	ac2c      	add	r4, sp, #176	; 0xb0
 80180c2:	9b04      	ldr	r3, [sp, #16]
 80180c4:	1e5e      	subs	r6, r3, #1
 80180c6:	2e00      	cmp	r6, #0
 80180c8:	f340 81f4 	ble.w	80184b4 <_svfprintf_r+0xc64>
 80180cc:	4f0f      	ldr	r7, [pc, #60]	; (801810c <_svfprintf_r+0x8bc>)
 80180ce:	f04f 0810 	mov.w	r8, #16
 80180d2:	2e10      	cmp	r6, #16
 80180d4:	f340 8159 	ble.w	801838a <_svfprintf_r+0xb3a>
 80180d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80180da:	3310      	adds	r3, #16
 80180dc:	9321      	str	r3, [sp, #132]	; 0x84
 80180de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80180e0:	3301      	adds	r3, #1
 80180e2:	2b07      	cmp	r3, #7
 80180e4:	e884 0180 	stmia.w	r4, {r7, r8}
 80180e8:	9320      	str	r3, [sp, #128]	; 0x80
 80180ea:	dc01      	bgt.n	80180f0 <_svfprintf_r+0x8a0>
 80180ec:	3408      	adds	r4, #8
 80180ee:	e008      	b.n	8018102 <_svfprintf_r+0x8b2>
 80180f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80180f2:	4659      	mov	r1, fp
 80180f4:	4650      	mov	r0, sl
 80180f6:	f002 f897 	bl	801a228 <__ssprint_r>
 80180fa:	2800      	cmp	r0, #0
 80180fc:	f040 822a 	bne.w	8018554 <_svfprintf_r+0xd04>
 8018100:	ac2c      	add	r4, sp, #176	; 0xb0
 8018102:	3e10      	subs	r6, #16
 8018104:	e7e5      	b.n	80180d2 <_svfprintf_r+0x882>
 8018106:	bf00      	nop
 8018108:	0801cf56 	.word	0x0801cf56
 801810c:	0801cf12 	.word	0x0801cf12
 8018110:	0801cf54 	.word	0x0801cf54
 8018114:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018116:	2b00      	cmp	r3, #0
 8018118:	dc7c      	bgt.n	8018214 <_svfprintf_r+0x9c4>
 801811a:	4b9f      	ldr	r3, [pc, #636]	; (8018398 <_svfprintf_r+0xb48>)
 801811c:	6023      	str	r3, [r4, #0]
 801811e:	2301      	movs	r3, #1
 8018120:	6063      	str	r3, [r4, #4]
 8018122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018124:	3301      	adds	r3, #1
 8018126:	9321      	str	r3, [sp, #132]	; 0x84
 8018128:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801812a:	3301      	adds	r3, #1
 801812c:	2b07      	cmp	r3, #7
 801812e:	9320      	str	r3, [sp, #128]	; 0x80
 8018130:	dc01      	bgt.n	8018136 <_svfprintf_r+0x8e6>
 8018132:	3408      	adds	r4, #8
 8018134:	e008      	b.n	8018148 <_svfprintf_r+0x8f8>
 8018136:	aa1f      	add	r2, sp, #124	; 0x7c
 8018138:	4659      	mov	r1, fp
 801813a:	4650      	mov	r0, sl
 801813c:	f002 f874 	bl	801a228 <__ssprint_r>
 8018140:	2800      	cmp	r0, #0
 8018142:	f040 8207 	bne.w	8018554 <_svfprintf_r+0xd04>
 8018146:	ac2c      	add	r4, sp, #176	; 0xb0
 8018148:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801814a:	b923      	cbnz	r3, 8018156 <_svfprintf_r+0x906>
 801814c:	9b04      	ldr	r3, [sp, #16]
 801814e:	b913      	cbnz	r3, 8018156 <_svfprintf_r+0x906>
 8018150:	07e8      	lsls	r0, r5, #31
 8018152:	f140 81af 	bpl.w	80184b4 <_svfprintf_r+0xc64>
 8018156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018158:	6023      	str	r3, [r4, #0]
 801815a:	9b08      	ldr	r3, [sp, #32]
 801815c:	6063      	str	r3, [r4, #4]
 801815e:	9a08      	ldr	r2, [sp, #32]
 8018160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018162:	4413      	add	r3, r2
 8018164:	9321      	str	r3, [sp, #132]	; 0x84
 8018166:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018168:	3301      	adds	r3, #1
 801816a:	2b07      	cmp	r3, #7
 801816c:	9320      	str	r3, [sp, #128]	; 0x80
 801816e:	dc02      	bgt.n	8018176 <_svfprintf_r+0x926>
 8018170:	f104 0308 	add.w	r3, r4, #8
 8018174:	e008      	b.n	8018188 <_svfprintf_r+0x938>
 8018176:	aa1f      	add	r2, sp, #124	; 0x7c
 8018178:	4659      	mov	r1, fp
 801817a:	4650      	mov	r0, sl
 801817c:	f002 f854 	bl	801a228 <__ssprint_r>
 8018180:	2800      	cmp	r0, #0
 8018182:	f040 81e7 	bne.w	8018554 <_svfprintf_r+0xd04>
 8018186:	ab2c      	add	r3, sp, #176	; 0xb0
 8018188:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801818a:	4276      	negs	r6, r6
 801818c:	2e00      	cmp	r6, #0
 801818e:	dd30      	ble.n	80181f2 <_svfprintf_r+0x9a2>
 8018190:	4f82      	ldr	r7, [pc, #520]	; (801839c <_svfprintf_r+0xb4c>)
 8018192:	2410      	movs	r4, #16
 8018194:	2e10      	cmp	r6, #16
 8018196:	dd16      	ble.n	80181c6 <_svfprintf_r+0x976>
 8018198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801819a:	601f      	str	r7, [r3, #0]
 801819c:	3210      	adds	r2, #16
 801819e:	9221      	str	r2, [sp, #132]	; 0x84
 80181a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80181a2:	605c      	str	r4, [r3, #4]
 80181a4:	3201      	adds	r2, #1
 80181a6:	2a07      	cmp	r2, #7
 80181a8:	9220      	str	r2, [sp, #128]	; 0x80
 80181aa:	dc01      	bgt.n	80181b0 <_svfprintf_r+0x960>
 80181ac:	3308      	adds	r3, #8
 80181ae:	e008      	b.n	80181c2 <_svfprintf_r+0x972>
 80181b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80181b2:	4659      	mov	r1, fp
 80181b4:	4650      	mov	r0, sl
 80181b6:	f002 f837 	bl	801a228 <__ssprint_r>
 80181ba:	2800      	cmp	r0, #0
 80181bc:	f040 81ca 	bne.w	8018554 <_svfprintf_r+0xd04>
 80181c0:	ab2c      	add	r3, sp, #176	; 0xb0
 80181c2:	3e10      	subs	r6, #16
 80181c4:	e7e6      	b.n	8018194 <_svfprintf_r+0x944>
 80181c6:	4a75      	ldr	r2, [pc, #468]	; (801839c <_svfprintf_r+0xb4c>)
 80181c8:	e883 0044 	stmia.w	r3, {r2, r6}
 80181cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80181ce:	4416      	add	r6, r2
 80181d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80181d2:	9621      	str	r6, [sp, #132]	; 0x84
 80181d4:	3201      	adds	r2, #1
 80181d6:	2a07      	cmp	r2, #7
 80181d8:	9220      	str	r2, [sp, #128]	; 0x80
 80181da:	dc01      	bgt.n	80181e0 <_svfprintf_r+0x990>
 80181dc:	3308      	adds	r3, #8
 80181de:	e008      	b.n	80181f2 <_svfprintf_r+0x9a2>
 80181e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80181e2:	4659      	mov	r1, fp
 80181e4:	4650      	mov	r0, sl
 80181e6:	f002 f81f 	bl	801a228 <__ssprint_r>
 80181ea:	2800      	cmp	r0, #0
 80181ec:	f040 81b2 	bne.w	8018554 <_svfprintf_r+0xd04>
 80181f0:	ab2c      	add	r3, sp, #176	; 0xb0
 80181f2:	9a04      	ldr	r2, [sp, #16]
 80181f4:	605a      	str	r2, [r3, #4]
 80181f6:	9904      	ldr	r1, [sp, #16]
 80181f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80181fa:	f8c3 8000 	str.w	r8, [r3]
 80181fe:	440a      	add	r2, r1
 8018200:	9221      	str	r2, [sp, #132]	; 0x84
 8018202:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018204:	3201      	adds	r2, #1
 8018206:	2a07      	cmp	r2, #7
 8018208:	9220      	str	r2, [sp, #128]	; 0x80
 801820a:	f73f af0e 	bgt.w	801802a <_svfprintf_r+0x7da>
 801820e:	f103 0408 	add.w	r4, r3, #8
 8018212:	e14f      	b.n	80184b4 <_svfprintf_r+0xc64>
 8018214:	9b04      	ldr	r3, [sp, #16]
 8018216:	42bb      	cmp	r3, r7
 8018218:	bfa8      	it	ge
 801821a:	463b      	movge	r3, r7
 801821c:	2b00      	cmp	r3, #0
 801821e:	461e      	mov	r6, r3
 8018220:	dd15      	ble.n	801824e <_svfprintf_r+0x9fe>
 8018222:	6063      	str	r3, [r4, #4]
 8018224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018226:	f8c4 8000 	str.w	r8, [r4]
 801822a:	4433      	add	r3, r6
 801822c:	9321      	str	r3, [sp, #132]	; 0x84
 801822e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018230:	3301      	adds	r3, #1
 8018232:	2b07      	cmp	r3, #7
 8018234:	9320      	str	r3, [sp, #128]	; 0x80
 8018236:	dc01      	bgt.n	801823c <_svfprintf_r+0x9ec>
 8018238:	3408      	adds	r4, #8
 801823a:	e008      	b.n	801824e <_svfprintf_r+0x9fe>
 801823c:	aa1f      	add	r2, sp, #124	; 0x7c
 801823e:	4659      	mov	r1, fp
 8018240:	4650      	mov	r0, sl
 8018242:	f001 fff1 	bl	801a228 <__ssprint_r>
 8018246:	2800      	cmp	r0, #0
 8018248:	f040 8184 	bne.w	8018554 <_svfprintf_r+0xd04>
 801824c:	ac2c      	add	r4, sp, #176	; 0xb0
 801824e:	2e00      	cmp	r6, #0
 8018250:	bfac      	ite	ge
 8018252:	1bbe      	subge	r6, r7, r6
 8018254:	463e      	movlt	r6, r7
 8018256:	2e00      	cmp	r6, #0
 8018258:	dd30      	ble.n	80182bc <_svfprintf_r+0xa6c>
 801825a:	f04f 0910 	mov.w	r9, #16
 801825e:	4b4f      	ldr	r3, [pc, #316]	; (801839c <_svfprintf_r+0xb4c>)
 8018260:	6023      	str	r3, [r4, #0]
 8018262:	2e10      	cmp	r6, #16
 8018264:	dd16      	ble.n	8018294 <_svfprintf_r+0xa44>
 8018266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018268:	f8c4 9004 	str.w	r9, [r4, #4]
 801826c:	3310      	adds	r3, #16
 801826e:	9321      	str	r3, [sp, #132]	; 0x84
 8018270:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018272:	3301      	adds	r3, #1
 8018274:	2b07      	cmp	r3, #7
 8018276:	9320      	str	r3, [sp, #128]	; 0x80
 8018278:	dc01      	bgt.n	801827e <_svfprintf_r+0xa2e>
 801827a:	3408      	adds	r4, #8
 801827c:	e008      	b.n	8018290 <_svfprintf_r+0xa40>
 801827e:	aa1f      	add	r2, sp, #124	; 0x7c
 8018280:	4659      	mov	r1, fp
 8018282:	4650      	mov	r0, sl
 8018284:	f001 ffd0 	bl	801a228 <__ssprint_r>
 8018288:	2800      	cmp	r0, #0
 801828a:	f040 8163 	bne.w	8018554 <_svfprintf_r+0xd04>
 801828e:	ac2c      	add	r4, sp, #176	; 0xb0
 8018290:	3e10      	subs	r6, #16
 8018292:	e7e4      	b.n	801825e <_svfprintf_r+0xa0e>
 8018294:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018296:	6066      	str	r6, [r4, #4]
 8018298:	441e      	add	r6, r3
 801829a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801829c:	9621      	str	r6, [sp, #132]	; 0x84
 801829e:	3301      	adds	r3, #1
 80182a0:	2b07      	cmp	r3, #7
 80182a2:	9320      	str	r3, [sp, #128]	; 0x80
 80182a4:	dc01      	bgt.n	80182aa <_svfprintf_r+0xa5a>
 80182a6:	3408      	adds	r4, #8
 80182a8:	e008      	b.n	80182bc <_svfprintf_r+0xa6c>
 80182aa:	aa1f      	add	r2, sp, #124	; 0x7c
 80182ac:	4659      	mov	r1, fp
 80182ae:	4650      	mov	r0, sl
 80182b0:	f001 ffba 	bl	801a228 <__ssprint_r>
 80182b4:	2800      	cmp	r0, #0
 80182b6:	f040 814d 	bne.w	8018554 <_svfprintf_r+0xd04>
 80182ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80182bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80182be:	9a04      	ldr	r2, [sp, #16]
 80182c0:	4293      	cmp	r3, r2
 80182c2:	4447      	add	r7, r8
 80182c4:	db01      	blt.n	80182ca <_svfprintf_r+0xa7a>
 80182c6:	07e9      	lsls	r1, r5, #31
 80182c8:	d517      	bpl.n	80182fa <_svfprintf_r+0xaaa>
 80182ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182cc:	6023      	str	r3, [r4, #0]
 80182ce:	9b08      	ldr	r3, [sp, #32]
 80182d0:	6063      	str	r3, [r4, #4]
 80182d2:	9a08      	ldr	r2, [sp, #32]
 80182d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80182d6:	4413      	add	r3, r2
 80182d8:	9321      	str	r3, [sp, #132]	; 0x84
 80182da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80182dc:	3301      	adds	r3, #1
 80182de:	2b07      	cmp	r3, #7
 80182e0:	9320      	str	r3, [sp, #128]	; 0x80
 80182e2:	dc01      	bgt.n	80182e8 <_svfprintf_r+0xa98>
 80182e4:	3408      	adds	r4, #8
 80182e6:	e008      	b.n	80182fa <_svfprintf_r+0xaaa>
 80182e8:	aa1f      	add	r2, sp, #124	; 0x7c
 80182ea:	4659      	mov	r1, fp
 80182ec:	4650      	mov	r0, sl
 80182ee:	f001 ff9b 	bl	801a228 <__ssprint_r>
 80182f2:	2800      	cmp	r0, #0
 80182f4:	f040 812e 	bne.w	8018554 <_svfprintf_r+0xd04>
 80182f8:	ac2c      	add	r4, sp, #176	; 0xb0
 80182fa:	9b04      	ldr	r3, [sp, #16]
 80182fc:	9a04      	ldr	r2, [sp, #16]
 80182fe:	eb08 0603 	add.w	r6, r8, r3
 8018302:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018304:	1bf6      	subs	r6, r6, r7
 8018306:	1ad3      	subs	r3, r2, r3
 8018308:	429e      	cmp	r6, r3
 801830a:	bfa8      	it	ge
 801830c:	461e      	movge	r6, r3
 801830e:	2e00      	cmp	r6, #0
 8018310:	dd14      	ble.n	801833c <_svfprintf_r+0xaec>
 8018312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018314:	6027      	str	r7, [r4, #0]
 8018316:	4433      	add	r3, r6
 8018318:	9321      	str	r3, [sp, #132]	; 0x84
 801831a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801831c:	6066      	str	r6, [r4, #4]
 801831e:	3301      	adds	r3, #1
 8018320:	2b07      	cmp	r3, #7
 8018322:	9320      	str	r3, [sp, #128]	; 0x80
 8018324:	dc01      	bgt.n	801832a <_svfprintf_r+0xada>
 8018326:	3408      	adds	r4, #8
 8018328:	e008      	b.n	801833c <_svfprintf_r+0xaec>
 801832a:	aa1f      	add	r2, sp, #124	; 0x7c
 801832c:	4659      	mov	r1, fp
 801832e:	4650      	mov	r0, sl
 8018330:	f001 ff7a 	bl	801a228 <__ssprint_r>
 8018334:	2800      	cmp	r0, #0
 8018336:	f040 810d 	bne.w	8018554 <_svfprintf_r+0xd04>
 801833a:	ac2c      	add	r4, sp, #176	; 0xb0
 801833c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801833e:	9a04      	ldr	r2, [sp, #16]
 8018340:	2e00      	cmp	r6, #0
 8018342:	eba2 0303 	sub.w	r3, r2, r3
 8018346:	bfac      	ite	ge
 8018348:	1b9e      	subge	r6, r3, r6
 801834a:	461e      	movlt	r6, r3
 801834c:	2e00      	cmp	r6, #0
 801834e:	f340 80b1 	ble.w	80184b4 <_svfprintf_r+0xc64>
 8018352:	4f12      	ldr	r7, [pc, #72]	; (801839c <_svfprintf_r+0xb4c>)
 8018354:	f04f 0810 	mov.w	r8, #16
 8018358:	2e10      	cmp	r6, #16
 801835a:	dd16      	ble.n	801838a <_svfprintf_r+0xb3a>
 801835c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801835e:	3310      	adds	r3, #16
 8018360:	9321      	str	r3, [sp, #132]	; 0x84
 8018362:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018364:	3301      	adds	r3, #1
 8018366:	2b07      	cmp	r3, #7
 8018368:	e884 0180 	stmia.w	r4, {r7, r8}
 801836c:	9320      	str	r3, [sp, #128]	; 0x80
 801836e:	dc01      	bgt.n	8018374 <_svfprintf_r+0xb24>
 8018370:	3408      	adds	r4, #8
 8018372:	e008      	b.n	8018386 <_svfprintf_r+0xb36>
 8018374:	aa1f      	add	r2, sp, #124	; 0x7c
 8018376:	4659      	mov	r1, fp
 8018378:	4650      	mov	r0, sl
 801837a:	f001 ff55 	bl	801a228 <__ssprint_r>
 801837e:	2800      	cmp	r0, #0
 8018380:	f040 80e8 	bne.w	8018554 <_svfprintf_r+0xd04>
 8018384:	ac2c      	add	r4, sp, #176	; 0xb0
 8018386:	3e10      	subs	r6, #16
 8018388:	e7e6      	b.n	8018358 <_svfprintf_r+0xb08>
 801838a:	4b04      	ldr	r3, [pc, #16]	; (801839c <_svfprintf_r+0xb4c>)
 801838c:	e884 0048 	stmia.w	r4, {r3, r6}
 8018390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018392:	441e      	add	r6, r3
 8018394:	9621      	str	r6, [sp, #132]	; 0x84
 8018396:	e642      	b.n	801801e <_svfprintf_r+0x7ce>
 8018398:	0801cf54 	.word	0x0801cf54
 801839c:	0801cf12 	.word	0x0801cf12
 80183a0:	9b04      	ldr	r3, [sp, #16]
 80183a2:	2b01      	cmp	r3, #1
 80183a4:	dc01      	bgt.n	80183aa <_svfprintf_r+0xb5a>
 80183a6:	07ea      	lsls	r2, r5, #31
 80183a8:	d573      	bpl.n	8018492 <_svfprintf_r+0xc42>
 80183aa:	2301      	movs	r3, #1
 80183ac:	6063      	str	r3, [r4, #4]
 80183ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80183b0:	f8c4 8000 	str.w	r8, [r4]
 80183b4:	3301      	adds	r3, #1
 80183b6:	9321      	str	r3, [sp, #132]	; 0x84
 80183b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80183ba:	3301      	adds	r3, #1
 80183bc:	2b07      	cmp	r3, #7
 80183be:	9320      	str	r3, [sp, #128]	; 0x80
 80183c0:	dc01      	bgt.n	80183c6 <_svfprintf_r+0xb76>
 80183c2:	3408      	adds	r4, #8
 80183c4:	e008      	b.n	80183d8 <_svfprintf_r+0xb88>
 80183c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80183c8:	4659      	mov	r1, fp
 80183ca:	4650      	mov	r0, sl
 80183cc:	f001 ff2c 	bl	801a228 <__ssprint_r>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	f040 80bf 	bne.w	8018554 <_svfprintf_r+0xd04>
 80183d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80183d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80183da:	6023      	str	r3, [r4, #0]
 80183dc:	9b08      	ldr	r3, [sp, #32]
 80183de:	6063      	str	r3, [r4, #4]
 80183e0:	9a08      	ldr	r2, [sp, #32]
 80183e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80183e4:	4413      	add	r3, r2
 80183e6:	9321      	str	r3, [sp, #132]	; 0x84
 80183e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80183ea:	3301      	adds	r3, #1
 80183ec:	2b07      	cmp	r3, #7
 80183ee:	9320      	str	r3, [sp, #128]	; 0x80
 80183f0:	dc01      	bgt.n	80183f6 <_svfprintf_r+0xba6>
 80183f2:	3408      	adds	r4, #8
 80183f4:	e008      	b.n	8018408 <_svfprintf_r+0xbb8>
 80183f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80183f8:	4659      	mov	r1, fp
 80183fa:	4650      	mov	r0, sl
 80183fc:	f001 ff14 	bl	801a228 <__ssprint_r>
 8018400:	2800      	cmp	r0, #0
 8018402:	f040 80a7 	bne.w	8018554 <_svfprintf_r+0xd04>
 8018406:	ac2c      	add	r4, sp, #176	; 0xb0
 8018408:	2300      	movs	r3, #0
 801840a:	2200      	movs	r2, #0
 801840c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018410:	f7f0 fcb8 	bl	8008d84 <__aeabi_dcmpeq>
 8018414:	9b04      	ldr	r3, [sp, #16]
 8018416:	1e5e      	subs	r6, r3, #1
 8018418:	b9b8      	cbnz	r0, 801844a <_svfprintf_r+0xbfa>
 801841a:	f108 0301 	add.w	r3, r8, #1
 801841e:	e884 0048 	stmia.w	r4, {r3, r6}
 8018422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018424:	9a04      	ldr	r2, [sp, #16]
 8018426:	3b01      	subs	r3, #1
 8018428:	4413      	add	r3, r2
 801842a:	9321      	str	r3, [sp, #132]	; 0x84
 801842c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801842e:	3301      	adds	r3, #1
 8018430:	2b07      	cmp	r3, #7
 8018432:	9320      	str	r3, [sp, #128]	; 0x80
 8018434:	dd34      	ble.n	80184a0 <_svfprintf_r+0xc50>
 8018436:	aa1f      	add	r2, sp, #124	; 0x7c
 8018438:	4659      	mov	r1, fp
 801843a:	4650      	mov	r0, sl
 801843c:	f001 fef4 	bl	801a228 <__ssprint_r>
 8018440:	2800      	cmp	r0, #0
 8018442:	f040 8087 	bne.w	8018554 <_svfprintf_r+0xd04>
 8018446:	ac2c      	add	r4, sp, #176	; 0xb0
 8018448:	e02b      	b.n	80184a2 <_svfprintf_r+0xc52>
 801844a:	2e00      	cmp	r6, #0
 801844c:	dd29      	ble.n	80184a2 <_svfprintf_r+0xc52>
 801844e:	4fa7      	ldr	r7, [pc, #668]	; (80186ec <_svfprintf_r+0xe9c>)
 8018450:	f04f 0810 	mov.w	r8, #16
 8018454:	2e10      	cmp	r6, #16
 8018456:	dd15      	ble.n	8018484 <_svfprintf_r+0xc34>
 8018458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801845a:	3310      	adds	r3, #16
 801845c:	9321      	str	r3, [sp, #132]	; 0x84
 801845e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018460:	3301      	adds	r3, #1
 8018462:	2b07      	cmp	r3, #7
 8018464:	e884 0180 	stmia.w	r4, {r7, r8}
 8018468:	9320      	str	r3, [sp, #128]	; 0x80
 801846a:	dc01      	bgt.n	8018470 <_svfprintf_r+0xc20>
 801846c:	3408      	adds	r4, #8
 801846e:	e007      	b.n	8018480 <_svfprintf_r+0xc30>
 8018470:	aa1f      	add	r2, sp, #124	; 0x7c
 8018472:	4659      	mov	r1, fp
 8018474:	4650      	mov	r0, sl
 8018476:	f001 fed7 	bl	801a228 <__ssprint_r>
 801847a:	2800      	cmp	r0, #0
 801847c:	d16a      	bne.n	8018554 <_svfprintf_r+0xd04>
 801847e:	ac2c      	add	r4, sp, #176	; 0xb0
 8018480:	3e10      	subs	r6, #16
 8018482:	e7e7      	b.n	8018454 <_svfprintf_r+0xc04>
 8018484:	4b99      	ldr	r3, [pc, #612]	; (80186ec <_svfprintf_r+0xe9c>)
 8018486:	e884 0048 	stmia.w	r4, {r3, r6}
 801848a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801848c:	441e      	add	r6, r3
 801848e:	9621      	str	r6, [sp, #132]	; 0x84
 8018490:	e7cc      	b.n	801842c <_svfprintf_r+0xbdc>
 8018492:	2301      	movs	r3, #1
 8018494:	6063      	str	r3, [r4, #4]
 8018496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018498:	f8c4 8000 	str.w	r8, [r4]
 801849c:	3301      	adds	r3, #1
 801849e:	e7c4      	b.n	801842a <_svfprintf_r+0xbda>
 80184a0:	3408      	adds	r4, #8
 80184a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80184a4:	6023      	str	r3, [r4, #0]
 80184a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184a8:	6063      	str	r3, [r4, #4]
 80184aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80184ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184ae:	4413      	add	r3, r2
 80184b0:	e5b4      	b.n	801801c <_svfprintf_r+0x7cc>
 80184b2:	3408      	adds	r4, #8
 80184b4:	076b      	lsls	r3, r5, #29
 80184b6:	d40b      	bmi.n	80184d0 <_svfprintf_r+0xc80>
 80184b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80184be:	428a      	cmp	r2, r1
 80184c0:	bfac      	ite	ge
 80184c2:	189b      	addge	r3, r3, r2
 80184c4:	185b      	addlt	r3, r3, r1
 80184c6:	930a      	str	r3, [sp, #40]	; 0x28
 80184c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d035      	beq.n	801853a <_svfprintf_r+0xcea>
 80184ce:	e02e      	b.n	801852e <_svfprintf_r+0xcde>
 80184d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80184d4:	1a9d      	subs	r5, r3, r2
 80184d6:	2d00      	cmp	r5, #0
 80184d8:	ddee      	ble.n	80184b8 <_svfprintf_r+0xc68>
 80184da:	2610      	movs	r6, #16
 80184dc:	4b84      	ldr	r3, [pc, #528]	; (80186f0 <_svfprintf_r+0xea0>)
 80184de:	6023      	str	r3, [r4, #0]
 80184e0:	2d10      	cmp	r5, #16
 80184e2:	dd13      	ble.n	801850c <_svfprintf_r+0xcbc>
 80184e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80184e6:	6066      	str	r6, [r4, #4]
 80184e8:	3310      	adds	r3, #16
 80184ea:	9321      	str	r3, [sp, #132]	; 0x84
 80184ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80184ee:	3301      	adds	r3, #1
 80184f0:	2b07      	cmp	r3, #7
 80184f2:	9320      	str	r3, [sp, #128]	; 0x80
 80184f4:	dc01      	bgt.n	80184fa <_svfprintf_r+0xcaa>
 80184f6:	3408      	adds	r4, #8
 80184f8:	e006      	b.n	8018508 <_svfprintf_r+0xcb8>
 80184fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80184fc:	4659      	mov	r1, fp
 80184fe:	4650      	mov	r0, sl
 8018500:	f001 fe92 	bl	801a228 <__ssprint_r>
 8018504:	bb30      	cbnz	r0, 8018554 <_svfprintf_r+0xd04>
 8018506:	ac2c      	add	r4, sp, #176	; 0xb0
 8018508:	3d10      	subs	r5, #16
 801850a:	e7e7      	b.n	80184dc <_svfprintf_r+0xc8c>
 801850c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801850e:	6065      	str	r5, [r4, #4]
 8018510:	441d      	add	r5, r3
 8018512:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018514:	9521      	str	r5, [sp, #132]	; 0x84
 8018516:	3301      	adds	r3, #1
 8018518:	2b07      	cmp	r3, #7
 801851a:	9320      	str	r3, [sp, #128]	; 0x80
 801851c:	ddcc      	ble.n	80184b8 <_svfprintf_r+0xc68>
 801851e:	aa1f      	add	r2, sp, #124	; 0x7c
 8018520:	4659      	mov	r1, fp
 8018522:	4650      	mov	r0, sl
 8018524:	f001 fe80 	bl	801a228 <__ssprint_r>
 8018528:	2800      	cmp	r0, #0
 801852a:	d0c5      	beq.n	80184b8 <_svfprintf_r+0xc68>
 801852c:	e012      	b.n	8018554 <_svfprintf_r+0xd04>
 801852e:	aa1f      	add	r2, sp, #124	; 0x7c
 8018530:	4659      	mov	r1, fp
 8018532:	4650      	mov	r0, sl
 8018534:	f001 fe78 	bl	801a228 <__ssprint_r>
 8018538:	b960      	cbnz	r0, 8018554 <_svfprintf_r+0xd04>
 801853a:	2300      	movs	r3, #0
 801853c:	9320      	str	r3, [sp, #128]	; 0x80
 801853e:	9f03      	ldr	r7, [sp, #12]
 8018540:	ac2c      	add	r4, sp, #176	; 0xb0
 8018542:	f7ff b9bb 	b.w	80178bc <_svfprintf_r+0x6c>
 8018546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018548:	b123      	cbz	r3, 8018554 <_svfprintf_r+0xd04>
 801854a:	aa1f      	add	r2, sp, #124	; 0x7c
 801854c:	4659      	mov	r1, fp
 801854e:	4650      	mov	r0, sl
 8018550:	f001 fe6a 	bl	801a228 <__ssprint_r>
 8018554:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8018558:	f013 0f40 	tst.w	r3, #64	; 0x40
 801855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801855e:	bf18      	it	ne
 8018560:	f04f 33ff 	movne.w	r3, #4294967295
 8018564:	4618      	mov	r0, r3
 8018566:	e12e      	b.n	80187c6 <_svfprintf_r+0xf76>
 8018568:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801856c:	4610      	mov	r0, r2
 801856e:	4619      	mov	r1, r3
 8018570:	f7f0 fc3a 	bl	8008de8 <__aeabi_dcmpun>
 8018574:	b160      	cbz	r0, 8018590 <_svfprintf_r+0xd40>
 8018576:	4b5f      	ldr	r3, [pc, #380]	; (80186f4 <_svfprintf_r+0xea4>)
 8018578:	4a5f      	ldr	r2, [pc, #380]	; (80186f8 <_svfprintf_r+0xea8>)
 801857a:	9902      	ldr	r1, [sp, #8]
 801857c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8018580:	2947      	cmp	r1, #71	; 0x47
 8018582:	bfcc      	ite	gt
 8018584:	4690      	movgt	r8, r2
 8018586:	4698      	movle	r8, r3
 8018588:	f04f 0903 	mov.w	r9, #3
 801858c:	2600      	movs	r6, #0
 801858e:	e44e      	b.n	8017e2e <_svfprintf_r+0x5de>
 8018590:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018594:	d00a      	beq.n	80185ac <_svfprintf_r+0xd5c>
 8018596:	9b02      	ldr	r3, [sp, #8]
 8018598:	f023 0320 	bic.w	r3, r3, #32
 801859c:	2b47      	cmp	r3, #71	; 0x47
 801859e:	d107      	bne.n	80185b0 <_svfprintf_r+0xd60>
 80185a0:	f1b9 0f00 	cmp.w	r9, #0
 80185a4:	bf08      	it	eq
 80185a6:	f04f 0901 	moveq.w	r9, #1
 80185aa:	e001      	b.n	80185b0 <_svfprintf_r+0xd60>
 80185ac:	f04f 0906 	mov.w	r9, #6
 80185b0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80185b4:	930c      	str	r3, [sp, #48]	; 0x30
 80185b6:	9b07      	ldr	r3, [sp, #28]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	da07      	bge.n	80185cc <_svfprintf_r+0xd7c>
 80185bc:	9b06      	ldr	r3, [sp, #24]
 80185be:	930e      	str	r3, [sp, #56]	; 0x38
 80185c0:	9b07      	ldr	r3, [sp, #28]
 80185c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80185c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80185c8:	232d      	movs	r3, #45	; 0x2d
 80185ca:	e004      	b.n	80185d6 <_svfprintf_r+0xd86>
 80185cc:	ed9d 7b06 	vldr	d7, [sp, #24]
 80185d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80185d4:	2300      	movs	r3, #0
 80185d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80185d8:	9b02      	ldr	r3, [sp, #8]
 80185da:	f023 0720 	bic.w	r7, r3, #32
 80185de:	2f46      	cmp	r7, #70	; 0x46
 80185e0:	d004      	beq.n	80185ec <_svfprintf_r+0xd9c>
 80185e2:	2f45      	cmp	r7, #69	; 0x45
 80185e4:	d105      	bne.n	80185f2 <_svfprintf_r+0xda2>
 80185e6:	f109 0601 	add.w	r6, r9, #1
 80185ea:	e003      	b.n	80185f4 <_svfprintf_r+0xda4>
 80185ec:	464e      	mov	r6, r9
 80185ee:	2103      	movs	r1, #3
 80185f0:	e001      	b.n	80185f6 <_svfprintf_r+0xda6>
 80185f2:	464e      	mov	r6, r9
 80185f4:	2102      	movs	r1, #2
 80185f6:	ab1d      	add	r3, sp, #116	; 0x74
 80185f8:	9301      	str	r3, [sp, #4]
 80185fa:	ab1a      	add	r3, sp, #104	; 0x68
 80185fc:	9300      	str	r3, [sp, #0]
 80185fe:	4632      	mov	r2, r6
 8018600:	ab19      	add	r3, sp, #100	; 0x64
 8018602:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8018606:	4650      	mov	r0, sl
 8018608:	f000 fac6 	bl	8018b98 <_dtoa_r>
 801860c:	2f47      	cmp	r7, #71	; 0x47
 801860e:	4680      	mov	r8, r0
 8018610:	d102      	bne.n	8018618 <_svfprintf_r+0xdc8>
 8018612:	07eb      	lsls	r3, r5, #31
 8018614:	f140 80cd 	bpl.w	80187b2 <_svfprintf_r+0xf62>
 8018618:	eb08 0306 	add.w	r3, r8, r6
 801861c:	2f46      	cmp	r7, #70	; 0x46
 801861e:	9304      	str	r3, [sp, #16]
 8018620:	d111      	bne.n	8018646 <_svfprintf_r+0xdf6>
 8018622:	f898 3000 	ldrb.w	r3, [r8]
 8018626:	2b30      	cmp	r3, #48	; 0x30
 8018628:	d109      	bne.n	801863e <_svfprintf_r+0xdee>
 801862a:	2200      	movs	r2, #0
 801862c:	2300      	movs	r3, #0
 801862e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018632:	f7f0 fba7 	bl	8008d84 <__aeabi_dcmpeq>
 8018636:	b910      	cbnz	r0, 801863e <_svfprintf_r+0xdee>
 8018638:	f1c6 0601 	rsb	r6, r6, #1
 801863c:	9619      	str	r6, [sp, #100]	; 0x64
 801863e:	9a04      	ldr	r2, [sp, #16]
 8018640:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018642:	441a      	add	r2, r3
 8018644:	9204      	str	r2, [sp, #16]
 8018646:	2200      	movs	r2, #0
 8018648:	2300      	movs	r3, #0
 801864a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801864e:	f7f0 fb99 	bl	8008d84 <__aeabi_dcmpeq>
 8018652:	b908      	cbnz	r0, 8018658 <_svfprintf_r+0xe08>
 8018654:	2230      	movs	r2, #48	; 0x30
 8018656:	e002      	b.n	801865e <_svfprintf_r+0xe0e>
 8018658:	9b04      	ldr	r3, [sp, #16]
 801865a:	931d      	str	r3, [sp, #116]	; 0x74
 801865c:	e007      	b.n	801866e <_svfprintf_r+0xe1e>
 801865e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018660:	9904      	ldr	r1, [sp, #16]
 8018662:	4299      	cmp	r1, r3
 8018664:	d903      	bls.n	801866e <_svfprintf_r+0xe1e>
 8018666:	1c59      	adds	r1, r3, #1
 8018668:	911d      	str	r1, [sp, #116]	; 0x74
 801866a:	701a      	strb	r2, [r3, #0]
 801866c:	e7f7      	b.n	801865e <_svfprintf_r+0xe0e>
 801866e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018670:	2f47      	cmp	r7, #71	; 0x47
 8018672:	ebc8 0303 	rsb	r3, r8, r3
 8018676:	9304      	str	r3, [sp, #16]
 8018678:	d108      	bne.n	801868c <_svfprintf_r+0xe3c>
 801867a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801867c:	1cdf      	adds	r7, r3, #3
 801867e:	db01      	blt.n	8018684 <_svfprintf_r+0xe34>
 8018680:	4599      	cmp	r9, r3
 8018682:	da68      	bge.n	8018756 <_svfprintf_r+0xf06>
 8018684:	9b02      	ldr	r3, [sp, #8]
 8018686:	3b02      	subs	r3, #2
 8018688:	9302      	str	r3, [sp, #8]
 801868a:	e002      	b.n	8018692 <_svfprintf_r+0xe42>
 801868c:	9b02      	ldr	r3, [sp, #8]
 801868e:	2b65      	cmp	r3, #101	; 0x65
 8018690:	dc4a      	bgt.n	8018728 <_svfprintf_r+0xed8>
 8018692:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018694:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018698:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 801869c:	3b01      	subs	r3, #1
 801869e:	2b00      	cmp	r3, #0
 80186a0:	9319      	str	r3, [sp, #100]	; 0x64
 80186a2:	bfba      	itte	lt
 80186a4:	425b      	neglt	r3, r3
 80186a6:	222d      	movlt	r2, #45	; 0x2d
 80186a8:	222b      	movge	r2, #43	; 0x2b
 80186aa:	2b09      	cmp	r3, #9
 80186ac:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80186b0:	dd24      	ble.n	80186fc <_svfprintf_r+0xeac>
 80186b2:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80186b6:	200a      	movs	r0, #10
 80186b8:	fb93 f1f0 	sdiv	r1, r3, r0
 80186bc:	fb00 3311 	mls	r3, r0, r1, r3
 80186c0:	3330      	adds	r3, #48	; 0x30
 80186c2:	2909      	cmp	r1, #9
 80186c4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80186c8:	460b      	mov	r3, r1
 80186ca:	dcf5      	bgt.n	80186b8 <_svfprintf_r+0xe68>
 80186cc:	3330      	adds	r3, #48	; 0x30
 80186ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80186d2:	1e51      	subs	r1, r2, #1
 80186d4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80186d8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80186dc:	4281      	cmp	r1, r0
 80186de:	461a      	mov	r2, r3
 80186e0:	d213      	bcs.n	801870a <_svfprintf_r+0xeba>
 80186e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186e6:	f803 2b01 	strb.w	r2, [r3], #1
 80186ea:	e7f7      	b.n	80186dc <_svfprintf_r+0xe8c>
 80186ec:	0801cf12 	.word	0x0801cf12
 80186f0:	0801cf56 	.word	0x0801cf56
 80186f4:	0801cf2a 	.word	0x0801cf2a
 80186f8:	0801cf2e 	.word	0x0801cf2e
 80186fc:	2230      	movs	r2, #48	; 0x30
 80186fe:	4413      	add	r3, r2
 8018700:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8018704:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8018708:	aa1c      	add	r2, sp, #112	; 0x70
 801870a:	ab1b      	add	r3, sp, #108	; 0x6c
 801870c:	1ad3      	subs	r3, r2, r3
 801870e:	9a04      	ldr	r2, [sp, #16]
 8018710:	9310      	str	r3, [sp, #64]	; 0x40
 8018712:	2a01      	cmp	r2, #1
 8018714:	eb03 0902 	add.w	r9, r3, r2
 8018718:	dc02      	bgt.n	8018720 <_svfprintf_r+0xed0>
 801871a:	f015 0701 	ands.w	r7, r5, #1
 801871e:	d032      	beq.n	8018786 <_svfprintf_r+0xf36>
 8018720:	9b08      	ldr	r3, [sp, #32]
 8018722:	2700      	movs	r7, #0
 8018724:	4499      	add	r9, r3
 8018726:	e02e      	b.n	8018786 <_svfprintf_r+0xf36>
 8018728:	9b02      	ldr	r3, [sp, #8]
 801872a:	2b66      	cmp	r3, #102	; 0x66
 801872c:	d113      	bne.n	8018756 <_svfprintf_r+0xf06>
 801872e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018730:	2b00      	cmp	r3, #0
 8018732:	dd07      	ble.n	8018744 <_svfprintf_r+0xef4>
 8018734:	f1b9 0f00 	cmp.w	r9, #0
 8018738:	d101      	bne.n	801873e <_svfprintf_r+0xeee>
 801873a:	07ee      	lsls	r6, r5, #31
 801873c:	d521      	bpl.n	8018782 <_svfprintf_r+0xf32>
 801873e:	9a08      	ldr	r2, [sp, #32]
 8018740:	4413      	add	r3, r2
 8018742:	e006      	b.n	8018752 <_svfprintf_r+0xf02>
 8018744:	f1b9 0f00 	cmp.w	r9, #0
 8018748:	d101      	bne.n	801874e <_svfprintf_r+0xefe>
 801874a:	07ed      	lsls	r5, r5, #31
 801874c:	d514      	bpl.n	8018778 <_svfprintf_r+0xf28>
 801874e:	9b08      	ldr	r3, [sp, #32]
 8018750:	3301      	adds	r3, #1
 8018752:	444b      	add	r3, r9
 8018754:	e015      	b.n	8018782 <_svfprintf_r+0xf32>
 8018756:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018758:	9a04      	ldr	r2, [sp, #16]
 801875a:	4293      	cmp	r3, r2
 801875c:	db03      	blt.n	8018766 <_svfprintf_r+0xf16>
 801875e:	07e8      	lsls	r0, r5, #31
 8018760:	d50d      	bpl.n	801877e <_svfprintf_r+0xf2e>
 8018762:	9a08      	ldr	r2, [sp, #32]
 8018764:	e006      	b.n	8018774 <_svfprintf_r+0xf24>
 8018766:	9a04      	ldr	r2, [sp, #16]
 8018768:	9908      	ldr	r1, [sp, #32]
 801876a:	2b00      	cmp	r3, #0
 801876c:	440a      	add	r2, r1
 801876e:	dc05      	bgt.n	801877c <_svfprintf_r+0xf2c>
 8018770:	f1c3 0301 	rsb	r3, r3, #1
 8018774:	4413      	add	r3, r2
 8018776:	e002      	b.n	801877e <_svfprintf_r+0xf2e>
 8018778:	2301      	movs	r3, #1
 801877a:	e002      	b.n	8018782 <_svfprintf_r+0xf32>
 801877c:	4613      	mov	r3, r2
 801877e:	2267      	movs	r2, #103	; 0x67
 8018780:	9202      	str	r2, [sp, #8]
 8018782:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8018784:	4699      	mov	r9, r3
 8018786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018788:	b113      	cbz	r3, 8018790 <_svfprintf_r+0xf40>
 801878a:	232d      	movs	r3, #45	; 0x2d
 801878c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8018790:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018792:	2600      	movs	r6, #0
 8018794:	f7ff bb4c 	b.w	8017e30 <_svfprintf_r+0x5e0>
 8018798:	2200      	movs	r2, #0
 801879a:	2300      	movs	r3, #0
 801879c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80187a0:	f7f0 fafa 	bl	8008d98 <__aeabi_dcmplt>
 80187a4:	b110      	cbz	r0, 80187ac <_svfprintf_r+0xf5c>
 80187a6:	232d      	movs	r3, #45	; 0x2d
 80187a8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80187ac:	4b07      	ldr	r3, [pc, #28]	; (80187cc <_svfprintf_r+0xf7c>)
 80187ae:	4a08      	ldr	r2, [pc, #32]	; (80187d0 <_svfprintf_r+0xf80>)
 80187b0:	e6e3      	b.n	801857a <_svfprintf_r+0xd2a>
 80187b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80187b4:	1a1b      	subs	r3, r3, r0
 80187b6:	9304      	str	r3, [sp, #16]
 80187b8:	e75f      	b.n	801867a <_svfprintf_r+0xe2a>
 80187ba:	ea56 0207 	orrs.w	r2, r6, r7
 80187be:	f47f aaaa 	bne.w	8017d16 <_svfprintf_r+0x4c6>
 80187c2:	f7ff baaf 	b.w	8017d24 <_svfprintf_r+0x4d4>
 80187c6:	b03d      	add	sp, #244	; 0xf4
 80187c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187cc:	0801cf22 	.word	0x0801cf22
 80187d0:	0801cf26 	.word	0x0801cf26

080187d4 <_user_strerror>:
 80187d4:	2000      	movs	r0, #0
 80187d6:	4770      	bx	lr

080187d8 <__swbuf_r>:
 80187d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187da:	460f      	mov	r7, r1
 80187dc:	4614      	mov	r4, r2
 80187de:	4606      	mov	r6, r0
 80187e0:	b118      	cbz	r0, 80187ea <__swbuf_r+0x12>
 80187e2:	6983      	ldr	r3, [r0, #24]
 80187e4:	b90b      	cbnz	r3, 80187ea <__swbuf_r+0x12>
 80187e6:	f001 f871 	bl	80198cc <__sinit>
 80187ea:	4b27      	ldr	r3, [pc, #156]	; (8018888 <__swbuf_r+0xb0>)
 80187ec:	429c      	cmp	r4, r3
 80187ee:	d101      	bne.n	80187f4 <__swbuf_r+0x1c>
 80187f0:	6874      	ldr	r4, [r6, #4]
 80187f2:	e008      	b.n	8018806 <__swbuf_r+0x2e>
 80187f4:	4b25      	ldr	r3, [pc, #148]	; (801888c <__swbuf_r+0xb4>)
 80187f6:	429c      	cmp	r4, r3
 80187f8:	d101      	bne.n	80187fe <__swbuf_r+0x26>
 80187fa:	68b4      	ldr	r4, [r6, #8]
 80187fc:	e003      	b.n	8018806 <__swbuf_r+0x2e>
 80187fe:	4b24      	ldr	r3, [pc, #144]	; (8018890 <__swbuf_r+0xb8>)
 8018800:	429c      	cmp	r4, r3
 8018802:	bf08      	it	eq
 8018804:	68f4      	ldreq	r4, [r6, #12]
 8018806:	69a3      	ldr	r3, [r4, #24]
 8018808:	60a3      	str	r3, [r4, #8]
 801880a:	89a3      	ldrh	r3, [r4, #12]
 801880c:	0719      	lsls	r1, r3, #28
 801880e:	d50e      	bpl.n	801882e <__swbuf_r+0x56>
 8018810:	6923      	ldr	r3, [r4, #16]
 8018812:	b163      	cbz	r3, 801882e <__swbuf_r+0x56>
 8018814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018818:	049a      	lsls	r2, r3, #18
 801881a:	b2fd      	uxtb	r5, r7
 801881c:	d410      	bmi.n	8018840 <__swbuf_r+0x68>
 801881e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018822:	81a3      	strh	r3, [r4, #12]
 8018824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801882a:	6663      	str	r3, [r4, #100]	; 0x64
 801882c:	e008      	b.n	8018840 <__swbuf_r+0x68>
 801882e:	4621      	mov	r1, r4
 8018830:	4630      	mov	r0, r6
 8018832:	f000 f841 	bl	80188b8 <__swsetup_r>
 8018836:	2800      	cmp	r0, #0
 8018838:	d0ec      	beq.n	8018814 <__swbuf_r+0x3c>
 801883a:	f04f 30ff 	mov.w	r0, #4294967295
 801883e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018840:	6823      	ldr	r3, [r4, #0]
 8018842:	6920      	ldr	r0, [r4, #16]
 8018844:	1a18      	subs	r0, r3, r0
 8018846:	6963      	ldr	r3, [r4, #20]
 8018848:	4298      	cmp	r0, r3
 801884a:	db05      	blt.n	8018858 <__swbuf_r+0x80>
 801884c:	4621      	mov	r1, r4
 801884e:	4630      	mov	r0, r6
 8018850:	f000 ffd2 	bl	80197f8 <_fflush_r>
 8018854:	2800      	cmp	r0, #0
 8018856:	d1f0      	bne.n	801883a <__swbuf_r+0x62>
 8018858:	68a3      	ldr	r3, [r4, #8]
 801885a:	3b01      	subs	r3, #1
 801885c:	60a3      	str	r3, [r4, #8]
 801885e:	6823      	ldr	r3, [r4, #0]
 8018860:	1c5a      	adds	r2, r3, #1
 8018862:	6022      	str	r2, [r4, #0]
 8018864:	701f      	strb	r7, [r3, #0]
 8018866:	6962      	ldr	r2, [r4, #20]
 8018868:	1c43      	adds	r3, r0, #1
 801886a:	4293      	cmp	r3, r2
 801886c:	d004      	beq.n	8018878 <__swbuf_r+0xa0>
 801886e:	89a3      	ldrh	r3, [r4, #12]
 8018870:	07db      	lsls	r3, r3, #31
 8018872:	d507      	bpl.n	8018884 <__swbuf_r+0xac>
 8018874:	2d0a      	cmp	r5, #10
 8018876:	d105      	bne.n	8018884 <__swbuf_r+0xac>
 8018878:	4621      	mov	r1, r4
 801887a:	4630      	mov	r0, r6
 801887c:	f000 ffbc 	bl	80197f8 <_fflush_r>
 8018880:	2800      	cmp	r0, #0
 8018882:	d1da      	bne.n	801883a <__swbuf_r+0x62>
 8018884:	4628      	mov	r0, r5
 8018886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018888:	0801cf74 	.word	0x0801cf74
 801888c:	0801cf94 	.word	0x0801cf94
 8018890:	0801cfb4 	.word	0x0801cfb4

08018894 <_write_r>:
 8018894:	b538      	push	{r3, r4, r5, lr}
 8018896:	4c07      	ldr	r4, [pc, #28]	; (80188b4 <_write_r+0x20>)
 8018898:	4605      	mov	r5, r0
 801889a:	4608      	mov	r0, r1
 801889c:	4611      	mov	r1, r2
 801889e:	2200      	movs	r2, #0
 80188a0:	6022      	str	r2, [r4, #0]
 80188a2:	461a      	mov	r2, r3
 80188a4:	f001 fe04 	bl	801a4b0 <_write>
 80188a8:	1c43      	adds	r3, r0, #1
 80188aa:	d102      	bne.n	80188b2 <_write_r+0x1e>
 80188ac:	6823      	ldr	r3, [r4, #0]
 80188ae:	b103      	cbz	r3, 80188b2 <_write_r+0x1e>
 80188b0:	602b      	str	r3, [r5, #0]
 80188b2:	bd38      	pop	{r3, r4, r5, pc}
 80188b4:	20004264 	.word	0x20004264

080188b8 <__swsetup_r>:
 80188b8:	4b32      	ldr	r3, [pc, #200]	; (8018984 <__swsetup_r+0xcc>)
 80188ba:	b570      	push	{r4, r5, r6, lr}
 80188bc:	681d      	ldr	r5, [r3, #0]
 80188be:	4606      	mov	r6, r0
 80188c0:	460c      	mov	r4, r1
 80188c2:	b125      	cbz	r5, 80188ce <__swsetup_r+0x16>
 80188c4:	69ab      	ldr	r3, [r5, #24]
 80188c6:	b913      	cbnz	r3, 80188ce <__swsetup_r+0x16>
 80188c8:	4628      	mov	r0, r5
 80188ca:	f000 ffff 	bl	80198cc <__sinit>
 80188ce:	4b2e      	ldr	r3, [pc, #184]	; (8018988 <__swsetup_r+0xd0>)
 80188d0:	429c      	cmp	r4, r3
 80188d2:	d101      	bne.n	80188d8 <__swsetup_r+0x20>
 80188d4:	686c      	ldr	r4, [r5, #4]
 80188d6:	e008      	b.n	80188ea <__swsetup_r+0x32>
 80188d8:	4b2c      	ldr	r3, [pc, #176]	; (801898c <__swsetup_r+0xd4>)
 80188da:	429c      	cmp	r4, r3
 80188dc:	d101      	bne.n	80188e2 <__swsetup_r+0x2a>
 80188de:	68ac      	ldr	r4, [r5, #8]
 80188e0:	e003      	b.n	80188ea <__swsetup_r+0x32>
 80188e2:	4b2b      	ldr	r3, [pc, #172]	; (8018990 <__swsetup_r+0xd8>)
 80188e4:	429c      	cmp	r4, r3
 80188e6:	bf08      	it	eq
 80188e8:	68ec      	ldreq	r4, [r5, #12]
 80188ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188ee:	b29a      	uxth	r2, r3
 80188f0:	0715      	lsls	r5, r2, #28
 80188f2:	d41d      	bmi.n	8018930 <__swsetup_r+0x78>
 80188f4:	06d0      	lsls	r0, r2, #27
 80188f6:	d402      	bmi.n	80188fe <__swsetup_r+0x46>
 80188f8:	2209      	movs	r2, #9
 80188fa:	6032      	str	r2, [r6, #0]
 80188fc:	e03a      	b.n	8018974 <__swsetup_r+0xbc>
 80188fe:	0751      	lsls	r1, r2, #29
 8018900:	d512      	bpl.n	8018928 <__swsetup_r+0x70>
 8018902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018904:	b141      	cbz	r1, 8018918 <__swsetup_r+0x60>
 8018906:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801890a:	4299      	cmp	r1, r3
 801890c:	d002      	beq.n	8018914 <__swsetup_r+0x5c>
 801890e:	4630      	mov	r0, r6
 8018910:	f001 f8a4 	bl	8019a5c <_free_r>
 8018914:	2300      	movs	r3, #0
 8018916:	6363      	str	r3, [r4, #52]	; 0x34
 8018918:	89a3      	ldrh	r3, [r4, #12]
 801891a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801891e:	81a3      	strh	r3, [r4, #12]
 8018920:	2300      	movs	r3, #0
 8018922:	6063      	str	r3, [r4, #4]
 8018924:	6923      	ldr	r3, [r4, #16]
 8018926:	6023      	str	r3, [r4, #0]
 8018928:	89a3      	ldrh	r3, [r4, #12]
 801892a:	f043 0308 	orr.w	r3, r3, #8
 801892e:	81a3      	strh	r3, [r4, #12]
 8018930:	6923      	ldr	r3, [r4, #16]
 8018932:	b94b      	cbnz	r3, 8018948 <__swsetup_r+0x90>
 8018934:	89a3      	ldrh	r3, [r4, #12]
 8018936:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801893a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801893e:	d003      	beq.n	8018948 <__swsetup_r+0x90>
 8018940:	4621      	mov	r1, r4
 8018942:	4630      	mov	r0, r6
 8018944:	f7fe f82e 	bl	80169a4 <__smakebuf_r>
 8018948:	89a2      	ldrh	r2, [r4, #12]
 801894a:	f012 0301 	ands.w	r3, r2, #1
 801894e:	d005      	beq.n	801895c <__swsetup_r+0xa4>
 8018950:	2300      	movs	r3, #0
 8018952:	60a3      	str	r3, [r4, #8]
 8018954:	6963      	ldr	r3, [r4, #20]
 8018956:	425b      	negs	r3, r3
 8018958:	61a3      	str	r3, [r4, #24]
 801895a:	e003      	b.n	8018964 <__swsetup_r+0xac>
 801895c:	0792      	lsls	r2, r2, #30
 801895e:	bf58      	it	pl
 8018960:	6963      	ldrpl	r3, [r4, #20]
 8018962:	60a3      	str	r3, [r4, #8]
 8018964:	6923      	ldr	r3, [r4, #16]
 8018966:	b95b      	cbnz	r3, 8018980 <__swsetup_r+0xc8>
 8018968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801896c:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8018970:	b280      	uxth	r0, r0
 8018972:	b130      	cbz	r0, 8018982 <__swsetup_r+0xca>
 8018974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018978:	81a3      	strh	r3, [r4, #12]
 801897a:	f04f 30ff 	mov.w	r0, #4294967295
 801897e:	bd70      	pop	{r4, r5, r6, pc}
 8018980:	2000      	movs	r0, #0
 8018982:	bd70      	pop	{r4, r5, r6, pc}
 8018984:	2000010c 	.word	0x2000010c
 8018988:	0801cf74 	.word	0x0801cf74
 801898c:	0801cf94 	.word	0x0801cf94
 8018990:	0801cfb4 	.word	0x0801cfb4

08018994 <__register_exitproc>:
 8018994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018998:	4698      	mov	r8, r3
 801899a:	4b2c      	ldr	r3, [pc, #176]	; (8018a4c <__register_exitproc+0xb8>)
 801899c:	681d      	ldr	r5, [r3, #0]
 801899e:	6cac      	ldr	r4, [r5, #72]	; 0x48
 80189a0:	4607      	mov	r7, r0
 80189a2:	460e      	mov	r6, r1
 80189a4:	4691      	mov	r9, r2
 80189a6:	b93c      	cbnz	r4, 80189b8 <__register_exitproc+0x24>
 80189a8:	4b29      	ldr	r3, [pc, #164]	; (8018a50 <__register_exitproc+0xbc>)
 80189aa:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80189ae:	64ac      	str	r4, [r5, #72]	; 0x48
 80189b0:	b113      	cbz	r3, 80189b8 <__register_exitproc+0x24>
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
 80189b8:	6863      	ldr	r3, [r4, #4]
 80189ba:	2b1f      	cmp	r3, #31
 80189bc:	dd14      	ble.n	80189e8 <__register_exitproc+0x54>
 80189be:	4b25      	ldr	r3, [pc, #148]	; (8018a54 <__register_exitproc+0xc0>)
 80189c0:	b91b      	cbnz	r3, 80189ca <__register_exitproc+0x36>
 80189c2:	f04f 30ff 	mov.w	r0, #4294967295
 80189c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189ca:	208c      	movs	r0, #140	; 0x8c
 80189cc:	f7fe f826 	bl	8016a1c <malloc>
 80189d0:	4604      	mov	r4, r0
 80189d2:	2800      	cmp	r0, #0
 80189d4:	d0f5      	beq.n	80189c2 <__register_exitproc+0x2e>
 80189d6:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80189d8:	6002      	str	r2, [r0, #0]
 80189da:	2300      	movs	r3, #0
 80189dc:	6043      	str	r3, [r0, #4]
 80189de:	64a8      	str	r0, [r5, #72]	; 0x48
 80189e0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80189e4:	b34f      	cbz	r7, 8018a3a <__register_exitproc+0xa6>
 80189e6:	e006      	b.n	80189f6 <__register_exitproc+0x62>
 80189e8:	b33f      	cbz	r7, 8018a3a <__register_exitproc+0xa6>
 80189ea:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80189ee:	b978      	cbnz	r0, 8018a10 <__register_exitproc+0x7c>
 80189f0:	4b18      	ldr	r3, [pc, #96]	; (8018a54 <__register_exitproc+0xc0>)
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d0e5      	beq.n	80189c2 <__register_exitproc+0x2e>
 80189f6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80189fa:	f7fe f80f 	bl	8016a1c <malloc>
 80189fe:	2800      	cmp	r0, #0
 8018a00:	d0df      	beq.n	80189c2 <__register_exitproc+0x2e>
 8018a02:	2300      	movs	r3, #0
 8018a04:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8018a08:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8018a0c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8018a10:	6862      	ldr	r2, [r4, #4]
 8018a12:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8018a16:	2301      	movs	r3, #1
 8018a18:	4093      	lsls	r3, r2
 8018a1a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8018a1e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8018a22:	431a      	orrs	r2, r3
 8018a24:	2f02      	cmp	r7, #2
 8018a26:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8018a2a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8018a2e:	bf02      	ittt	eq
 8018a30:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8018a34:	4313      	orreq	r3, r2
 8018a36:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8018a3a:	6863      	ldr	r3, [r4, #4]
 8018a3c:	1c5a      	adds	r2, r3, #1
 8018a3e:	3302      	adds	r3, #2
 8018a40:	6062      	str	r2, [r4, #4]
 8018a42:	2000      	movs	r0, #0
 8018a44:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8018a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a4c:	0801c86c 	.word	0x0801c86c
 8018a50:	0801c878 	.word	0x0801c878
 8018a54:	08016a1d 	.word	0x08016a1d

08018a58 <_close_r>:
 8018a58:	b538      	push	{r3, r4, r5, lr}
 8018a5a:	4c06      	ldr	r4, [pc, #24]	; (8018a74 <_close_r+0x1c>)
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	4605      	mov	r5, r0
 8018a60:	4608      	mov	r0, r1
 8018a62:	6023      	str	r3, [r4, #0]
 8018a64:	f001 fcde 	bl	801a424 <_close>
 8018a68:	1c43      	adds	r3, r0, #1
 8018a6a:	d102      	bne.n	8018a72 <_close_r+0x1a>
 8018a6c:	6823      	ldr	r3, [r4, #0]
 8018a6e:	b103      	cbz	r3, 8018a72 <_close_r+0x1a>
 8018a70:	602b      	str	r3, [r5, #0]
 8018a72:	bd38      	pop	{r3, r4, r5, pc}
 8018a74:	20004264 	.word	0x20004264

08018a78 <quorem>:
 8018a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7c:	6903      	ldr	r3, [r0, #16]
 8018a7e:	690c      	ldr	r4, [r1, #16]
 8018a80:	429c      	cmp	r4, r3
 8018a82:	4680      	mov	r8, r0
 8018a84:	f300 8083 	bgt.w	8018b8e <quorem+0x116>
 8018a88:	3c01      	subs	r4, #1
 8018a8a:	f101 0714 	add.w	r7, r1, #20
 8018a8e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8018a92:	f100 0614 	add.w	r6, r0, #20
 8018a96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8018a9a:	eb06 030e 	add.w	r3, r6, lr
 8018a9e:	9301      	str	r3, [sp, #4]
 8018aa0:	3501      	adds	r5, #1
 8018aa2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8018aa6:	fbb3 f5f5 	udiv	r5, r3, r5
 8018aaa:	eb07 090e 	add.w	r9, r7, lr
 8018aae:	2d00      	cmp	r5, #0
 8018ab0:	d039      	beq.n	8018b26 <quorem+0xae>
 8018ab2:	f04f 0a00 	mov.w	sl, #0
 8018ab6:	4638      	mov	r0, r7
 8018ab8:	46b4      	mov	ip, r6
 8018aba:	46d3      	mov	fp, sl
 8018abc:	f850 2b04 	ldr.w	r2, [r0], #4
 8018ac0:	b293      	uxth	r3, r2
 8018ac2:	fb05 a303 	mla	r3, r5, r3, sl
 8018ac6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018aca:	b29b      	uxth	r3, r3
 8018acc:	ebc3 030b 	rsb	r3, r3, fp
 8018ad0:	0c12      	lsrs	r2, r2, #16
 8018ad2:	f8bc b000 	ldrh.w	fp, [ip]
 8018ad6:	fb05 a202 	mla	r2, r5, r2, sl
 8018ada:	fa13 f38b 	uxtah	r3, r3, fp
 8018ade:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8018ae2:	fa1f fb82 	uxth.w	fp, r2
 8018ae6:	f8dc 2000 	ldr.w	r2, [ip]
 8018aea:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8018aee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018af8:	4581      	cmp	r9, r0
 8018afa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8018afe:	f84c 3b04 	str.w	r3, [ip], #4
 8018b02:	d2db      	bcs.n	8018abc <quorem+0x44>
 8018b04:	f856 300e 	ldr.w	r3, [r6, lr]
 8018b08:	b96b      	cbnz	r3, 8018b26 <quorem+0xae>
 8018b0a:	9b01      	ldr	r3, [sp, #4]
 8018b0c:	3b04      	subs	r3, #4
 8018b0e:	429e      	cmp	r6, r3
 8018b10:	461a      	mov	r2, r3
 8018b12:	d302      	bcc.n	8018b1a <quorem+0xa2>
 8018b14:	f8c8 4010 	str.w	r4, [r8, #16]
 8018b18:	e005      	b.n	8018b26 <quorem+0xae>
 8018b1a:	6812      	ldr	r2, [r2, #0]
 8018b1c:	3b04      	subs	r3, #4
 8018b1e:	2a00      	cmp	r2, #0
 8018b20:	d1f8      	bne.n	8018b14 <quorem+0x9c>
 8018b22:	3c01      	subs	r4, #1
 8018b24:	e7f3      	b.n	8018b0e <quorem+0x96>
 8018b26:	4640      	mov	r0, r8
 8018b28:	f001 faa3 	bl	801a072 <__mcmp>
 8018b2c:	2800      	cmp	r0, #0
 8018b2e:	db2c      	blt.n	8018b8a <quorem+0x112>
 8018b30:	3501      	adds	r5, #1
 8018b32:	4630      	mov	r0, r6
 8018b34:	f04f 0e00 	mov.w	lr, #0
 8018b38:	f857 1b04 	ldr.w	r1, [r7], #4
 8018b3c:	f8d0 c000 	ldr.w	ip, [r0]
 8018b40:	b28a      	uxth	r2, r1
 8018b42:	ebc2 030e 	rsb	r3, r2, lr
 8018b46:	0c09      	lsrs	r1, r1, #16
 8018b48:	fa13 f38c 	uxtah	r3, r3, ip
 8018b4c:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8018b50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018b54:	b29b      	uxth	r3, r3
 8018b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018b5a:	45b9      	cmp	r9, r7
 8018b5c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018b60:	f840 3b04 	str.w	r3, [r0], #4
 8018b64:	d2e8      	bcs.n	8018b38 <quorem+0xc0>
 8018b66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8018b6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8018b6e:	b962      	cbnz	r2, 8018b8a <quorem+0x112>
 8018b70:	3b04      	subs	r3, #4
 8018b72:	429e      	cmp	r6, r3
 8018b74:	461a      	mov	r2, r3
 8018b76:	d302      	bcc.n	8018b7e <quorem+0x106>
 8018b78:	f8c8 4010 	str.w	r4, [r8, #16]
 8018b7c:	e005      	b.n	8018b8a <quorem+0x112>
 8018b7e:	6812      	ldr	r2, [r2, #0]
 8018b80:	3b04      	subs	r3, #4
 8018b82:	2a00      	cmp	r2, #0
 8018b84:	d1f8      	bne.n	8018b78 <quorem+0x100>
 8018b86:	3c01      	subs	r4, #1
 8018b88:	e7f3      	b.n	8018b72 <quorem+0xfa>
 8018b8a:	4628      	mov	r0, r5
 8018b8c:	e000      	b.n	8018b90 <quorem+0x118>
 8018b8e:	2000      	movs	r0, #0
 8018b90:	b003      	add	sp, #12
 8018b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018b98 <_dtoa_r>:
 8018b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9c:	ec59 8b10 	vmov	r8, r9, d0
 8018ba0:	b097      	sub	sp, #92	; 0x5c
 8018ba2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018ba4:	9106      	str	r1, [sp, #24]
 8018ba6:	4682      	mov	sl, r0
 8018ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8018baa:	9310      	str	r3, [sp, #64]	; 0x40
 8018bac:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8018bae:	e9cd 8900 	strd	r8, r9, [sp]
 8018bb2:	b945      	cbnz	r5, 8018bc6 <_dtoa_r+0x2e>
 8018bb4:	2010      	movs	r0, #16
 8018bb6:	f7fd ff31 	bl	8016a1c <malloc>
 8018bba:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8018bbe:	6045      	str	r5, [r0, #4]
 8018bc0:	6085      	str	r5, [r0, #8]
 8018bc2:	6005      	str	r5, [r0, #0]
 8018bc4:	60c5      	str	r5, [r0, #12]
 8018bc6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8018bca:	6819      	ldr	r1, [r3, #0]
 8018bcc:	b159      	cbz	r1, 8018be6 <_dtoa_r+0x4e>
 8018bce:	685a      	ldr	r2, [r3, #4]
 8018bd0:	604a      	str	r2, [r1, #4]
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	4093      	lsls	r3, r2
 8018bd6:	608b      	str	r3, [r1, #8]
 8018bd8:	4650      	mov	r0, sl
 8018bda:	f001 f872 	bl	8019cc2 <_Bfree>
 8018bde:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8018be2:	2200      	movs	r2, #0
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	9b01      	ldr	r3, [sp, #4]
 8018be8:	4a9f      	ldr	r2, [pc, #636]	; (8018e68 <_dtoa_r+0x2d0>)
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	bfbf      	itttt	lt
 8018bee:	2301      	movlt	r3, #1
 8018bf0:	6023      	strlt	r3, [r4, #0]
 8018bf2:	9b01      	ldrlt	r3, [sp, #4]
 8018bf4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018bf8:	bfb8      	it	lt
 8018bfa:	9301      	strlt	r3, [sp, #4]
 8018bfc:	9f01      	ldr	r7, [sp, #4]
 8018bfe:	bfa4      	itt	ge
 8018c00:	2300      	movge	r3, #0
 8018c02:	6023      	strge	r3, [r4, #0]
 8018c04:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8018c08:	0d1b      	lsrs	r3, r3, #20
 8018c0a:	051b      	lsls	r3, r3, #20
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d11d      	bne.n	8018c4c <_dtoa_r+0xb4>
 8018c10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018c12:	f242 730f 	movw	r3, #9999	; 0x270f
 8018c16:	6013      	str	r3, [r2, #0]
 8018c18:	9b00      	ldr	r3, [sp, #0]
 8018c1a:	b943      	cbnz	r3, 8018c2e <_dtoa_r+0x96>
 8018c1c:	4a93      	ldr	r2, [pc, #588]	; (8018e6c <_dtoa_r+0x2d4>)
 8018c1e:	4b94      	ldr	r3, [pc, #592]	; (8018e70 <_dtoa_r+0x2d8>)
 8018c20:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8018c24:	2800      	cmp	r0, #0
 8018c26:	bf14      	ite	ne
 8018c28:	4618      	movne	r0, r3
 8018c2a:	4610      	moveq	r0, r2
 8018c2c:	e000      	b.n	8018c30 <_dtoa_r+0x98>
 8018c2e:	4890      	ldr	r0, [pc, #576]	; (8018e70 <_dtoa_r+0x2d8>)
 8018c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	f000 854a 	beq.w	80196cc <_dtoa_r+0xb34>
 8018c38:	78c3      	ldrb	r3, [r0, #3]
 8018c3a:	b113      	cbz	r3, 8018c42 <_dtoa_r+0xaa>
 8018c3c:	f100 0308 	add.w	r3, r0, #8
 8018c40:	e000      	b.n	8018c44 <_dtoa_r+0xac>
 8018c42:	1cc3      	adds	r3, r0, #3
 8018c44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018c46:	6013      	str	r3, [r2, #0]
 8018c48:	f000 bd40 	b.w	80196cc <_dtoa_r+0xb34>
 8018c4c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018c50:	2200      	movs	r2, #0
 8018c52:	2300      	movs	r3, #0
 8018c54:	4620      	mov	r0, r4
 8018c56:	4629      	mov	r1, r5
 8018c58:	f7f0 f894 	bl	8008d84 <__aeabi_dcmpeq>
 8018c5c:	4680      	mov	r8, r0
 8018c5e:	b158      	cbz	r0, 8018c78 <_dtoa_r+0xe0>
 8018c60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018c62:	2301      	movs	r3, #1
 8018c64:	6013      	str	r3, [r2, #0]
 8018c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	f000 8522 	beq.w	80196b2 <_dtoa_r+0xb1a>
 8018c6e:	4881      	ldr	r0, [pc, #516]	; (8018e74 <_dtoa_r+0x2dc>)
 8018c70:	6018      	str	r0, [r3, #0]
 8018c72:	3801      	subs	r0, #1
 8018c74:	f000 bd2a 	b.w	80196cc <_dtoa_r+0xb34>
 8018c78:	aa14      	add	r2, sp, #80	; 0x50
 8018c7a:	a915      	add	r1, sp, #84	; 0x54
 8018c7c:	ec45 4b10 	vmov	d0, r4, r5
 8018c80:	4650      	mov	r0, sl
 8018c82:	f001 fa71 	bl	801a168 <__d2b>
 8018c86:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8018c8a:	9002      	str	r0, [sp, #8]
 8018c8c:	b15e      	cbz	r6, 8018ca6 <_dtoa_r+0x10e>
 8018c8e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8018c92:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8018c96:	4620      	mov	r0, r4
 8018c98:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018c9c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8018ca0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8018ca4:	e01d      	b.n	8018ce2 <_dtoa_r+0x14a>
 8018ca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ca8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018caa:	441e      	add	r6, r3
 8018cac:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8018cb0:	2b20      	cmp	r3, #32
 8018cb2:	dd0a      	ble.n	8018cca <_dtoa_r+0x132>
 8018cb4:	9a00      	ldr	r2, [sp, #0]
 8018cb6:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8018cba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8018cbe:	fa22 f000 	lsr.w	r0, r2, r0
 8018cc2:	fa07 f303 	lsl.w	r3, r7, r3
 8018cc6:	4318      	orrs	r0, r3
 8018cc8:	e004      	b.n	8018cd4 <_dtoa_r+0x13c>
 8018cca:	f1c3 0020 	rsb	r0, r3, #32
 8018cce:	9b00      	ldr	r3, [sp, #0]
 8018cd0:	fa03 f000 	lsl.w	r0, r3, r0
 8018cd4:	f7ef fd78 	bl	80087c8 <__aeabi_ui2d>
 8018cd8:	2301      	movs	r3, #1
 8018cda:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8018cde:	3e01      	subs	r6, #1
 8018ce0:	9311      	str	r3, [sp, #68]	; 0x44
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	4b64      	ldr	r3, [pc, #400]	; (8018e78 <_dtoa_r+0x2e0>)
 8018ce6:	f7ef fc31 	bl	800854c <__aeabi_dsub>
 8018cea:	a359      	add	r3, pc, #356	; (adr r3, 8018e50 <_dtoa_r+0x2b8>)
 8018cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cf0:	f7ef fde0 	bl	80088b4 <__aeabi_dmul>
 8018cf4:	a358      	add	r3, pc, #352	; (adr r3, 8018e58 <_dtoa_r+0x2c0>)
 8018cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cfa:	f7ef fc29 	bl	8008550 <__adddf3>
 8018cfe:	4604      	mov	r4, r0
 8018d00:	4630      	mov	r0, r6
 8018d02:	460d      	mov	r5, r1
 8018d04:	f7ef fd70 	bl	80087e8 <__aeabi_i2d>
 8018d08:	a355      	add	r3, pc, #340	; (adr r3, 8018e60 <_dtoa_r+0x2c8>)
 8018d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0e:	f7ef fdd1 	bl	80088b4 <__aeabi_dmul>
 8018d12:	4602      	mov	r2, r0
 8018d14:	460b      	mov	r3, r1
 8018d16:	4620      	mov	r0, r4
 8018d18:	4629      	mov	r1, r5
 8018d1a:	f7ef fc19 	bl	8008550 <__adddf3>
 8018d1e:	4604      	mov	r4, r0
 8018d20:	460d      	mov	r5, r1
 8018d22:	f7f0 f877 	bl	8008e14 <__aeabi_d2iz>
 8018d26:	2200      	movs	r2, #0
 8018d28:	4683      	mov	fp, r0
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	4620      	mov	r0, r4
 8018d2e:	4629      	mov	r1, r5
 8018d30:	f7f0 f832 	bl	8008d98 <__aeabi_dcmplt>
 8018d34:	b158      	cbz	r0, 8018d4e <_dtoa_r+0x1b6>
 8018d36:	4658      	mov	r0, fp
 8018d38:	f7ef fd56 	bl	80087e8 <__aeabi_i2d>
 8018d3c:	4602      	mov	r2, r0
 8018d3e:	460b      	mov	r3, r1
 8018d40:	4620      	mov	r0, r4
 8018d42:	4629      	mov	r1, r5
 8018d44:	f7f0 f81e 	bl	8008d84 <__aeabi_dcmpeq>
 8018d48:	b908      	cbnz	r0, 8018d4e <_dtoa_r+0x1b6>
 8018d4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018d4e:	f1bb 0f16 	cmp.w	fp, #22
 8018d52:	d80d      	bhi.n	8018d70 <_dtoa_r+0x1d8>
 8018d54:	4949      	ldr	r1, [pc, #292]	; (8018e7c <_dtoa_r+0x2e4>)
 8018d56:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8018d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d62:	f7f0 f837 	bl	8008dd4 <__aeabi_dcmpgt>
 8018d66:	b130      	cbz	r0, 8018d76 <_dtoa_r+0x1de>
 8018d68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	e000      	b.n	8018d72 <_dtoa_r+0x1da>
 8018d70:	2301      	movs	r3, #1
 8018d72:	930d      	str	r3, [sp, #52]	; 0x34
 8018d74:	e000      	b.n	8018d78 <_dtoa_r+0x1e0>
 8018d76:	900d      	str	r0, [sp, #52]	; 0x34
 8018d78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018d7a:	1b9e      	subs	r6, r3, r6
 8018d7c:	1e73      	subs	r3, r6, #1
 8018d7e:	9305      	str	r3, [sp, #20]
 8018d80:	bf43      	ittte	mi
 8018d82:	f1c3 0900 	rsbmi	r9, r3, #0
 8018d86:	2300      	movmi	r3, #0
 8018d88:	9305      	strmi	r3, [sp, #20]
 8018d8a:	f04f 0900 	movpl.w	r9, #0
 8018d8e:	f1bb 0f00 	cmp.w	fp, #0
 8018d92:	db07      	blt.n	8018da4 <_dtoa_r+0x20c>
 8018d94:	9b05      	ldr	r3, [sp, #20]
 8018d96:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8018d9a:	445b      	add	r3, fp
 8018d9c:	9305      	str	r3, [sp, #20]
 8018d9e:	2300      	movs	r3, #0
 8018da0:	9307      	str	r3, [sp, #28]
 8018da2:	e006      	b.n	8018db2 <_dtoa_r+0x21a>
 8018da4:	f1cb 0300 	rsb	r3, fp, #0
 8018da8:	9307      	str	r3, [sp, #28]
 8018daa:	2300      	movs	r3, #0
 8018dac:	ebcb 0909 	rsb	r9, fp, r9
 8018db0:	930c      	str	r3, [sp, #48]	; 0x30
 8018db2:	9b06      	ldr	r3, [sp, #24]
 8018db4:	2b09      	cmp	r3, #9
 8018db6:	d827      	bhi.n	8018e08 <_dtoa_r+0x270>
 8018db8:	2b05      	cmp	r3, #5
 8018dba:	bfc4      	itt	gt
 8018dbc:	3b04      	subgt	r3, #4
 8018dbe:	9306      	strgt	r3, [sp, #24]
 8018dc0:	9b06      	ldr	r3, [sp, #24]
 8018dc2:	f1a3 0302 	sub.w	r3, r3, #2
 8018dc6:	bfcc      	ite	gt
 8018dc8:	2500      	movgt	r5, #0
 8018dca:	2501      	movle	r5, #1
 8018dcc:	2b03      	cmp	r3, #3
 8018dce:	d820      	bhi.n	8018e12 <_dtoa_r+0x27a>
 8018dd0:	e8df f003 	tbb	[pc, r3]
 8018dd4:	04020e06 	.word	0x04020e06
 8018dd8:	2301      	movs	r3, #1
 8018dda:	e002      	b.n	8018de2 <_dtoa_r+0x24a>
 8018ddc:	2301      	movs	r3, #1
 8018dde:	e008      	b.n	8018df2 <_dtoa_r+0x25a>
 8018de0:	2300      	movs	r3, #0
 8018de2:	9308      	str	r3, [sp, #32]
 8018de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	dd1c      	ble.n	8018e24 <_dtoa_r+0x28c>
 8018dea:	9303      	str	r3, [sp, #12]
 8018dec:	4698      	mov	r8, r3
 8018dee:	e01e      	b.n	8018e2e <_dtoa_r+0x296>
 8018df0:	2300      	movs	r3, #0
 8018df2:	9308      	str	r3, [sp, #32]
 8018df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018df6:	445b      	add	r3, fp
 8018df8:	f103 0801 	add.w	r8, r3, #1
 8018dfc:	9303      	str	r3, [sp, #12]
 8018dfe:	4643      	mov	r3, r8
 8018e00:	2b01      	cmp	r3, #1
 8018e02:	bfb8      	it	lt
 8018e04:	2301      	movlt	r3, #1
 8018e06:	e012      	b.n	8018e2e <_dtoa_r+0x296>
 8018e08:	2501      	movs	r5, #1
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	9306      	str	r3, [sp, #24]
 8018e0e:	9508      	str	r5, [sp, #32]
 8018e10:	e001      	b.n	8018e16 <_dtoa_r+0x27e>
 8018e12:	2301      	movs	r3, #1
 8018e14:	9308      	str	r3, [sp, #32]
 8018e16:	f04f 33ff 	mov.w	r3, #4294967295
 8018e1a:	9303      	str	r3, [sp, #12]
 8018e1c:	4698      	mov	r8, r3
 8018e1e:	2200      	movs	r2, #0
 8018e20:	2312      	movs	r3, #18
 8018e22:	e003      	b.n	8018e2c <_dtoa_r+0x294>
 8018e24:	2301      	movs	r3, #1
 8018e26:	9303      	str	r3, [sp, #12]
 8018e28:	4698      	mov	r8, r3
 8018e2a:	461a      	mov	r2, r3
 8018e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8018e2e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8018e32:	2200      	movs	r2, #0
 8018e34:	6062      	str	r2, [r4, #4]
 8018e36:	2104      	movs	r1, #4
 8018e38:	f101 0214 	add.w	r2, r1, #20
 8018e3c:	429a      	cmp	r2, r3
 8018e3e:	d81f      	bhi.n	8018e80 <_dtoa_r+0x2e8>
 8018e40:	6862      	ldr	r2, [r4, #4]
 8018e42:	3201      	adds	r2, #1
 8018e44:	6062      	str	r2, [r4, #4]
 8018e46:	0049      	lsls	r1, r1, #1
 8018e48:	e7f6      	b.n	8018e38 <_dtoa_r+0x2a0>
 8018e4a:	bf00      	nop
 8018e4c:	f3af 8000 	nop.w
 8018e50:	636f4361 	.word	0x636f4361
 8018e54:	3fd287a7 	.word	0x3fd287a7
 8018e58:	8b60c8b3 	.word	0x8b60c8b3
 8018e5c:	3fc68a28 	.word	0x3fc68a28
 8018e60:	509f79fb 	.word	0x509f79fb
 8018e64:	3fd34413 	.word	0x3fd34413
 8018e68:	7ff00000 	.word	0x7ff00000
 8018e6c:	0801cf66 	.word	0x0801cf66
 8018e70:	0801cf6f 	.word	0x0801cf6f
 8018e74:	0801cf55 	.word	0x0801cf55
 8018e78:	3ff80000 	.word	0x3ff80000
 8018e7c:	0801cfd8 	.word	0x0801cfd8
 8018e80:	6861      	ldr	r1, [r4, #4]
 8018e82:	4650      	mov	r0, sl
 8018e84:	f000 fee8 	bl	8019c58 <_Balloc>
 8018e88:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8018e8c:	6020      	str	r0, [r4, #0]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	9304      	str	r3, [sp, #16]
 8018e92:	f1b8 0f0e 	cmp.w	r8, #14
 8018e96:	f200 815d 	bhi.w	8019154 <_dtoa_r+0x5bc>
 8018e9a:	2d00      	cmp	r5, #0
 8018e9c:	f000 815a 	beq.w	8019154 <_dtoa_r+0x5bc>
 8018ea0:	ed9d 7b00 	vldr	d7, [sp]
 8018ea4:	f1bb 0f00 	cmp.w	fp, #0
 8018ea8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8018eac:	dd31      	ble.n	8018f12 <_dtoa_r+0x37a>
 8018eae:	4aa0      	ldr	r2, [pc, #640]	; (8019130 <_dtoa_r+0x598>)
 8018eb0:	f00b 030f 	and.w	r3, fp, #15
 8018eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018eb8:	ed93 7b00 	vldr	d7, [r3]
 8018ebc:	ea4f 142b 	mov.w	r4, fp, asr #4
 8018ec0:	06e2      	lsls	r2, r4, #27
 8018ec2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018ec6:	d50c      	bpl.n	8018ee2 <_dtoa_r+0x34a>
 8018ec8:	4b9a      	ldr	r3, [pc, #616]	; (8019134 <_dtoa_r+0x59c>)
 8018eca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018ece:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018ed2:	f7ef fe19 	bl	8008b08 <__aeabi_ddiv>
 8018ed6:	f004 040f 	and.w	r4, r4, #15
 8018eda:	e9cd 0100 	strd	r0, r1, [sp]
 8018ede:	2603      	movs	r6, #3
 8018ee0:	e000      	b.n	8018ee4 <_dtoa_r+0x34c>
 8018ee2:	2602      	movs	r6, #2
 8018ee4:	4d93      	ldr	r5, [pc, #588]	; (8019134 <_dtoa_r+0x59c>)
 8018ee6:	b16c      	cbz	r4, 8018f04 <_dtoa_r+0x36c>
 8018ee8:	07e3      	lsls	r3, r4, #31
 8018eea:	d508      	bpl.n	8018efe <_dtoa_r+0x366>
 8018eec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018ef0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018ef4:	f7ef fcde 	bl	80088b4 <__aeabi_dmul>
 8018ef8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018efc:	3601      	adds	r6, #1
 8018efe:	1064      	asrs	r4, r4, #1
 8018f00:	3508      	adds	r5, #8
 8018f02:	e7f0      	b.n	8018ee6 <_dtoa_r+0x34e>
 8018f04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018f0c:	f7ef fdfc 	bl	8008b08 <__aeabi_ddiv>
 8018f10:	e020      	b.n	8018f54 <_dtoa_r+0x3bc>
 8018f12:	f1cb 0400 	rsb	r4, fp, #0
 8018f16:	b304      	cbz	r4, 8018f5a <_dtoa_r+0x3c2>
 8018f18:	4b85      	ldr	r3, [pc, #532]	; (8019130 <_dtoa_r+0x598>)
 8018f1a:	4d86      	ldr	r5, [pc, #536]	; (8019134 <_dtoa_r+0x59c>)
 8018f1c:	f004 020f 	and.w	r2, r4, #15
 8018f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018f2c:	f7ef fcc2 	bl	80088b4 <__aeabi_dmul>
 8018f30:	e9cd 0100 	strd	r0, r1, [sp]
 8018f34:	1124      	asrs	r4, r4, #4
 8018f36:	2300      	movs	r3, #0
 8018f38:	2602      	movs	r6, #2
 8018f3a:	b154      	cbz	r4, 8018f52 <_dtoa_r+0x3ba>
 8018f3c:	07e7      	lsls	r7, r4, #31
 8018f3e:	d505      	bpl.n	8018f4c <_dtoa_r+0x3b4>
 8018f40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018f44:	f7ef fcb6 	bl	80088b4 <__aeabi_dmul>
 8018f48:	3601      	adds	r6, #1
 8018f4a:	2301      	movs	r3, #1
 8018f4c:	1064      	asrs	r4, r4, #1
 8018f4e:	3508      	adds	r5, #8
 8018f50:	e7f3      	b.n	8018f3a <_dtoa_r+0x3a2>
 8018f52:	b11b      	cbz	r3, 8018f5c <_dtoa_r+0x3c4>
 8018f54:	e9cd 0100 	strd	r0, r1, [sp]
 8018f58:	e000      	b.n	8018f5c <_dtoa_r+0x3c4>
 8018f5a:	2602      	movs	r6, #2
 8018f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f5e:	b1eb      	cbz	r3, 8018f9c <_dtoa_r+0x404>
 8018f60:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018f64:	2200      	movs	r2, #0
 8018f66:	4b74      	ldr	r3, [pc, #464]	; (8019138 <_dtoa_r+0x5a0>)
 8018f68:	4620      	mov	r0, r4
 8018f6a:	4629      	mov	r1, r5
 8018f6c:	f7ef ff14 	bl	8008d98 <__aeabi_dcmplt>
 8018f70:	b1a0      	cbz	r0, 8018f9c <_dtoa_r+0x404>
 8018f72:	f1b8 0f00 	cmp.w	r8, #0
 8018f76:	d011      	beq.n	8018f9c <_dtoa_r+0x404>
 8018f78:	9b03      	ldr	r3, [sp, #12]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	f340 80e6 	ble.w	801914c <_dtoa_r+0x5b4>
 8018f80:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018f84:	930a      	str	r3, [sp, #40]	; 0x28
 8018f86:	2200      	movs	r2, #0
 8018f88:	4b6c      	ldr	r3, [pc, #432]	; (801913c <_dtoa_r+0x5a4>)
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	4629      	mov	r1, r5
 8018f8e:	f7ef fc91 	bl	80088b4 <__aeabi_dmul>
 8018f92:	3601      	adds	r6, #1
 8018f94:	e9cd 0100 	strd	r0, r1, [sp]
 8018f98:	9f03      	ldr	r7, [sp, #12]
 8018f9a:	e002      	b.n	8018fa2 <_dtoa_r+0x40a>
 8018f9c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8018fa0:	4647      	mov	r7, r8
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	f7ef fc20 	bl	80087e8 <__aeabi_i2d>
 8018fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018fac:	f7ef fc82 	bl	80088b4 <__aeabi_dmul>
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	4b63      	ldr	r3, [pc, #396]	; (8019140 <_dtoa_r+0x5a8>)
 8018fb4:	f7ef facc 	bl	8008550 <__adddf3>
 8018fb8:	4604      	mov	r4, r0
 8018fba:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8018fbe:	b9cf      	cbnz	r7, 8018ff4 <_dtoa_r+0x45c>
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	4b60      	ldr	r3, [pc, #384]	; (8019144 <_dtoa_r+0x5ac>)
 8018fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018fc8:	f7ef fac0 	bl	800854c <__aeabi_dsub>
 8018fcc:	4622      	mov	r2, r4
 8018fce:	462b      	mov	r3, r5
 8018fd0:	e9cd 0100 	strd	r0, r1, [sp]
 8018fd4:	f7ef fefe 	bl	8008dd4 <__aeabi_dcmpgt>
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	f040 8241 	bne.w	8019460 <_dtoa_r+0x8c8>
 8018fde:	4622      	mov	r2, r4
 8018fe0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8018fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018fe8:	f7ef fed6 	bl	8008d98 <__aeabi_dcmplt>
 8018fec:	2800      	cmp	r0, #0
 8018fee:	f040 822e 	bne.w	801944e <_dtoa_r+0x8b6>
 8018ff2:	e0ab      	b.n	801914c <_dtoa_r+0x5b4>
 8018ff4:	9a08      	ldr	r2, [sp, #32]
 8018ff6:	4b4e      	ldr	r3, [pc, #312]	; (8019130 <_dtoa_r+0x598>)
 8018ff8:	1e79      	subs	r1, r7, #1
 8018ffa:	2a00      	cmp	r2, #0
 8018ffc:	d04a      	beq.n	8019094 <_dtoa_r+0x4fc>
 8018ffe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019006:	2000      	movs	r0, #0
 8019008:	494f      	ldr	r1, [pc, #316]	; (8019148 <_dtoa_r+0x5b0>)
 801900a:	f7ef fd7d 	bl	8008b08 <__aeabi_ddiv>
 801900e:	4622      	mov	r2, r4
 8019010:	462b      	mov	r3, r5
 8019012:	f7ef fa9b 	bl	800854c <__aeabi_dsub>
 8019016:	9c04      	ldr	r4, [sp, #16]
 8019018:	4605      	mov	r5, r0
 801901a:	460e      	mov	r6, r1
 801901c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019020:	f7ef fef8 	bl	8008e14 <__aeabi_d2iz>
 8019024:	9012      	str	r0, [sp, #72]	; 0x48
 8019026:	f7ef fbdf 	bl	80087e8 <__aeabi_i2d>
 801902a:	4602      	mov	r2, r0
 801902c:	460b      	mov	r3, r1
 801902e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019032:	f7ef fa8b 	bl	800854c <__aeabi_dsub>
 8019036:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019038:	3330      	adds	r3, #48	; 0x30
 801903a:	f804 3b01 	strb.w	r3, [r4], #1
 801903e:	462a      	mov	r2, r5
 8019040:	4633      	mov	r3, r6
 8019042:	e9cd 0100 	strd	r0, r1, [sp]
 8019046:	f7ef fea7 	bl	8008d98 <__aeabi_dcmplt>
 801904a:	2800      	cmp	r0, #0
 801904c:	f040 8321 	bne.w	8019692 <_dtoa_r+0xafa>
 8019050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019054:	2000      	movs	r0, #0
 8019056:	4938      	ldr	r1, [pc, #224]	; (8019138 <_dtoa_r+0x5a0>)
 8019058:	f7ef fa78 	bl	800854c <__aeabi_dsub>
 801905c:	462a      	mov	r2, r5
 801905e:	4633      	mov	r3, r6
 8019060:	f7ef fe9a 	bl	8008d98 <__aeabi_dcmplt>
 8019064:	2800      	cmp	r0, #0
 8019066:	f040 80d2 	bne.w	801920e <_dtoa_r+0x676>
 801906a:	9b04      	ldr	r3, [sp, #16]
 801906c:	1ae3      	subs	r3, r4, r3
 801906e:	42bb      	cmp	r3, r7
 8019070:	da6c      	bge.n	801914c <_dtoa_r+0x5b4>
 8019072:	2200      	movs	r2, #0
 8019074:	4b31      	ldr	r3, [pc, #196]	; (801913c <_dtoa_r+0x5a4>)
 8019076:	4628      	mov	r0, r5
 8019078:	4631      	mov	r1, r6
 801907a:	f7ef fc1b 	bl	80088b4 <__aeabi_dmul>
 801907e:	2200      	movs	r2, #0
 8019080:	4605      	mov	r5, r0
 8019082:	460e      	mov	r6, r1
 8019084:	4b2d      	ldr	r3, [pc, #180]	; (801913c <_dtoa_r+0x5a4>)
 8019086:	e9dd 0100 	ldrd	r0, r1, [sp]
 801908a:	f7ef fc13 	bl	80088b4 <__aeabi_dmul>
 801908e:	e9cd 0100 	strd	r0, r1, [sp]
 8019092:	e7c3      	b.n	801901c <_dtoa_r+0x484>
 8019094:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019098:	4622      	mov	r2, r4
 801909a:	462b      	mov	r3, r5
 801909c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190a0:	f7ef fc08 	bl	80088b4 <__aeabi_dmul>
 80190a4:	9b04      	ldr	r3, [sp, #16]
 80190a6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80190aa:	19dc      	adds	r4, r3, r7
 80190ac:	461d      	mov	r5, r3
 80190ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190b2:	f7ef feaf 	bl	8008e14 <__aeabi_d2iz>
 80190b6:	4606      	mov	r6, r0
 80190b8:	f7ef fb96 	bl	80087e8 <__aeabi_i2d>
 80190bc:	3630      	adds	r6, #48	; 0x30
 80190be:	4602      	mov	r2, r0
 80190c0:	460b      	mov	r3, r1
 80190c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190c6:	f7ef fa41 	bl	800854c <__aeabi_dsub>
 80190ca:	f805 6b01 	strb.w	r6, [r5], #1
 80190ce:	42ac      	cmp	r4, r5
 80190d0:	e9cd 0100 	strd	r0, r1, [sp]
 80190d4:	f04f 0200 	mov.w	r2, #0
 80190d8:	d123      	bne.n	8019122 <_dtoa_r+0x58a>
 80190da:	4b1b      	ldr	r3, [pc, #108]	; (8019148 <_dtoa_r+0x5b0>)
 80190dc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80190e0:	f7ef fa36 	bl	8008550 <__adddf3>
 80190e4:	4602      	mov	r2, r0
 80190e6:	460b      	mov	r3, r1
 80190e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80190ec:	f7ef fe72 	bl	8008dd4 <__aeabi_dcmpgt>
 80190f0:	2800      	cmp	r0, #0
 80190f2:	f040 808c 	bne.w	801920e <_dtoa_r+0x676>
 80190f6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80190fa:	2000      	movs	r0, #0
 80190fc:	4912      	ldr	r1, [pc, #72]	; (8019148 <_dtoa_r+0x5b0>)
 80190fe:	f7ef fa25 	bl	800854c <__aeabi_dsub>
 8019102:	4602      	mov	r2, r0
 8019104:	460b      	mov	r3, r1
 8019106:	e9dd 0100 	ldrd	r0, r1, [sp]
 801910a:	f7ef fe45 	bl	8008d98 <__aeabi_dcmplt>
 801910e:	b1e8      	cbz	r0, 801914c <_dtoa_r+0x5b4>
 8019110:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8019114:	2b30      	cmp	r3, #48	; 0x30
 8019116:	f104 32ff 	add.w	r2, r4, #4294967295
 801911a:	f040 82ba 	bne.w	8019692 <_dtoa_r+0xafa>
 801911e:	4614      	mov	r4, r2
 8019120:	e7f6      	b.n	8019110 <_dtoa_r+0x578>
 8019122:	4b06      	ldr	r3, [pc, #24]	; (801913c <_dtoa_r+0x5a4>)
 8019124:	f7ef fbc6 	bl	80088b4 <__aeabi_dmul>
 8019128:	e9cd 0100 	strd	r0, r1, [sp]
 801912c:	e7bf      	b.n	80190ae <_dtoa_r+0x516>
 801912e:	bf00      	nop
 8019130:	0801cfd8 	.word	0x0801cfd8
 8019134:	0801d0a0 	.word	0x0801d0a0
 8019138:	3ff00000 	.word	0x3ff00000
 801913c:	40240000 	.word	0x40240000
 8019140:	401c0000 	.word	0x401c0000
 8019144:	40140000 	.word	0x40140000
 8019148:	3fe00000 	.word	0x3fe00000
 801914c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8019150:	e88d 0018 	stmia.w	sp, {r3, r4}
 8019154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019156:	2b00      	cmp	r3, #0
 8019158:	db7c      	blt.n	8019254 <_dtoa_r+0x6bc>
 801915a:	f1bb 0f0e 	cmp.w	fp, #14
 801915e:	dc79      	bgt.n	8019254 <_dtoa_r+0x6bc>
 8019160:	4b8f      	ldr	r3, [pc, #572]	; (80193a0 <_dtoa_r+0x808>)
 8019162:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019166:	e9d3 6700 	ldrd	r6, r7, [r3]
 801916a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801916c:	2b00      	cmp	r3, #0
 801916e:	da14      	bge.n	801919a <_dtoa_r+0x602>
 8019170:	f1b8 0f00 	cmp.w	r8, #0
 8019174:	dc11      	bgt.n	801919a <_dtoa_r+0x602>
 8019176:	f040 816c 	bne.w	8019452 <_dtoa_r+0x8ba>
 801917a:	2200      	movs	r2, #0
 801917c:	4b89      	ldr	r3, [pc, #548]	; (80193a4 <_dtoa_r+0x80c>)
 801917e:	4630      	mov	r0, r6
 8019180:	4639      	mov	r1, r7
 8019182:	f7ef fb97 	bl	80088b4 <__aeabi_dmul>
 8019186:	e9dd 2300 	ldrd	r2, r3, [sp]
 801918a:	f7ef fe19 	bl	8008dc0 <__aeabi_dcmpge>
 801918e:	4645      	mov	r5, r8
 8019190:	4646      	mov	r6, r8
 8019192:	2800      	cmp	r0, #0
 8019194:	f040 815f 	bne.w	8019456 <_dtoa_r+0x8be>
 8019198:	e166      	b.n	8019468 <_dtoa_r+0x8d0>
 801919a:	9c04      	ldr	r4, [sp, #16]
 801919c:	4632      	mov	r2, r6
 801919e:	463b      	mov	r3, r7
 80191a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80191a4:	f7ef fcb0 	bl	8008b08 <__aeabi_ddiv>
 80191a8:	f7ef fe34 	bl	8008e14 <__aeabi_d2iz>
 80191ac:	4605      	mov	r5, r0
 80191ae:	f7ef fb1b 	bl	80087e8 <__aeabi_i2d>
 80191b2:	4632      	mov	r2, r6
 80191b4:	463b      	mov	r3, r7
 80191b6:	f7ef fb7d 	bl	80088b4 <__aeabi_dmul>
 80191ba:	460b      	mov	r3, r1
 80191bc:	4602      	mov	r2, r0
 80191be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80191c2:	f7ef f9c3 	bl	800854c <__aeabi_dsub>
 80191c6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80191ca:	f804 eb01 	strb.w	lr, [r4], #1
 80191ce:	9b04      	ldr	r3, [sp, #16]
 80191d0:	ebc3 0e04 	rsb	lr, r3, r4
 80191d4:	45f0      	cmp	r8, lr
 80191d6:	e9cd 0100 	strd	r0, r1, [sp]
 80191da:	d12e      	bne.n	801923a <_dtoa_r+0x6a2>
 80191dc:	4602      	mov	r2, r0
 80191de:	460b      	mov	r3, r1
 80191e0:	f7ef f9b6 	bl	8008550 <__adddf3>
 80191e4:	4680      	mov	r8, r0
 80191e6:	4689      	mov	r9, r1
 80191e8:	4602      	mov	r2, r0
 80191ea:	460b      	mov	r3, r1
 80191ec:	4630      	mov	r0, r6
 80191ee:	4639      	mov	r1, r7
 80191f0:	f7ef fdd2 	bl	8008d98 <__aeabi_dcmplt>
 80191f4:	b978      	cbnz	r0, 8019216 <_dtoa_r+0x67e>
 80191f6:	4642      	mov	r2, r8
 80191f8:	464b      	mov	r3, r9
 80191fa:	4630      	mov	r0, r6
 80191fc:	4639      	mov	r1, r7
 80191fe:	f7ef fdc1 	bl	8008d84 <__aeabi_dcmpeq>
 8019202:	2800      	cmp	r0, #0
 8019204:	f000 8247 	beq.w	8019696 <_dtoa_r+0xafe>
 8019208:	07e9      	lsls	r1, r5, #31
 801920a:	d404      	bmi.n	8019216 <_dtoa_r+0x67e>
 801920c:	e243      	b.n	8019696 <_dtoa_r+0xafe>
 801920e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8019212:	e000      	b.n	8019216 <_dtoa_r+0x67e>
 8019214:	461c      	mov	r4, r3
 8019216:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 801921a:	2a39      	cmp	r2, #57	; 0x39
 801921c:	f104 33ff 	add.w	r3, r4, #4294967295
 8019220:	d107      	bne.n	8019232 <_dtoa_r+0x69a>
 8019222:	9a04      	ldr	r2, [sp, #16]
 8019224:	429a      	cmp	r2, r3
 8019226:	d1f5      	bne.n	8019214 <_dtoa_r+0x67c>
 8019228:	9904      	ldr	r1, [sp, #16]
 801922a:	2230      	movs	r2, #48	; 0x30
 801922c:	f10b 0b01 	add.w	fp, fp, #1
 8019230:	700a      	strb	r2, [r1, #0]
 8019232:	781a      	ldrb	r2, [r3, #0]
 8019234:	3201      	adds	r2, #1
 8019236:	701a      	strb	r2, [r3, #0]
 8019238:	e22d      	b.n	8019696 <_dtoa_r+0xafe>
 801923a:	2200      	movs	r2, #0
 801923c:	4b5a      	ldr	r3, [pc, #360]	; (80193a8 <_dtoa_r+0x810>)
 801923e:	f7ef fb39 	bl	80088b4 <__aeabi_dmul>
 8019242:	2200      	movs	r2, #0
 8019244:	2300      	movs	r3, #0
 8019246:	e9cd 0100 	strd	r0, r1, [sp]
 801924a:	f7ef fd9b 	bl	8008d84 <__aeabi_dcmpeq>
 801924e:	2800      	cmp	r0, #0
 8019250:	d0a4      	beq.n	801919c <_dtoa_r+0x604>
 8019252:	e220      	b.n	8019696 <_dtoa_r+0xafe>
 8019254:	9a08      	ldr	r2, [sp, #32]
 8019256:	2a00      	cmp	r2, #0
 8019258:	d02d      	beq.n	80192b6 <_dtoa_r+0x71e>
 801925a:	9a06      	ldr	r2, [sp, #24]
 801925c:	2a01      	cmp	r2, #1
 801925e:	dc0a      	bgt.n	8019276 <_dtoa_r+0x6de>
 8019260:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019262:	b112      	cbz	r2, 801926a <_dtoa_r+0x6d2>
 8019264:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019268:	e002      	b.n	8019270 <_dtoa_r+0x6d8>
 801926a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801926c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019270:	9d07      	ldr	r5, [sp, #28]
 8019272:	464c      	mov	r4, r9
 8019274:	e015      	b.n	80192a2 <_dtoa_r+0x70a>
 8019276:	9b07      	ldr	r3, [sp, #28]
 8019278:	f108 35ff 	add.w	r5, r8, #4294967295
 801927c:	42ab      	cmp	r3, r5
 801927e:	bfbf      	itttt	lt
 8019280:	9b07      	ldrlt	r3, [sp, #28]
 8019282:	9507      	strlt	r5, [sp, #28]
 8019284:	1aea      	sublt	r2, r5, r3
 8019286:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8019288:	bfb7      	itett	lt
 801928a:	189b      	addlt	r3, r3, r2
 801928c:	1b5d      	subge	r5, r3, r5
 801928e:	930c      	strlt	r3, [sp, #48]	; 0x30
 8019290:	2500      	movlt	r5, #0
 8019292:	f1b8 0f00 	cmp.w	r8, #0
 8019296:	bfb9      	ittee	lt
 8019298:	ebc8 0409 	rsblt	r4, r8, r9
 801929c:	2300      	movlt	r3, #0
 801929e:	464c      	movge	r4, r9
 80192a0:	4643      	movge	r3, r8
 80192a2:	9a05      	ldr	r2, [sp, #20]
 80192a4:	2101      	movs	r1, #1
 80192a6:	441a      	add	r2, r3
 80192a8:	4650      	mov	r0, sl
 80192aa:	4499      	add	r9, r3
 80192ac:	9205      	str	r2, [sp, #20]
 80192ae:	f000 fda7 	bl	8019e00 <__i2b>
 80192b2:	4606      	mov	r6, r0
 80192b4:	e002      	b.n	80192bc <_dtoa_r+0x724>
 80192b6:	9d07      	ldr	r5, [sp, #28]
 80192b8:	9e08      	ldr	r6, [sp, #32]
 80192ba:	464c      	mov	r4, r9
 80192bc:	b15c      	cbz	r4, 80192d6 <_dtoa_r+0x73e>
 80192be:	9b05      	ldr	r3, [sp, #20]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	dd08      	ble.n	80192d6 <_dtoa_r+0x73e>
 80192c4:	42a3      	cmp	r3, r4
 80192c6:	9a05      	ldr	r2, [sp, #20]
 80192c8:	bfa8      	it	ge
 80192ca:	4623      	movge	r3, r4
 80192cc:	ebc3 0909 	rsb	r9, r3, r9
 80192d0:	1ae4      	subs	r4, r4, r3
 80192d2:	1ad3      	subs	r3, r2, r3
 80192d4:	9305      	str	r3, [sp, #20]
 80192d6:	9b07      	ldr	r3, [sp, #28]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	dd1d      	ble.n	8019318 <_dtoa_r+0x780>
 80192dc:	9b08      	ldr	r3, [sp, #32]
 80192de:	b1ab      	cbz	r3, 801930c <_dtoa_r+0x774>
 80192e0:	b185      	cbz	r5, 8019304 <_dtoa_r+0x76c>
 80192e2:	4631      	mov	r1, r6
 80192e4:	462a      	mov	r2, r5
 80192e6:	4650      	mov	r0, sl
 80192e8:	f000 fe24 	bl	8019f34 <__pow5mult>
 80192ec:	9a02      	ldr	r2, [sp, #8]
 80192ee:	4601      	mov	r1, r0
 80192f0:	4606      	mov	r6, r0
 80192f2:	4650      	mov	r0, sl
 80192f4:	f000 fd8d 	bl	8019e12 <__multiply>
 80192f8:	9902      	ldr	r1, [sp, #8]
 80192fa:	4607      	mov	r7, r0
 80192fc:	4650      	mov	r0, sl
 80192fe:	f000 fce0 	bl	8019cc2 <_Bfree>
 8019302:	9702      	str	r7, [sp, #8]
 8019304:	9b07      	ldr	r3, [sp, #28]
 8019306:	1b5a      	subs	r2, r3, r5
 8019308:	d006      	beq.n	8019318 <_dtoa_r+0x780>
 801930a:	e000      	b.n	801930e <_dtoa_r+0x776>
 801930c:	9a07      	ldr	r2, [sp, #28]
 801930e:	9902      	ldr	r1, [sp, #8]
 8019310:	4650      	mov	r0, sl
 8019312:	f000 fe0f 	bl	8019f34 <__pow5mult>
 8019316:	9002      	str	r0, [sp, #8]
 8019318:	2101      	movs	r1, #1
 801931a:	4650      	mov	r0, sl
 801931c:	f000 fd70 	bl	8019e00 <__i2b>
 8019320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019322:	4605      	mov	r5, r0
 8019324:	b35b      	cbz	r3, 801937e <_dtoa_r+0x7e6>
 8019326:	461a      	mov	r2, r3
 8019328:	4601      	mov	r1, r0
 801932a:	4650      	mov	r0, sl
 801932c:	f000 fe02 	bl	8019f34 <__pow5mult>
 8019330:	9b06      	ldr	r3, [sp, #24]
 8019332:	2b01      	cmp	r3, #1
 8019334:	4605      	mov	r5, r0
 8019336:	dc18      	bgt.n	801936a <_dtoa_r+0x7d2>
 8019338:	9b00      	ldr	r3, [sp, #0]
 801933a:	b983      	cbnz	r3, 801935e <_dtoa_r+0x7c6>
 801933c:	9b01      	ldr	r3, [sp, #4]
 801933e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019342:	b973      	cbnz	r3, 8019362 <_dtoa_r+0x7ca>
 8019344:	9b01      	ldr	r3, [sp, #4]
 8019346:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 801934a:	0d3f      	lsrs	r7, r7, #20
 801934c:	053f      	lsls	r7, r7, #20
 801934e:	b14f      	cbz	r7, 8019364 <_dtoa_r+0x7cc>
 8019350:	9b05      	ldr	r3, [sp, #20]
 8019352:	3301      	adds	r3, #1
 8019354:	f109 0901 	add.w	r9, r9, #1
 8019358:	9305      	str	r3, [sp, #20]
 801935a:	2701      	movs	r7, #1
 801935c:	e002      	b.n	8019364 <_dtoa_r+0x7cc>
 801935e:	2700      	movs	r7, #0
 8019360:	e000      	b.n	8019364 <_dtoa_r+0x7cc>
 8019362:	9f00      	ldr	r7, [sp, #0]
 8019364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019366:	b173      	cbz	r3, 8019386 <_dtoa_r+0x7ee>
 8019368:	e000      	b.n	801936c <_dtoa_r+0x7d4>
 801936a:	2700      	movs	r7, #0
 801936c:	692b      	ldr	r3, [r5, #16]
 801936e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019372:	6918      	ldr	r0, [r3, #16]
 8019374:	f000 fcf7 	bl	8019d66 <__hi0bits>
 8019378:	f1c0 0020 	rsb	r0, r0, #32
 801937c:	e004      	b.n	8019388 <_dtoa_r+0x7f0>
 801937e:	9b06      	ldr	r3, [sp, #24]
 8019380:	2b01      	cmp	r3, #1
 8019382:	ddd9      	ble.n	8019338 <_dtoa_r+0x7a0>
 8019384:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019386:	2001      	movs	r0, #1
 8019388:	9b05      	ldr	r3, [sp, #20]
 801938a:	4418      	add	r0, r3
 801938c:	f010 001f 	ands.w	r0, r0, #31
 8019390:	d00e      	beq.n	80193b0 <_dtoa_r+0x818>
 8019392:	f1c0 0320 	rsb	r3, r0, #32
 8019396:	2b04      	cmp	r3, #4
 8019398:	dd08      	ble.n	80193ac <_dtoa_r+0x814>
 801939a:	f1c0 001c 	rsb	r0, r0, #28
 801939e:	e008      	b.n	80193b2 <_dtoa_r+0x81a>
 80193a0:	0801cfd8 	.word	0x0801cfd8
 80193a4:	40140000 	.word	0x40140000
 80193a8:	40240000 	.word	0x40240000
 80193ac:	d006      	beq.n	80193bc <_dtoa_r+0x824>
 80193ae:	4618      	mov	r0, r3
 80193b0:	301c      	adds	r0, #28
 80193b2:	9b05      	ldr	r3, [sp, #20]
 80193b4:	4403      	add	r3, r0
 80193b6:	4481      	add	r9, r0
 80193b8:	4404      	add	r4, r0
 80193ba:	9305      	str	r3, [sp, #20]
 80193bc:	f1b9 0f00 	cmp.w	r9, #0
 80193c0:	dd05      	ble.n	80193ce <_dtoa_r+0x836>
 80193c2:	464a      	mov	r2, r9
 80193c4:	9902      	ldr	r1, [sp, #8]
 80193c6:	4650      	mov	r0, sl
 80193c8:	f000 fe02 	bl	8019fd0 <__lshift>
 80193cc:	9002      	str	r0, [sp, #8]
 80193ce:	9b05      	ldr	r3, [sp, #20]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	dd05      	ble.n	80193e0 <_dtoa_r+0x848>
 80193d4:	4629      	mov	r1, r5
 80193d6:	461a      	mov	r2, r3
 80193d8:	4650      	mov	r0, sl
 80193da:	f000 fdf9 	bl	8019fd0 <__lshift>
 80193de:	4605      	mov	r5, r0
 80193e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80193e2:	b1eb      	cbz	r3, 8019420 <_dtoa_r+0x888>
 80193e4:	4629      	mov	r1, r5
 80193e6:	9802      	ldr	r0, [sp, #8]
 80193e8:	f000 fe43 	bl	801a072 <__mcmp>
 80193ec:	2800      	cmp	r0, #0
 80193ee:	da17      	bge.n	8019420 <_dtoa_r+0x888>
 80193f0:	2300      	movs	r3, #0
 80193f2:	220a      	movs	r2, #10
 80193f4:	9902      	ldr	r1, [sp, #8]
 80193f6:	4650      	mov	r0, sl
 80193f8:	f000 fc7a 	bl	8019cf0 <__multadd>
 80193fc:	9b08      	ldr	r3, [sp, #32]
 80193fe:	9002      	str	r0, [sp, #8]
 8019400:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019404:	2b00      	cmp	r3, #0
 8019406:	f000 8158 	beq.w	80196ba <_dtoa_r+0xb22>
 801940a:	2300      	movs	r3, #0
 801940c:	4631      	mov	r1, r6
 801940e:	220a      	movs	r2, #10
 8019410:	4650      	mov	r0, sl
 8019412:	f000 fc6d 	bl	8019cf0 <__multadd>
 8019416:	9b03      	ldr	r3, [sp, #12]
 8019418:	2b00      	cmp	r3, #0
 801941a:	4606      	mov	r6, r0
 801941c:	dc37      	bgt.n	801948e <_dtoa_r+0x8f6>
 801941e:	e033      	b.n	8019488 <_dtoa_r+0x8f0>
 8019420:	f1b8 0f00 	cmp.w	r8, #0
 8019424:	dc2a      	bgt.n	801947c <_dtoa_r+0x8e4>
 8019426:	9b06      	ldr	r3, [sp, #24]
 8019428:	2b02      	cmp	r3, #2
 801942a:	dd27      	ble.n	801947c <_dtoa_r+0x8e4>
 801942c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019430:	9b03      	ldr	r3, [sp, #12]
 8019432:	b983      	cbnz	r3, 8019456 <_dtoa_r+0x8be>
 8019434:	4629      	mov	r1, r5
 8019436:	2205      	movs	r2, #5
 8019438:	4650      	mov	r0, sl
 801943a:	f000 fc59 	bl	8019cf0 <__multadd>
 801943e:	4601      	mov	r1, r0
 8019440:	4605      	mov	r5, r0
 8019442:	9802      	ldr	r0, [sp, #8]
 8019444:	f000 fe15 	bl	801a072 <__mcmp>
 8019448:	2800      	cmp	r0, #0
 801944a:	dc0d      	bgt.n	8019468 <_dtoa_r+0x8d0>
 801944c:	e003      	b.n	8019456 <_dtoa_r+0x8be>
 801944e:	463d      	mov	r5, r7
 8019450:	e000      	b.n	8019454 <_dtoa_r+0x8bc>
 8019452:	2500      	movs	r5, #0
 8019454:	462e      	mov	r6, r5
 8019456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019458:	9c04      	ldr	r4, [sp, #16]
 801945a:	ea6f 0b03 	mvn.w	fp, r3
 801945e:	e00a      	b.n	8019476 <_dtoa_r+0x8de>
 8019460:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8019464:	463d      	mov	r5, r7
 8019466:	463e      	mov	r6, r7
 8019468:	9b04      	ldr	r3, [sp, #16]
 801946a:	9a04      	ldr	r2, [sp, #16]
 801946c:	1c5c      	adds	r4, r3, #1
 801946e:	2331      	movs	r3, #49	; 0x31
 8019470:	7013      	strb	r3, [r2, #0]
 8019472:	f10b 0b01 	add.w	fp, fp, #1
 8019476:	46b0      	mov	r8, r6
 8019478:	2600      	movs	r6, #0
 801947a:	e0f7      	b.n	801966c <_dtoa_r+0xad4>
 801947c:	9b08      	ldr	r3, [sp, #32]
 801947e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019482:	b923      	cbnz	r3, 801948e <_dtoa_r+0x8f6>
 8019484:	9c04      	ldr	r4, [sp, #16]
 8019486:	e0b1      	b.n	80195ec <_dtoa_r+0xa54>
 8019488:	9b06      	ldr	r3, [sp, #24]
 801948a:	2b02      	cmp	r3, #2
 801948c:	dcd0      	bgt.n	8019430 <_dtoa_r+0x898>
 801948e:	2c00      	cmp	r4, #0
 8019490:	dd05      	ble.n	801949e <_dtoa_r+0x906>
 8019492:	4631      	mov	r1, r6
 8019494:	4622      	mov	r2, r4
 8019496:	4650      	mov	r0, sl
 8019498:	f000 fd9a 	bl	8019fd0 <__lshift>
 801949c:	4606      	mov	r6, r0
 801949e:	b19f      	cbz	r7, 80194c8 <_dtoa_r+0x930>
 80194a0:	6871      	ldr	r1, [r6, #4]
 80194a2:	4650      	mov	r0, sl
 80194a4:	f000 fbd8 	bl	8019c58 <_Balloc>
 80194a8:	6932      	ldr	r2, [r6, #16]
 80194aa:	3202      	adds	r2, #2
 80194ac:	4604      	mov	r4, r0
 80194ae:	0092      	lsls	r2, r2, #2
 80194b0:	f106 010c 	add.w	r1, r6, #12
 80194b4:	300c      	adds	r0, #12
 80194b6:	f7fd fcf0 	bl	8016e9a <memcpy>
 80194ba:	2201      	movs	r2, #1
 80194bc:	4621      	mov	r1, r4
 80194be:	4650      	mov	r0, sl
 80194c0:	f000 fd86 	bl	8019fd0 <__lshift>
 80194c4:	4680      	mov	r8, r0
 80194c6:	e000      	b.n	80194ca <_dtoa_r+0x932>
 80194c8:	46b0      	mov	r8, r6
 80194ca:	9b00      	ldr	r3, [sp, #0]
 80194cc:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80194d0:	f003 0301 	and.w	r3, r3, #1
 80194d4:	9305      	str	r3, [sp, #20]
 80194d6:	4629      	mov	r1, r5
 80194d8:	9802      	ldr	r0, [sp, #8]
 80194da:	f7ff facd 	bl	8018a78 <quorem>
 80194de:	4631      	mov	r1, r6
 80194e0:	4604      	mov	r4, r0
 80194e2:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80194e6:	9802      	ldr	r0, [sp, #8]
 80194e8:	f000 fdc3 	bl	801a072 <__mcmp>
 80194ec:	4642      	mov	r2, r8
 80194ee:	9000      	str	r0, [sp, #0]
 80194f0:	4629      	mov	r1, r5
 80194f2:	4650      	mov	r0, sl
 80194f4:	f000 fdd9 	bl	801a0aa <__mdiff>
 80194f8:	68c3      	ldr	r3, [r0, #12]
 80194fa:	4602      	mov	r2, r0
 80194fc:	b93b      	cbnz	r3, 801950e <_dtoa_r+0x976>
 80194fe:	4601      	mov	r1, r0
 8019500:	9007      	str	r0, [sp, #28]
 8019502:	9802      	ldr	r0, [sp, #8]
 8019504:	f000 fdb5 	bl	801a072 <__mcmp>
 8019508:	9a07      	ldr	r2, [sp, #28]
 801950a:	4603      	mov	r3, r0
 801950c:	e000      	b.n	8019510 <_dtoa_r+0x978>
 801950e:	2301      	movs	r3, #1
 8019510:	4611      	mov	r1, r2
 8019512:	4650      	mov	r0, sl
 8019514:	9307      	str	r3, [sp, #28]
 8019516:	f000 fbd4 	bl	8019cc2 <_Bfree>
 801951a:	9b07      	ldr	r3, [sp, #28]
 801951c:	b94b      	cbnz	r3, 8019532 <_dtoa_r+0x99a>
 801951e:	9a06      	ldr	r2, [sp, #24]
 8019520:	b93a      	cbnz	r2, 8019532 <_dtoa_r+0x99a>
 8019522:	9a05      	ldr	r2, [sp, #20]
 8019524:	b92a      	cbnz	r2, 8019532 <_dtoa_r+0x99a>
 8019526:	2f39      	cmp	r7, #57	; 0x39
 8019528:	d028      	beq.n	801957c <_dtoa_r+0x9e4>
 801952a:	9b00      	ldr	r3, [sp, #0]
 801952c:	2b00      	cmp	r3, #0
 801952e:	dc1a      	bgt.n	8019566 <_dtoa_r+0x9ce>
 8019530:	e01b      	b.n	801956a <_dtoa_r+0x9d2>
 8019532:	9a00      	ldr	r2, [sp, #0]
 8019534:	2a00      	cmp	r2, #0
 8019536:	db04      	blt.n	8019542 <_dtoa_r+0x9aa>
 8019538:	d11a      	bne.n	8019570 <_dtoa_r+0x9d8>
 801953a:	9a06      	ldr	r2, [sp, #24]
 801953c:	b9c2      	cbnz	r2, 8019570 <_dtoa_r+0x9d8>
 801953e:	9a05      	ldr	r2, [sp, #20]
 8019540:	b9b2      	cbnz	r2, 8019570 <_dtoa_r+0x9d8>
 8019542:	2b00      	cmp	r3, #0
 8019544:	dd11      	ble.n	801956a <_dtoa_r+0x9d2>
 8019546:	2201      	movs	r2, #1
 8019548:	9902      	ldr	r1, [sp, #8]
 801954a:	4650      	mov	r0, sl
 801954c:	f000 fd40 	bl	8019fd0 <__lshift>
 8019550:	4629      	mov	r1, r5
 8019552:	9002      	str	r0, [sp, #8]
 8019554:	f000 fd8d 	bl	801a072 <__mcmp>
 8019558:	2800      	cmp	r0, #0
 801955a:	dc02      	bgt.n	8019562 <_dtoa_r+0x9ca>
 801955c:	d105      	bne.n	801956a <_dtoa_r+0x9d2>
 801955e:	07fa      	lsls	r2, r7, #31
 8019560:	d503      	bpl.n	801956a <_dtoa_r+0x9d2>
 8019562:	2f39      	cmp	r7, #57	; 0x39
 8019564:	d00a      	beq.n	801957c <_dtoa_r+0x9e4>
 8019566:	f104 0731 	add.w	r7, r4, #49	; 0x31
 801956a:	f109 0401 	add.w	r4, r9, #1
 801956e:	e00c      	b.n	801958a <_dtoa_r+0x9f2>
 8019570:	2b00      	cmp	r3, #0
 8019572:	f109 0401 	add.w	r4, r9, #1
 8019576:	dd0b      	ble.n	8019590 <_dtoa_r+0x9f8>
 8019578:	2f39      	cmp	r7, #57	; 0x39
 801957a:	d105      	bne.n	8019588 <_dtoa_r+0x9f0>
 801957c:	2339      	movs	r3, #57	; 0x39
 801957e:	f889 3000 	strb.w	r3, [r9]
 8019582:	f109 0901 	add.w	r9, r9, #1
 8019586:	e054      	b.n	8019632 <_dtoa_r+0xa9a>
 8019588:	3701      	adds	r7, #1
 801958a:	f889 7000 	strb.w	r7, [r9]
 801958e:	e06d      	b.n	801966c <_dtoa_r+0xad4>
 8019590:	9b04      	ldr	r3, [sp, #16]
 8019592:	9a03      	ldr	r2, [sp, #12]
 8019594:	f804 7c01 	strb.w	r7, [r4, #-1]
 8019598:	1ae3      	subs	r3, r4, r3
 801959a:	4293      	cmp	r3, r2
 801959c:	46a1      	mov	r9, r4
 801959e:	d03a      	beq.n	8019616 <_dtoa_r+0xa7e>
 80195a0:	2300      	movs	r3, #0
 80195a2:	220a      	movs	r2, #10
 80195a4:	9902      	ldr	r1, [sp, #8]
 80195a6:	4650      	mov	r0, sl
 80195a8:	f000 fba2 	bl	8019cf0 <__multadd>
 80195ac:	4546      	cmp	r6, r8
 80195ae:	9002      	str	r0, [sp, #8]
 80195b0:	f04f 0300 	mov.w	r3, #0
 80195b4:	f04f 020a 	mov.w	r2, #10
 80195b8:	4631      	mov	r1, r6
 80195ba:	4650      	mov	r0, sl
 80195bc:	d104      	bne.n	80195c8 <_dtoa_r+0xa30>
 80195be:	f000 fb97 	bl	8019cf0 <__multadd>
 80195c2:	4606      	mov	r6, r0
 80195c4:	4680      	mov	r8, r0
 80195c6:	e786      	b.n	80194d6 <_dtoa_r+0x93e>
 80195c8:	f000 fb92 	bl	8019cf0 <__multadd>
 80195cc:	4641      	mov	r1, r8
 80195ce:	4606      	mov	r6, r0
 80195d0:	2300      	movs	r3, #0
 80195d2:	220a      	movs	r2, #10
 80195d4:	4650      	mov	r0, sl
 80195d6:	f000 fb8b 	bl	8019cf0 <__multadd>
 80195da:	4680      	mov	r8, r0
 80195dc:	e77b      	b.n	80194d6 <_dtoa_r+0x93e>
 80195de:	2300      	movs	r3, #0
 80195e0:	220a      	movs	r2, #10
 80195e2:	9902      	ldr	r1, [sp, #8]
 80195e4:	4650      	mov	r0, sl
 80195e6:	f000 fb83 	bl	8019cf0 <__multadd>
 80195ea:	9002      	str	r0, [sp, #8]
 80195ec:	4629      	mov	r1, r5
 80195ee:	9802      	ldr	r0, [sp, #8]
 80195f0:	f7ff fa42 	bl	8018a78 <quorem>
 80195f4:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80195f8:	f804 7b01 	strb.w	r7, [r4], #1
 80195fc:	9b04      	ldr	r3, [sp, #16]
 80195fe:	9a03      	ldr	r2, [sp, #12]
 8019600:	1ae3      	subs	r3, r4, r3
 8019602:	4293      	cmp	r3, r2
 8019604:	dbeb      	blt.n	80195de <_dtoa_r+0xa46>
 8019606:	9b04      	ldr	r3, [sp, #16]
 8019608:	2a01      	cmp	r2, #1
 801960a:	bfac      	ite	ge
 801960c:	189b      	addge	r3, r3, r2
 801960e:	3301      	addlt	r3, #1
 8019610:	46b0      	mov	r8, r6
 8019612:	4699      	mov	r9, r3
 8019614:	2600      	movs	r6, #0
 8019616:	2201      	movs	r2, #1
 8019618:	9902      	ldr	r1, [sp, #8]
 801961a:	4650      	mov	r0, sl
 801961c:	f000 fcd8 	bl	8019fd0 <__lshift>
 8019620:	4629      	mov	r1, r5
 8019622:	9002      	str	r0, [sp, #8]
 8019624:	f000 fd25 	bl	801a072 <__mcmp>
 8019628:	2800      	cmp	r0, #0
 801962a:	dc02      	bgt.n	8019632 <_dtoa_r+0xa9a>
 801962c:	d115      	bne.n	801965a <_dtoa_r+0xac2>
 801962e:	07fb      	lsls	r3, r7, #31
 8019630:	d513      	bpl.n	801965a <_dtoa_r+0xac2>
 8019632:	464c      	mov	r4, r9
 8019634:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8019638:	2b39      	cmp	r3, #57	; 0x39
 801963a:	f104 32ff 	add.w	r2, r4, #4294967295
 801963e:	d109      	bne.n	8019654 <_dtoa_r+0xabc>
 8019640:	9b04      	ldr	r3, [sp, #16]
 8019642:	4293      	cmp	r3, r2
 8019644:	d104      	bne.n	8019650 <_dtoa_r+0xab8>
 8019646:	f10b 0b01 	add.w	fp, fp, #1
 801964a:	2331      	movs	r3, #49	; 0x31
 801964c:	9a04      	ldr	r2, [sp, #16]
 801964e:	e002      	b.n	8019656 <_dtoa_r+0xabe>
 8019650:	4614      	mov	r4, r2
 8019652:	e7ef      	b.n	8019634 <_dtoa_r+0xa9c>
 8019654:	3301      	adds	r3, #1
 8019656:	7013      	strb	r3, [r2, #0]
 8019658:	e008      	b.n	801966c <_dtoa_r+0xad4>
 801965a:	464c      	mov	r4, r9
 801965c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8019660:	2b30      	cmp	r3, #48	; 0x30
 8019662:	f104 32ff 	add.w	r2, r4, #4294967295
 8019666:	d101      	bne.n	801966c <_dtoa_r+0xad4>
 8019668:	4614      	mov	r4, r2
 801966a:	e7f7      	b.n	801965c <_dtoa_r+0xac4>
 801966c:	4629      	mov	r1, r5
 801966e:	4650      	mov	r0, sl
 8019670:	f000 fb27 	bl	8019cc2 <_Bfree>
 8019674:	f1b8 0f00 	cmp.w	r8, #0
 8019678:	d00d      	beq.n	8019696 <_dtoa_r+0xafe>
 801967a:	b12e      	cbz	r6, 8019688 <_dtoa_r+0xaf0>
 801967c:	4546      	cmp	r6, r8
 801967e:	d003      	beq.n	8019688 <_dtoa_r+0xaf0>
 8019680:	4631      	mov	r1, r6
 8019682:	4650      	mov	r0, sl
 8019684:	f000 fb1d 	bl	8019cc2 <_Bfree>
 8019688:	4641      	mov	r1, r8
 801968a:	4650      	mov	r0, sl
 801968c:	f000 fb19 	bl	8019cc2 <_Bfree>
 8019690:	e001      	b.n	8019696 <_dtoa_r+0xafe>
 8019692:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8019696:	9902      	ldr	r1, [sp, #8]
 8019698:	4650      	mov	r0, sl
 801969a:	f000 fb12 	bl	8019cc2 <_Bfree>
 801969e:	2300      	movs	r3, #0
 80196a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80196a2:	7023      	strb	r3, [r4, #0]
 80196a4:	f10b 0301 	add.w	r3, fp, #1
 80196a8:	6013      	str	r3, [r2, #0]
 80196aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80196ac:	b11b      	cbz	r3, 80196b6 <_dtoa_r+0xb1e>
 80196ae:	601c      	str	r4, [r3, #0]
 80196b0:	e001      	b.n	80196b6 <_dtoa_r+0xb1e>
 80196b2:	4808      	ldr	r0, [pc, #32]	; (80196d4 <_dtoa_r+0xb3c>)
 80196b4:	e00a      	b.n	80196cc <_dtoa_r+0xb34>
 80196b6:	9804      	ldr	r0, [sp, #16]
 80196b8:	e008      	b.n	80196cc <_dtoa_r+0xb34>
 80196ba:	9b03      	ldr	r3, [sp, #12]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	f73f aee1 	bgt.w	8019484 <_dtoa_r+0x8ec>
 80196c2:	9b06      	ldr	r3, [sp, #24]
 80196c4:	2b02      	cmp	r3, #2
 80196c6:	f77f aedd 	ble.w	8019484 <_dtoa_r+0x8ec>
 80196ca:	e6b1      	b.n	8019430 <_dtoa_r+0x898>
 80196cc:	b017      	add	sp, #92	; 0x5c
 80196ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196d2:	bf00      	nop
 80196d4:	0801cf54 	.word	0x0801cf54

080196d8 <__sflush_r>:
 80196d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80196dc:	b293      	uxth	r3, r2
 80196de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196e2:	4605      	mov	r5, r0
 80196e4:	0718      	lsls	r0, r3, #28
 80196e6:	460c      	mov	r4, r1
 80196e8:	d460      	bmi.n	80197ac <__sflush_r+0xd4>
 80196ea:	684b      	ldr	r3, [r1, #4]
 80196ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	818a      	strh	r2, [r1, #12]
 80196f4:	dc02      	bgt.n	80196fc <__sflush_r+0x24>
 80196f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	dd17      	ble.n	801972c <__sflush_r+0x54>
 80196fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80196fe:	b1ae      	cbz	r6, 801972c <__sflush_r+0x54>
 8019700:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8019704:	2300      	movs	r3, #0
 8019706:	b292      	uxth	r2, r2
 8019708:	682f      	ldr	r7, [r5, #0]
 801970a:	602b      	str	r3, [r5, #0]
 801970c:	b10a      	cbz	r2, 8019712 <__sflush_r+0x3a>
 801970e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019710:	e015      	b.n	801973e <__sflush_r+0x66>
 8019712:	6a21      	ldr	r1, [r4, #32]
 8019714:	2301      	movs	r3, #1
 8019716:	4628      	mov	r0, r5
 8019718:	47b0      	blx	r6
 801971a:	1c41      	adds	r1, r0, #1
 801971c:	d10f      	bne.n	801973e <__sflush_r+0x66>
 801971e:	682b      	ldr	r3, [r5, #0]
 8019720:	b16b      	cbz	r3, 801973e <__sflush_r+0x66>
 8019722:	2b1d      	cmp	r3, #29
 8019724:	d001      	beq.n	801972a <__sflush_r+0x52>
 8019726:	2b16      	cmp	r3, #22
 8019728:	d103      	bne.n	8019732 <__sflush_r+0x5a>
 801972a:	602f      	str	r7, [r5, #0]
 801972c:	2000      	movs	r0, #0
 801972e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019732:	89a3      	ldrh	r3, [r4, #12]
 8019734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019738:	81a3      	strh	r3, [r4, #12]
 801973a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801973e:	89a3      	ldrh	r3, [r4, #12]
 8019740:	075a      	lsls	r2, r3, #29
 8019742:	d505      	bpl.n	8019750 <__sflush_r+0x78>
 8019744:	6863      	ldr	r3, [r4, #4]
 8019746:	1ac0      	subs	r0, r0, r3
 8019748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801974a:	b10b      	cbz	r3, 8019750 <__sflush_r+0x78>
 801974c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801974e:	1ac0      	subs	r0, r0, r3
 8019750:	2300      	movs	r3, #0
 8019752:	4602      	mov	r2, r0
 8019754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019756:	6a21      	ldr	r1, [r4, #32]
 8019758:	4628      	mov	r0, r5
 801975a:	47b0      	blx	r6
 801975c:	1c43      	adds	r3, r0, #1
 801975e:	89a3      	ldrh	r3, [r4, #12]
 8019760:	d106      	bne.n	8019770 <__sflush_r+0x98>
 8019762:	6829      	ldr	r1, [r5, #0]
 8019764:	291d      	cmp	r1, #29
 8019766:	d83e      	bhi.n	80197e6 <__sflush_r+0x10e>
 8019768:	4a22      	ldr	r2, [pc, #136]	; (80197f4 <__sflush_r+0x11c>)
 801976a:	40ca      	lsrs	r2, r1
 801976c:	07d6      	lsls	r6, r2, #31
 801976e:	d53a      	bpl.n	80197e6 <__sflush_r+0x10e>
 8019770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019774:	b21b      	sxth	r3, r3
 8019776:	2200      	movs	r2, #0
 8019778:	6062      	str	r2, [r4, #4]
 801977a:	04d9      	lsls	r1, r3, #19
 801977c:	6922      	ldr	r2, [r4, #16]
 801977e:	81a3      	strh	r3, [r4, #12]
 8019780:	6022      	str	r2, [r4, #0]
 8019782:	d504      	bpl.n	801978e <__sflush_r+0xb6>
 8019784:	1c42      	adds	r2, r0, #1
 8019786:	d101      	bne.n	801978c <__sflush_r+0xb4>
 8019788:	682b      	ldr	r3, [r5, #0]
 801978a:	b903      	cbnz	r3, 801978e <__sflush_r+0xb6>
 801978c:	6560      	str	r0, [r4, #84]	; 0x54
 801978e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019790:	602f      	str	r7, [r5, #0]
 8019792:	2900      	cmp	r1, #0
 8019794:	d0ca      	beq.n	801972c <__sflush_r+0x54>
 8019796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801979a:	4299      	cmp	r1, r3
 801979c:	d002      	beq.n	80197a4 <__sflush_r+0xcc>
 801979e:	4628      	mov	r0, r5
 80197a0:	f000 f95c 	bl	8019a5c <_free_r>
 80197a4:	2000      	movs	r0, #0
 80197a6:	6360      	str	r0, [r4, #52]	; 0x34
 80197a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197ac:	690f      	ldr	r7, [r1, #16]
 80197ae:	2f00      	cmp	r7, #0
 80197b0:	d0bc      	beq.n	801972c <__sflush_r+0x54>
 80197b2:	079b      	lsls	r3, r3, #30
 80197b4:	680e      	ldr	r6, [r1, #0]
 80197b6:	bf08      	it	eq
 80197b8:	694b      	ldreq	r3, [r1, #20]
 80197ba:	600f      	str	r7, [r1, #0]
 80197bc:	bf18      	it	ne
 80197be:	2300      	movne	r3, #0
 80197c0:	ebc7 0806 	rsb	r8, r7, r6
 80197c4:	608b      	str	r3, [r1, #8]
 80197c6:	e002      	b.n	80197ce <__sflush_r+0xf6>
 80197c8:	4407      	add	r7, r0
 80197ca:	ebc0 0808 	rsb	r8, r0, r8
 80197ce:	f1b8 0f00 	cmp.w	r8, #0
 80197d2:	ddab      	ble.n	801972c <__sflush_r+0x54>
 80197d4:	4643      	mov	r3, r8
 80197d6:	463a      	mov	r2, r7
 80197d8:	6a21      	ldr	r1, [r4, #32]
 80197da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80197dc:	4628      	mov	r0, r5
 80197de:	47b0      	blx	r6
 80197e0:	2800      	cmp	r0, #0
 80197e2:	dcf1      	bgt.n	80197c8 <__sflush_r+0xf0>
 80197e4:	89a3      	ldrh	r3, [r4, #12]
 80197e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197ea:	81a3      	strh	r3, [r4, #12]
 80197ec:	f04f 30ff 	mov.w	r0, #4294967295
 80197f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197f4:	20400001 	.word	0x20400001

080197f8 <_fflush_r>:
 80197f8:	b538      	push	{r3, r4, r5, lr}
 80197fa:	690b      	ldr	r3, [r1, #16]
 80197fc:	4605      	mov	r5, r0
 80197fe:	460c      	mov	r4, r1
 8019800:	b1db      	cbz	r3, 801983a <_fflush_r+0x42>
 8019802:	b118      	cbz	r0, 801980c <_fflush_r+0x14>
 8019804:	6983      	ldr	r3, [r0, #24]
 8019806:	b90b      	cbnz	r3, 801980c <_fflush_r+0x14>
 8019808:	f000 f860 	bl	80198cc <__sinit>
 801980c:	4b0c      	ldr	r3, [pc, #48]	; (8019840 <_fflush_r+0x48>)
 801980e:	429c      	cmp	r4, r3
 8019810:	d101      	bne.n	8019816 <_fflush_r+0x1e>
 8019812:	686c      	ldr	r4, [r5, #4]
 8019814:	e008      	b.n	8019828 <_fflush_r+0x30>
 8019816:	4b0b      	ldr	r3, [pc, #44]	; (8019844 <_fflush_r+0x4c>)
 8019818:	429c      	cmp	r4, r3
 801981a:	d101      	bne.n	8019820 <_fflush_r+0x28>
 801981c:	68ac      	ldr	r4, [r5, #8]
 801981e:	e003      	b.n	8019828 <_fflush_r+0x30>
 8019820:	4b09      	ldr	r3, [pc, #36]	; (8019848 <_fflush_r+0x50>)
 8019822:	429c      	cmp	r4, r3
 8019824:	bf08      	it	eq
 8019826:	68ec      	ldreq	r4, [r5, #12]
 8019828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801982c:	b12b      	cbz	r3, 801983a <_fflush_r+0x42>
 801982e:	4621      	mov	r1, r4
 8019830:	4628      	mov	r0, r5
 8019832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019836:	f7ff bf4f 	b.w	80196d8 <__sflush_r>
 801983a:	2000      	movs	r0, #0
 801983c:	bd38      	pop	{r3, r4, r5, pc}
 801983e:	bf00      	nop
 8019840:	0801cf74 	.word	0x0801cf74
 8019844:	0801cf94 	.word	0x0801cf94
 8019848:	0801cfb4 	.word	0x0801cfb4

0801984c <_cleanup_r>:
 801984c:	4901      	ldr	r1, [pc, #4]	; (8019854 <_cleanup_r+0x8>)
 801984e:	f000 b9c3 	b.w	8019bd8 <_fwalk_reent>
 8019852:	bf00      	nop
 8019854:	0801a381 	.word	0x0801a381

08019858 <std.isra.0>:
 8019858:	2300      	movs	r3, #0
 801985a:	b510      	push	{r4, lr}
 801985c:	4604      	mov	r4, r0
 801985e:	6003      	str	r3, [r0, #0]
 8019860:	6043      	str	r3, [r0, #4]
 8019862:	6083      	str	r3, [r0, #8]
 8019864:	8181      	strh	r1, [r0, #12]
 8019866:	6643      	str	r3, [r0, #100]	; 0x64
 8019868:	81c2      	strh	r2, [r0, #14]
 801986a:	6103      	str	r3, [r0, #16]
 801986c:	6143      	str	r3, [r0, #20]
 801986e:	6183      	str	r3, [r0, #24]
 8019870:	4619      	mov	r1, r3
 8019872:	2208      	movs	r2, #8
 8019874:	305c      	adds	r0, #92	; 0x5c
 8019876:	f7fd fb36 	bl	8016ee6 <memset>
 801987a:	4b05      	ldr	r3, [pc, #20]	; (8019890 <std.isra.0+0x38>)
 801987c:	6263      	str	r3, [r4, #36]	; 0x24
 801987e:	4b05      	ldr	r3, [pc, #20]	; (8019894 <std.isra.0+0x3c>)
 8019880:	62a3      	str	r3, [r4, #40]	; 0x28
 8019882:	4b05      	ldr	r3, [pc, #20]	; (8019898 <std.isra.0+0x40>)
 8019884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019886:	4b05      	ldr	r3, [pc, #20]	; (801989c <std.isra.0+0x44>)
 8019888:	6224      	str	r4, [r4, #32]
 801988a:	6323      	str	r3, [r4, #48]	; 0x30
 801988c:	bd10      	pop	{r4, pc}
 801988e:	bf00      	nop
 8019890:	080173bd 	.word	0x080173bd
 8019894:	080173df 	.word	0x080173df
 8019898:	08017417 	.word	0x08017417
 801989c:	0801743b 	.word	0x0801743b

080198a0 <__sfmoreglue>:
 80198a0:	b570      	push	{r4, r5, r6, lr}
 80198a2:	2368      	movs	r3, #104	; 0x68
 80198a4:	1e4d      	subs	r5, r1, #1
 80198a6:	435d      	muls	r5, r3
 80198a8:	460e      	mov	r6, r1
 80198aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80198ae:	f7fd f8c5 	bl	8016a3c <_malloc_r>
 80198b2:	4604      	mov	r4, r0
 80198b4:	b140      	cbz	r0, 80198c8 <__sfmoreglue+0x28>
 80198b6:	2100      	movs	r1, #0
 80198b8:	e880 0042 	stmia.w	r0, {r1, r6}
 80198bc:	300c      	adds	r0, #12
 80198be:	60a0      	str	r0, [r4, #8]
 80198c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80198c4:	f7fd fb0f 	bl	8016ee6 <memset>
 80198c8:	4620      	mov	r0, r4
 80198ca:	bd70      	pop	{r4, r5, r6, pc}

080198cc <__sinit>:
 80198cc:	6983      	ldr	r3, [r0, #24]
 80198ce:	b510      	push	{r4, lr}
 80198d0:	4604      	mov	r4, r0
 80198d2:	bb4b      	cbnz	r3, 8019928 <__sinit+0x5c>
 80198d4:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80198d8:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 80198dc:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 80198e0:	4b12      	ldr	r3, [pc, #72]	; (801992c <__sinit+0x60>)
 80198e2:	4a13      	ldr	r2, [pc, #76]	; (8019930 <__sinit+0x64>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	6282      	str	r2, [r0, #40]	; 0x28
 80198e8:	4298      	cmp	r0, r3
 80198ea:	bf04      	itt	eq
 80198ec:	2301      	moveq	r3, #1
 80198ee:	6183      	streq	r3, [r0, #24]
 80198f0:	f000 f820 	bl	8019934 <__sfp>
 80198f4:	6060      	str	r0, [r4, #4]
 80198f6:	4620      	mov	r0, r4
 80198f8:	f000 f81c 	bl	8019934 <__sfp>
 80198fc:	60a0      	str	r0, [r4, #8]
 80198fe:	4620      	mov	r0, r4
 8019900:	f000 f818 	bl	8019934 <__sfp>
 8019904:	2200      	movs	r2, #0
 8019906:	60e0      	str	r0, [r4, #12]
 8019908:	2104      	movs	r1, #4
 801990a:	6860      	ldr	r0, [r4, #4]
 801990c:	f7ff ffa4 	bl	8019858 <std.isra.0>
 8019910:	2201      	movs	r2, #1
 8019912:	2109      	movs	r1, #9
 8019914:	68a0      	ldr	r0, [r4, #8]
 8019916:	f7ff ff9f 	bl	8019858 <std.isra.0>
 801991a:	2202      	movs	r2, #2
 801991c:	2112      	movs	r1, #18
 801991e:	68e0      	ldr	r0, [r4, #12]
 8019920:	f7ff ff9a 	bl	8019858 <std.isra.0>
 8019924:	2301      	movs	r3, #1
 8019926:	61a3      	str	r3, [r4, #24]
 8019928:	bd10      	pop	{r4, pc}
 801992a:	bf00      	nop
 801992c:	0801c86c 	.word	0x0801c86c
 8019930:	0801984d 	.word	0x0801984d

08019934 <__sfp>:
 8019934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019936:	4b1c      	ldr	r3, [pc, #112]	; (80199a8 <__sfp+0x74>)
 8019938:	681e      	ldr	r6, [r3, #0]
 801993a:	69b3      	ldr	r3, [r6, #24]
 801993c:	4607      	mov	r7, r0
 801993e:	b913      	cbnz	r3, 8019946 <__sfp+0x12>
 8019940:	4630      	mov	r0, r6
 8019942:	f7ff ffc3 	bl	80198cc <__sinit>
 8019946:	36d8      	adds	r6, #216	; 0xd8
 8019948:	68b4      	ldr	r4, [r6, #8]
 801994a:	6873      	ldr	r3, [r6, #4]
 801994c:	3b01      	subs	r3, #1
 801994e:	d404      	bmi.n	801995a <__sfp+0x26>
 8019950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019954:	b17d      	cbz	r5, 8019976 <__sfp+0x42>
 8019956:	3468      	adds	r4, #104	; 0x68
 8019958:	e7f8      	b.n	801994c <__sfp+0x18>
 801995a:	6833      	ldr	r3, [r6, #0]
 801995c:	b10b      	cbz	r3, 8019962 <__sfp+0x2e>
 801995e:	6836      	ldr	r6, [r6, #0]
 8019960:	e7f2      	b.n	8019948 <__sfp+0x14>
 8019962:	2104      	movs	r1, #4
 8019964:	4638      	mov	r0, r7
 8019966:	f7ff ff9b 	bl	80198a0 <__sfmoreglue>
 801996a:	6030      	str	r0, [r6, #0]
 801996c:	2800      	cmp	r0, #0
 801996e:	d1f6      	bne.n	801995e <__sfp+0x2a>
 8019970:	230c      	movs	r3, #12
 8019972:	603b      	str	r3, [r7, #0]
 8019974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801997a:	81e3      	strh	r3, [r4, #14]
 801997c:	2301      	movs	r3, #1
 801997e:	81a3      	strh	r3, [r4, #12]
 8019980:	6665      	str	r5, [r4, #100]	; 0x64
 8019982:	6025      	str	r5, [r4, #0]
 8019984:	60a5      	str	r5, [r4, #8]
 8019986:	6065      	str	r5, [r4, #4]
 8019988:	6125      	str	r5, [r4, #16]
 801998a:	6165      	str	r5, [r4, #20]
 801998c:	61a5      	str	r5, [r4, #24]
 801998e:	2208      	movs	r2, #8
 8019990:	4629      	mov	r1, r5
 8019992:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019996:	f7fd faa6 	bl	8016ee6 <memset>
 801999a:	6365      	str	r5, [r4, #52]	; 0x34
 801999c:	63a5      	str	r5, [r4, #56]	; 0x38
 801999e:	64a5      	str	r5, [r4, #72]	; 0x48
 80199a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80199a2:	4620      	mov	r0, r4
 80199a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199a6:	bf00      	nop
 80199a8:	0801c86c 	.word	0x0801c86c

080199ac <__sfp_lock_acquire>:
 80199ac:	4770      	bx	lr

080199ae <__sfp_lock_release>:
 80199ae:	4770      	bx	lr

080199b0 <_malloc_trim_r>:
 80199b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199b4:	4f25      	ldr	r7, [pc, #148]	; (8019a4c <_malloc_trim_r+0x9c>)
 80199b6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8019a58 <_malloc_trim_r+0xa8>
 80199ba:	4689      	mov	r9, r1
 80199bc:	4606      	mov	r6, r0
 80199be:	f7fd fa9a 	bl	8016ef6 <__malloc_lock>
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	685d      	ldr	r5, [r3, #4]
 80199c6:	f1a8 0411 	sub.w	r4, r8, #17
 80199ca:	f025 0503 	bic.w	r5, r5, #3
 80199ce:	442c      	add	r4, r5
 80199d0:	ebc9 0404 	rsb	r4, r9, r4
 80199d4:	fbb4 f4f8 	udiv	r4, r4, r8
 80199d8:	3c01      	subs	r4, #1
 80199da:	fb08 f404 	mul.w	r4, r8, r4
 80199de:	4544      	cmp	r4, r8
 80199e0:	da05      	bge.n	80199ee <_malloc_trim_r+0x3e>
 80199e2:	4630      	mov	r0, r6
 80199e4:	f7fd fa88 	bl	8016ef8 <__malloc_unlock>
 80199e8:	2000      	movs	r0, #0
 80199ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199ee:	2100      	movs	r1, #0
 80199f0:	4630      	mov	r0, r6
 80199f2:	f7fd fc69 	bl	80172c8 <_sbrk_r>
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	442b      	add	r3, r5
 80199fa:	4298      	cmp	r0, r3
 80199fc:	d1f1      	bne.n	80199e2 <_malloc_trim_r+0x32>
 80199fe:	4261      	negs	r1, r4
 8019a00:	4630      	mov	r0, r6
 8019a02:	f7fd fc61 	bl	80172c8 <_sbrk_r>
 8019a06:	3001      	adds	r0, #1
 8019a08:	d110      	bne.n	8019a2c <_malloc_trim_r+0x7c>
 8019a0a:	2100      	movs	r1, #0
 8019a0c:	4630      	mov	r0, r6
 8019a0e:	f7fd fc5b 	bl	80172c8 <_sbrk_r>
 8019a12:	68ba      	ldr	r2, [r7, #8]
 8019a14:	1a83      	subs	r3, r0, r2
 8019a16:	2b0f      	cmp	r3, #15
 8019a18:	dde3      	ble.n	80199e2 <_malloc_trim_r+0x32>
 8019a1a:	490d      	ldr	r1, [pc, #52]	; (8019a50 <_malloc_trim_r+0xa0>)
 8019a1c:	6809      	ldr	r1, [r1, #0]
 8019a1e:	1a40      	subs	r0, r0, r1
 8019a20:	490c      	ldr	r1, [pc, #48]	; (8019a54 <_malloc_trim_r+0xa4>)
 8019a22:	f043 0301 	orr.w	r3, r3, #1
 8019a26:	6008      	str	r0, [r1, #0]
 8019a28:	6053      	str	r3, [r2, #4]
 8019a2a:	e7da      	b.n	80199e2 <_malloc_trim_r+0x32>
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	4a09      	ldr	r2, [pc, #36]	; (8019a54 <_malloc_trim_r+0xa4>)
 8019a30:	1b2d      	subs	r5, r5, r4
 8019a32:	f045 0501 	orr.w	r5, r5, #1
 8019a36:	605d      	str	r5, [r3, #4]
 8019a38:	6813      	ldr	r3, [r2, #0]
 8019a3a:	4630      	mov	r0, r6
 8019a3c:	1b1c      	subs	r4, r3, r4
 8019a3e:	6014      	str	r4, [r2, #0]
 8019a40:	f7fd fa5a 	bl	8016ef8 <__malloc_unlock>
 8019a44:	2001      	movs	r0, #1
 8019a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a4a:	bf00      	nop
 8019a4c:	20000148 	.word	0x20000148
 8019a50:	20000554 	.word	0x20000554
 8019a54:	20004130 	.word	0x20004130
 8019a58:	00001000 	.word	0x00001000

08019a5c <_free_r>:
 8019a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a60:	4604      	mov	r4, r0
 8019a62:	4688      	mov	r8, r1
 8019a64:	2900      	cmp	r1, #0
 8019a66:	f000 80ad 	beq.w	8019bc4 <_free_r+0x168>
 8019a6a:	f7fd fa44 	bl	8016ef6 <__malloc_lock>
 8019a6e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8019a72:	4d55      	ldr	r5, [pc, #340]	; (8019bc8 <_free_r+0x16c>)
 8019a74:	f022 0001 	bic.w	r0, r2, #1
 8019a78:	f1a8 0308 	sub.w	r3, r8, #8
 8019a7c:	181f      	adds	r7, r3, r0
 8019a7e:	68a9      	ldr	r1, [r5, #8]
 8019a80:	687e      	ldr	r6, [r7, #4]
 8019a82:	428f      	cmp	r7, r1
 8019a84:	f026 0603 	bic.w	r6, r6, #3
 8019a88:	f002 0201 	and.w	r2, r2, #1
 8019a8c:	d11b      	bne.n	8019ac6 <_free_r+0x6a>
 8019a8e:	4430      	add	r0, r6
 8019a90:	b93a      	cbnz	r2, 8019aa2 <_free_r+0x46>
 8019a92:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8019a96:	1a9b      	subs	r3, r3, r2
 8019a98:	4410      	add	r0, r2
 8019a9a:	6899      	ldr	r1, [r3, #8]
 8019a9c:	68da      	ldr	r2, [r3, #12]
 8019a9e:	60ca      	str	r2, [r1, #12]
 8019aa0:	6091      	str	r1, [r2, #8]
 8019aa2:	f040 0201 	orr.w	r2, r0, #1
 8019aa6:	605a      	str	r2, [r3, #4]
 8019aa8:	60ab      	str	r3, [r5, #8]
 8019aaa:	4b48      	ldr	r3, [pc, #288]	; (8019bcc <_free_r+0x170>)
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	4298      	cmp	r0, r3
 8019ab0:	d304      	bcc.n	8019abc <_free_r+0x60>
 8019ab2:	4b47      	ldr	r3, [pc, #284]	; (8019bd0 <_free_r+0x174>)
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	6819      	ldr	r1, [r3, #0]
 8019ab8:	f7ff ff7a 	bl	80199b0 <_malloc_trim_r>
 8019abc:	4620      	mov	r0, r4
 8019abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ac2:	f7fd ba19 	b.w	8016ef8 <__malloc_unlock>
 8019ac6:	607e      	str	r6, [r7, #4]
 8019ac8:	b97a      	cbnz	r2, 8019aea <_free_r+0x8e>
 8019aca:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8019ace:	1a5b      	subs	r3, r3, r1
 8019ad0:	4408      	add	r0, r1
 8019ad2:	6899      	ldr	r1, [r3, #8]
 8019ad4:	f105 0e08 	add.w	lr, r5, #8
 8019ad8:	4571      	cmp	r1, lr
 8019ada:	d008      	beq.n	8019aee <_free_r+0x92>
 8019adc:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8019ae0:	f8c1 e00c 	str.w	lr, [r1, #12]
 8019ae4:	f8ce 1008 	str.w	r1, [lr, #8]
 8019ae8:	e002      	b.n	8019af0 <_free_r+0x94>
 8019aea:	2200      	movs	r2, #0
 8019aec:	e000      	b.n	8019af0 <_free_r+0x94>
 8019aee:	2201      	movs	r2, #1
 8019af0:	19b9      	adds	r1, r7, r6
 8019af2:	6849      	ldr	r1, [r1, #4]
 8019af4:	07c9      	lsls	r1, r1, #31
 8019af6:	d40e      	bmi.n	8019b16 <_free_r+0xba>
 8019af8:	4430      	add	r0, r6
 8019afa:	68b9      	ldr	r1, [r7, #8]
 8019afc:	b942      	cbnz	r2, 8019b10 <_free_r+0xb4>
 8019afe:	4e35      	ldr	r6, [pc, #212]	; (8019bd4 <_free_r+0x178>)
 8019b00:	42b1      	cmp	r1, r6
 8019b02:	d105      	bne.n	8019b10 <_free_r+0xb4>
 8019b04:	616b      	str	r3, [r5, #20]
 8019b06:	612b      	str	r3, [r5, #16]
 8019b08:	2201      	movs	r2, #1
 8019b0a:	60d9      	str	r1, [r3, #12]
 8019b0c:	6099      	str	r1, [r3, #8]
 8019b0e:	e002      	b.n	8019b16 <_free_r+0xba>
 8019b10:	68fe      	ldr	r6, [r7, #12]
 8019b12:	60ce      	str	r6, [r1, #12]
 8019b14:	60b1      	str	r1, [r6, #8]
 8019b16:	f040 0101 	orr.w	r1, r0, #1
 8019b1a:	6059      	str	r1, [r3, #4]
 8019b1c:	5018      	str	r0, [r3, r0]
 8019b1e:	2a00      	cmp	r2, #0
 8019b20:	d1cc      	bne.n	8019abc <_free_r+0x60>
 8019b22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8019b26:	d212      	bcs.n	8019b4e <_free_r+0xf2>
 8019b28:	08c0      	lsrs	r0, r0, #3
 8019b2a:	1081      	asrs	r1, r0, #2
 8019b2c:	2201      	movs	r2, #1
 8019b2e:	fa02 f101 	lsl.w	r1, r2, r1
 8019b32:	686a      	ldr	r2, [r5, #4]
 8019b34:	3001      	adds	r0, #1
 8019b36:	430a      	orrs	r2, r1
 8019b38:	606a      	str	r2, [r5, #4]
 8019b3a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8019b3e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8019b42:	6099      	str	r1, [r3, #8]
 8019b44:	3a08      	subs	r2, #8
 8019b46:	60da      	str	r2, [r3, #12]
 8019b48:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8019b4c:	e038      	b.n	8019bc0 <_free_r+0x164>
 8019b4e:	0a42      	lsrs	r2, r0, #9
 8019b50:	2a04      	cmp	r2, #4
 8019b52:	d802      	bhi.n	8019b5a <_free_r+0xfe>
 8019b54:	0982      	lsrs	r2, r0, #6
 8019b56:	3238      	adds	r2, #56	; 0x38
 8019b58:	e015      	b.n	8019b86 <_free_r+0x12a>
 8019b5a:	2a14      	cmp	r2, #20
 8019b5c:	d801      	bhi.n	8019b62 <_free_r+0x106>
 8019b5e:	325b      	adds	r2, #91	; 0x5b
 8019b60:	e011      	b.n	8019b86 <_free_r+0x12a>
 8019b62:	2a54      	cmp	r2, #84	; 0x54
 8019b64:	d802      	bhi.n	8019b6c <_free_r+0x110>
 8019b66:	0b02      	lsrs	r2, r0, #12
 8019b68:	326e      	adds	r2, #110	; 0x6e
 8019b6a:	e00c      	b.n	8019b86 <_free_r+0x12a>
 8019b6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8019b70:	d802      	bhi.n	8019b78 <_free_r+0x11c>
 8019b72:	0bc2      	lsrs	r2, r0, #15
 8019b74:	3277      	adds	r2, #119	; 0x77
 8019b76:	e006      	b.n	8019b86 <_free_r+0x12a>
 8019b78:	f240 5154 	movw	r1, #1364	; 0x554
 8019b7c:	428a      	cmp	r2, r1
 8019b7e:	bf9a      	itte	ls
 8019b80:	0c82      	lsrls	r2, r0, #18
 8019b82:	327c      	addls	r2, #124	; 0x7c
 8019b84:	227e      	movhi	r2, #126	; 0x7e
 8019b86:	1c51      	adds	r1, r2, #1
 8019b88:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8019b8c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8019b90:	4f0d      	ldr	r7, [pc, #52]	; (8019bc8 <_free_r+0x16c>)
 8019b92:	428e      	cmp	r6, r1
 8019b94:	d10b      	bne.n	8019bae <_free_r+0x152>
 8019b96:	2101      	movs	r1, #1
 8019b98:	1092      	asrs	r2, r2, #2
 8019b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8019b9e:	6879      	ldr	r1, [r7, #4]
 8019ba0:	4311      	orrs	r1, r2
 8019ba2:	6079      	str	r1, [r7, #4]
 8019ba4:	4631      	mov	r1, r6
 8019ba6:	e008      	b.n	8019bba <_free_r+0x15e>
 8019ba8:	6889      	ldr	r1, [r1, #8]
 8019baa:	428e      	cmp	r6, r1
 8019bac:	d004      	beq.n	8019bb8 <_free_r+0x15c>
 8019bae:	684a      	ldr	r2, [r1, #4]
 8019bb0:	f022 0203 	bic.w	r2, r2, #3
 8019bb4:	4290      	cmp	r0, r2
 8019bb6:	d3f7      	bcc.n	8019ba8 <_free_r+0x14c>
 8019bb8:	68ce      	ldr	r6, [r1, #12]
 8019bba:	60de      	str	r6, [r3, #12]
 8019bbc:	6099      	str	r1, [r3, #8]
 8019bbe:	60b3      	str	r3, [r6, #8]
 8019bc0:	60cb      	str	r3, [r1, #12]
 8019bc2:	e77b      	b.n	8019abc <_free_r+0x60>
 8019bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bc8:	20000148 	.word	0x20000148
 8019bcc:	20000550 	.word	0x20000550
 8019bd0:	2000412c 	.word	0x2000412c
 8019bd4:	20000150 	.word	0x20000150

08019bd8 <_fwalk_reent>:
 8019bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bdc:	4680      	mov	r8, r0
 8019bde:	4689      	mov	r9, r1
 8019be0:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8019be4:	2600      	movs	r6, #0
 8019be6:	b194      	cbz	r4, 8019c0e <_fwalk_reent+0x36>
 8019be8:	68a5      	ldr	r5, [r4, #8]
 8019bea:	6867      	ldr	r7, [r4, #4]
 8019bec:	3f01      	subs	r7, #1
 8019bee:	d40c      	bmi.n	8019c0a <_fwalk_reent+0x32>
 8019bf0:	89ab      	ldrh	r3, [r5, #12]
 8019bf2:	2b01      	cmp	r3, #1
 8019bf4:	d907      	bls.n	8019c06 <_fwalk_reent+0x2e>
 8019bf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019bfa:	3301      	adds	r3, #1
 8019bfc:	d003      	beq.n	8019c06 <_fwalk_reent+0x2e>
 8019bfe:	4629      	mov	r1, r5
 8019c00:	4640      	mov	r0, r8
 8019c02:	47c8      	blx	r9
 8019c04:	4306      	orrs	r6, r0
 8019c06:	3568      	adds	r5, #104	; 0x68
 8019c08:	e7f0      	b.n	8019bec <_fwalk_reent+0x14>
 8019c0a:	6824      	ldr	r4, [r4, #0]
 8019c0c:	e7eb      	b.n	8019be6 <_fwalk_reent+0xe>
 8019c0e:	4630      	mov	r0, r6
 8019c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019c14 <_isatty_r>:
 8019c14:	b538      	push	{r3, r4, r5, lr}
 8019c16:	4c06      	ldr	r4, [pc, #24]	; (8019c30 <_isatty_r+0x1c>)
 8019c18:	2300      	movs	r3, #0
 8019c1a:	4605      	mov	r5, r0
 8019c1c:	4608      	mov	r0, r1
 8019c1e:	6023      	str	r3, [r4, #0]
 8019c20:	f000 fc18 	bl	801a454 <_isatty>
 8019c24:	1c43      	adds	r3, r0, #1
 8019c26:	d102      	bne.n	8019c2e <_isatty_r+0x1a>
 8019c28:	6823      	ldr	r3, [r4, #0]
 8019c2a:	b103      	cbz	r3, 8019c2e <_isatty_r+0x1a>
 8019c2c:	602b      	str	r3, [r5, #0]
 8019c2e:	bd38      	pop	{r3, r4, r5, pc}
 8019c30:	20004264 	.word	0x20004264

08019c34 <_lseek_r>:
 8019c34:	b538      	push	{r3, r4, r5, lr}
 8019c36:	4c07      	ldr	r4, [pc, #28]	; (8019c54 <_lseek_r+0x20>)
 8019c38:	4605      	mov	r5, r0
 8019c3a:	4608      	mov	r0, r1
 8019c3c:	4611      	mov	r1, r2
 8019c3e:	2200      	movs	r2, #0
 8019c40:	6022      	str	r2, [r4, #0]
 8019c42:	461a      	mov	r2, r3
 8019c44:	f000 fc16 	bl	801a474 <_lseek>
 8019c48:	1c43      	adds	r3, r0, #1
 8019c4a:	d102      	bne.n	8019c52 <_lseek_r+0x1e>
 8019c4c:	6823      	ldr	r3, [r4, #0]
 8019c4e:	b103      	cbz	r3, 8019c52 <_lseek_r+0x1e>
 8019c50:	602b      	str	r3, [r5, #0]
 8019c52:	bd38      	pop	{r3, r4, r5, pc}
 8019c54:	20004264 	.word	0x20004264

08019c58 <_Balloc>:
 8019c58:	b570      	push	{r4, r5, r6, lr}
 8019c5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019c5c:	4604      	mov	r4, r0
 8019c5e:	460e      	mov	r6, r1
 8019c60:	b93d      	cbnz	r5, 8019c72 <_Balloc+0x1a>
 8019c62:	2010      	movs	r0, #16
 8019c64:	f7fc feda 	bl	8016a1c <malloc>
 8019c68:	6260      	str	r0, [r4, #36]	; 0x24
 8019c6a:	6045      	str	r5, [r0, #4]
 8019c6c:	6085      	str	r5, [r0, #8]
 8019c6e:	6005      	str	r5, [r0, #0]
 8019c70:	60c5      	str	r5, [r0, #12]
 8019c72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8019c74:	68eb      	ldr	r3, [r5, #12]
 8019c76:	b143      	cbz	r3, 8019c8a <_Balloc+0x32>
 8019c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019c7a:	68db      	ldr	r3, [r3, #12]
 8019c7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8019c80:	b178      	cbz	r0, 8019ca2 <_Balloc+0x4a>
 8019c82:	6802      	ldr	r2, [r0, #0]
 8019c84:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8019c88:	e017      	b.n	8019cba <_Balloc+0x62>
 8019c8a:	2221      	movs	r2, #33	; 0x21
 8019c8c:	2104      	movs	r1, #4
 8019c8e:	4620      	mov	r0, r4
 8019c90:	f000 fb49 	bl	801a326 <_calloc_r>
 8019c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019c96:	60e8      	str	r0, [r5, #12]
 8019c98:	68db      	ldr	r3, [r3, #12]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d1ec      	bne.n	8019c78 <_Balloc+0x20>
 8019c9e:	2000      	movs	r0, #0
 8019ca0:	bd70      	pop	{r4, r5, r6, pc}
 8019ca2:	2101      	movs	r1, #1
 8019ca4:	fa01 f506 	lsl.w	r5, r1, r6
 8019ca8:	1d6a      	adds	r2, r5, #5
 8019caa:	0092      	lsls	r2, r2, #2
 8019cac:	4620      	mov	r0, r4
 8019cae:	f000 fb3a 	bl	801a326 <_calloc_r>
 8019cb2:	2800      	cmp	r0, #0
 8019cb4:	d0f3      	beq.n	8019c9e <_Balloc+0x46>
 8019cb6:	6046      	str	r6, [r0, #4]
 8019cb8:	6085      	str	r5, [r0, #8]
 8019cba:	2300      	movs	r3, #0
 8019cbc:	6103      	str	r3, [r0, #16]
 8019cbe:	60c3      	str	r3, [r0, #12]
 8019cc0:	bd70      	pop	{r4, r5, r6, pc}

08019cc2 <_Bfree>:
 8019cc2:	b570      	push	{r4, r5, r6, lr}
 8019cc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8019cc6:	4606      	mov	r6, r0
 8019cc8:	460d      	mov	r5, r1
 8019cca:	b93c      	cbnz	r4, 8019cdc <_Bfree+0x1a>
 8019ccc:	2010      	movs	r0, #16
 8019cce:	f7fc fea5 	bl	8016a1c <malloc>
 8019cd2:	6270      	str	r0, [r6, #36]	; 0x24
 8019cd4:	6044      	str	r4, [r0, #4]
 8019cd6:	6084      	str	r4, [r0, #8]
 8019cd8:	6004      	str	r4, [r0, #0]
 8019cda:	60c4      	str	r4, [r0, #12]
 8019cdc:	b13d      	cbz	r5, 8019cee <_Bfree+0x2c>
 8019cde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019ce0:	686a      	ldr	r2, [r5, #4]
 8019ce2:	68db      	ldr	r3, [r3, #12]
 8019ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019ce8:	6029      	str	r1, [r5, #0]
 8019cea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8019cee:	bd70      	pop	{r4, r5, r6, pc}

08019cf0 <__multadd>:
 8019cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf4:	690d      	ldr	r5, [r1, #16]
 8019cf6:	461f      	mov	r7, r3
 8019cf8:	4606      	mov	r6, r0
 8019cfa:	460c      	mov	r4, r1
 8019cfc:	f101 0e14 	add.w	lr, r1, #20
 8019d00:	2300      	movs	r3, #0
 8019d02:	f8de 0000 	ldr.w	r0, [lr]
 8019d06:	b281      	uxth	r1, r0
 8019d08:	fb02 7101 	mla	r1, r2, r1, r7
 8019d0c:	0c0f      	lsrs	r7, r1, #16
 8019d0e:	0c00      	lsrs	r0, r0, #16
 8019d10:	fb02 7000 	mla	r0, r2, r0, r7
 8019d14:	b289      	uxth	r1, r1
 8019d16:	3301      	adds	r3, #1
 8019d18:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8019d1c:	429d      	cmp	r5, r3
 8019d1e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8019d22:	f84e 1b04 	str.w	r1, [lr], #4
 8019d26:	dcec      	bgt.n	8019d02 <__multadd+0x12>
 8019d28:	b1d7      	cbz	r7, 8019d60 <__multadd+0x70>
 8019d2a:	68a3      	ldr	r3, [r4, #8]
 8019d2c:	429d      	cmp	r5, r3
 8019d2e:	db12      	blt.n	8019d56 <__multadd+0x66>
 8019d30:	6861      	ldr	r1, [r4, #4]
 8019d32:	4630      	mov	r0, r6
 8019d34:	3101      	adds	r1, #1
 8019d36:	f7ff ff8f 	bl	8019c58 <_Balloc>
 8019d3a:	6922      	ldr	r2, [r4, #16]
 8019d3c:	3202      	adds	r2, #2
 8019d3e:	f104 010c 	add.w	r1, r4, #12
 8019d42:	4680      	mov	r8, r0
 8019d44:	0092      	lsls	r2, r2, #2
 8019d46:	300c      	adds	r0, #12
 8019d48:	f7fd f8a7 	bl	8016e9a <memcpy>
 8019d4c:	4621      	mov	r1, r4
 8019d4e:	4630      	mov	r0, r6
 8019d50:	f7ff ffb7 	bl	8019cc2 <_Bfree>
 8019d54:	4644      	mov	r4, r8
 8019d56:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019d5a:	3501      	adds	r5, #1
 8019d5c:	615f      	str	r7, [r3, #20]
 8019d5e:	6125      	str	r5, [r4, #16]
 8019d60:	4620      	mov	r0, r4
 8019d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019d66 <__hi0bits>:
 8019d66:	0c03      	lsrs	r3, r0, #16
 8019d68:	041b      	lsls	r3, r3, #16
 8019d6a:	b913      	cbnz	r3, 8019d72 <__hi0bits+0xc>
 8019d6c:	0400      	lsls	r0, r0, #16
 8019d6e:	2310      	movs	r3, #16
 8019d70:	e000      	b.n	8019d74 <__hi0bits+0xe>
 8019d72:	2300      	movs	r3, #0
 8019d74:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019d78:	bf04      	itt	eq
 8019d7a:	0200      	lsleq	r0, r0, #8
 8019d7c:	3308      	addeq	r3, #8
 8019d7e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019d82:	bf04      	itt	eq
 8019d84:	0100      	lsleq	r0, r0, #4
 8019d86:	3304      	addeq	r3, #4
 8019d88:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019d8c:	bf04      	itt	eq
 8019d8e:	0080      	lsleq	r0, r0, #2
 8019d90:	3302      	addeq	r3, #2
 8019d92:	2800      	cmp	r0, #0
 8019d94:	db03      	blt.n	8019d9e <__hi0bits+0x38>
 8019d96:	0042      	lsls	r2, r0, #1
 8019d98:	d503      	bpl.n	8019da2 <__hi0bits+0x3c>
 8019d9a:	1c58      	adds	r0, r3, #1
 8019d9c:	4770      	bx	lr
 8019d9e:	4618      	mov	r0, r3
 8019da0:	4770      	bx	lr
 8019da2:	2020      	movs	r0, #32
 8019da4:	4770      	bx	lr

08019da6 <__lo0bits>:
 8019da6:	6803      	ldr	r3, [r0, #0]
 8019da8:	f013 0207 	ands.w	r2, r3, #7
 8019dac:	d00b      	beq.n	8019dc6 <__lo0bits+0x20>
 8019dae:	07d9      	lsls	r1, r3, #31
 8019db0:	d422      	bmi.n	8019df8 <__lo0bits+0x52>
 8019db2:	079a      	lsls	r2, r3, #30
 8019db4:	bf4b      	itete	mi
 8019db6:	085b      	lsrmi	r3, r3, #1
 8019db8:	089b      	lsrpl	r3, r3, #2
 8019dba:	6003      	strmi	r3, [r0, #0]
 8019dbc:	6003      	strpl	r3, [r0, #0]
 8019dbe:	bf4c      	ite	mi
 8019dc0:	2001      	movmi	r0, #1
 8019dc2:	2002      	movpl	r0, #2
 8019dc4:	4770      	bx	lr
 8019dc6:	b299      	uxth	r1, r3
 8019dc8:	b909      	cbnz	r1, 8019dce <__lo0bits+0x28>
 8019dca:	0c1b      	lsrs	r3, r3, #16
 8019dcc:	2210      	movs	r2, #16
 8019dce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019dd2:	bf04      	itt	eq
 8019dd4:	0a1b      	lsreq	r3, r3, #8
 8019dd6:	3208      	addeq	r2, #8
 8019dd8:	0719      	lsls	r1, r3, #28
 8019dda:	bf04      	itt	eq
 8019ddc:	091b      	lsreq	r3, r3, #4
 8019dde:	3204      	addeq	r2, #4
 8019de0:	0799      	lsls	r1, r3, #30
 8019de2:	bf04      	itt	eq
 8019de4:	089b      	lsreq	r3, r3, #2
 8019de6:	3202      	addeq	r2, #2
 8019de8:	07d9      	lsls	r1, r3, #31
 8019dea:	d402      	bmi.n	8019df2 <__lo0bits+0x4c>
 8019dec:	085b      	lsrs	r3, r3, #1
 8019dee:	d005      	beq.n	8019dfc <__lo0bits+0x56>
 8019df0:	3201      	adds	r2, #1
 8019df2:	6003      	str	r3, [r0, #0]
 8019df4:	4610      	mov	r0, r2
 8019df6:	4770      	bx	lr
 8019df8:	2000      	movs	r0, #0
 8019dfa:	4770      	bx	lr
 8019dfc:	2020      	movs	r0, #32
 8019dfe:	4770      	bx	lr

08019e00 <__i2b>:
 8019e00:	b510      	push	{r4, lr}
 8019e02:	460c      	mov	r4, r1
 8019e04:	2101      	movs	r1, #1
 8019e06:	f7ff ff27 	bl	8019c58 <_Balloc>
 8019e0a:	2201      	movs	r2, #1
 8019e0c:	6144      	str	r4, [r0, #20]
 8019e0e:	6102      	str	r2, [r0, #16]
 8019e10:	bd10      	pop	{r4, pc}

08019e12 <__multiply>:
 8019e12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e16:	4614      	mov	r4, r2
 8019e18:	690a      	ldr	r2, [r1, #16]
 8019e1a:	6923      	ldr	r3, [r4, #16]
 8019e1c:	429a      	cmp	r2, r3
 8019e1e:	bfb8      	it	lt
 8019e20:	460b      	movlt	r3, r1
 8019e22:	4688      	mov	r8, r1
 8019e24:	bfbc      	itt	lt
 8019e26:	46a0      	movlt	r8, r4
 8019e28:	461c      	movlt	r4, r3
 8019e2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019e2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019e36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019e3a:	eb07 0609 	add.w	r6, r7, r9
 8019e3e:	429e      	cmp	r6, r3
 8019e40:	bfc8      	it	gt
 8019e42:	3101      	addgt	r1, #1
 8019e44:	f7ff ff08 	bl	8019c58 <_Balloc>
 8019e48:	f100 0514 	add.w	r5, r0, #20
 8019e4c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8019e50:	462b      	mov	r3, r5
 8019e52:	2200      	movs	r2, #0
 8019e54:	4563      	cmp	r3, ip
 8019e56:	d202      	bcs.n	8019e5e <__multiply+0x4c>
 8019e58:	f843 2b04 	str.w	r2, [r3], #4
 8019e5c:	e7fa      	b.n	8019e54 <__multiply+0x42>
 8019e5e:	f104 0214 	add.w	r2, r4, #20
 8019e62:	f108 0114 	add.w	r1, r8, #20
 8019e66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8019e6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8019e6e:	9300      	str	r3, [sp, #0]
 8019e70:	9b00      	ldr	r3, [sp, #0]
 8019e72:	9201      	str	r2, [sp, #4]
 8019e74:	4293      	cmp	r3, r2
 8019e76:	d957      	bls.n	8019f28 <__multiply+0x116>
 8019e78:	f8b2 b000 	ldrh.w	fp, [r2]
 8019e7c:	f1bb 0f00 	cmp.w	fp, #0
 8019e80:	d023      	beq.n	8019eca <__multiply+0xb8>
 8019e82:	4689      	mov	r9, r1
 8019e84:	46ae      	mov	lr, r5
 8019e86:	f04f 0800 	mov.w	r8, #0
 8019e8a:	f859 4b04 	ldr.w	r4, [r9], #4
 8019e8e:	f8be a000 	ldrh.w	sl, [lr]
 8019e92:	b2a3      	uxth	r3, r4
 8019e94:	fb0b a303 	mla	r3, fp, r3, sl
 8019e98:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019e9c:	f8de 4000 	ldr.w	r4, [lr]
 8019ea0:	4443      	add	r3, r8
 8019ea2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019ea6:	fb0b 840a 	mla	r4, fp, sl, r8
 8019eaa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8019eae:	46f2      	mov	sl, lr
 8019eb0:	b29b      	uxth	r3, r3
 8019eb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019eb6:	454f      	cmp	r7, r9
 8019eb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019ebc:	f84a 3b04 	str.w	r3, [sl], #4
 8019ec0:	d901      	bls.n	8019ec6 <__multiply+0xb4>
 8019ec2:	46d6      	mov	lr, sl
 8019ec4:	e7e1      	b.n	8019e8a <__multiply+0x78>
 8019ec6:	f8ce 8004 	str.w	r8, [lr, #4]
 8019eca:	9b01      	ldr	r3, [sp, #4]
 8019ecc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8019ed0:	3204      	adds	r2, #4
 8019ed2:	f1ba 0f00 	cmp.w	sl, #0
 8019ed6:	d021      	beq.n	8019f1c <__multiply+0x10a>
 8019ed8:	682b      	ldr	r3, [r5, #0]
 8019eda:	462c      	mov	r4, r5
 8019edc:	4689      	mov	r9, r1
 8019ede:	f04f 0800 	mov.w	r8, #0
 8019ee2:	f8b9 e000 	ldrh.w	lr, [r9]
 8019ee6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8019eea:	fb0a be0e 	mla	lr, sl, lr, fp
 8019eee:	44f0      	add	r8, lr
 8019ef0:	46a3      	mov	fp, r4
 8019ef2:	b29b      	uxth	r3, r3
 8019ef4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8019ef8:	f84b 3b04 	str.w	r3, [fp], #4
 8019efc:	f859 3b04 	ldr.w	r3, [r9], #4
 8019f00:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8019f04:	0c1b      	lsrs	r3, r3, #16
 8019f06:	fb0a e303 	mla	r3, sl, r3, lr
 8019f0a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8019f0e:	454f      	cmp	r7, r9
 8019f10:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8019f14:	d901      	bls.n	8019f1a <__multiply+0x108>
 8019f16:	465c      	mov	r4, fp
 8019f18:	e7e3      	b.n	8019ee2 <__multiply+0xd0>
 8019f1a:	6063      	str	r3, [r4, #4]
 8019f1c:	3504      	adds	r5, #4
 8019f1e:	e7a7      	b.n	8019e70 <__multiply+0x5e>
 8019f20:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8019f24:	b913      	cbnz	r3, 8019f2c <__multiply+0x11a>
 8019f26:	3e01      	subs	r6, #1
 8019f28:	2e00      	cmp	r6, #0
 8019f2a:	dcf9      	bgt.n	8019f20 <__multiply+0x10e>
 8019f2c:	6106      	str	r6, [r0, #16]
 8019f2e:	b003      	add	sp, #12
 8019f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f34 <__pow5mult>:
 8019f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f38:	4615      	mov	r5, r2
 8019f3a:	f012 0203 	ands.w	r2, r2, #3
 8019f3e:	4606      	mov	r6, r0
 8019f40:	460f      	mov	r7, r1
 8019f42:	d007      	beq.n	8019f54 <__pow5mult+0x20>
 8019f44:	3a01      	subs	r2, #1
 8019f46:	4c21      	ldr	r4, [pc, #132]	; (8019fcc <__pow5mult+0x98>)
 8019f48:	2300      	movs	r3, #0
 8019f4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019f4e:	f7ff fecf 	bl	8019cf0 <__multadd>
 8019f52:	4607      	mov	r7, r0
 8019f54:	10ad      	asrs	r5, r5, #2
 8019f56:	d036      	beq.n	8019fc6 <__pow5mult+0x92>
 8019f58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019f5a:	b93c      	cbnz	r4, 8019f6c <__pow5mult+0x38>
 8019f5c:	2010      	movs	r0, #16
 8019f5e:	f7fc fd5d 	bl	8016a1c <malloc>
 8019f62:	6270      	str	r0, [r6, #36]	; 0x24
 8019f64:	6044      	str	r4, [r0, #4]
 8019f66:	6084      	str	r4, [r0, #8]
 8019f68:	6004      	str	r4, [r0, #0]
 8019f6a:	60c4      	str	r4, [r0, #12]
 8019f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019f74:	b94c      	cbnz	r4, 8019f8a <__pow5mult+0x56>
 8019f76:	f240 2171 	movw	r1, #625	; 0x271
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	f7ff ff40 	bl	8019e00 <__i2b>
 8019f80:	2300      	movs	r3, #0
 8019f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8019f86:	4604      	mov	r4, r0
 8019f88:	6003      	str	r3, [r0, #0]
 8019f8a:	f04f 0800 	mov.w	r8, #0
 8019f8e:	07eb      	lsls	r3, r5, #31
 8019f90:	d50a      	bpl.n	8019fa8 <__pow5mult+0x74>
 8019f92:	4639      	mov	r1, r7
 8019f94:	4622      	mov	r2, r4
 8019f96:	4630      	mov	r0, r6
 8019f98:	f7ff ff3b 	bl	8019e12 <__multiply>
 8019f9c:	4639      	mov	r1, r7
 8019f9e:	4681      	mov	r9, r0
 8019fa0:	4630      	mov	r0, r6
 8019fa2:	f7ff fe8e 	bl	8019cc2 <_Bfree>
 8019fa6:	464f      	mov	r7, r9
 8019fa8:	106d      	asrs	r5, r5, #1
 8019faa:	d00c      	beq.n	8019fc6 <__pow5mult+0x92>
 8019fac:	6820      	ldr	r0, [r4, #0]
 8019fae:	b108      	cbz	r0, 8019fb4 <__pow5mult+0x80>
 8019fb0:	4604      	mov	r4, r0
 8019fb2:	e7ec      	b.n	8019f8e <__pow5mult+0x5a>
 8019fb4:	4622      	mov	r2, r4
 8019fb6:	4621      	mov	r1, r4
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f7ff ff2a 	bl	8019e12 <__multiply>
 8019fbe:	6020      	str	r0, [r4, #0]
 8019fc0:	f8c0 8000 	str.w	r8, [r0]
 8019fc4:	e7f4      	b.n	8019fb0 <__pow5mult+0x7c>
 8019fc6:	4638      	mov	r0, r7
 8019fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fcc:	0801d0c8 	.word	0x0801d0c8

08019fd0 <__lshift>:
 8019fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fd4:	460c      	mov	r4, r1
 8019fd6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019fda:	6926      	ldr	r6, [r4, #16]
 8019fdc:	6849      	ldr	r1, [r1, #4]
 8019fde:	68a3      	ldr	r3, [r4, #8]
 8019fe0:	4456      	add	r6, sl
 8019fe2:	4607      	mov	r7, r0
 8019fe4:	4691      	mov	r9, r2
 8019fe6:	1c75      	adds	r5, r6, #1
 8019fe8:	42ab      	cmp	r3, r5
 8019fea:	da02      	bge.n	8019ff2 <__lshift+0x22>
 8019fec:	3101      	adds	r1, #1
 8019fee:	005b      	lsls	r3, r3, #1
 8019ff0:	e7fa      	b.n	8019fe8 <__lshift+0x18>
 8019ff2:	4638      	mov	r0, r7
 8019ff4:	f7ff fe30 	bl	8019c58 <_Balloc>
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	4680      	mov	r8, r0
 8019ffc:	f100 0114 	add.w	r1, r0, #20
 801a000:	461a      	mov	r2, r3
 801a002:	4553      	cmp	r3, sl
 801a004:	da03      	bge.n	801a00e <__lshift+0x3e>
 801a006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a00a:	3301      	adds	r3, #1
 801a00c:	e7f9      	b.n	801a002 <__lshift+0x32>
 801a00e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801a012:	6920      	ldr	r0, [r4, #16]
 801a014:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a018:	f019 091f 	ands.w	r9, r9, #31
 801a01c:	f104 0114 	add.w	r1, r4, #20
 801a020:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 801a024:	d014      	beq.n	801a050 <__lshift+0x80>
 801a026:	f1c9 0c20 	rsb	ip, r9, #32
 801a02a:	2200      	movs	r2, #0
 801a02c:	6808      	ldr	r0, [r1, #0]
 801a02e:	fa00 f009 	lsl.w	r0, r0, r9
 801a032:	4302      	orrs	r2, r0
 801a034:	469a      	mov	sl, r3
 801a036:	f843 2b04 	str.w	r2, [r3], #4
 801a03a:	f851 2b04 	ldr.w	r2, [r1], #4
 801a03e:	458e      	cmp	lr, r1
 801a040:	fa22 f20c 	lsr.w	r2, r2, ip
 801a044:	d8f2      	bhi.n	801a02c <__lshift+0x5c>
 801a046:	f8ca 2004 	str.w	r2, [sl, #4]
 801a04a:	b142      	cbz	r2, 801a05e <__lshift+0x8e>
 801a04c:	1cb5      	adds	r5, r6, #2
 801a04e:	e006      	b.n	801a05e <__lshift+0x8e>
 801a050:	3b04      	subs	r3, #4
 801a052:	f851 2b04 	ldr.w	r2, [r1], #4
 801a056:	f843 2f04 	str.w	r2, [r3, #4]!
 801a05a:	458e      	cmp	lr, r1
 801a05c:	d8f9      	bhi.n	801a052 <__lshift+0x82>
 801a05e:	3d01      	subs	r5, #1
 801a060:	4638      	mov	r0, r7
 801a062:	f8c8 5010 	str.w	r5, [r8, #16]
 801a066:	4621      	mov	r1, r4
 801a068:	f7ff fe2b 	bl	8019cc2 <_Bfree>
 801a06c:	4640      	mov	r0, r8
 801a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a072 <__mcmp>:
 801a072:	6903      	ldr	r3, [r0, #16]
 801a074:	690a      	ldr	r2, [r1, #16]
 801a076:	1a9b      	subs	r3, r3, r2
 801a078:	b510      	push	{r4, lr}
 801a07a:	d111      	bne.n	801a0a0 <__mcmp+0x2e>
 801a07c:	0092      	lsls	r2, r2, #2
 801a07e:	3014      	adds	r0, #20
 801a080:	3114      	adds	r1, #20
 801a082:	1883      	adds	r3, r0, r2
 801a084:	440a      	add	r2, r1
 801a086:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801a08a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a08e:	428c      	cmp	r4, r1
 801a090:	d002      	beq.n	801a098 <__mcmp+0x26>
 801a092:	d307      	bcc.n	801a0a4 <__mcmp+0x32>
 801a094:	2001      	movs	r0, #1
 801a096:	bd10      	pop	{r4, pc}
 801a098:	4298      	cmp	r0, r3
 801a09a:	d3f4      	bcc.n	801a086 <__mcmp+0x14>
 801a09c:	2000      	movs	r0, #0
 801a09e:	bd10      	pop	{r4, pc}
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	bd10      	pop	{r4, pc}
 801a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0a8:	bd10      	pop	{r4, pc}

0801a0aa <__mdiff>:
 801a0aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0ae:	460c      	mov	r4, r1
 801a0b0:	4607      	mov	r7, r0
 801a0b2:	4611      	mov	r1, r2
 801a0b4:	4620      	mov	r0, r4
 801a0b6:	4615      	mov	r5, r2
 801a0b8:	f7ff ffdb 	bl	801a072 <__mcmp>
 801a0bc:	1e06      	subs	r6, r0, #0
 801a0be:	d108      	bne.n	801a0d2 <__mdiff+0x28>
 801a0c0:	4631      	mov	r1, r6
 801a0c2:	4638      	mov	r0, r7
 801a0c4:	f7ff fdc8 	bl	8019c58 <_Balloc>
 801a0c8:	2301      	movs	r3, #1
 801a0ca:	6103      	str	r3, [r0, #16]
 801a0cc:	6146      	str	r6, [r0, #20]
 801a0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0d2:	bfbc      	itt	lt
 801a0d4:	4623      	movlt	r3, r4
 801a0d6:	462c      	movlt	r4, r5
 801a0d8:	4638      	mov	r0, r7
 801a0da:	6861      	ldr	r1, [r4, #4]
 801a0dc:	bfba      	itte	lt
 801a0de:	461d      	movlt	r5, r3
 801a0e0:	2601      	movlt	r6, #1
 801a0e2:	2600      	movge	r6, #0
 801a0e4:	f7ff fdb8 	bl	8019c58 <_Balloc>
 801a0e8:	692b      	ldr	r3, [r5, #16]
 801a0ea:	60c6      	str	r6, [r0, #12]
 801a0ec:	6926      	ldr	r6, [r4, #16]
 801a0ee:	f105 0914 	add.w	r9, r5, #20
 801a0f2:	3414      	adds	r4, #20
 801a0f4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 801a0f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a0fc:	f100 0514 	add.w	r5, r0, #20
 801a100:	f04f 0c00 	mov.w	ip, #0
 801a104:	f854 3b04 	ldr.w	r3, [r4], #4
 801a108:	f859 2b04 	ldr.w	r2, [r9], #4
 801a10c:	fa1c f183 	uxtah	r1, ip, r3
 801a110:	fa1f fe82 	uxth.w	lr, r2
 801a114:	0c12      	lsrs	r2, r2, #16
 801a116:	ebce 0101 	rsb	r1, lr, r1
 801a11a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 801a11e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a122:	b289      	uxth	r1, r1
 801a124:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801a128:	45c8      	cmp	r8, r9
 801a12a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a12e:	46a6      	mov	lr, r4
 801a130:	f845 3b04 	str.w	r3, [r5], #4
 801a134:	d8e6      	bhi.n	801a104 <__mdiff+0x5a>
 801a136:	45be      	cmp	lr, r7
 801a138:	d20e      	bcs.n	801a158 <__mdiff+0xae>
 801a13a:	f85e 1b04 	ldr.w	r1, [lr], #4
 801a13e:	fa1c f281 	uxtah	r2, ip, r1
 801a142:	1413      	asrs	r3, r2, #16
 801a144:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 801a148:	b292      	uxth	r2, r2
 801a14a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a14e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801a152:	f845 2b04 	str.w	r2, [r5], #4
 801a156:	e7ee      	b.n	801a136 <__mdiff+0x8c>
 801a158:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a15c:	b90b      	cbnz	r3, 801a162 <__mdiff+0xb8>
 801a15e:	3e01      	subs	r6, #1
 801a160:	e7fa      	b.n	801a158 <__mdiff+0xae>
 801a162:	6106      	str	r6, [r0, #16]
 801a164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a168 <__d2b>:
 801a168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a16c:	460e      	mov	r6, r1
 801a16e:	2101      	movs	r1, #1
 801a170:	ec59 8b10 	vmov	r8, r9, d0
 801a174:	4615      	mov	r5, r2
 801a176:	f7ff fd6f 	bl	8019c58 <_Balloc>
 801a17a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a17e:	4607      	mov	r7, r0
 801a180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a184:	b10c      	cbz	r4, 801a18a <__d2b+0x22>
 801a186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a18a:	9301      	str	r3, [sp, #4]
 801a18c:	f1b8 0f00 	cmp.w	r8, #0
 801a190:	d019      	beq.n	801a1c6 <__d2b+0x5e>
 801a192:	a802      	add	r0, sp, #8
 801a194:	f840 8d08 	str.w	r8, [r0, #-8]!
 801a198:	f7ff fe05 	bl	8019da6 <__lo0bits>
 801a19c:	9b00      	ldr	r3, [sp, #0]
 801a19e:	b148      	cbz	r0, 801a1b4 <__d2b+0x4c>
 801a1a0:	9a01      	ldr	r2, [sp, #4]
 801a1a2:	f1c0 0120 	rsb	r1, r0, #32
 801a1a6:	fa02 f101 	lsl.w	r1, r2, r1
 801a1aa:	430b      	orrs	r3, r1
 801a1ac:	40c2      	lsrs	r2, r0
 801a1ae:	617b      	str	r3, [r7, #20]
 801a1b0:	9201      	str	r2, [sp, #4]
 801a1b2:	e000      	b.n	801a1b6 <__d2b+0x4e>
 801a1b4:	617b      	str	r3, [r7, #20]
 801a1b6:	9b01      	ldr	r3, [sp, #4]
 801a1b8:	61bb      	str	r3, [r7, #24]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	bf14      	ite	ne
 801a1be:	2102      	movne	r1, #2
 801a1c0:	2101      	moveq	r1, #1
 801a1c2:	6139      	str	r1, [r7, #16]
 801a1c4:	e007      	b.n	801a1d6 <__d2b+0x6e>
 801a1c6:	a801      	add	r0, sp, #4
 801a1c8:	f7ff fded 	bl	8019da6 <__lo0bits>
 801a1cc:	9b01      	ldr	r3, [sp, #4]
 801a1ce:	617b      	str	r3, [r7, #20]
 801a1d0:	2101      	movs	r1, #1
 801a1d2:	6139      	str	r1, [r7, #16]
 801a1d4:	3020      	adds	r0, #32
 801a1d6:	b134      	cbz	r4, 801a1e6 <__d2b+0x7e>
 801a1d8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a1dc:	4404      	add	r4, r0
 801a1de:	6034      	str	r4, [r6, #0]
 801a1e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a1e4:	e009      	b.n	801a1fa <__d2b+0x92>
 801a1e6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a1ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a1ee:	6030      	str	r0, [r6, #0]
 801a1f0:	6918      	ldr	r0, [r3, #16]
 801a1f2:	f7ff fdb8 	bl	8019d66 <__hi0bits>
 801a1f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a1fa:	6028      	str	r0, [r5, #0]
 801a1fc:	4638      	mov	r0, r7
 801a1fe:	b003      	add	sp, #12
 801a200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a204 <_read_r>:
 801a204:	b538      	push	{r3, r4, r5, lr}
 801a206:	4c07      	ldr	r4, [pc, #28]	; (801a224 <_read_r+0x20>)
 801a208:	4605      	mov	r5, r0
 801a20a:	4608      	mov	r0, r1
 801a20c:	4611      	mov	r1, r2
 801a20e:	2200      	movs	r2, #0
 801a210:	6022      	str	r2, [r4, #0]
 801a212:	461a      	mov	r2, r3
 801a214:	f000 f936 	bl	801a484 <_read>
 801a218:	1c43      	adds	r3, r0, #1
 801a21a:	d102      	bne.n	801a222 <_read_r+0x1e>
 801a21c:	6823      	ldr	r3, [r4, #0]
 801a21e:	b103      	cbz	r3, 801a222 <_read_r+0x1e>
 801a220:	602b      	str	r3, [r5, #0]
 801a222:	bd38      	pop	{r3, r4, r5, pc}
 801a224:	20004264 	.word	0x20004264

0801a228 <__ssprint_r>:
 801a228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a22c:	4693      	mov	fp, r2
 801a22e:	6892      	ldr	r2, [r2, #8]
 801a230:	4681      	mov	r9, r0
 801a232:	460c      	mov	r4, r1
 801a234:	b34a      	cbz	r2, 801a28a <__ssprint_r+0x62>
 801a236:	2300      	movs	r3, #0
 801a238:	f8db a000 	ldr.w	sl, [fp]
 801a23c:	9301      	str	r3, [sp, #4]
 801a23e:	461f      	mov	r7, r3
 801a240:	e006      	b.n	801a250 <__ssprint_r+0x28>
 801a242:	f8da 3000 	ldr.w	r3, [sl]
 801a246:	f8da 7004 	ldr.w	r7, [sl, #4]
 801a24a:	9301      	str	r3, [sp, #4]
 801a24c:	f10a 0a08 	add.w	sl, sl, #8
 801a250:	2f00      	cmp	r7, #0
 801a252:	d0f6      	beq.n	801a242 <__ssprint_r+0x1a>
 801a254:	68a6      	ldr	r6, [r4, #8]
 801a256:	42b7      	cmp	r7, r6
 801a258:	d360      	bcc.n	801a31c <__ssprint_r+0xf4>
 801a25a:	89a0      	ldrh	r0, [r4, #12]
 801a25c:	f410 6f90 	tst.w	r0, #1152	; 0x480
 801a260:	d117      	bne.n	801a292 <__ssprint_r+0x6a>
 801a262:	42b7      	cmp	r7, r6
 801a264:	d35a      	bcc.n	801a31c <__ssprint_r+0xf4>
 801a266:	4632      	mov	r2, r6
 801a268:	9901      	ldr	r1, [sp, #4]
 801a26a:	6820      	ldr	r0, [r4, #0]
 801a26c:	f7fc fe20 	bl	8016eb0 <memmove>
 801a270:	68a2      	ldr	r2, [r4, #8]
 801a272:	1b92      	subs	r2, r2, r6
 801a274:	60a2      	str	r2, [r4, #8]
 801a276:	6822      	ldr	r2, [r4, #0]
 801a278:	4416      	add	r6, r2
 801a27a:	f8db 2008 	ldr.w	r2, [fp, #8]
 801a27e:	6026      	str	r6, [r4, #0]
 801a280:	1bd7      	subs	r7, r2, r7
 801a282:	f8cb 7008 	str.w	r7, [fp, #8]
 801a286:	2f00      	cmp	r7, #0
 801a288:	d1db      	bne.n	801a242 <__ssprint_r+0x1a>
 801a28a:	2000      	movs	r0, #0
 801a28c:	f8cb 0004 	str.w	r0, [fp, #4]
 801a290:	e046      	b.n	801a320 <__ssprint_r+0xf8>
 801a292:	6825      	ldr	r5, [r4, #0]
 801a294:	6921      	ldr	r1, [r4, #16]
 801a296:	ebc1 0805 	rsb	r8, r1, r5
 801a29a:	f108 0201 	add.w	r2, r8, #1
 801a29e:	6965      	ldr	r5, [r4, #20]
 801a2a0:	443a      	add	r2, r7
 801a2a2:	2302      	movs	r3, #2
 801a2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a2a8:	fb95 f5f3 	sdiv	r5, r5, r3
 801a2ac:	4295      	cmp	r5, r2
 801a2ae:	bf38      	it	cc
 801a2b0:	4615      	movcc	r5, r2
 801a2b2:	0543      	lsls	r3, r0, #21
 801a2b4:	d510      	bpl.n	801a2d8 <__ssprint_r+0xb0>
 801a2b6:	4629      	mov	r1, r5
 801a2b8:	4648      	mov	r0, r9
 801a2ba:	f7fc fbbf 	bl	8016a3c <_malloc_r>
 801a2be:	4606      	mov	r6, r0
 801a2c0:	b1a0      	cbz	r0, 801a2ec <__ssprint_r+0xc4>
 801a2c2:	4642      	mov	r2, r8
 801a2c4:	6921      	ldr	r1, [r4, #16]
 801a2c6:	f7fc fde8 	bl	8016e9a <memcpy>
 801a2ca:	89a2      	ldrh	r2, [r4, #12]
 801a2cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801a2d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801a2d4:	81a2      	strh	r2, [r4, #12]
 801a2d6:	e018      	b.n	801a30a <__ssprint_r+0xe2>
 801a2d8:	462a      	mov	r2, r5
 801a2da:	4648      	mov	r0, r9
 801a2dc:	f7fc fe4c 	bl	8016f78 <_realloc_r>
 801a2e0:	4606      	mov	r6, r0
 801a2e2:	b990      	cbnz	r0, 801a30a <__ssprint_r+0xe2>
 801a2e4:	6921      	ldr	r1, [r4, #16]
 801a2e6:	4648      	mov	r0, r9
 801a2e8:	f7ff fbb8 	bl	8019a5c <_free_r>
 801a2ec:	220c      	movs	r2, #12
 801a2ee:	f8c9 2000 	str.w	r2, [r9]
 801a2f2:	89a2      	ldrh	r2, [r4, #12]
 801a2f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a2f8:	81a2      	strh	r2, [r4, #12]
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	f8cb 2008 	str.w	r2, [fp, #8]
 801a300:	f8cb 2004 	str.w	r2, [fp, #4]
 801a304:	f04f 30ff 	mov.w	r0, #4294967295
 801a308:	e00a      	b.n	801a320 <__ssprint_r+0xf8>
 801a30a:	6126      	str	r6, [r4, #16]
 801a30c:	6165      	str	r5, [r4, #20]
 801a30e:	4446      	add	r6, r8
 801a310:	ebc8 0505 	rsb	r5, r8, r5
 801a314:	6026      	str	r6, [r4, #0]
 801a316:	60a5      	str	r5, [r4, #8]
 801a318:	463e      	mov	r6, r7
 801a31a:	e7a2      	b.n	801a262 <__ssprint_r+0x3a>
 801a31c:	463e      	mov	r6, r7
 801a31e:	e7a2      	b.n	801a266 <__ssprint_r+0x3e>
 801a320:	b003      	add	sp, #12
 801a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a326 <_calloc_r>:
 801a326:	b510      	push	{r4, lr}
 801a328:	4351      	muls	r1, r2
 801a32a:	f7fc fb87 	bl	8016a3c <_malloc_r>
 801a32e:	4604      	mov	r4, r0
 801a330:	b320      	cbz	r0, 801a37c <_calloc_r+0x56>
 801a332:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a336:	f022 0203 	bic.w	r2, r2, #3
 801a33a:	3a04      	subs	r2, #4
 801a33c:	2a24      	cmp	r2, #36	; 0x24
 801a33e:	d81a      	bhi.n	801a376 <_calloc_r+0x50>
 801a340:	2a13      	cmp	r2, #19
 801a342:	d912      	bls.n	801a36a <_calloc_r+0x44>
 801a344:	2100      	movs	r1, #0
 801a346:	2a1b      	cmp	r2, #27
 801a348:	6001      	str	r1, [r0, #0]
 801a34a:	6041      	str	r1, [r0, #4]
 801a34c:	d802      	bhi.n	801a354 <_calloc_r+0x2e>
 801a34e:	f100 0308 	add.w	r3, r0, #8
 801a352:	e00b      	b.n	801a36c <_calloc_r+0x46>
 801a354:	2a24      	cmp	r2, #36	; 0x24
 801a356:	6081      	str	r1, [r0, #8]
 801a358:	60c1      	str	r1, [r0, #12]
 801a35a:	bf11      	iteee	ne
 801a35c:	f100 0310 	addne.w	r3, r0, #16
 801a360:	6101      	streq	r1, [r0, #16]
 801a362:	f100 0318 	addeq.w	r3, r0, #24
 801a366:	6141      	streq	r1, [r0, #20]
 801a368:	e000      	b.n	801a36c <_calloc_r+0x46>
 801a36a:	4603      	mov	r3, r0
 801a36c:	2200      	movs	r2, #0
 801a36e:	601a      	str	r2, [r3, #0]
 801a370:	605a      	str	r2, [r3, #4]
 801a372:	609a      	str	r2, [r3, #8]
 801a374:	e002      	b.n	801a37c <_calloc_r+0x56>
 801a376:	2100      	movs	r1, #0
 801a378:	f7fc fdb5 	bl	8016ee6 <memset>
 801a37c:	4620      	mov	r0, r4
 801a37e:	bd10      	pop	{r4, pc}

0801a380 <_fclose_r>:
 801a380:	b570      	push	{r4, r5, r6, lr}
 801a382:	4605      	mov	r5, r0
 801a384:	460c      	mov	r4, r1
 801a386:	b909      	cbnz	r1, 801a38c <_fclose_r+0xc>
 801a388:	2000      	movs	r0, #0
 801a38a:	bd70      	pop	{r4, r5, r6, pc}
 801a38c:	b118      	cbz	r0, 801a396 <_fclose_r+0x16>
 801a38e:	6983      	ldr	r3, [r0, #24]
 801a390:	b90b      	cbnz	r3, 801a396 <_fclose_r+0x16>
 801a392:	f7ff fa9b 	bl	80198cc <__sinit>
 801a396:	4b20      	ldr	r3, [pc, #128]	; (801a418 <_fclose_r+0x98>)
 801a398:	429c      	cmp	r4, r3
 801a39a:	d101      	bne.n	801a3a0 <_fclose_r+0x20>
 801a39c:	686c      	ldr	r4, [r5, #4]
 801a39e:	e008      	b.n	801a3b2 <_fclose_r+0x32>
 801a3a0:	4b1e      	ldr	r3, [pc, #120]	; (801a41c <_fclose_r+0x9c>)
 801a3a2:	429c      	cmp	r4, r3
 801a3a4:	d101      	bne.n	801a3aa <_fclose_r+0x2a>
 801a3a6:	68ac      	ldr	r4, [r5, #8]
 801a3a8:	e003      	b.n	801a3b2 <_fclose_r+0x32>
 801a3aa:	4b1d      	ldr	r3, [pc, #116]	; (801a420 <_fclose_r+0xa0>)
 801a3ac:	429c      	cmp	r4, r3
 801a3ae:	bf08      	it	eq
 801a3b0:	68ec      	ldreq	r4, [r5, #12]
 801a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d0e6      	beq.n	801a388 <_fclose_r+0x8>
 801a3ba:	4621      	mov	r1, r4
 801a3bc:	4628      	mov	r0, r5
 801a3be:	f7ff f98b 	bl	80196d8 <__sflush_r>
 801a3c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a3c4:	4606      	mov	r6, r0
 801a3c6:	b133      	cbz	r3, 801a3d6 <_fclose_r+0x56>
 801a3c8:	6a21      	ldr	r1, [r4, #32]
 801a3ca:	4628      	mov	r0, r5
 801a3cc:	4798      	blx	r3
 801a3ce:	2800      	cmp	r0, #0
 801a3d0:	bfb8      	it	lt
 801a3d2:	f04f 36ff 	movlt.w	r6, #4294967295
 801a3d6:	89a3      	ldrh	r3, [r4, #12]
 801a3d8:	061b      	lsls	r3, r3, #24
 801a3da:	d503      	bpl.n	801a3e4 <_fclose_r+0x64>
 801a3dc:	6921      	ldr	r1, [r4, #16]
 801a3de:	4628      	mov	r0, r5
 801a3e0:	f7ff fb3c 	bl	8019a5c <_free_r>
 801a3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3e6:	b141      	cbz	r1, 801a3fa <_fclose_r+0x7a>
 801a3e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3ec:	4299      	cmp	r1, r3
 801a3ee:	d002      	beq.n	801a3f6 <_fclose_r+0x76>
 801a3f0:	4628      	mov	r0, r5
 801a3f2:	f7ff fb33 	bl	8019a5c <_free_r>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	6363      	str	r3, [r4, #52]	; 0x34
 801a3fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a3fc:	b121      	cbz	r1, 801a408 <_fclose_r+0x88>
 801a3fe:	4628      	mov	r0, r5
 801a400:	f7ff fb2c 	bl	8019a5c <_free_r>
 801a404:	2300      	movs	r3, #0
 801a406:	64a3      	str	r3, [r4, #72]	; 0x48
 801a408:	f7ff fad0 	bl	80199ac <__sfp_lock_acquire>
 801a40c:	2300      	movs	r3, #0
 801a40e:	81a3      	strh	r3, [r4, #12]
 801a410:	f7ff facd 	bl	80199ae <__sfp_lock_release>
 801a414:	4630      	mov	r0, r6
 801a416:	bd70      	pop	{r4, r5, r6, pc}
 801a418:	0801cf74 	.word	0x0801cf74
 801a41c:	0801cf94 	.word	0x0801cf94
 801a420:	0801cfb4 	.word	0x0801cfb4

0801a424 <_close>:
 801a424:	4b02      	ldr	r3, [pc, #8]	; (801a430 <_close+0xc>)
 801a426:	2258      	movs	r2, #88	; 0x58
 801a428:	601a      	str	r2, [r3, #0]
 801a42a:	f04f 30ff 	mov.w	r0, #4294967295
 801a42e:	4770      	bx	lr
 801a430:	20004264 	.word	0x20004264

0801a434 <_fstat>:
 801a434:	4b02      	ldr	r3, [pc, #8]	; (801a440 <_fstat+0xc>)
 801a436:	2258      	movs	r2, #88	; 0x58
 801a438:	601a      	str	r2, [r3, #0]
 801a43a:	f04f 30ff 	mov.w	r0, #4294967295
 801a43e:	4770      	bx	lr
 801a440:	20004264 	.word	0x20004264

0801a444 <_getpid>:
 801a444:	4b02      	ldr	r3, [pc, #8]	; (801a450 <_getpid+0xc>)
 801a446:	2258      	movs	r2, #88	; 0x58
 801a448:	601a      	str	r2, [r3, #0]
 801a44a:	f04f 30ff 	mov.w	r0, #4294967295
 801a44e:	4770      	bx	lr
 801a450:	20004264 	.word	0x20004264

0801a454 <_isatty>:
 801a454:	4b02      	ldr	r3, [pc, #8]	; (801a460 <_isatty+0xc>)
 801a456:	2258      	movs	r2, #88	; 0x58
 801a458:	601a      	str	r2, [r3, #0]
 801a45a:	2000      	movs	r0, #0
 801a45c:	4770      	bx	lr
 801a45e:	bf00      	nop
 801a460:	20004264 	.word	0x20004264

0801a464 <_kill>:
 801a464:	4b02      	ldr	r3, [pc, #8]	; (801a470 <_kill+0xc>)
 801a466:	2258      	movs	r2, #88	; 0x58
 801a468:	601a      	str	r2, [r3, #0]
 801a46a:	f04f 30ff 	mov.w	r0, #4294967295
 801a46e:	4770      	bx	lr
 801a470:	20004264 	.word	0x20004264

0801a474 <_lseek>:
 801a474:	4b02      	ldr	r3, [pc, #8]	; (801a480 <_lseek+0xc>)
 801a476:	2258      	movs	r2, #88	; 0x58
 801a478:	601a      	str	r2, [r3, #0]
 801a47a:	f04f 30ff 	mov.w	r0, #4294967295
 801a47e:	4770      	bx	lr
 801a480:	20004264 	.word	0x20004264

0801a484 <_read>:
 801a484:	4b02      	ldr	r3, [pc, #8]	; (801a490 <_read+0xc>)
 801a486:	2258      	movs	r2, #88	; 0x58
 801a488:	601a      	str	r2, [r3, #0]
 801a48a:	f04f 30ff 	mov.w	r0, #4294967295
 801a48e:	4770      	bx	lr
 801a490:	20004264 	.word	0x20004264

0801a494 <_sbrk>:
 801a494:	4b04      	ldr	r3, [pc, #16]	; (801a4a8 <_sbrk+0x14>)
 801a496:	6819      	ldr	r1, [r3, #0]
 801a498:	4602      	mov	r2, r0
 801a49a:	b909      	cbnz	r1, 801a4a0 <_sbrk+0xc>
 801a49c:	4903      	ldr	r1, [pc, #12]	; (801a4ac <_sbrk+0x18>)
 801a49e:	6019      	str	r1, [r3, #0]
 801a4a0:	6818      	ldr	r0, [r3, #0]
 801a4a2:	4402      	add	r2, r0
 801a4a4:	601a      	str	r2, [r3, #0]
 801a4a6:	4770      	bx	lr
 801a4a8:	20004260 	.word	0x20004260
 801a4ac:	20004268 	.word	0x20004268

0801a4b0 <_write>:
 801a4b0:	4b02      	ldr	r3, [pc, #8]	; (801a4bc <_write+0xc>)
 801a4b2:	2258      	movs	r2, #88	; 0x58
 801a4b4:	601a      	str	r2, [r3, #0]
 801a4b6:	f04f 30ff 	mov.w	r0, #4294967295
 801a4ba:	4770      	bx	lr
 801a4bc:	20004264 	.word	0x20004264

0801a4c0 <_exit>:
 801a4c0:	e7fe      	b.n	801a4c0 <_exit>
	...

0801a4c4 <_init>:
 801a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4c6:	bf00      	nop
 801a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4ca:	bc08      	pop	{r3}
 801a4cc:	469e      	mov	lr, r3
 801a4ce:	4770      	bx	lr

0801a4d0 <_fini>:
 801a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4d2:	bf00      	nop
 801a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4d6:	bc08      	pop	{r3}
 801a4d8:	469e      	mov	lr, r3
 801a4da:	4770      	bx	lr
